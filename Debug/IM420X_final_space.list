
IM420X_final_space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004814  08004814  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800481c  0800481c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08004894  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004894  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128ca  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284e  00000000  00000000  0003296a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000351b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00035f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002656d  00000000  00000000  00036c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109dc  00000000  00000000  0005d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb3c8  00000000  00000000  0006db99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158f61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  00158fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800472c 	.word	0x0800472c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800472c 	.word	0x0800472c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a28      	ldr	r2, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000544:	f043 0320 	orr.w	r3, r3, #32
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0320 	and.w	r3, r3, #32
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 feff 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_GPIO_Init+0xd8>)
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4811      	ldr	r0, [pc, #68]	; (80005ec <MX_GPIO_Init+0xdc>)
 80005a8:	f000 fd70 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ac:	2320      	movs	r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f000 fd61 	bl	800108c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2028      	movs	r0, #40	; 0x28
 80005d0:	f000 fc67 	bl	8000ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d4:	2028      	movs	r0, #40	; 0x28
 80005d6:	f000 fc7e 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	10110000 	.word	0x10110000
 80005ec:	48000800 	.word	0x48000800

080005f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f000 feeb 	bl	8001406 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f000 f90a 	bl	800084e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f001 f8b8 	bl	80017b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f000 f901 	bl	800084e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f001 f8fa 	bl	8001848 <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 f8f8 	bl	800084e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000098 	.word	0x20000098
 8000668:	40005400 	.word	0x40005400
 800066c:	30a0a7fb 	.word	0x30a0a7fb

08000670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_I2C_MspInit+0x7c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d128      	bne.n	80006e4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_I2C_MspInit+0x80>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <HAL_I2C_MspInit+0x80>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_I2C_MspInit+0x80>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b0:	2312      	movs	r3, #18
 80006b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006bc:	2304      	movs	r3, #4
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 80006c8:	f000 fce0 	bl	800108c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_I2C_MspInit+0x80>)
 80006ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_I2C_MspInit+0x80>)
 80006d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d6:	6593      	str	r3, [r2, #88]	; 0x58
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_I2C_MspInit+0x80>)
 80006da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40005400 	.word	0x40005400
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000400 	.word	0x48000400

080006f8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*) ptr, len) != HAL_OK) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	b29b      	uxth	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <_write+0x30>)
 800070e:	f002 f96b 	bl	80029e8 <HAL_UART_Transmit_IT>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_write+0x24>
		Error_Handler();
 8000718:	f000 f899 	bl	800084e <Error_Handler>
	}

	return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000e4 	.word	0x200000e4

0800072c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000730:	f000 fa49 	bl	8000bc6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000734:	f000 f822 	bl	800077c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000738:	f7ff feea 	bl	8000510 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 800073c:	f000 f986 	bl	8000a4c <MX_LPUART1_UART_Init>
	MX_I2C1_Init();
 8000740:	f7ff ff56 	bl	80005f0 <MX_I2C1_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_I2C_IsDeviceReady(&hi2c1, LSM303DLHC, 10, 10) == HAL_OK) {
 8000744:	233c      	movs	r3, #60	; 0x3c
 8000746:	b299      	uxth	r1, r3
 8000748:	230a      	movs	r3, #10
 800074a:	220a      	movs	r2, #10
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <main+0x44>)
 800074e:	f000 fee9 	bl	8001524 <HAL_I2C_IsDeviceReady>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d103      	bne.n	8000760 <main+0x34>
			printf("we are good to go\r\n");
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <main+0x48>)
 800075a:	f003 fb8f 	bl	8003e7c <puts>
 800075e:	e002      	b.n	8000766 <main+0x3a>
		} else {
			printf("we are not good to go\r\n");
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <main+0x4c>)
 8000762:	f003 fb8b 	bl	8003e7c <puts>
		}

		HAL_Delay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f000 fa9d 	bl	8000ca8 <HAL_Delay>
		if (HAL_I2C_IsDeviceReady(&hi2c1, LSM303DLHC, 10, 10) == HAL_OK) {
 800076e:	e7e9      	b.n	8000744 <main+0x18>
 8000770:	20000098 	.word	0x20000098
 8000774:	08004744 	.word	0x08004744
 8000778:	08004758 	.word	0x08004758

0800077c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b0a8      	sub	sp, #160	; 0xa0
 8000780:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000782:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000786:	2238      	movs	r2, #56	; 0x38
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fb00 	bl	8003d90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80007a0:	463b      	mov	r3, r7
 80007a2:	2254      	movs	r2, #84	; 0x54
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 faf2 	bl	8003d90 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 f897 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ba:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c6:	2302      	movs	r3, #2
 80007c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80007d2:	2355      	movs	r3, #85	; 0x55
 80007d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f92a 	bl	8001a48 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x82>
		Error_Handler();
 80007fa:	f000 f828 	bl	800084e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	657b      	str	r3, [r7, #84]	; 0x54
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000812:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fc2d 	bl	8002078 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xac>
		Error_Handler();
 8000824:	f000 f813 	bl	800084e <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1
 8000828:	2360      	movs	r3, #96	; 0x60
 800082a:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000834:	463b      	mov	r3, r7
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fe3a 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xca>
		Error_Handler();
 8000842:	f000 f804 	bl	800084e <Error_Handler>
	}
}
 8000846:	bf00      	nop
 8000848:	37a0      	adds	r7, #160	; 0xa0
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
}
 8000854:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000856:	e7fe      	b.n	8000856 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	; 0x60
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	; 0x58
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088e:	f001 f8cb 	bl	8001a28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f9be 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008fc:	f000 fd60 	bl	80013c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <LPUART1_IRQHandler+0x10>)
 800090a:	f002 f8f1 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000e4 	.word	0x200000e4

08000918 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00a      	b.n	8000940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092a:	f3af 8000 	nop.w
 800092e:	4601      	mov	r1, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	b2ca      	uxtb	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbf0      	blt.n	800092a <_read+0x12>
	}

return len;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	return -1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097a:	605a      	str	r2, [r3, #4]
	return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_isatty>:

int _isatty(int file)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
	return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f003 f9a6 	bl	8003d3c <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20020000 	.word	0x20020000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	20000188 	.word	0x20000188

08000a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a52:	4a22      	ldr	r2, [pc, #136]	; (8000adc <MX_LPUART1_UART_Init+0x90>)
 8000a54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a90:	f001 ff5a 	bl	8002948 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f7ff fed8 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000aa2:	f003 f881 	bl	8003ba8 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000aac:	f7ff fecf 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000ab4:	f003 f8b6 	bl	8003c24 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000abe:	f7ff fec6 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000ac4:	f003 f837 	bl	8003b36 <HAL_UARTEx_DisableFifoMode>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ace:	f7ff febe 	bl	800084e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000e4 	.word	0x200000e4
 8000adc:	40008000 	.word	0x40008000

08000ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d130      	bne.n	8000b64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b32:	230c      	movs	r3, #12
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b42:	230c      	movs	r3, #12
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f000 fa9c 	bl	800108c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	205b      	movs	r0, #91	; 0x5b
 8000b5a:	f000 f9a2 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b5e:	205b      	movs	r0, #91	; 0x5b
 8000b60:	f000 f9b9 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40008000 	.word	0x40008000
 8000b70:	40021000 	.word	0x40021000

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0b      	ldr	r4, [pc, #44]	; (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9e:	f7ff ff43 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f003 f8d1 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f7ff fdc1 	bl	800072c <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   r0, =_estack
 8000bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bb8:	08004824 	.word	0x08004824
  ldr r2, =_sbss
 8000bbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bc0:	20000188 	.word	0x20000188

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>

08000bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f95b 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f80e 	bl	8000bf8 <HAL_InitTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e001      	b.n	8000bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be8:	f7ff fe36 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bec:	79fb      	ldrb	r3, [r7, #7]

}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_InitTick+0x68>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d022      	beq.n	8000c52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_InitTick+0x6c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_InitTick+0x68>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f966 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10f      	bne.n	8000c4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	d809      	bhi.n	8000c46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c32:	2200      	movs	r2, #0
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3a:	f000 f932 	bl	8000ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_InitTick+0x70>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	e007      	b.n	8000c56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e004      	b.n	8000c56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e001      	b.n	8000c56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	20000174 	.word	0x20000174
 8000c8c:	20000008 	.word	0x20000008

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000174 	.word	0x20000174

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d004      	beq.n	8000ccc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_Delay+0x40>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ccc:	bf00      	nop
 8000cce:	f7ff ffdf 	bl	8000c90 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d8f7      	bhi.n	8000cce <HAL_Delay+0x26>
  {
  }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000008 	.word	0x20000008

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff29 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff40 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff90 	bl	8000de0 <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5f 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff33 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa4 	bl	8000e48 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d005      	beq.n	8000f2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2204      	movs	r2, #4
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e037      	b.n	8000f9e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 020e 	bic.w	r2, r2, #14
 8000f3c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f4c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f003 021f 	and.w	r2, r3, #31
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f7a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00c      	beq.n	8000f9e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f92:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f9c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e047      	b.n	8001080 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 020e 	bic.w	r2, r2, #14
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0201 	bic.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800103c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00c      	beq.n	8001060 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001054:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800105e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	4798      	blx	r3
    }
  }
  return status;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800109a:	e15a      	b.n	8001352 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 814c 	beq.w	800134c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d00b      	beq.n	80010d4 <HAL_GPIO_Init+0x48>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c8:	2b11      	cmp	r3, #17
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b12      	cmp	r3, #18
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0xea>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b12      	cmp	r3, #18
 8001174:	d123      	bne.n	80011be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0203 	and.w	r2, r3, #3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80a6 	beq.w	800134c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001204:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6613      	str	r3, [r2, #96]	; 0x60
 800120c:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001218:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001242:	d01f      	beq.n	8001284 <HAL_GPIO_Init+0x1f8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d019      	beq.n	8001280 <HAL_GPIO_Init+0x1f4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x2f0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x1f0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x2f4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1ec>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x2f8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1e8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x2fc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1e4>
 800126c:	2305      	movs	r3, #5
 800126e:	e00a      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001270:	2306      	movs	r3, #6
 8001272:	e008      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001274:	2304      	movs	r3, #4
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001278:	2303      	movs	r3, #3
 800127a:	e004      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 800127c:	2302      	movs	r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001284:	2300      	movs	r3, #0
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001296:	4937      	ldr	r1, [pc, #220]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_GPIO_Init+0x300>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c8:	4a30      	ldr	r2, [pc, #192]	; (800138c <HAL_GPIO_Init+0x300>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_GPIO_Init+0x300>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f2:	4a26      	ldr	r2, [pc, #152]	; (800138c <HAL_GPIO_Init+0x300>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_GPIO_Init+0x300>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_GPIO_Init+0x300>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_GPIO_Init+0x300>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001346:	4a11      	ldr	r2, [pc, #68]	; (800138c <HAL_GPIO_Init+0x300>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	f47f ae9d 	bne.w	800109c <HAL_GPIO_Init+0x10>
  }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800
 8001380:	48000c00 	.word	0x48000c00
 8001384:	48001000 	.word	0x48001000
 8001388:	48001400 	.word	0x48001400
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f806 	bl	80013f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e081      	b.n	800151c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d106      	bne.n	8001432 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff f91f 	bl	8000670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2224      	movs	r2, #36	; 0x24
 8001436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001456:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001466:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d107      	bne.n	8001480 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	e006      	b.n	800148e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800148c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d104      	bne.n	80014a0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800149e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	ea42 0103 	orr.w	r1, r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	021a      	lsls	r2, r3, #8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69d9      	ldr	r1, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	460b      	mov	r3, r1
 8001532:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b20      	cmp	r3, #32
 8001542:	f040 80f1 	bne.w	8001728 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001554:	d101      	bne.n	800155a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001556:	2302      	movs	r3, #2
 8001558:	e0e7      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_I2C_IsDeviceReady+0x44>
 8001564:	2302      	movs	r3, #2
 8001566:	e0e0      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_I2C_IsDeviceReady+0x72>
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800158c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001594:	e004      	b.n	80015a0 <HAL_I2C_IsDeviceReady+0x7c>
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800159c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb73 	bl	8000c90 <HAL_GetTick>
 80015aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	2b20      	cmp	r3, #32
 80015b8:	bf0c      	ite	eq
 80015ba:	2301      	moveq	r3, #1
 80015bc:	2300      	movne	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015d8:	e034      	b.n	8001644 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d01a      	beq.n	8001618 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015e2:	f7ff fb55 	bl	8000c90 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d302      	bcc.n	80015f8 <HAL_I2C_IsDeviceReady+0xd4>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10f      	bne.n	8001618 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f043 0220 	orr.w	r2, r3, #32
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e088      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	2b20      	cmp	r3, #32
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b10      	cmp	r3, #16
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001644:	7ffb      	ldrb	r3, [r7, #31]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_I2C_IsDeviceReady+0x12c>
 800164a:	7fbb      	ldrb	r3, [r7, #30]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0c4      	beq.n	80015da <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b10      	cmp	r3, #16
 800165c:	d01a      	beq.n	8001694 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	2120      	movs	r1, #32
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f862 	bl	8001732 <I2C_WaitOnFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e058      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2220      	movs	r2, #32
 800167e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	e04a      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	2120      	movs	r1, #32
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f847 	bl	8001732 <I2C_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e03d      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2210      	movs	r2, #16
 80016b4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2220      	movs	r2, #32
 80016bc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d118      	bne.n	80016f8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016d4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	2120      	movs	r1, #32
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f826 	bl	8001732 <I2C_WaitOnFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e01c      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2220      	movs	r2, #32
 80016f6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	f63f af3b 	bhi.w	800157e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2220      	movs	r2, #32
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001728:	2302      	movs	r3, #2
  }
}
 800172a:	4618      	mov	r0, r3
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001742:	e022      	b.n	800178a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174a:	d01e      	beq.n	800178a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174c:	f7ff faa0 	bl	8000c90 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d302      	bcc.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x30>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d113      	bne.n	800178a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f043 0220 	orr.w	r2, r3, #32
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699a      	ldr	r2, [r3, #24]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4013      	ands	r3, r2
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d0cd      	beq.n	8001744 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d138      	bne.n	800183a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e032      	b.n	800183c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2224      	movs	r2, #36	; 0x24
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001804:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800183a:	2302      	movs	r3, #2
  }
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b20      	cmp	r3, #32
 800185c:	d139      	bne.n	80018d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001868:	2302      	movs	r3, #2
 800186a:	e033      	b.n	80018d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2224      	movs	r2, #36	; 0x24
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0201 	bic.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800189a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
  }
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d141      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ee:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fa:	d131      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001902:	4a46      	ldr	r2, [pc, #280]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800190c:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001914:	4a41      	ldr	r2, [pc, #260]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800191c:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2232      	movs	r2, #50	; 0x32
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	4a3f      	ldr	r2, [pc, #252]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	3301      	adds	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001932:	e002      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3b01      	subs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001946:	d102      	bne.n	800194e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f2      	bne.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800194e:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195a:	d158      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e057      	b.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001966:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800196c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001970:	e04d      	b.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001978:	d141      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001986:	d131      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2232      	movs	r2, #50	; 0x32
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019be:	e002      	b.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d102      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f2      	bne.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e6:	d112      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e011      	b.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019fc:	e007      	b.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a36:	6093      	str	r3, [r2, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e308      	b.n	800206c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d075      	beq.n	8001b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a66:	4ba3      	ldr	r3, [pc, #652]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a70:	4ba0      	ldr	r3, [pc, #640]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3e>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_OscConfig+0x44>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4b99      	ldr	r3, [pc, #612]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d05b      	beq.n	8001b50 <HAL_RCC_OscConfig+0x108>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d157      	bne.n	8001b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e2e3      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x74>
 8001aae:	4b91      	ldr	r3, [pc, #580]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a90      	ldr	r2, [pc, #576]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e01d      	b.n	8001af8 <HAL_RCC_OscConfig+0xb0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x98>
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a8a      	ldr	r2, [pc, #552]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a87      	ldr	r2, [pc, #540]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0xb0>
 8001ae0:	4b84      	ldr	r3, [pc, #528]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a83      	ldr	r2, [pc, #524]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b81      	ldr	r3, [pc, #516]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a80      	ldr	r2, [pc, #512]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f8c6 	bl	8000c90 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff f8c2 	bl	8000c90 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e2a8      	b.n	800206c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0xc0>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f8b2 	bl	8000c90 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff f8ae 	bl	8000c90 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e294      	b.n	800206c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b42:	4b6c      	ldr	r3, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0xe8>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d075      	beq.n	8001c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b68:	4b62      	ldr	r3, [pc, #392]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_OscConfig+0x136>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_OscConfig+0x13c>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d11f      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	4b5b      	ldr	r3, [pc, #364]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x154>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e267      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	4952      	ldr	r1, [pc, #328]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb0:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <HAL_RCC_OscConfig+0x2b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f81f 	bl	8000bf8 <HAL_InitTick>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d043      	beq.n	8001c48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e253      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a48      	ldr	r2, [pc, #288]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f85a 	bl	8000c90 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff f856 	bl	8000c90 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e23c      	b.n	800206c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf2:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	4939      	ldr	r1, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	e01a      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c14:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f836 	bl	8000c90 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff f832 	bl	8000c90 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e218      	b.n	800206c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e0>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f80f 	bl	8000c90 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c76:	f7ff f80b 	bl	8000c90 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1f1      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0ef      	beq.n	8001c76 <HAL_RCC_OscConfig+0x22e>
 8001c96:	e01b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7fe fff2 	bl	8000c90 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7fe ffee 	bl	8000c90 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1d4      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ef      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80ab 	beq.w	8001e34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2b4>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e005      	b.n	8001cfe <HAL_RCC_OscConfig+0x2b6>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	20000004 	.word	0x20000004
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4baf      	ldr	r3, [pc, #700]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4aae      	ldr	r2, [pc, #696]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4bac      	ldr	r3, [pc, #688]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1e:	4ba9      	ldr	r3, [pc, #676]	; (8001fc4 <HAL_RCC_OscConfig+0x57c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2a:	4ba6      	ldr	r3, [pc, #664]	; (8001fc4 <HAL_RCC_OscConfig+0x57c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4aa5      	ldr	r2, [pc, #660]	; (8001fc4 <HAL_RCC_OscConfig+0x57c>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7fe ffab 	bl	8000c90 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7fe ffa7 	bl	8000c90 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e18d      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d50:	4b9c      	ldr	r3, [pc, #624]	; (8001fc4 <HAL_RCC_OscConfig+0x57c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <HAL_RCC_OscConfig+0x32e>
 8001d64:	4b96      	ldr	r3, [pc, #600]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	4a95      	ldr	r2, [pc, #596]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d74:	e024      	b.n	8001dc0 <HAL_RCC_OscConfig+0x378>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d110      	bne.n	8001da0 <HAL_RCC_OscConfig+0x358>
 8001d7e:	4b90      	ldr	r3, [pc, #576]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d84:	4a8e      	ldr	r2, [pc, #568]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8e:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	4a8a      	ldr	r2, [pc, #552]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9e:	e00f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x378>
 8001da0:	4b87      	ldr	r3, [pc, #540]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	4a86      	ldr	r2, [pc, #536]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db0:	4b83      	ldr	r3, [pc, #524]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	4a82      	ldr	r2, [pc, #520]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d016      	beq.n	8001df6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7fe ff62 	bl	8000c90 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe ff5e 	bl	8000c90 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e142      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ed      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x388>
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7fe ff4b 	bl	8000c90 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe ff47 	bl	8000c90 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e12b      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ed      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	4a64      	ldr	r2, [pc, #400]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03c      	beq.n	8001eba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e48:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e4e:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7fe ff1a 	bl	8000c90 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e60:	f7fe ff16 	bl	8000c90 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0fc      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x418>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e82:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e88:	4a4d      	ldr	r2, [pc, #308]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7fe fefd 	bl	8000c90 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9a:	f7fe fef9 	bl	8000c90 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0df      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80d3 	beq.w	800206a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec4:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	f000 808d 	beq.w	8001fec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d15a      	bne.n	8001f90 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a38      	ldr	r2, [pc, #224]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fed3 	bl	8000c90 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe fecf 	bl	8000c90 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e0b5      	b.n	800206c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_OscConfig+0x580>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6a11      	ldr	r1, [r2, #32]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f1c:	3a01      	subs	r2, #1
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f2e:	0852      	lsrs	r2, r2, #1
 8001f30:	3a01      	subs	r2, #1
 8001f32:	0552      	lsls	r2, r2, #21
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f3a:	0852      	lsrs	r2, r2, #1
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	0652      	lsls	r2, r2, #25
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f46:	06d2      	lsls	r2, r2, #27
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	491d      	ldr	r1, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe fe92 	bl	8000c90 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fe8e 	bl	8000c90 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e074      	b.n	800206c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x528>
 8001f8e:	e06c      	b.n	800206a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_RCC_OscConfig+0x578>)
 8001fae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fe6a 	bl	8000c90 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbe:	e00e      	b.n	8001fde <HAL_RCC_OscConfig+0x596>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe fe60 	bl	8000c90 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e046      	b.n	800206c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_RCC_OscConfig+0x62c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x584>
 8001fea:	e03e      	b.n	800206a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e039      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_OscConfig+0x62c>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	429a      	cmp	r2, r3
 800200a:	d12c      	bne.n	8002066 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	3b01      	subs	r3, #1
 8002018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d123      	bne.n	8002066 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d11b      	bne.n	8002066 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d113      	bne.n	8002066 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d109      	bne.n	8002066 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e11e      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b8e      	ldr	r3, [pc, #568]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 020f 	bic.w	r2, r3, #15
 80020a6:	498c      	ldr	r1, [pc, #560]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b8a      	ldr	r3, [pc, #552]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e106      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d073      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d129      	bne.n	8002128 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d4:	4b81      	ldr	r3, [pc, #516]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0f4      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020e4:	f000 f99e 	bl	8002424 <RCC_GetSysClockFreqFromPLLSource>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4a7c      	ldr	r2, [pc, #496]	; (80022e0 <HAL_RCC_ClockConfig+0x268>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d93f      	bls.n	8002172 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020f2:	4b7a      	ldr	r3, [pc, #488]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	d033      	beq.n	8002172 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d12f      	bne.n	8002172 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002112:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211a:	4a70      	ldr	r2, [pc, #448]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 800211c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002120:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e024      	b.n	8002172 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d107      	bne.n	8002140 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002130:	4b6a      	ldr	r3, [pc, #424]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0c6      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	4b66      	ldr	r3, [pc, #408]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0be      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002150:	f000 f8ce 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8002154:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <HAL_RCC_ClockConfig+0x268>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d909      	bls.n	8002172 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800215e:	4b5f      	ldr	r3, [pc, #380]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002166:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4957      	ldr	r1, [pc, #348]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7fe fd84 	bl	8000c90 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7fe fd80 	bl	8000c90 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e095      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b4e      	ldr	r3, [pc, #312]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d023      	beq.n	8002208 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021ec:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b39      	ldr	r3, [pc, #228]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4936      	ldr	r1, [pc, #216]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
 8002206:	e008      	b.n	800221a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b80      	cmp	r3, #128	; 0x80
 800220c:	d105      	bne.n	800221a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800220e:	4b33      	ldr	r3, [pc, #204]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a32      	ldr	r2, [pc, #200]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002218:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221a:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d21d      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 020f 	bic.w	r2, r3, #15
 8002230:	4929      	ldr	r1, [pc, #164]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002238:	f7fe fd2a 	bl	8000c90 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7fe fd26 	bl	8000c90 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e03b      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d1ed      	bne.n	8002240 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4917      	ldr	r1, [pc, #92]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490f      	ldr	r1, [pc, #60]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a2:	f000 f825 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCC_ClockConfig+0x264>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	490c      	ldr	r1, [pc, #48]	; (80022e4 <HAL_RCC_ClockConfig+0x26c>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_RCC_ClockConfig+0x270>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fc96 	bl	8000bf8 <HAL_InitTick>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40021000 	.word	0x40021000
 80022e0:	04c4b400 	.word	0x04c4b400
 80022e4:	08004770 	.word	0x08004770
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000004 	.word	0x20000004

080022f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d102      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002302:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e047      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d102      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e03e      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d136      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3301      	adds	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d10c      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002344:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800234e:	68d2      	ldr	r2, [r2, #12]
 8002350:	0a12      	lsrs	r2, r2, #8
 8002352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	617b      	str	r3, [r7, #20]
      break;
 800235c:	e00c      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	0a12      	lsrs	r2, r2, #8
 800236c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
      break;
 8002376:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0e5b      	lsrs	r3, r3, #25
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e001      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002398:	693b      	ldr	r3, [r7, #16]
}
 800239a:	4618      	mov	r0, r3
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	016e3600 	.word	0x016e3600

080023b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4904      	ldr	r1, [pc, #16]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08004780 	.word	0x08004780

080023f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023fc:	f7ff ffda 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0adb      	lsrs	r3, r3, #11
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4904      	ldr	r1, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08004780 	.word	0x08004780

08002424 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3301      	adds	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d10c      	bne.n	8002462 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002448:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002452:	68d2      	ldr	r2, [r2, #12]
 8002454:	0a12      	lsrs	r2, r2, #8
 8002456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
    break;
 8002460:	e00c      	b.n	800247c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800246c:	68d2      	ldr	r2, [r2, #12]
 800246e:	0a12      	lsrs	r2, r2, #8
 8002470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    break;
 800247a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0e5b      	lsrs	r3, r3, #25
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	3301      	adds	r3, #1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000
 80024a8:	016e3600 	.word	0x016e3600
 80024ac:	00f42400 	.word	0x00f42400

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024bc:	2300      	movs	r3, #0
 80024be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8098 	beq.w	80025fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a3f      	ldr	r2, [pc, #252]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a39      	ldr	r2, [pc, #228]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002506:	f7fe fbc3 	bl	8000c90 <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800250c:	e009      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fbbf 	bl	8000c90 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d902      	bls.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	74fb      	strb	r3, [r7, #19]
        break;
 8002520:	e005      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ef      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d159      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01e      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	d019      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800255c:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800257c:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fb7f 	bl	8000c90 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002594:	e00b      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fb7b 	bl	8000c90 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d902      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	74fb      	strb	r3, [r7, #19]
            break;
 80025ac:	e006      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ec      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025d8:	e008      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	74bb      	strb	r3, [r7, #18]
 80025de:	e005      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ec:	7c7b      	ldrb	r3, [r7, #17]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4baf      	ldr	r3, [pc, #700]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4aae      	ldr	r2, [pc, #696]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800260a:	4ba9      	ldr	r3, [pc, #676]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f023 0203 	bic.w	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	49a5      	ldr	r1, [pc, #660]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800262c:	4ba0      	ldr	r3, [pc, #640]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 020c 	bic.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	499d      	ldr	r1, [pc, #628]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800264e:	4b98      	ldr	r3, [pc, #608]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4994      	ldr	r1, [pc, #592]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002670:	4b8f      	ldr	r3, [pc, #572]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	498c      	ldr	r1, [pc, #560]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002692:	4b87      	ldr	r3, [pc, #540]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	4983      	ldr	r1, [pc, #524]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026b4:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	497b      	ldr	r1, [pc, #492]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	4972      	ldr	r1, [pc, #456]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	496a      	ldr	r1, [pc, #424]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	4961      	ldr	r1, [pc, #388]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800273c:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	4959      	ldr	r1, [pc, #356]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800275e:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	4950      	ldr	r1, [pc, #320]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4948      	ldr	r1, [pc, #288]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a0:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027b8:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	493a      	ldr	r1, [pc, #232]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d6:	d105      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d015      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027f0:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	492c      	ldr	r1, [pc, #176]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280e:	d105      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	491e      	ldr	r1, [pc, #120]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002846:	d105      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800284e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002852:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4910      	ldr	r1, [pc, #64]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800287e:	d105      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d018      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4902      	ldr	r1, [pc, #8]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ae:	e001      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80028b0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028bc:	d105      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4a20      	ldr	r2, [pc, #128]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d015      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	4917      	ldr	r1, [pc, #92]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d105      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	4909      	ldr	r1, [pc, #36]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292c:	d105      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002938:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800293a:	7cbb      	ldrb	r3, [r7, #18]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e042      	b.n	80029e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe f8b7 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2224      	movs	r2, #36	; 0x24
 8002976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fb04 	bl	8002f98 <UART_SetConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e022      	b.n	80029e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fdc2 	bl	800352c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fe49 	bl	8003670 <UART_CheckIdleState>
 80029de:	4603      	mov	r3, r0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d168      	bne.n	8002ad2 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_UART_Transmit_IT+0x24>
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e061      	b.n	8002ad4 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Transmit_IT+0x36>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e05a      	b.n	8002ad4 <HAL_UART_Transmit_IT+0xec>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2221      	movs	r2, #33	; 0x21
 8002a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5a:	d11c      	bne.n	8002a96 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a64:	d107      	bne.n	8002a76 <HAL_UART_Transmit_IT+0x8e>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <HAL_UART_Transmit_IT+0xf8>)
 8002a72:	675a      	str	r2, [r3, #116]	; 0x74
 8002a74:	e002      	b.n	8002a7c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_UART_Transmit_IT+0xfc>)
 8002a7a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e01b      	b.n	8002ace <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9e:	d107      	bne.n	8002ab0 <HAL_UART_Transmit_IT+0xc8>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_UART_Transmit_IT+0x100>)
 8002aac:	675a      	str	r2, [r3, #116]	; 0x74
 8002aae:	e002      	b.n	8002ab6 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_UART_Transmit_IT+0x104>)
 8002ab4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002acc:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	08003a23 	.word	0x08003a23
 8002ae4:	08003989 	.word	0x08003989
 8002ae8:	0800390b 	.word	0x0800390b
 8002aec:	08003897 	.word	0x08003897

08002af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d118      	bne.n	8002b52 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d013      	beq.n	8002b52 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 81fb 	beq.w	8002f3e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
      }
      return;
 8002b50:	e1f5      	b.n	8002f3e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80ef 	beq.w	8002d38 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_UART_IRQHandler+0x23c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <HAL_UART_IRQHandler+0x240>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80e4 	beq.w	8002d38 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_UART_IRQHandler+0xac>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_UART_IRQHandler+0xd8>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bbe:	f043 0204 	orr.w	r2, r3, #4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x104>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2204      	movs	r2, #4
 8002be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_UART_IRQHandler+0x23c>)
 8002c0c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c20:	f043 0208 	orr.w	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d011      	beq.n	8002c58 <HAL_UART_IRQHandler+0x168>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 816f 	beq.w	8002f42 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d004      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d031      	beq.n	8002d16 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fda7 	bl	8003806 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d123      	bne.n	8002d0e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d013      	beq.n	8002d06 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_UART_IRQHandler+0x244>)
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f966 	bl	8000fbc <HAL_DMA_Abort_IT>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d017      	beq.n	8002d26 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002d00:	4610      	mov	r0, r2
 8002d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	e00f      	b.n	8002d26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f930 	bl	8002f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	e00b      	b.n	8002d26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f92c 	bl	8002f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e007      	b.n	8002d26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f928 	bl	8002f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002d24:	e10d      	b.n	8002f42 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d26:	bf00      	nop
    return;
 8002d28:	e10b      	b.n	8002f42 <HAL_UART_IRQHandler+0x452>
 8002d2a:	bf00      	nop
 8002d2c:	10000001 	.word	0x10000001
 8002d30:	04000120 	.word	0x04000120
 8002d34:	0800386b 	.word	0x0800386b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	f040 80ab 	bne.w	8002e98 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a5 	beq.w	8002e98 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 809f 	beq.w	8002e98 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d155      	bne.n	8002e1c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80e2 	beq.w	8002f46 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d88:	893a      	ldrh	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	f080 80db 	bcs.w	8002f46 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	893a      	ldrh	r2, [r7, #8]
 8002d94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d12b      	bne.n	8002e00 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0210 	bic.w	r2, r2, #16
 8002df4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f885 	bl	8000f0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f8b3 	bl	8002f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e1a:	e094      	b.n	8002f46 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8087 	beq.w	8002f4a <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002e3c:	897b      	ldrh	r3, [r7, #10]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8083 	beq.w	8002f4a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e52:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0210 	bic.w	r2, r2, #16
 8002e8a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e8c:	897b      	ldrh	r3, [r7, #10]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f875 	bl	8002f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e96:	e058      	b.n	8002f4a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_UART_IRQHandler+0x3ce>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fe1f 	bl	8003afa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ebc:	e048      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d034      	beq.n	8002f4e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
    }
    return;
 8002eec:	e02f      	b.n	8002f4e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_UART_IRQHandler+0x41a>
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fddf 	bl	8003ac6 <UART_EndTransmit_IT>
    return;
 8002f08:	e022      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_UART_IRQHandler+0x436>
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fdff 	bl	8003b22 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f24:	e014      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <HAL_UART_IRQHandler+0x460>
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da0c      	bge.n	8002f50 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fde9 	bl	8003b0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f3c:	e008      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
      return;
 8002f3e:	bf00      	nop
 8002f40:	e006      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
    return;
 8002f42:	bf00      	nop
 8002f44:	e004      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
      return;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
      return;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <HAL_UART_IRQHandler+0x460>
    return;
 8002f4e:	bf00      	nop
  }
}
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop

08002f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4bb1      	ldr	r3, [pc, #708]	; (8003288 <UART_SetConfig+0x2f0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	69f9      	ldr	r1, [r7, #28]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4aa6      	ldr	r2, [pc, #664]	; (800328c <UART_SetConfig+0x2f4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800300a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	69f9      	ldr	r1, [r7, #28]
 8003014:	430b      	orrs	r3, r1
 8003016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f023 010f 	bic.w	r1, r3, #15
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a97      	ldr	r2, [pc, #604]	; (8003290 <UART_SetConfig+0x2f8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d120      	bne.n	800307a <UART_SetConfig+0xe2>
 8003038:	4b96      	ldr	r3, [pc, #600]	; (8003294 <UART_SetConfig+0x2fc>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b03      	cmp	r3, #3
 8003044:	d816      	bhi.n	8003074 <UART_SetConfig+0xdc>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0xb4>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	0800305d 	.word	0x0800305d
 8003050:	08003069 	.word	0x08003069
 8003054:	08003063 	.word	0x08003063
 8003058:	0800306f 	.word	0x0800306f
 800305c:	2301      	movs	r3, #1
 800305e:	76fb      	strb	r3, [r7, #27]
 8003060:	e0e7      	b.n	8003232 <UART_SetConfig+0x29a>
 8003062:	2302      	movs	r3, #2
 8003064:	76fb      	strb	r3, [r7, #27]
 8003066:	e0e4      	b.n	8003232 <UART_SetConfig+0x29a>
 8003068:	2304      	movs	r3, #4
 800306a:	76fb      	strb	r3, [r7, #27]
 800306c:	e0e1      	b.n	8003232 <UART_SetConfig+0x29a>
 800306e:	2308      	movs	r3, #8
 8003070:	76fb      	strb	r3, [r7, #27]
 8003072:	e0de      	b.n	8003232 <UART_SetConfig+0x29a>
 8003074:	2310      	movs	r3, #16
 8003076:	76fb      	strb	r3, [r7, #27]
 8003078:	e0db      	b.n	8003232 <UART_SetConfig+0x29a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a86      	ldr	r2, [pc, #536]	; (8003298 <UART_SetConfig+0x300>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d132      	bne.n	80030ea <UART_SetConfig+0x152>
 8003084:	4b83      	ldr	r3, [pc, #524]	; (8003294 <UART_SetConfig+0x2fc>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d828      	bhi.n	80030e4 <UART_SetConfig+0x14c>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x100>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030e5 	.word	0x080030e5
 80030a0:	080030e5 	.word	0x080030e5
 80030a4:	080030e5 	.word	0x080030e5
 80030a8:	080030d9 	.word	0x080030d9
 80030ac:	080030e5 	.word	0x080030e5
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	080030e5 	.word	0x080030e5
 80030b8:	080030d3 	.word	0x080030d3
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	080030e5 	.word	0x080030e5
 80030c4:	080030e5 	.word	0x080030e5
 80030c8:	080030df 	.word	0x080030df
 80030cc:	2300      	movs	r3, #0
 80030ce:	76fb      	strb	r3, [r7, #27]
 80030d0:	e0af      	b.n	8003232 <UART_SetConfig+0x29a>
 80030d2:	2302      	movs	r3, #2
 80030d4:	76fb      	strb	r3, [r7, #27]
 80030d6:	e0ac      	b.n	8003232 <UART_SetConfig+0x29a>
 80030d8:	2304      	movs	r3, #4
 80030da:	76fb      	strb	r3, [r7, #27]
 80030dc:	e0a9      	b.n	8003232 <UART_SetConfig+0x29a>
 80030de:	2308      	movs	r3, #8
 80030e0:	76fb      	strb	r3, [r7, #27]
 80030e2:	e0a6      	b.n	8003232 <UART_SetConfig+0x29a>
 80030e4:	2310      	movs	r3, #16
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e0a3      	b.n	8003232 <UART_SetConfig+0x29a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6b      	ldr	r2, [pc, #428]	; (800329c <UART_SetConfig+0x304>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d120      	bne.n	8003136 <UART_SetConfig+0x19e>
 80030f4:	4b67      	ldr	r3, [pc, #412]	; (8003294 <UART_SetConfig+0x2fc>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030fe:	2b30      	cmp	r3, #48	; 0x30
 8003100:	d013      	beq.n	800312a <UART_SetConfig+0x192>
 8003102:	2b30      	cmp	r3, #48	; 0x30
 8003104:	d814      	bhi.n	8003130 <UART_SetConfig+0x198>
 8003106:	2b20      	cmp	r3, #32
 8003108:	d009      	beq.n	800311e <UART_SetConfig+0x186>
 800310a:	2b20      	cmp	r3, #32
 800310c:	d810      	bhi.n	8003130 <UART_SetConfig+0x198>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <UART_SetConfig+0x180>
 8003112:	2b10      	cmp	r3, #16
 8003114:	d006      	beq.n	8003124 <UART_SetConfig+0x18c>
 8003116:	e00b      	b.n	8003130 <UART_SetConfig+0x198>
 8003118:	2300      	movs	r3, #0
 800311a:	76fb      	strb	r3, [r7, #27]
 800311c:	e089      	b.n	8003232 <UART_SetConfig+0x29a>
 800311e:	2302      	movs	r3, #2
 8003120:	76fb      	strb	r3, [r7, #27]
 8003122:	e086      	b.n	8003232 <UART_SetConfig+0x29a>
 8003124:	2304      	movs	r3, #4
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e083      	b.n	8003232 <UART_SetConfig+0x29a>
 800312a:	2308      	movs	r3, #8
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e080      	b.n	8003232 <UART_SetConfig+0x29a>
 8003130:	2310      	movs	r3, #16
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	e07d      	b.n	8003232 <UART_SetConfig+0x29a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a59      	ldr	r2, [pc, #356]	; (80032a0 <UART_SetConfig+0x308>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d120      	bne.n	8003182 <UART_SetConfig+0x1ea>
 8003140:	4b54      	ldr	r3, [pc, #336]	; (8003294 <UART_SetConfig+0x2fc>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800314a:	2bc0      	cmp	r3, #192	; 0xc0
 800314c:	d013      	beq.n	8003176 <UART_SetConfig+0x1de>
 800314e:	2bc0      	cmp	r3, #192	; 0xc0
 8003150:	d814      	bhi.n	800317c <UART_SetConfig+0x1e4>
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d009      	beq.n	800316a <UART_SetConfig+0x1d2>
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d810      	bhi.n	800317c <UART_SetConfig+0x1e4>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <UART_SetConfig+0x1cc>
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d006      	beq.n	8003170 <UART_SetConfig+0x1d8>
 8003162:	e00b      	b.n	800317c <UART_SetConfig+0x1e4>
 8003164:	2300      	movs	r3, #0
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	e063      	b.n	8003232 <UART_SetConfig+0x29a>
 800316a:	2302      	movs	r3, #2
 800316c:	76fb      	strb	r3, [r7, #27]
 800316e:	e060      	b.n	8003232 <UART_SetConfig+0x29a>
 8003170:	2304      	movs	r3, #4
 8003172:	76fb      	strb	r3, [r7, #27]
 8003174:	e05d      	b.n	8003232 <UART_SetConfig+0x29a>
 8003176:	2308      	movs	r3, #8
 8003178:	76fb      	strb	r3, [r7, #27]
 800317a:	e05a      	b.n	8003232 <UART_SetConfig+0x29a>
 800317c:	2310      	movs	r3, #16
 800317e:	76fb      	strb	r3, [r7, #27]
 8003180:	e057      	b.n	8003232 <UART_SetConfig+0x29a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a47      	ldr	r2, [pc, #284]	; (80032a4 <UART_SetConfig+0x30c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d125      	bne.n	80031d8 <UART_SetConfig+0x240>
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <UART_SetConfig+0x2fc>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319a:	d017      	beq.n	80031cc <UART_SetConfig+0x234>
 800319c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a0:	d817      	bhi.n	80031d2 <UART_SetConfig+0x23a>
 80031a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a6:	d00b      	beq.n	80031c0 <UART_SetConfig+0x228>
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d811      	bhi.n	80031d2 <UART_SetConfig+0x23a>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <UART_SetConfig+0x222>
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d006      	beq.n	80031c6 <UART_SetConfig+0x22e>
 80031b8:	e00b      	b.n	80031d2 <UART_SetConfig+0x23a>
 80031ba:	2300      	movs	r3, #0
 80031bc:	76fb      	strb	r3, [r7, #27]
 80031be:	e038      	b.n	8003232 <UART_SetConfig+0x29a>
 80031c0:	2302      	movs	r3, #2
 80031c2:	76fb      	strb	r3, [r7, #27]
 80031c4:	e035      	b.n	8003232 <UART_SetConfig+0x29a>
 80031c6:	2304      	movs	r3, #4
 80031c8:	76fb      	strb	r3, [r7, #27]
 80031ca:	e032      	b.n	8003232 <UART_SetConfig+0x29a>
 80031cc:	2308      	movs	r3, #8
 80031ce:	76fb      	strb	r3, [r7, #27]
 80031d0:	e02f      	b.n	8003232 <UART_SetConfig+0x29a>
 80031d2:	2310      	movs	r3, #16
 80031d4:	76fb      	strb	r3, [r7, #27]
 80031d6:	e02c      	b.n	8003232 <UART_SetConfig+0x29a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <UART_SetConfig+0x2f4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d125      	bne.n	800322e <UART_SetConfig+0x296>
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <UART_SetConfig+0x2fc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f0:	d017      	beq.n	8003222 <UART_SetConfig+0x28a>
 80031f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f6:	d817      	bhi.n	8003228 <UART_SetConfig+0x290>
 80031f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fc:	d00b      	beq.n	8003216 <UART_SetConfig+0x27e>
 80031fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003202:	d811      	bhi.n	8003228 <UART_SetConfig+0x290>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <UART_SetConfig+0x278>
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d006      	beq.n	800321c <UART_SetConfig+0x284>
 800320e:	e00b      	b.n	8003228 <UART_SetConfig+0x290>
 8003210:	2300      	movs	r3, #0
 8003212:	76fb      	strb	r3, [r7, #27]
 8003214:	e00d      	b.n	8003232 <UART_SetConfig+0x29a>
 8003216:	2302      	movs	r3, #2
 8003218:	76fb      	strb	r3, [r7, #27]
 800321a:	e00a      	b.n	8003232 <UART_SetConfig+0x29a>
 800321c:	2304      	movs	r3, #4
 800321e:	76fb      	strb	r3, [r7, #27]
 8003220:	e007      	b.n	8003232 <UART_SetConfig+0x29a>
 8003222:	2308      	movs	r3, #8
 8003224:	76fb      	strb	r3, [r7, #27]
 8003226:	e004      	b.n	8003232 <UART_SetConfig+0x29a>
 8003228:	2310      	movs	r3, #16
 800322a:	76fb      	strb	r3, [r7, #27]
 800322c:	e001      	b.n	8003232 <UART_SetConfig+0x29a>
 800322e:	2310      	movs	r3, #16
 8003230:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a15      	ldr	r2, [pc, #84]	; (800328c <UART_SetConfig+0x2f4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	f040 809f 	bne.w	800337c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800323e:	7efb      	ldrb	r3, [r7, #27]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d837      	bhi.n	80032b4 <UART_SetConfig+0x31c>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <UART_SetConfig+0x2b4>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003271 	.word	0x08003271
 8003250:	080032b5 	.word	0x080032b5
 8003254:	08003279 	.word	0x08003279
 8003258:	080032b5 	.word	0x080032b5
 800325c:	0800327f 	.word	0x0800327f
 8003260:	080032b5 	.word	0x080032b5
 8003264:	080032b5 	.word	0x080032b5
 8003268:	080032b5 	.word	0x080032b5
 800326c:	080032ad 	.word	0x080032ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7ff f8ac 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8003274:	6178      	str	r0, [r7, #20]
        break;
 8003276:	e022      	b.n	80032be <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <UART_SetConfig+0x310>)
 800327a:	617b      	str	r3, [r7, #20]
        break;
 800327c:	e01f      	b.n	80032be <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7ff f837 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8003282:	6178      	str	r0, [r7, #20]
        break;
 8003284:	e01b      	b.n	80032be <UART_SetConfig+0x326>
 8003286:	bf00      	nop
 8003288:	cfff69f3 	.word	0xcfff69f3
 800328c:	40008000 	.word	0x40008000
 8003290:	40013800 	.word	0x40013800
 8003294:	40021000 	.word	0x40021000
 8003298:	40004400 	.word	0x40004400
 800329c:	40004800 	.word	0x40004800
 80032a0:	40004c00 	.word	0x40004c00
 80032a4:	40005000 	.word	0x40005000
 80032a8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b0:	617b      	str	r3, [r7, #20]
        break;
 80032b2:	e004      	b.n	80032be <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	76bb      	strb	r3, [r7, #26]
        break;
 80032bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 811b 	beq.w	80034fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	4a96      	ldr	r2, [pc, #600]	; (8003524 <UART_SetConfig+0x58c>)
 80032cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d0:	461a      	mov	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d305      	bcc.n	80032f6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d902      	bls.n	80032fc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	76bb      	strb	r3, [r7, #26]
 80032fa:	e0ff      	b.n	80034fc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4618      	mov	r0, r3
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	4a86      	ldr	r2, [pc, #536]	; (8003524 <UART_SetConfig+0x58c>)
 800330a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330e:	b29a      	uxth	r2, r3
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	f7fc ff80 	bl	8000218 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	020b      	lsls	r3, r1, #8
 800332a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800332e:	0202      	lsls	r2, r0, #8
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	6849      	ldr	r1, [r1, #4]
 8003334:	0849      	lsrs	r1, r1, #1
 8003336:	4608      	mov	r0, r1
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	1814      	adds	r4, r2, r0
 800333e:	eb43 0501 	adc.w	r5, r3, r1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	461a      	mov	r2, r3
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fc ff62 	bl	8000218 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4613      	mov	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003362:	d308      	bcc.n	8003376 <UART_SetConfig+0x3de>
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336a:	d204      	bcs.n	8003376 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	e0c2      	b.n	80034fc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	76bb      	strb	r3, [r7, #26]
 800337a:	e0bf      	b.n	80034fc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003384:	d165      	bne.n	8003452 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003386:	7efb      	ldrb	r3, [r7, #27]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d828      	bhi.n	80033de <UART_SetConfig+0x446>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <UART_SetConfig+0x3fc>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033df 	.word	0x080033df
 80033a4:	080033cf 	.word	0x080033cf
 80033a8:	080033df 	.word	0x080033df
 80033ac:	080033df 	.word	0x080033df
 80033b0:	080033df 	.word	0x080033df
 80033b4:	080033d7 	.word	0x080033d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7ff f808 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 80033bc:	6178      	str	r0, [r7, #20]
        break;
 80033be:	e013      	b.n	80033e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7ff f81a 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 80033c4:	6178      	str	r0, [r7, #20]
        break;
 80033c6:	e00f      	b.n	80033e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c8:	4b57      	ldr	r3, [pc, #348]	; (8003528 <UART_SetConfig+0x590>)
 80033ca:	617b      	str	r3, [r7, #20]
        break;
 80033cc:	e00c      	b.n	80033e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ce:	f7fe ff8f 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 80033d2:	6178      	str	r0, [r7, #20]
        break;
 80033d4:	e008      	b.n	80033e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033da:	617b      	str	r3, [r7, #20]
        break;
 80033dc:	e004      	b.n	80033e8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	76bb      	strb	r3, [r7, #26]
        break;
 80033e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8086 	beq.w	80034fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	4a4b      	ldr	r2, [pc, #300]	; (8003524 <UART_SetConfig+0x58c>)
 80033f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033fa:	461a      	mov	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003402:	005a      	lsls	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	441a      	add	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	b29b      	uxth	r3, r3
 8003416:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d916      	bls.n	800344c <UART_SetConfig+0x4b4>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d212      	bcs.n	800344c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f023 030f 	bic.w	r3, r3, #15
 800342e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	b29a      	uxth	r2, r3
 800343c:	89fb      	ldrh	r3, [r7, #14]
 800343e:	4313      	orrs	r3, r2
 8003440:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	89fa      	ldrh	r2, [r7, #14]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	e057      	b.n	80034fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	76bb      	strb	r3, [r7, #26]
 8003450:	e054      	b.n	80034fc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003452:	7efb      	ldrb	r3, [r7, #27]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d828      	bhi.n	80034aa <UART_SetConfig+0x512>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <UART_SetConfig+0x4c8>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003485 	.word	0x08003485
 8003464:	0800348d 	.word	0x0800348d
 8003468:	08003495 	.word	0x08003495
 800346c:	080034ab 	.word	0x080034ab
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034ab 	.word	0x080034ab
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe ffa2 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8003488:	6178      	str	r0, [r7, #20]
        break;
 800348a:	e013      	b.n	80034b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7fe ffb4 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8003490:	6178      	str	r0, [r7, #20]
        break;
 8003492:	e00f      	b.n	80034b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <UART_SetConfig+0x590>)
 8003496:	617b      	str	r3, [r7, #20]
        break;
 8003498:	e00c      	b.n	80034b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7fe ff29 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 800349e:	6178      	str	r0, [r7, #20]
        break;
 80034a0:	e008      	b.n	80034b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a6:	617b      	str	r3, [r7, #20]
        break;
 80034a8:	e004      	b.n	80034b4 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	76bb      	strb	r3, [r7, #26]
        break;
 80034b2:	bf00      	nop
    }

    if (pclk != 0U)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d020      	beq.n	80034fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	4a19      	ldr	r2, [pc, #100]	; (8003524 <UART_SetConfig+0x58c>)
 80034c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034c4:	461a      	mov	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d908      	bls.n	80034f8 <UART_SetConfig+0x560>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d204      	bcs.n	80034f8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	e001      	b.n	80034fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003518:	7ebb      	ldrb	r3, [r7, #26]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bdb0      	pop	{r4, r5, r7, pc}
 8003522:	bf00      	nop
 8003524:	08004788 	.word	0x08004788
 8003528:	00f42400 	.word	0x00f42400

0800352c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01a      	beq.n	8003642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362a:	d10a      	bne.n	8003642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af02      	add	r7, sp, #8
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003680:	f7fd fb06 	bl	8000c90 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d10e      	bne.n	80036b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f82f 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e025      	b.n	80036fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d10e      	bne.n	80036de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f819 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e00f      	b.n	80036fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003716:	e062      	b.n	80037de <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371e:	d05e      	beq.n	80037de <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7fd fab6 	bl	8000c90 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <UART_WaitOnFlagUntilTimeout+0x30>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003744:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e045      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02e      	beq.n	80037de <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378e:	d126      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e00f      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d08d      	beq.n	8003718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800381c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0210 	bic.w	r2, r2, #16
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fb6f 	bl	8002f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a4:	2b21      	cmp	r3, #33	; 0x21
 80038a6:	d12a      	bne.n	80038fe <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d110      	bne.n	80038d6 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80038d4:	e013      	b.n	80038fe <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003918:	2b21      	cmp	r3, #33	; 0x21
 800391a:	d12f      	bne.n	800397c <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d110      	bne.n	800394a <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003936:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003946:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003948:	e018      	b.n	800397c <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	1c9a      	adds	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003996:	2b21      	cmp	r3, #33	; 0x21
 8003998:	d13d      	bne.n	8003a16 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80039a0:	81fb      	strh	r3, [r7, #14]
 80039a2:	e035      	b.n	8003a10 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80039be:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ce:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80039d0:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80039d2:	e020      	b.n	8003a16 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d013      	beq.n	8003a0a <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a0a:	89fb      	ldrh	r3, [r7, #14]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	81fb      	strh	r3, [r7, #14]
 8003a10:	89fb      	ldrh	r3, [r7, #14]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1c6      	bne.n	80039a4 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a30:	2b21      	cmp	r3, #33	; 0x21
 8003a32:	d142      	bne.n	8003aba <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003a3a:	81fb      	strh	r3, [r7, #14]
 8003a3c:	e03a      	b.n	8003ab4 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d111      	bne.n	8003a6e <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003a58:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a68:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8003a6a:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8003a6c:	e025      	b.n	8003aba <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d018      	beq.n	8003aae <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	1c9a      	adds	r2, r3, #2
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003aae:	89fb      	ldrh	r3, [r7, #14]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	81fb      	strh	r3, [r7, #14]
 8003ab4:	89fb      	ldrh	r3, [r7, #14]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1c1      	bne.n	8003a3e <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003adc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fa33 	bl	8002f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_UARTEx_DisableFifoMode+0x16>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e027      	b.n	8003b9c <HAL_UARTEx_DisableFifoMode+0x66>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	; 0x24
 8003b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003b7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e02d      	b.n	8003c1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	; 0x24
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f84f 	bl	8003ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e02d      	b.n	8003c98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f811 	bl	8003ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d108      	bne.n	8003cc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cc0:	e031      	b.n	8003d26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	0e5b      	lsrs	r3, r3, #25
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	0f5b      	lsrs	r3, r3, #29
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cea:	7bbb      	ldrb	r3, [r7, #14]
 8003cec:	7b3a      	ldrb	r2, [r7, #12]
 8003cee:	4911      	ldr	r1, [pc, #68]	; (8003d34 <UARTEx_SetNbDataToProcess+0x94>)
 8003cf0:	5c8a      	ldrb	r2, [r1, r2]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003cf6:	7b3a      	ldrb	r2, [r7, #12]
 8003cf8:	490f      	ldr	r1, [pc, #60]	; (8003d38 <UARTEx_SetNbDataToProcess+0x98>)
 8003cfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	7b7a      	ldrb	r2, [r7, #13]
 8003d0c:	4909      	ldr	r1, [pc, #36]	; (8003d34 <UARTEx_SetNbDataToProcess+0x94>)
 8003d0e:	5c8a      	ldrb	r2, [r1, r2]
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d14:	7b7a      	ldrb	r2, [r7, #13]
 8003d16:	4908      	ldr	r1, [pc, #32]	; (8003d38 <UARTEx_SetNbDataToProcess+0x98>)
 8003d18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	080047a0 	.word	0x080047a0
 8003d38:	080047a8 	.word	0x080047a8

08003d3c <__errno>:
 8003d3c:	4b01      	ldr	r3, [pc, #4]	; (8003d44 <__errno+0x8>)
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	2000000c 	.word	0x2000000c

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	4d0d      	ldr	r5, [pc, #52]	; (8003d80 <__libc_init_array+0x38>)
 8003d4c:	4c0d      	ldr	r4, [pc, #52]	; (8003d84 <__libc_init_array+0x3c>)
 8003d4e:	1b64      	subs	r4, r4, r5
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	2600      	movs	r6, #0
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	4d0b      	ldr	r5, [pc, #44]	; (8003d88 <__libc_init_array+0x40>)
 8003d5a:	4c0c      	ldr	r4, [pc, #48]	; (8003d8c <__libc_init_array+0x44>)
 8003d5c:	f000 fce6 	bl	800472c <_init>
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	2600      	movs	r6, #0
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	0800481c 	.word	0x0800481c
 8003d84:	0800481c 	.word	0x0800481c
 8003d88:	0800481c 	.word	0x0800481c
 8003d8c:	08004820 	.word	0x08004820

08003d90 <memset>:
 8003d90:	4402      	add	r2, r0
 8003d92:	4603      	mov	r3, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <_puts_r>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	460e      	mov	r6, r1
 8003da4:	4605      	mov	r5, r0
 8003da6:	b118      	cbz	r0, 8003db0 <_puts_r+0x10>
 8003da8:	6983      	ldr	r3, [r0, #24]
 8003daa:	b90b      	cbnz	r3, 8003db0 <_puts_r+0x10>
 8003dac:	f000 fa48 	bl	8004240 <__sinit>
 8003db0:	69ab      	ldr	r3, [r5, #24]
 8003db2:	68ac      	ldr	r4, [r5, #8]
 8003db4:	b913      	cbnz	r3, 8003dbc <_puts_r+0x1c>
 8003db6:	4628      	mov	r0, r5
 8003db8:	f000 fa42 	bl	8004240 <__sinit>
 8003dbc:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <_puts_r+0xd0>)
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	d120      	bne.n	8003e04 <_puts_r+0x64>
 8003dc2:	686c      	ldr	r4, [r5, #4]
 8003dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dc6:	07db      	lsls	r3, r3, #31
 8003dc8:	d405      	bmi.n	8003dd6 <_puts_r+0x36>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	0598      	lsls	r0, r3, #22
 8003dce:	d402      	bmi.n	8003dd6 <_puts_r+0x36>
 8003dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dd2:	f000 fad3 	bl	800437c <__retarget_lock_acquire_recursive>
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	0719      	lsls	r1, r3, #28
 8003dda:	d51d      	bpl.n	8003e18 <_puts_r+0x78>
 8003ddc:	6923      	ldr	r3, [r4, #16]
 8003dde:	b1db      	cbz	r3, 8003e18 <_puts_r+0x78>
 8003de0:	3e01      	subs	r6, #1
 8003de2:	68a3      	ldr	r3, [r4, #8]
 8003de4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60a3      	str	r3, [r4, #8]
 8003dec:	bb39      	cbnz	r1, 8003e3e <_puts_r+0x9e>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da38      	bge.n	8003e64 <_puts_r+0xc4>
 8003df2:	4622      	mov	r2, r4
 8003df4:	210a      	movs	r1, #10
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f848 	bl	8003e8c <__swbuf_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d011      	beq.n	8003e24 <_puts_r+0x84>
 8003e00:	250a      	movs	r5, #10
 8003e02:	e011      	b.n	8003e28 <_puts_r+0x88>
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <_puts_r+0xd4>)
 8003e06:	429c      	cmp	r4, r3
 8003e08:	d101      	bne.n	8003e0e <_puts_r+0x6e>
 8003e0a:	68ac      	ldr	r4, [r5, #8]
 8003e0c:	e7da      	b.n	8003dc4 <_puts_r+0x24>
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <_puts_r+0xd8>)
 8003e10:	429c      	cmp	r4, r3
 8003e12:	bf08      	it	eq
 8003e14:	68ec      	ldreq	r4, [r5, #12]
 8003e16:	e7d5      	b.n	8003dc4 <_puts_r+0x24>
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f888 	bl	8003f30 <__swsetup_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d0dd      	beq.n	8003de0 <_puts_r+0x40>
 8003e24:	f04f 35ff 	mov.w	r5, #4294967295
 8003e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2a:	07da      	lsls	r2, r3, #31
 8003e2c:	d405      	bmi.n	8003e3a <_puts_r+0x9a>
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	059b      	lsls	r3, r3, #22
 8003e32:	d402      	bmi.n	8003e3a <_puts_r+0x9a>
 8003e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e36:	f000 faa2 	bl	800437e <__retarget_lock_release_recursive>
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da04      	bge.n	8003e4c <_puts_r+0xac>
 8003e42:	69a2      	ldr	r2, [r4, #24]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	dc06      	bgt.n	8003e56 <_puts_r+0xb6>
 8003e48:	290a      	cmp	r1, #10
 8003e4a:	d004      	beq.n	8003e56 <_puts_r+0xb6>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	6022      	str	r2, [r4, #0]
 8003e52:	7019      	strb	r1, [r3, #0]
 8003e54:	e7c5      	b.n	8003de2 <_puts_r+0x42>
 8003e56:	4622      	mov	r2, r4
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f817 	bl	8003e8c <__swbuf_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d1bf      	bne.n	8003de2 <_puts_r+0x42>
 8003e62:	e7df      	b.n	8003e24 <_puts_r+0x84>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	250a      	movs	r5, #10
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	701d      	strb	r5, [r3, #0]
 8003e6e:	e7db      	b.n	8003e28 <_puts_r+0x88>
 8003e70:	080047d4 	.word	0x080047d4
 8003e74:	080047f4 	.word	0x080047f4
 8003e78:	080047b4 	.word	0x080047b4

08003e7c <puts>:
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <puts+0xc>)
 8003e7e:	4601      	mov	r1, r0
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	f7ff bf8d 	b.w	8003da0 <_puts_r>
 8003e86:	bf00      	nop
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <__swbuf_r>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	460e      	mov	r6, r1
 8003e90:	4614      	mov	r4, r2
 8003e92:	4605      	mov	r5, r0
 8003e94:	b118      	cbz	r0, 8003e9e <__swbuf_r+0x12>
 8003e96:	6983      	ldr	r3, [r0, #24]
 8003e98:	b90b      	cbnz	r3, 8003e9e <__swbuf_r+0x12>
 8003e9a:	f000 f9d1 	bl	8004240 <__sinit>
 8003e9e:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <__swbuf_r+0x98>)
 8003ea0:	429c      	cmp	r4, r3
 8003ea2:	d12b      	bne.n	8003efc <__swbuf_r+0x70>
 8003ea4:	686c      	ldr	r4, [r5, #4]
 8003ea6:	69a3      	ldr	r3, [r4, #24]
 8003ea8:	60a3      	str	r3, [r4, #8]
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	071a      	lsls	r2, r3, #28
 8003eae:	d52f      	bpl.n	8003f10 <__swbuf_r+0x84>
 8003eb0:	6923      	ldr	r3, [r4, #16]
 8003eb2:	b36b      	cbz	r3, 8003f10 <__swbuf_r+0x84>
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	1ac0      	subs	r0, r0, r3
 8003eba:	6963      	ldr	r3, [r4, #20]
 8003ebc:	b2f6      	uxtb	r6, r6
 8003ebe:	4283      	cmp	r3, r0
 8003ec0:	4637      	mov	r7, r6
 8003ec2:	dc04      	bgt.n	8003ece <__swbuf_r+0x42>
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 f926 	bl	8004118 <_fflush_r>
 8003ecc:	bb30      	cbnz	r0, 8003f1c <__swbuf_r+0x90>
 8003ece:	68a3      	ldr	r3, [r4, #8]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	60a3      	str	r3, [r4, #8]
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	6022      	str	r2, [r4, #0]
 8003eda:	701e      	strb	r6, [r3, #0]
 8003edc:	6963      	ldr	r3, [r4, #20]
 8003ede:	3001      	adds	r0, #1
 8003ee0:	4283      	cmp	r3, r0
 8003ee2:	d004      	beq.n	8003eee <__swbuf_r+0x62>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	07db      	lsls	r3, r3, #31
 8003ee8:	d506      	bpl.n	8003ef8 <__swbuf_r+0x6c>
 8003eea:	2e0a      	cmp	r6, #10
 8003eec:	d104      	bne.n	8003ef8 <__swbuf_r+0x6c>
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 f911 	bl	8004118 <_fflush_r>
 8003ef6:	b988      	cbnz	r0, 8003f1c <__swbuf_r+0x90>
 8003ef8:	4638      	mov	r0, r7
 8003efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <__swbuf_r+0x9c>)
 8003efe:	429c      	cmp	r4, r3
 8003f00:	d101      	bne.n	8003f06 <__swbuf_r+0x7a>
 8003f02:	68ac      	ldr	r4, [r5, #8]
 8003f04:	e7cf      	b.n	8003ea6 <__swbuf_r+0x1a>
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <__swbuf_r+0xa0>)
 8003f08:	429c      	cmp	r4, r3
 8003f0a:	bf08      	it	eq
 8003f0c:	68ec      	ldreq	r4, [r5, #12]
 8003f0e:	e7ca      	b.n	8003ea6 <__swbuf_r+0x1a>
 8003f10:	4621      	mov	r1, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 f80c 	bl	8003f30 <__swsetup_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d0cb      	beq.n	8003eb4 <__swbuf_r+0x28>
 8003f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8003f20:	e7ea      	b.n	8003ef8 <__swbuf_r+0x6c>
 8003f22:	bf00      	nop
 8003f24:	080047d4 	.word	0x080047d4
 8003f28:	080047f4 	.word	0x080047f4
 8003f2c:	080047b4 	.word	0x080047b4

08003f30 <__swsetup_r>:
 8003f30:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <__swsetup_r+0xcc>)
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	681d      	ldr	r5, [r3, #0]
 8003f36:	4606      	mov	r6, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	b125      	cbz	r5, 8003f46 <__swsetup_r+0x16>
 8003f3c:	69ab      	ldr	r3, [r5, #24]
 8003f3e:	b913      	cbnz	r3, 8003f46 <__swsetup_r+0x16>
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f97d 	bl	8004240 <__sinit>
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <__swsetup_r+0xd0>)
 8003f48:	429c      	cmp	r4, r3
 8003f4a:	d10f      	bne.n	8003f6c <__swsetup_r+0x3c>
 8003f4c:	686c      	ldr	r4, [r5, #4]
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f54:	0719      	lsls	r1, r3, #28
 8003f56:	d42c      	bmi.n	8003fb2 <__swsetup_r+0x82>
 8003f58:	06dd      	lsls	r5, r3, #27
 8003f5a:	d411      	bmi.n	8003f80 <__swsetup_r+0x50>
 8003f5c:	2309      	movs	r3, #9
 8003f5e:	6033      	str	r3, [r6, #0]
 8003f60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	e03e      	b.n	8003fea <__swsetup_r+0xba>
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <__swsetup_r+0xd4>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	d101      	bne.n	8003f76 <__swsetup_r+0x46>
 8003f72:	68ac      	ldr	r4, [r5, #8]
 8003f74:	e7eb      	b.n	8003f4e <__swsetup_r+0x1e>
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <__swsetup_r+0xd8>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	bf08      	it	eq
 8003f7c:	68ec      	ldreq	r4, [r5, #12]
 8003f7e:	e7e6      	b.n	8003f4e <__swsetup_r+0x1e>
 8003f80:	0758      	lsls	r0, r3, #29
 8003f82:	d512      	bpl.n	8003faa <__swsetup_r+0x7a>
 8003f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f86:	b141      	cbz	r1, 8003f9a <__swsetup_r+0x6a>
 8003f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f8c:	4299      	cmp	r1, r3
 8003f8e:	d002      	beq.n	8003f96 <__swsetup_r+0x66>
 8003f90:	4630      	mov	r0, r6
 8003f92:	f000 fa59 	bl	8004448 <_free_r>
 8003f96:	2300      	movs	r3, #0
 8003f98:	6363      	str	r3, [r4, #52]	; 0x34
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	f043 0308 	orr.w	r3, r3, #8
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	b94b      	cbnz	r3, 8003fca <__swsetup_r+0x9a>
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc0:	d003      	beq.n	8003fca <__swsetup_r+0x9a>
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 f9ff 	bl	80043c8 <__smakebuf_r>
 8003fca:	89a0      	ldrh	r0, [r4, #12]
 8003fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fd0:	f010 0301 	ands.w	r3, r0, #1
 8003fd4:	d00a      	beq.n	8003fec <__swsetup_r+0xbc>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	6963      	ldr	r3, [r4, #20]
 8003fdc:	425b      	negs	r3, r3
 8003fde:	61a3      	str	r3, [r4, #24]
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	b943      	cbnz	r3, 8003ff6 <__swsetup_r+0xc6>
 8003fe4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fe8:	d1ba      	bne.n	8003f60 <__swsetup_r+0x30>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	0781      	lsls	r1, r0, #30
 8003fee:	bf58      	it	pl
 8003ff0:	6963      	ldrpl	r3, [r4, #20]
 8003ff2:	60a3      	str	r3, [r4, #8]
 8003ff4:	e7f4      	b.n	8003fe0 <__swsetup_r+0xb0>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7f7      	b.n	8003fea <__swsetup_r+0xba>
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	080047d4 	.word	0x080047d4
 8004004:	080047f4 	.word	0x080047f4
 8004008:	080047b4 	.word	0x080047b4

0800400c <__sflush_r>:
 800400c:	898a      	ldrh	r2, [r1, #12]
 800400e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004012:	4605      	mov	r5, r0
 8004014:	0710      	lsls	r0, r2, #28
 8004016:	460c      	mov	r4, r1
 8004018:	d458      	bmi.n	80040cc <__sflush_r+0xc0>
 800401a:	684b      	ldr	r3, [r1, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	dc05      	bgt.n	800402c <__sflush_r+0x20>
 8004020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	dc02      	bgt.n	800402c <__sflush_r+0x20>
 8004026:	2000      	movs	r0, #0
 8004028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800402c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800402e:	2e00      	cmp	r6, #0
 8004030:	d0f9      	beq.n	8004026 <__sflush_r+0x1a>
 8004032:	2300      	movs	r3, #0
 8004034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004038:	682f      	ldr	r7, [r5, #0]
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	d032      	beq.n	80040a4 <__sflush_r+0x98>
 800403e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	075a      	lsls	r2, r3, #29
 8004044:	d505      	bpl.n	8004052 <__sflush_r+0x46>
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	1ac0      	subs	r0, r0, r3
 800404a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800404c:	b10b      	cbz	r3, 8004052 <__sflush_r+0x46>
 800404e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004050:	1ac0      	subs	r0, r0, r3
 8004052:	2300      	movs	r3, #0
 8004054:	4602      	mov	r2, r0
 8004056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004058:	6a21      	ldr	r1, [r4, #32]
 800405a:	4628      	mov	r0, r5
 800405c:	47b0      	blx	r6
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	d106      	bne.n	8004072 <__sflush_r+0x66>
 8004064:	6829      	ldr	r1, [r5, #0]
 8004066:	291d      	cmp	r1, #29
 8004068:	d82c      	bhi.n	80040c4 <__sflush_r+0xb8>
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <__sflush_r+0x108>)
 800406c:	40ca      	lsrs	r2, r1
 800406e:	07d6      	lsls	r6, r2, #31
 8004070:	d528      	bpl.n	80040c4 <__sflush_r+0xb8>
 8004072:	2200      	movs	r2, #0
 8004074:	6062      	str	r2, [r4, #4]
 8004076:	04d9      	lsls	r1, r3, #19
 8004078:	6922      	ldr	r2, [r4, #16]
 800407a:	6022      	str	r2, [r4, #0]
 800407c:	d504      	bpl.n	8004088 <__sflush_r+0x7c>
 800407e:	1c42      	adds	r2, r0, #1
 8004080:	d101      	bne.n	8004086 <__sflush_r+0x7a>
 8004082:	682b      	ldr	r3, [r5, #0]
 8004084:	b903      	cbnz	r3, 8004088 <__sflush_r+0x7c>
 8004086:	6560      	str	r0, [r4, #84]	; 0x54
 8004088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800408a:	602f      	str	r7, [r5, #0]
 800408c:	2900      	cmp	r1, #0
 800408e:	d0ca      	beq.n	8004026 <__sflush_r+0x1a>
 8004090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004094:	4299      	cmp	r1, r3
 8004096:	d002      	beq.n	800409e <__sflush_r+0x92>
 8004098:	4628      	mov	r0, r5
 800409a:	f000 f9d5 	bl	8004448 <_free_r>
 800409e:	2000      	movs	r0, #0
 80040a0:	6360      	str	r0, [r4, #52]	; 0x34
 80040a2:	e7c1      	b.n	8004028 <__sflush_r+0x1c>
 80040a4:	6a21      	ldr	r1, [r4, #32]
 80040a6:	2301      	movs	r3, #1
 80040a8:	4628      	mov	r0, r5
 80040aa:	47b0      	blx	r6
 80040ac:	1c41      	adds	r1, r0, #1
 80040ae:	d1c7      	bne.n	8004040 <__sflush_r+0x34>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0c4      	beq.n	8004040 <__sflush_r+0x34>
 80040b6:	2b1d      	cmp	r3, #29
 80040b8:	d001      	beq.n	80040be <__sflush_r+0xb2>
 80040ba:	2b16      	cmp	r3, #22
 80040bc:	d101      	bne.n	80040c2 <__sflush_r+0xb6>
 80040be:	602f      	str	r7, [r5, #0]
 80040c0:	e7b1      	b.n	8004026 <__sflush_r+0x1a>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	e7ad      	b.n	8004028 <__sflush_r+0x1c>
 80040cc:	690f      	ldr	r7, [r1, #16]
 80040ce:	2f00      	cmp	r7, #0
 80040d0:	d0a9      	beq.n	8004026 <__sflush_r+0x1a>
 80040d2:	0793      	lsls	r3, r2, #30
 80040d4:	680e      	ldr	r6, [r1, #0]
 80040d6:	bf08      	it	eq
 80040d8:	694b      	ldreq	r3, [r1, #20]
 80040da:	600f      	str	r7, [r1, #0]
 80040dc:	bf18      	it	ne
 80040de:	2300      	movne	r3, #0
 80040e0:	eba6 0807 	sub.w	r8, r6, r7
 80040e4:	608b      	str	r3, [r1, #8]
 80040e6:	f1b8 0f00 	cmp.w	r8, #0
 80040ea:	dd9c      	ble.n	8004026 <__sflush_r+0x1a>
 80040ec:	6a21      	ldr	r1, [r4, #32]
 80040ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040f0:	4643      	mov	r3, r8
 80040f2:	463a      	mov	r2, r7
 80040f4:	4628      	mov	r0, r5
 80040f6:	47b0      	blx	r6
 80040f8:	2800      	cmp	r0, #0
 80040fa:	dc06      	bgt.n	800410a <__sflush_r+0xfe>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	e78e      	b.n	8004028 <__sflush_r+0x1c>
 800410a:	4407      	add	r7, r0
 800410c:	eba8 0800 	sub.w	r8, r8, r0
 8004110:	e7e9      	b.n	80040e6 <__sflush_r+0xda>
 8004112:	bf00      	nop
 8004114:	20400001 	.word	0x20400001

08004118 <_fflush_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	690b      	ldr	r3, [r1, #16]
 800411c:	4605      	mov	r5, r0
 800411e:	460c      	mov	r4, r1
 8004120:	b913      	cbnz	r3, 8004128 <_fflush_r+0x10>
 8004122:	2500      	movs	r5, #0
 8004124:	4628      	mov	r0, r5
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	b118      	cbz	r0, 8004132 <_fflush_r+0x1a>
 800412a:	6983      	ldr	r3, [r0, #24]
 800412c:	b90b      	cbnz	r3, 8004132 <_fflush_r+0x1a>
 800412e:	f000 f887 	bl	8004240 <__sinit>
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <_fflush_r+0x6c>)
 8004134:	429c      	cmp	r4, r3
 8004136:	d11b      	bne.n	8004170 <_fflush_r+0x58>
 8004138:	686c      	ldr	r4, [r5, #4]
 800413a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0ef      	beq.n	8004122 <_fflush_r+0xa>
 8004142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004144:	07d0      	lsls	r0, r2, #31
 8004146:	d404      	bmi.n	8004152 <_fflush_r+0x3a>
 8004148:	0599      	lsls	r1, r3, #22
 800414a:	d402      	bmi.n	8004152 <_fflush_r+0x3a>
 800414c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800414e:	f000 f915 	bl	800437c <__retarget_lock_acquire_recursive>
 8004152:	4628      	mov	r0, r5
 8004154:	4621      	mov	r1, r4
 8004156:	f7ff ff59 	bl	800400c <__sflush_r>
 800415a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800415c:	07da      	lsls	r2, r3, #31
 800415e:	4605      	mov	r5, r0
 8004160:	d4e0      	bmi.n	8004124 <_fflush_r+0xc>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	059b      	lsls	r3, r3, #22
 8004166:	d4dd      	bmi.n	8004124 <_fflush_r+0xc>
 8004168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800416a:	f000 f908 	bl	800437e <__retarget_lock_release_recursive>
 800416e:	e7d9      	b.n	8004124 <_fflush_r+0xc>
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <_fflush_r+0x70>)
 8004172:	429c      	cmp	r4, r3
 8004174:	d101      	bne.n	800417a <_fflush_r+0x62>
 8004176:	68ac      	ldr	r4, [r5, #8]
 8004178:	e7df      	b.n	800413a <_fflush_r+0x22>
 800417a:	4b04      	ldr	r3, [pc, #16]	; (800418c <_fflush_r+0x74>)
 800417c:	429c      	cmp	r4, r3
 800417e:	bf08      	it	eq
 8004180:	68ec      	ldreq	r4, [r5, #12]
 8004182:	e7da      	b.n	800413a <_fflush_r+0x22>
 8004184:	080047d4 	.word	0x080047d4
 8004188:	080047f4 	.word	0x080047f4
 800418c:	080047b4 	.word	0x080047b4

08004190 <std>:
 8004190:	2300      	movs	r3, #0
 8004192:	b510      	push	{r4, lr}
 8004194:	4604      	mov	r4, r0
 8004196:	e9c0 3300 	strd	r3, r3, [r0]
 800419a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800419e:	6083      	str	r3, [r0, #8]
 80041a0:	8181      	strh	r1, [r0, #12]
 80041a2:	6643      	str	r3, [r0, #100]	; 0x64
 80041a4:	81c2      	strh	r2, [r0, #14]
 80041a6:	6183      	str	r3, [r0, #24]
 80041a8:	4619      	mov	r1, r3
 80041aa:	2208      	movs	r2, #8
 80041ac:	305c      	adds	r0, #92	; 0x5c
 80041ae:	f7ff fdef 	bl	8003d90 <memset>
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <std+0x38>)
 80041b4:	6263      	str	r3, [r4, #36]	; 0x24
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <std+0x3c>)
 80041b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <std+0x40>)
 80041bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <std+0x44>)
 80041c0:	6224      	str	r4, [r4, #32]
 80041c2:	6323      	str	r3, [r4, #48]	; 0x30
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	bf00      	nop
 80041c8:	080045bd 	.word	0x080045bd
 80041cc:	080045df 	.word	0x080045df
 80041d0:	08004617 	.word	0x08004617
 80041d4:	0800463b 	.word	0x0800463b

080041d8 <_cleanup_r>:
 80041d8:	4901      	ldr	r1, [pc, #4]	; (80041e0 <_cleanup_r+0x8>)
 80041da:	f000 b8af 	b.w	800433c <_fwalk_reent>
 80041de:	bf00      	nop
 80041e0:	08004119 	.word	0x08004119

080041e4 <__sfmoreglue>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	1e4a      	subs	r2, r1, #1
 80041e8:	2568      	movs	r5, #104	; 0x68
 80041ea:	4355      	muls	r5, r2
 80041ec:	460e      	mov	r6, r1
 80041ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041f2:	f000 f979 	bl	80044e8 <_malloc_r>
 80041f6:	4604      	mov	r4, r0
 80041f8:	b140      	cbz	r0, 800420c <__sfmoreglue+0x28>
 80041fa:	2100      	movs	r1, #0
 80041fc:	e9c0 1600 	strd	r1, r6, [r0]
 8004200:	300c      	adds	r0, #12
 8004202:	60a0      	str	r0, [r4, #8]
 8004204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004208:	f7ff fdc2 	bl	8003d90 <memset>
 800420c:	4620      	mov	r0, r4
 800420e:	bd70      	pop	{r4, r5, r6, pc}

08004210 <__sfp_lock_acquire>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__sfp_lock_acquire+0x8>)
 8004212:	f000 b8b3 	b.w	800437c <__retarget_lock_acquire_recursive>
 8004216:	bf00      	nop
 8004218:	20000180 	.word	0x20000180

0800421c <__sfp_lock_release>:
 800421c:	4801      	ldr	r0, [pc, #4]	; (8004224 <__sfp_lock_release+0x8>)
 800421e:	f000 b8ae 	b.w	800437e <__retarget_lock_release_recursive>
 8004222:	bf00      	nop
 8004224:	20000180 	.word	0x20000180

08004228 <__sinit_lock_acquire>:
 8004228:	4801      	ldr	r0, [pc, #4]	; (8004230 <__sinit_lock_acquire+0x8>)
 800422a:	f000 b8a7 	b.w	800437c <__retarget_lock_acquire_recursive>
 800422e:	bf00      	nop
 8004230:	2000017b 	.word	0x2000017b

08004234 <__sinit_lock_release>:
 8004234:	4801      	ldr	r0, [pc, #4]	; (800423c <__sinit_lock_release+0x8>)
 8004236:	f000 b8a2 	b.w	800437e <__retarget_lock_release_recursive>
 800423a:	bf00      	nop
 800423c:	2000017b 	.word	0x2000017b

08004240 <__sinit>:
 8004240:	b510      	push	{r4, lr}
 8004242:	4604      	mov	r4, r0
 8004244:	f7ff fff0 	bl	8004228 <__sinit_lock_acquire>
 8004248:	69a3      	ldr	r3, [r4, #24]
 800424a:	b11b      	cbz	r3, 8004254 <__sinit+0x14>
 800424c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004250:	f7ff bff0 	b.w	8004234 <__sinit_lock_release>
 8004254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004258:	6523      	str	r3, [r4, #80]	; 0x50
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <__sinit+0x68>)
 800425c:	4a13      	ldr	r2, [pc, #76]	; (80042ac <__sinit+0x6c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	62a2      	str	r2, [r4, #40]	; 0x28
 8004262:	42a3      	cmp	r3, r4
 8004264:	bf04      	itt	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	61a3      	streq	r3, [r4, #24]
 800426a:	4620      	mov	r0, r4
 800426c:	f000 f820 	bl	80042b0 <__sfp>
 8004270:	6060      	str	r0, [r4, #4]
 8004272:	4620      	mov	r0, r4
 8004274:	f000 f81c 	bl	80042b0 <__sfp>
 8004278:	60a0      	str	r0, [r4, #8]
 800427a:	4620      	mov	r0, r4
 800427c:	f000 f818 	bl	80042b0 <__sfp>
 8004280:	2200      	movs	r2, #0
 8004282:	60e0      	str	r0, [r4, #12]
 8004284:	2104      	movs	r1, #4
 8004286:	6860      	ldr	r0, [r4, #4]
 8004288:	f7ff ff82 	bl	8004190 <std>
 800428c:	68a0      	ldr	r0, [r4, #8]
 800428e:	2201      	movs	r2, #1
 8004290:	2109      	movs	r1, #9
 8004292:	f7ff ff7d 	bl	8004190 <std>
 8004296:	68e0      	ldr	r0, [r4, #12]
 8004298:	2202      	movs	r2, #2
 800429a:	2112      	movs	r1, #18
 800429c:	f7ff ff78 	bl	8004190 <std>
 80042a0:	2301      	movs	r3, #1
 80042a2:	61a3      	str	r3, [r4, #24]
 80042a4:	e7d2      	b.n	800424c <__sinit+0xc>
 80042a6:	bf00      	nop
 80042a8:	080047b0 	.word	0x080047b0
 80042ac:	080041d9 	.word	0x080041d9

080042b0 <__sfp>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	4607      	mov	r7, r0
 80042b4:	f7ff ffac 	bl	8004210 <__sfp_lock_acquire>
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <__sfp+0x84>)
 80042ba:	681e      	ldr	r6, [r3, #0]
 80042bc:	69b3      	ldr	r3, [r6, #24]
 80042be:	b913      	cbnz	r3, 80042c6 <__sfp+0x16>
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7ff ffbd 	bl	8004240 <__sinit>
 80042c6:	3648      	adds	r6, #72	; 0x48
 80042c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	d503      	bpl.n	80042d8 <__sfp+0x28>
 80042d0:	6833      	ldr	r3, [r6, #0]
 80042d2:	b30b      	cbz	r3, 8004318 <__sfp+0x68>
 80042d4:	6836      	ldr	r6, [r6, #0]
 80042d6:	e7f7      	b.n	80042c8 <__sfp+0x18>
 80042d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042dc:	b9d5      	cbnz	r5, 8004314 <__sfp+0x64>
 80042de:	4b16      	ldr	r3, [pc, #88]	; (8004338 <__sfp+0x88>)
 80042e0:	60e3      	str	r3, [r4, #12]
 80042e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042e6:	6665      	str	r5, [r4, #100]	; 0x64
 80042e8:	f000 f847 	bl	800437a <__retarget_lock_init_recursive>
 80042ec:	f7ff ff96 	bl	800421c <__sfp_lock_release>
 80042f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042f8:	6025      	str	r5, [r4, #0]
 80042fa:	61a5      	str	r5, [r4, #24]
 80042fc:	2208      	movs	r2, #8
 80042fe:	4629      	mov	r1, r5
 8004300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004304:	f7ff fd44 	bl	8003d90 <memset>
 8004308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800430c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004310:	4620      	mov	r0, r4
 8004312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004314:	3468      	adds	r4, #104	; 0x68
 8004316:	e7d9      	b.n	80042cc <__sfp+0x1c>
 8004318:	2104      	movs	r1, #4
 800431a:	4638      	mov	r0, r7
 800431c:	f7ff ff62 	bl	80041e4 <__sfmoreglue>
 8004320:	4604      	mov	r4, r0
 8004322:	6030      	str	r0, [r6, #0]
 8004324:	2800      	cmp	r0, #0
 8004326:	d1d5      	bne.n	80042d4 <__sfp+0x24>
 8004328:	f7ff ff78 	bl	800421c <__sfp_lock_release>
 800432c:	230c      	movs	r3, #12
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	e7ee      	b.n	8004310 <__sfp+0x60>
 8004332:	bf00      	nop
 8004334:	080047b0 	.word	0x080047b0
 8004338:	ffff0001 	.word	0xffff0001

0800433c <_fwalk_reent>:
 800433c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004340:	4606      	mov	r6, r0
 8004342:	4688      	mov	r8, r1
 8004344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004348:	2700      	movs	r7, #0
 800434a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800434e:	f1b9 0901 	subs.w	r9, r9, #1
 8004352:	d505      	bpl.n	8004360 <_fwalk_reent+0x24>
 8004354:	6824      	ldr	r4, [r4, #0]
 8004356:	2c00      	cmp	r4, #0
 8004358:	d1f7      	bne.n	800434a <_fwalk_reent+0xe>
 800435a:	4638      	mov	r0, r7
 800435c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004360:	89ab      	ldrh	r3, [r5, #12]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d907      	bls.n	8004376 <_fwalk_reent+0x3a>
 8004366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800436a:	3301      	adds	r3, #1
 800436c:	d003      	beq.n	8004376 <_fwalk_reent+0x3a>
 800436e:	4629      	mov	r1, r5
 8004370:	4630      	mov	r0, r6
 8004372:	47c0      	blx	r8
 8004374:	4307      	orrs	r7, r0
 8004376:	3568      	adds	r5, #104	; 0x68
 8004378:	e7e9      	b.n	800434e <_fwalk_reent+0x12>

0800437a <__retarget_lock_init_recursive>:
 800437a:	4770      	bx	lr

0800437c <__retarget_lock_acquire_recursive>:
 800437c:	4770      	bx	lr

0800437e <__retarget_lock_release_recursive>:
 800437e:	4770      	bx	lr

08004380 <__swhatbuf_r>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	460e      	mov	r6, r1
 8004384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004388:	2900      	cmp	r1, #0
 800438a:	b096      	sub	sp, #88	; 0x58
 800438c:	4614      	mov	r4, r2
 800438e:	461d      	mov	r5, r3
 8004390:	da07      	bge.n	80043a2 <__swhatbuf_r+0x22>
 8004392:	2300      	movs	r3, #0
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	89b3      	ldrh	r3, [r6, #12]
 8004398:	061a      	lsls	r2, r3, #24
 800439a:	d410      	bmi.n	80043be <__swhatbuf_r+0x3e>
 800439c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043a0:	e00e      	b.n	80043c0 <__swhatbuf_r+0x40>
 80043a2:	466a      	mov	r2, sp
 80043a4:	f000 f970 	bl	8004688 <_fstat_r>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	dbf2      	blt.n	8004392 <__swhatbuf_r+0x12>
 80043ac:	9a01      	ldr	r2, [sp, #4]
 80043ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043b6:	425a      	negs	r2, r3
 80043b8:	415a      	adcs	r2, r3
 80043ba:	602a      	str	r2, [r5, #0]
 80043bc:	e7ee      	b.n	800439c <__swhatbuf_r+0x1c>
 80043be:	2340      	movs	r3, #64	; 0x40
 80043c0:	2000      	movs	r0, #0
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	b016      	add	sp, #88	; 0x58
 80043c6:	bd70      	pop	{r4, r5, r6, pc}

080043c8 <__smakebuf_r>:
 80043c8:	898b      	ldrh	r3, [r1, #12]
 80043ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043cc:	079d      	lsls	r5, r3, #30
 80043ce:	4606      	mov	r6, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	d507      	bpl.n	80043e4 <__smakebuf_r+0x1c>
 80043d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	6123      	str	r3, [r4, #16]
 80043dc:	2301      	movs	r3, #1
 80043de:	6163      	str	r3, [r4, #20]
 80043e0:	b002      	add	sp, #8
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	ab01      	add	r3, sp, #4
 80043e6:	466a      	mov	r2, sp
 80043e8:	f7ff ffca 	bl	8004380 <__swhatbuf_r>
 80043ec:	9900      	ldr	r1, [sp, #0]
 80043ee:	4605      	mov	r5, r0
 80043f0:	4630      	mov	r0, r6
 80043f2:	f000 f879 	bl	80044e8 <_malloc_r>
 80043f6:	b948      	cbnz	r0, 800440c <__smakebuf_r+0x44>
 80043f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043fc:	059a      	lsls	r2, r3, #22
 80043fe:	d4ef      	bmi.n	80043e0 <__smakebuf_r+0x18>
 8004400:	f023 0303 	bic.w	r3, r3, #3
 8004404:	f043 0302 	orr.w	r3, r3, #2
 8004408:	81a3      	strh	r3, [r4, #12]
 800440a:	e7e3      	b.n	80043d4 <__smakebuf_r+0xc>
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <__smakebuf_r+0x7c>)
 800440e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	6020      	str	r0, [r4, #0]
 8004414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004418:	81a3      	strh	r3, [r4, #12]
 800441a:	9b00      	ldr	r3, [sp, #0]
 800441c:	6163      	str	r3, [r4, #20]
 800441e:	9b01      	ldr	r3, [sp, #4]
 8004420:	6120      	str	r0, [r4, #16]
 8004422:	b15b      	cbz	r3, 800443c <__smakebuf_r+0x74>
 8004424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004428:	4630      	mov	r0, r6
 800442a:	f000 f93f 	bl	80046ac <_isatty_r>
 800442e:	b128      	cbz	r0, 800443c <__smakebuf_r+0x74>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	89a0      	ldrh	r0, [r4, #12]
 800443e:	4305      	orrs	r5, r0
 8004440:	81a5      	strh	r5, [r4, #12]
 8004442:	e7cd      	b.n	80043e0 <__smakebuf_r+0x18>
 8004444:	080041d9 	.word	0x080041d9

08004448 <_free_r>:
 8004448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800444a:	2900      	cmp	r1, #0
 800444c:	d048      	beq.n	80044e0 <_free_r+0x98>
 800444e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004452:	9001      	str	r0, [sp, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f1a1 0404 	sub.w	r4, r1, #4
 800445a:	bfb8      	it	lt
 800445c:	18e4      	addlt	r4, r4, r3
 800445e:	f000 f947 	bl	80046f0 <__malloc_lock>
 8004462:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <_free_r+0x9c>)
 8004464:	9801      	ldr	r0, [sp, #4]
 8004466:	6813      	ldr	r3, [r2, #0]
 8004468:	4615      	mov	r5, r2
 800446a:	b933      	cbnz	r3, 800447a <_free_r+0x32>
 800446c:	6063      	str	r3, [r4, #4]
 800446e:	6014      	str	r4, [r2, #0]
 8004470:	b003      	add	sp, #12
 8004472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004476:	f000 b941 	b.w	80046fc <__malloc_unlock>
 800447a:	42a3      	cmp	r3, r4
 800447c:	d90b      	bls.n	8004496 <_free_r+0x4e>
 800447e:	6821      	ldr	r1, [r4, #0]
 8004480:	1862      	adds	r2, r4, r1
 8004482:	4293      	cmp	r3, r2
 8004484:	bf04      	itt	eq
 8004486:	681a      	ldreq	r2, [r3, #0]
 8004488:	685b      	ldreq	r3, [r3, #4]
 800448a:	6063      	str	r3, [r4, #4]
 800448c:	bf04      	itt	eq
 800448e:	1852      	addeq	r2, r2, r1
 8004490:	6022      	streq	r2, [r4, #0]
 8004492:	602c      	str	r4, [r5, #0]
 8004494:	e7ec      	b.n	8004470 <_free_r+0x28>
 8004496:	461a      	mov	r2, r3
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b10b      	cbz	r3, 80044a0 <_free_r+0x58>
 800449c:	42a3      	cmp	r3, r4
 800449e:	d9fa      	bls.n	8004496 <_free_r+0x4e>
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	1855      	adds	r5, r2, r1
 80044a4:	42a5      	cmp	r5, r4
 80044a6:	d10b      	bne.n	80044c0 <_free_r+0x78>
 80044a8:	6824      	ldr	r4, [r4, #0]
 80044aa:	4421      	add	r1, r4
 80044ac:	1854      	adds	r4, r2, r1
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	d1dd      	bne.n	8004470 <_free_r+0x28>
 80044b4:	681c      	ldr	r4, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	6053      	str	r3, [r2, #4]
 80044ba:	4421      	add	r1, r4
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	e7d7      	b.n	8004470 <_free_r+0x28>
 80044c0:	d902      	bls.n	80044c8 <_free_r+0x80>
 80044c2:	230c      	movs	r3, #12
 80044c4:	6003      	str	r3, [r0, #0]
 80044c6:	e7d3      	b.n	8004470 <_free_r+0x28>
 80044c8:	6825      	ldr	r5, [r4, #0]
 80044ca:	1961      	adds	r1, r4, r5
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf04      	itt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	bf04      	itt	eq
 80044d8:	1949      	addeq	r1, r1, r5
 80044da:	6021      	streq	r1, [r4, #0]
 80044dc:	6054      	str	r4, [r2, #4]
 80044de:	e7c7      	b.n	8004470 <_free_r+0x28>
 80044e0:	b003      	add	sp, #12
 80044e2:	bd30      	pop	{r4, r5, pc}
 80044e4:	20000090 	.word	0x20000090

080044e8 <_malloc_r>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	1ccd      	adds	r5, r1, #3
 80044ec:	f025 0503 	bic.w	r5, r5, #3
 80044f0:	3508      	adds	r5, #8
 80044f2:	2d0c      	cmp	r5, #12
 80044f4:	bf38      	it	cc
 80044f6:	250c      	movcc	r5, #12
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	4606      	mov	r6, r0
 80044fc:	db01      	blt.n	8004502 <_malloc_r+0x1a>
 80044fe:	42a9      	cmp	r1, r5
 8004500:	d903      	bls.n	800450a <_malloc_r+0x22>
 8004502:	230c      	movs	r3, #12
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	2000      	movs	r0, #0
 8004508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450a:	f000 f8f1 	bl	80046f0 <__malloc_lock>
 800450e:	4921      	ldr	r1, [pc, #132]	; (8004594 <_malloc_r+0xac>)
 8004510:	680a      	ldr	r2, [r1, #0]
 8004512:	4614      	mov	r4, r2
 8004514:	b99c      	cbnz	r4, 800453e <_malloc_r+0x56>
 8004516:	4f20      	ldr	r7, [pc, #128]	; (8004598 <_malloc_r+0xb0>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b923      	cbnz	r3, 8004526 <_malloc_r+0x3e>
 800451c:	4621      	mov	r1, r4
 800451e:	4630      	mov	r0, r6
 8004520:	f000 f83c 	bl	800459c <_sbrk_r>
 8004524:	6038      	str	r0, [r7, #0]
 8004526:	4629      	mov	r1, r5
 8004528:	4630      	mov	r0, r6
 800452a:	f000 f837 	bl	800459c <_sbrk_r>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	d123      	bne.n	800457a <_malloc_r+0x92>
 8004532:	230c      	movs	r3, #12
 8004534:	6033      	str	r3, [r6, #0]
 8004536:	4630      	mov	r0, r6
 8004538:	f000 f8e0 	bl	80046fc <__malloc_unlock>
 800453c:	e7e3      	b.n	8004506 <_malloc_r+0x1e>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	1b5b      	subs	r3, r3, r5
 8004542:	d417      	bmi.n	8004574 <_malloc_r+0x8c>
 8004544:	2b0b      	cmp	r3, #11
 8004546:	d903      	bls.n	8004550 <_malloc_r+0x68>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	441c      	add	r4, r3
 800454c:	6025      	str	r5, [r4, #0]
 800454e:	e004      	b.n	800455a <_malloc_r+0x72>
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	42a2      	cmp	r2, r4
 8004554:	bf0c      	ite	eq
 8004556:	600b      	streq	r3, [r1, #0]
 8004558:	6053      	strne	r3, [r2, #4]
 800455a:	4630      	mov	r0, r6
 800455c:	f000 f8ce 	bl	80046fc <__malloc_unlock>
 8004560:	f104 000b 	add.w	r0, r4, #11
 8004564:	1d23      	adds	r3, r4, #4
 8004566:	f020 0007 	bic.w	r0, r0, #7
 800456a:	1ac2      	subs	r2, r0, r3
 800456c:	d0cc      	beq.n	8004508 <_malloc_r+0x20>
 800456e:	1a1b      	subs	r3, r3, r0
 8004570:	50a3      	str	r3, [r4, r2]
 8004572:	e7c9      	b.n	8004508 <_malloc_r+0x20>
 8004574:	4622      	mov	r2, r4
 8004576:	6864      	ldr	r4, [r4, #4]
 8004578:	e7cc      	b.n	8004514 <_malloc_r+0x2c>
 800457a:	1cc4      	adds	r4, r0, #3
 800457c:	f024 0403 	bic.w	r4, r4, #3
 8004580:	42a0      	cmp	r0, r4
 8004582:	d0e3      	beq.n	800454c <_malloc_r+0x64>
 8004584:	1a21      	subs	r1, r4, r0
 8004586:	4630      	mov	r0, r6
 8004588:	f000 f808 	bl	800459c <_sbrk_r>
 800458c:	3001      	adds	r0, #1
 800458e:	d1dd      	bne.n	800454c <_malloc_r+0x64>
 8004590:	e7cf      	b.n	8004532 <_malloc_r+0x4a>
 8004592:	bf00      	nop
 8004594:	20000090 	.word	0x20000090
 8004598:	20000094 	.word	0x20000094

0800459c <_sbrk_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d06      	ldr	r5, [pc, #24]	; (80045b8 <_sbrk_r+0x1c>)
 80045a0:	2300      	movs	r3, #0
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc fa08 	bl	80009bc <_sbrk>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_sbrk_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_sbrk_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	20000184 	.word	0x20000184

080045bc <__sread>:
 80045bc:	b510      	push	{r4, lr}
 80045be:	460c      	mov	r4, r1
 80045c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c4:	f000 f8a0 	bl	8004708 <_read_r>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	bfab      	itete	ge
 80045cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045ce:	89a3      	ldrhlt	r3, [r4, #12]
 80045d0:	181b      	addge	r3, r3, r0
 80045d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045d6:	bfac      	ite	ge
 80045d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80045da:	81a3      	strhlt	r3, [r4, #12]
 80045dc:	bd10      	pop	{r4, pc}

080045de <__swrite>:
 80045de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e2:	461f      	mov	r7, r3
 80045e4:	898b      	ldrh	r3, [r1, #12]
 80045e6:	05db      	lsls	r3, r3, #23
 80045e8:	4605      	mov	r5, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	4616      	mov	r6, r2
 80045ee:	d505      	bpl.n	80045fc <__swrite+0x1e>
 80045f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f4:	2302      	movs	r3, #2
 80045f6:	2200      	movs	r2, #0
 80045f8:	f000 f868 	bl	80046cc <_lseek_r>
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	4632      	mov	r2, r6
 800460a:	463b      	mov	r3, r7
 800460c:	4628      	mov	r0, r5
 800460e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004612:	f000 b817 	b.w	8004644 <_write_r>

08004616 <__sseek>:
 8004616:	b510      	push	{r4, lr}
 8004618:	460c      	mov	r4, r1
 800461a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800461e:	f000 f855 	bl	80046cc <_lseek_r>
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	bf15      	itete	ne
 8004628:	6560      	strne	r0, [r4, #84]	; 0x54
 800462a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800462e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004632:	81a3      	strheq	r3, [r4, #12]
 8004634:	bf18      	it	ne
 8004636:	81a3      	strhne	r3, [r4, #12]
 8004638:	bd10      	pop	{r4, pc}

0800463a <__sclose>:
 800463a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463e:	f000 b813 	b.w	8004668 <_close_r>
	...

08004644 <_write_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d07      	ldr	r5, [pc, #28]	; (8004664 <_write_r+0x20>)
 8004648:	4604      	mov	r4, r0
 800464a:	4608      	mov	r0, r1
 800464c:	4611      	mov	r1, r2
 800464e:	2200      	movs	r2, #0
 8004650:	602a      	str	r2, [r5, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f7fc f850 	bl	80006f8 <_write>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_write_r+0x1e>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_write_r+0x1e>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000184 	.word	0x20000184

08004668 <_close_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d06      	ldr	r5, [pc, #24]	; (8004684 <_close_r+0x1c>)
 800466c:	2300      	movs	r3, #0
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	f7fc f96d 	bl	8000952 <_close>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_close_r+0x1a>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_close_r+0x1a>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000184 	.word	0x20000184

08004688 <_fstat_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4d07      	ldr	r5, [pc, #28]	; (80046a8 <_fstat_r+0x20>)
 800468c:	2300      	movs	r3, #0
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	602b      	str	r3, [r5, #0]
 8004696:	f7fc f968 	bl	800096a <_fstat>
 800469a:	1c43      	adds	r3, r0, #1
 800469c:	d102      	bne.n	80046a4 <_fstat_r+0x1c>
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	b103      	cbz	r3, 80046a4 <_fstat_r+0x1c>
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	bd38      	pop	{r3, r4, r5, pc}
 80046a6:	bf00      	nop
 80046a8:	20000184 	.word	0x20000184

080046ac <_isatty_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4d06      	ldr	r5, [pc, #24]	; (80046c8 <_isatty_r+0x1c>)
 80046b0:	2300      	movs	r3, #0
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	602b      	str	r3, [r5, #0]
 80046b8:	f7fc f967 	bl	800098a <_isatty>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_isatty_r+0x1a>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_isatty_r+0x1a>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20000184 	.word	0x20000184

080046cc <_lseek_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d07      	ldr	r5, [pc, #28]	; (80046ec <_lseek_r+0x20>)
 80046d0:	4604      	mov	r4, r0
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fc f960 	bl	80009a0 <_lseek>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_lseek_r+0x1e>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_lseek_r+0x1e>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	20000184 	.word	0x20000184

080046f0 <__malloc_lock>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__malloc_lock+0x8>)
 80046f2:	f7ff be43 	b.w	800437c <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	2000017c 	.word	0x2000017c

080046fc <__malloc_unlock>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__malloc_unlock+0x8>)
 80046fe:	f7ff be3e 	b.w	800437e <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	2000017c 	.word	0x2000017c

08004708 <_read_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4d07      	ldr	r5, [pc, #28]	; (8004728 <_read_r+0x20>)
 800470c:	4604      	mov	r4, r0
 800470e:	4608      	mov	r0, r1
 8004710:	4611      	mov	r1, r2
 8004712:	2200      	movs	r2, #0
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	f7fc f8fe 	bl	8000918 <_read>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_read_r+0x1e>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_read_r+0x1e>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000184 	.word	0x20000184

0800472c <_init>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr

08004738 <_fini>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr
