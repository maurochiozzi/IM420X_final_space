
IM420X_final_space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa3c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800fc20  0800fc20  0001fc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010400  08010400  00030aa4  2**0
                  CONTENTS
  4 .ARM          00000008  08010400  08010400  00020400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010408  08010408  00030aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010408  08010408  00020408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801040c  0801040c  0002040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000aa4  20000000  08010410  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008800  20000aa8  08010eb4  00030aa8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200092a8  08010eb4  000392a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030aa4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bbb7  00000000  00000000  00030ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f3  00000000  00000000  0005c68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  00061880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b48  00000000  00000000  000635d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b395  00000000  00000000  00065118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022387  00000000  00000000  000904ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108ce3  00000000  00000000  000b2834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bb517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091d0  00000000  00000000  001bb56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000aa8 	.word	0x20000aa8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fc04 	.word	0x0800fc04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000aac 	.word	0x20000aac
 800021c:	0800fc04 	.word	0x0800fc04

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 bc3a 	b.w	8001524 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 fad2 	bl	8001260 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__muldc3>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	ed2d 8b08 	vpush	{d8-d11}
 8000cd0:	eeb0 8a42 	vmov.f32	s16, s4
 8000cd4:	eef0 8a62 	vmov.f32	s17, s5
 8000cd8:	eeb0 aa40 	vmov.f32	s20, s0
 8000cdc:	eef0 aa60 	vmov.f32	s21, s1
 8000ce0:	b08d      	sub	sp, #52	; 0x34
 8000ce2:	ec53 2b12 	vmov	r2, r3, d2
 8000ce6:	eeb0 ba42 	vmov.f32	s22, s4
 8000cea:	eef0 ba62 	vmov.f32	s23, s5
 8000cee:	ec51 0b10 	vmov	r0, r1, d0
 8000cf2:	ec5b ab11 	vmov	sl, fp, d1
 8000cf6:	ec57 6b13 	vmov	r6, r7, d3
 8000cfa:	f7ff fca5 	bl	8000648 <__aeabi_dmul>
 8000cfe:	4632      	mov	r2, r6
 8000d00:	4680      	mov	r8, r0
 8000d02:	4689      	mov	r9, r1
 8000d04:	463b      	mov	r3, r7
 8000d06:	4650      	mov	r0, sl
 8000d08:	4659      	mov	r1, fp
 8000d0a:	e9cd 8900 	strd	r8, r9, [sp]
 8000d0e:	f7ff fc9b 	bl	8000648 <__aeabi_dmul>
 8000d12:	4680      	mov	r8, r0
 8000d14:	4689      	mov	r9, r1
 8000d16:	4644      	mov	r4, r8
 8000d18:	464d      	mov	r5, r9
 8000d1a:	4632      	mov	r2, r6
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	ec51 0b1a 	vmov	r0, r1, d10
 8000d22:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000d26:	f7ff fc8f 	bl	8000648 <__aeabi_dmul>
 8000d2a:	4652      	mov	r2, sl
 8000d2c:	4680      	mov	r8, r0
 8000d2e:	4689      	mov	r9, r1
 8000d30:	465b      	mov	r3, fp
 8000d32:	ec51 0b18 	vmov	r0, r1, d8
 8000d36:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000d3a:	f7ff fc85 	bl	8000648 <__aeabi_dmul>
 8000d3e:	4680      	mov	r8, r0
 8000d40:	4689      	mov	r9, r1
 8000d42:	4622      	mov	r2, r4
 8000d44:	462b      	mov	r3, r5
 8000d46:	4644      	mov	r4, r8
 8000d48:	464d      	mov	r5, r9
 8000d4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000d4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8000d52:	f7ff fac1 	bl	80002d8 <__aeabi_dsub>
 8000d56:	4642      	mov	r2, r8
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4680      	mov	r8, r0
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000d62:	f7ff fabb 	bl	80002dc <__adddf3>
 8000d66:	4642      	mov	r2, r8
 8000d68:	4604      	mov	r4, r0
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	4640      	mov	r0, r8
 8000d70:	4649      	mov	r1, r9
 8000d72:	ec45 4b18 	vmov	d8, r4, r5
 8000d76:	f7ff ff01 	bl	8000b7c <__aeabi_dcmpun>
 8000d7a:	b950      	cbnz	r0, 8000d92 <__muldc3+0xca>
 8000d7c:	eeb0 1a48 	vmov.f32	s2, s16
 8000d80:	eef0 1a68 	vmov.f32	s3, s17
 8000d84:	ec49 8b10 	vmov	d0, r8, r9
 8000d88:	b00d      	add	sp, #52	; 0x34
 8000d8a:	ecbd 8b08 	vpop	{d8-d11}
 8000d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d92:	ec53 2b18 	vmov	r2, r3, d8
 8000d96:	ec51 0b18 	vmov	r0, r1, d8
 8000d9a:	f7ff feef 	bl	8000b7c <__aeabi_dcmpun>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d0ec      	beq.n	8000d7c <__muldc3+0xb4>
 8000da2:	ee1a 3a90 	vmov	r3, s21
 8000da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000daa:	4619      	mov	r1, r3
 8000dac:	ee1a 0a10 	vmov	r0, s20
 8000db0:	461d      	mov	r5, r3
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295
 8000db6:	4bab      	ldr	r3, [pc, #684]	; (8001064 <__muldc3+0x39c>)
 8000db8:	f7ff fee0 	bl	8000b7c <__aeabi_dcmpun>
 8000dbc:	f04f 0301 	mov.w	r3, #1
 8000dc0:	ee1a 4a10 	vmov	r4, s20
 8000dc4:	f88d 3020 	strb.w	r3, [sp, #32]
 8000dc8:	b950      	cbnz	r0, 8000de0 <__muldc3+0x118>
 8000dca:	4ba6      	ldr	r3, [pc, #664]	; (8001064 <__muldc3+0x39c>)
 8000dcc:	ee1a 0a10 	vmov	r0, s20
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	f7ff feb3 	bl	8000b40 <__aeabi_dcmple>
 8000dda:	b908      	cbnz	r0, 8000de0 <__muldc3+0x118>
 8000ddc:	f88d 0020 	strb.w	r0, [sp, #32]
 8000de0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000de4:	f083 0c01 	eor.w	ip, r3, #1
 8000de8:	ec45 4b19 	vmov	d9, r4, r5
 8000dec:	4620      	mov	r0, r4
 8000dee:	4b9d      	ldr	r3, [pc, #628]	; (8001064 <__muldc3+0x39c>)
 8000df0:	fa5f f48c 	uxtb.w	r4, ip
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	4629      	mov	r1, r5
 8000dfa:	9408      	str	r4, [sp, #32]
 8000dfc:	f7ff febe 	bl	8000b7c <__aeabi_dcmpun>
 8000e00:	b948      	cbnz	r0, 8000e16 <__muldc3+0x14e>
 8000e02:	ec51 0b19 	vmov	r0, r1, d9
 8000e06:	4b97      	ldr	r3, [pc, #604]	; (8001064 <__muldc3+0x39c>)
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	f7ff fe98 	bl	8000b40 <__aeabi_dcmple>
 8000e10:	2800      	cmp	r0, #0
 8000e12:	f000 812b 	beq.w	800106c <__muldc3+0x3a4>
 8000e16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4650      	mov	r0, sl
 8000e20:	4b90      	ldr	r3, [pc, #576]	; (8001064 <__muldc3+0x39c>)
 8000e22:	f04f 32ff 	mov.w	r2, #4294967295
 8000e26:	f7ff fea9 	bl	8000b7c <__aeabi_dcmpun>
 8000e2a:	b948      	cbnz	r0, 8000e40 <__muldc3+0x178>
 8000e2c:	4b8d      	ldr	r3, [pc, #564]	; (8001064 <__muldc3+0x39c>)
 8000e2e:	4650      	mov	r0, sl
 8000e30:	4629      	mov	r1, r5
 8000e32:	f04f 32ff 	mov.w	r2, #4294967295
 8000e36:	f7ff fe83 	bl	8000b40 <__aeabi_dcmple>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	f000 8116 	beq.w	800106c <__muldc3+0x3a4>
 8000e40:	2300      	movs	r3, #0
 8000e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e44:	ec52 1b1b 	vmov	r1, r2, d11
 8000e48:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	ee1b 0a10 	vmov	r0, s22
 8000e52:	461d      	mov	r5, r3
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	4b82      	ldr	r3, [pc, #520]	; (8001064 <__muldc3+0x39c>)
 8000e5a:	f7ff fe8f 	bl	8000b7c <__aeabi_dcmpun>
 8000e5e:	f04f 0301 	mov.w	r3, #1
 8000e62:	ee1b 4a10 	vmov	r4, s22
 8000e66:	f88d 3020 	strb.w	r3, [sp, #32]
 8000e6a:	b950      	cbnz	r0, 8000e82 <__muldc3+0x1ba>
 8000e6c:	4b7d      	ldr	r3, [pc, #500]	; (8001064 <__muldc3+0x39c>)
 8000e6e:	ee1b 0a10 	vmov	r0, s22
 8000e72:	f04f 32ff 	mov.w	r2, #4294967295
 8000e76:	4629      	mov	r1, r5
 8000e78:	f7ff fe62 	bl	8000b40 <__aeabi_dcmple>
 8000e7c:	b908      	cbnz	r0, 8000e82 <__muldc3+0x1ba>
 8000e7e:	f88d 0020 	strb.w	r0, [sp, #32]
 8000e82:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000e86:	f083 0c01 	eor.w	ip, r3, #1
 8000e8a:	ec45 4b19 	vmov	d9, r4, r5
 8000e8e:	4b75      	ldr	r3, [pc, #468]	; (8001064 <__muldc3+0x39c>)
 8000e90:	4620      	mov	r0, r4
 8000e92:	4629      	mov	r1, r5
 8000e94:	fa5f f48c 	uxtb.w	r4, ip
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	9408      	str	r4, [sp, #32]
 8000e9e:	f7ff fe6d 	bl	8000b7c <__aeabi_dcmpun>
 8000ea2:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8000ea6:	4634      	mov	r4, r6
 8000ea8:	461d      	mov	r5, r3
 8000eaa:	b948      	cbnz	r0, 8000ec0 <__muldc3+0x1f8>
 8000eac:	ec51 0b19 	vmov	r0, r1, d9
 8000eb0:	4b6c      	ldr	r3, [pc, #432]	; (8001064 <__muldc3+0x39c>)
 8000eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb6:	f7ff fe43 	bl	8000b40 <__aeabi_dcmple>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	f000 8121 	beq.w	8001102 <__muldc3+0x43a>
 8000ec0:	4b68      	ldr	r3, [pc, #416]	; (8001064 <__muldc3+0x39c>)
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	f7ff fe57 	bl	8000b7c <__aeabi_dcmpun>
 8000ece:	b948      	cbnz	r0, 8000ee4 <__muldc3+0x21c>
 8000ed0:	4b64      	ldr	r3, [pc, #400]	; (8001064 <__muldc3+0x39c>)
 8000ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	4629      	mov	r1, r5
 8000eda:	f7ff fe31 	bl	8000b40 <__aeabi_dcmple>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	f000 810f 	beq.w	8001102 <__muldc3+0x43a>
 8000ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 8082 	bne.w	8000ff0 <__muldc3+0x328>
 8000eec:	e9dd 1200 	ldrd	r1, r2, [sp]
 8000ef0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	4608      	mov	r0, r1
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295
 8000efe:	4619      	mov	r1, r3
 8000f00:	4b58      	ldr	r3, [pc, #352]	; (8001064 <__muldc3+0x39c>)
 8000f02:	f7ff fe3b 	bl	8000b7c <__aeabi_dcmpun>
 8000f06:	b940      	cbnz	r0, 8000f1a <__muldc3+0x252>
 8000f08:	4b56      	ldr	r3, [pc, #344]	; (8001064 <__muldc3+0x39c>)
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f12:	f7ff fe15 	bl	8000b40 <__aeabi_dcmple>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d045      	beq.n	8000fa6 <__muldc3+0x2de>
 8000f1a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8000f1e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000f22:	460c      	mov	r4, r1
 8000f24:	461d      	mov	r5, r3
 8000f26:	4608      	mov	r0, r1
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <__muldc3+0x39c>)
 8000f30:	f7ff fe24 	bl	8000b7c <__aeabi_dcmpun>
 8000f34:	b938      	cbnz	r0, 8000f46 <__muldc3+0x27e>
 8000f36:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <__muldc3+0x39c>)
 8000f38:	4620      	mov	r0, r4
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	f7ff fdfe 	bl	8000b40 <__aeabi_dcmple>
 8000f44:	b378      	cbz	r0, 8000fa6 <__muldc3+0x2de>
 8000f46:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8000f4a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000f4e:	460c      	mov	r4, r1
 8000f50:	461d      	mov	r5, r3
 8000f52:	4608      	mov	r0, r1
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <__muldc3+0x39c>)
 8000f5c:	f7ff fe0e 	bl	8000b7c <__aeabi_dcmpun>
 8000f60:	b938      	cbnz	r0, 8000f72 <__muldc3+0x2aa>
 8000f62:	4b40      	ldr	r3, [pc, #256]	; (8001064 <__muldc3+0x39c>)
 8000f64:	4620      	mov	r0, r4
 8000f66:	4629      	mov	r1, r5
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	f7ff fde8 	bl	8000b40 <__aeabi_dcmple>
 8000f70:	b1c8      	cbz	r0, 8000fa6 <__muldc3+0x2de>
 8000f72:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8000f76:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	4608      	mov	r0, r1
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	4619      	mov	r1, r3
 8000f86:	4b37      	ldr	r3, [pc, #220]	; (8001064 <__muldc3+0x39c>)
 8000f88:	f7ff fdf8 	bl	8000b7c <__aeabi_dcmpun>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	f47f aef5 	bne.w	8000d7c <__muldc3+0xb4>
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <__muldc3+0x39c>)
 8000f94:	4620      	mov	r0, r4
 8000f96:	4629      	mov	r1, r5
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	f7ff fdd0 	bl	8000b40 <__aeabi_dcmple>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	f47f aeeb 	bne.w	8000d7c <__muldc3+0xb4>
 8000fa6:	ec53 2b1a 	vmov	r2, r3, d10
 8000faa:	ec51 0b1a 	vmov	r0, r1, d10
 8000fae:	f7ff fde5 	bl	8000b7c <__aeabi_dcmpun>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	f040 8144 	bne.w	8001240 <__muldc3+0x578>
 8000fb8:	4652      	mov	r2, sl
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4650      	mov	r0, sl
 8000fbe:	4659      	mov	r1, fp
 8000fc0:	f7ff fddc 	bl	8000b7c <__aeabi_dcmpun>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	f040 812e 	bne.w	8001226 <__muldc3+0x55e>
 8000fca:	ec51 0b1b 	vmov	r0, r1, d11
 8000fce:	ee1b 2a10 	vmov	r2, s22
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	f7ff fdd2 	bl	8000b7c <__aeabi_dcmpun>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f040 8116 	bne.w	800120a <__muldc3+0x542>
 8000fde:	4632      	mov	r2, r6
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	f7ff fdc9 	bl	8000b7c <__aeabi_dcmpun>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	f040 8101 	bne.w	80011f2 <__muldc3+0x52a>
 8000ff0:	ec55 4b1b 	vmov	r4, r5, d11
 8000ff4:	ee1b 2a10 	vmov	r2, s22
 8000ff8:	462b      	mov	r3, r5
 8000ffa:	ec51 0b1a 	vmov	r0, r1, d10
 8000ffe:	f7ff fb23 	bl	8000648 <__aeabi_dmul>
 8001002:	4632      	mov	r2, r6
 8001004:	4680      	mov	r8, r0
 8001006:	4689      	mov	r9, r1
 8001008:	463b      	mov	r3, r7
 800100a:	4650      	mov	r0, sl
 800100c:	4659      	mov	r1, fp
 800100e:	f7ff fb1b 	bl	8000648 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4640      	mov	r0, r8
 8001018:	4649      	mov	r1, r9
 800101a:	f7ff f95d 	bl	80002d8 <__aeabi_dsub>
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <__muldc3+0x3a0>)
 8001020:	2200      	movs	r2, #0
 8001022:	f7ff fb11 	bl	8000648 <__aeabi_dmul>
 8001026:	4632      	mov	r2, r6
 8001028:	463b      	mov	r3, r7
 800102a:	4680      	mov	r8, r0
 800102c:	4689      	mov	r9, r1
 800102e:	ec51 0b1a 	vmov	r0, r1, d10
 8001032:	f7ff fb09 	bl	8000648 <__aeabi_dmul>
 8001036:	462b      	mov	r3, r5
 8001038:	ee1b 2a10 	vmov	r2, s22
 800103c:	4604      	mov	r4, r0
 800103e:	460d      	mov	r5, r1
 8001040:	4650      	mov	r0, sl
 8001042:	4659      	mov	r1, fp
 8001044:	f7ff fb00 	bl	8000648 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4620      	mov	r0, r4
 800104e:	4629      	mov	r1, r5
 8001050:	f7ff f944 	bl	80002dc <__adddf3>
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__muldc3+0x3a0>)
 8001056:	2200      	movs	r2, #0
 8001058:	f7ff faf6 	bl	8000648 <__aeabi_dmul>
 800105c:	ec41 0b18 	vmov	d8, r0, r1
 8001060:	e68c      	b.n	8000d7c <__muldc3+0xb4>
 8001062:	bf00      	nop
 8001064:	7fefffff 	.word	0x7fefffff
 8001068:	7ff00000 	.word	0x7ff00000
 800106c:	9808      	ldr	r0, [sp, #32]
 800106e:	f7ff fa81 	bl	8000574 <__aeabi_i2d>
 8001072:	ee1a 3a90 	vmov	r3, s21
 8001076:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800107a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800107e:	4313      	orrs	r3, r2
 8001080:	9008      	str	r0, [sp, #32]
 8001082:	9309      	str	r3, [sp, #36]	; 0x24
 8001084:	f02b 4100 	bic.w	r1, fp, #2147483648	; 0x80000000
 8001088:	4b74      	ldr	r3, [pc, #464]	; (800125c <__muldc3+0x594>)
 800108a:	4650      	mov	r0, sl
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	460d      	mov	r5, r1
 8001092:	f7ff fd73 	bl	8000b7c <__aeabi_dcmpun>
 8001096:	f04f 0301 	mov.w	r3, #1
 800109a:	ed9d ab08 	vldr	d10, [sp, #32]
 800109e:	f88d 3020 	strb.w	r3, [sp, #32]
 80010a2:	b948      	cbnz	r0, 80010b8 <__muldc3+0x3f0>
 80010a4:	4b6d      	ldr	r3, [pc, #436]	; (800125c <__muldc3+0x594>)
 80010a6:	4650      	mov	r0, sl
 80010a8:	4629      	mov	r1, r5
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295
 80010ae:	f7ff fd47 	bl	8000b40 <__aeabi_dcmple>
 80010b2:	b908      	cbnz	r0, 80010b8 <__muldc3+0x3f0>
 80010b4:	f88d 0020 	strb.w	r0, [sp, #32]
 80010b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80010bc:	f083 0001 	eor.w	r0, r3, #1
 80010c0:	f000 0001 	and.w	r0, r0, #1
 80010c4:	f7ff fa56 	bl	8000574 <__aeabi_i2d>
 80010c8:	f00b 4300 	and.w	r3, fp, #2147483648	; 0x80000000
 80010cc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80010d0:	4604      	mov	r4, r0
 80010d2:	ec51 0b1b 	vmov	r0, r1, d11
 80010d6:	4313      	orrs	r3, r2
 80010d8:	461d      	mov	r5, r3
 80010da:	ee1b 2a10 	vmov	r2, s22
 80010de:	460b      	mov	r3, r1
 80010e0:	46a2      	mov	sl, r4
 80010e2:	46ab      	mov	fp, r5
 80010e4:	f7ff fd4a 	bl	8000b7c <__aeabi_dcmpun>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d166      	bne.n	80011ba <__muldc3+0x4f2>
 80010ec:	4632      	mov	r2, r6
 80010ee:	463b      	mov	r3, r7
 80010f0:	4630      	mov	r0, r6
 80010f2:	4639      	mov	r1, r7
 80010f4:	f7ff fd42 	bl	8000b7c <__aeabi_dcmpun>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d14f      	bne.n	800119c <__muldc3+0x4d4>
 80010fc:	2301      	movs	r3, #1
 80010fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001100:	e6a0      	b.n	8000e44 <__muldc3+0x17c>
 8001102:	9808      	ldr	r0, [sp, #32]
 8001104:	f7ff fa36 	bl	8000574 <__aeabi_i2d>
 8001108:	ee1b 3a90 	vmov	r3, s23
 800110c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8001110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001114:	4680      	mov	r8, r0
 8001116:	ea42 0903 	orr.w	r9, r2, r3
 800111a:	4620      	mov	r0, r4
 800111c:	4b4f      	ldr	r3, [pc, #316]	; (800125c <__muldc3+0x594>)
 800111e:	f04f 32ff 	mov.w	r2, #4294967295
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff fd2a 	bl	8000b7c <__aeabi_dcmpun>
 8001128:	ec49 8b1b 	vmov	d11, r8, r9
 800112c:	f04f 0801 	mov.w	r8, #1
 8001130:	b940      	cbnz	r0, 8001144 <__muldc3+0x47c>
 8001132:	4b4a      	ldr	r3, [pc, #296]	; (800125c <__muldc3+0x594>)
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	f7ff fd00 	bl	8000b40 <__aeabi_dcmple>
 8001140:	b900      	cbnz	r0, 8001144 <__muldc3+0x47c>
 8001142:	4680      	mov	r8, r0
 8001144:	f088 0001 	eor.w	r0, r8, #1
 8001148:	f000 0001 	and.w	r0, r0, #1
 800114c:	f7ff fa12 	bl	8000574 <__aeabi_i2d>
 8001150:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8001154:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8001158:	4680      	mov	r8, r0
 800115a:	ea42 0903 	orr.w	r9, r2, r3
 800115e:	ec51 0b1a 	vmov	r0, r1, d10
 8001162:	ec53 2b1a 	vmov	r2, r3, d10
 8001166:	4646      	mov	r6, r8
 8001168:	464f      	mov	r7, r9
 800116a:	f7ff fd07 	bl	8000b7c <__aeabi_dcmpun>
 800116e:	bb90      	cbnz	r0, 80011d6 <__muldc3+0x50e>
 8001170:	4652      	mov	r2, sl
 8001172:	465b      	mov	r3, fp
 8001174:	4650      	mov	r0, sl
 8001176:	4659      	mov	r1, fp
 8001178:	f7ff fd00 	bl	8000b7c <__aeabi_dcmpun>
 800117c:	2800      	cmp	r0, #0
 800117e:	f43f af37 	beq.w	8000ff0 <__muldc3+0x328>
 8001182:	f1bb 0f00 	cmp.w	fp, #0
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	bfbc      	itt	lt
 8001190:	2200      	movlt	r2, #0
 8001192:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001196:	4692      	mov	sl, r2
 8001198:	469b      	mov	fp, r3
 800119a:	e729      	b.n	8000ff0 <__muldc3+0x328>
 800119c:	2f00      	cmp	r7, #0
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	bfb8      	it	lt
 80011a4:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	461f      	mov	r7, r3
 80011ae:	bfb8      	it	lt
 80011b0:	2200      	movlt	r2, #0
 80011b2:	2301      	movs	r3, #1
 80011b4:	4616      	mov	r6, r2
 80011b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80011b8:	e644      	b.n	8000e44 <__muldc3+0x17c>
 80011ba:	ee1b 1a90 	vmov	r1, s23
 80011be:	2900      	cmp	r1, #0
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	bfbc      	itt	lt
 80011ca:	2200      	movlt	r2, #0
 80011cc:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011d0:	ec43 2b1b 	vmov	d11, r2, r3
 80011d4:	e78a      	b.n	80010ec <__muldc3+0x424>
 80011d6:	ee1a 1a90 	vmov	r1, s21
 80011da:	2900      	cmp	r1, #0
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	bfbc      	itt	lt
 80011e6:	2200      	movlt	r2, #0
 80011e8:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011ec:	ec43 2b1a 	vmov	d10, r2, r3
 80011f0:	e7be      	b.n	8001170 <__muldc3+0x4a8>
 80011f2:	2f00      	cmp	r7, #0
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	bfbc      	itt	lt
 80011fe:	2200      	movlt	r2, #0
 8001200:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001204:	4616      	mov	r6, r2
 8001206:	461f      	mov	r7, r3
 8001208:	e6f2      	b.n	8000ff0 <__muldc3+0x328>
 800120a:	ee1b 1a90 	vmov	r1, s23
 800120e:	2900      	cmp	r1, #0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	bfbc      	itt	lt
 800121a:	2200      	movlt	r2, #0
 800121c:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001220:	ec43 2b1b 	vmov	d11, r2, r3
 8001224:	e6db      	b.n	8000fde <__muldc3+0x316>
 8001226:	f1bb 0f00 	cmp.w	fp, #0
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	bfbc      	itt	lt
 8001234:	2200      	movlt	r2, #0
 8001236:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800123a:	4692      	mov	sl, r2
 800123c:	469b      	mov	fp, r3
 800123e:	e6c4      	b.n	8000fca <__muldc3+0x302>
 8001240:	ee1a 1a90 	vmov	r1, s21
 8001244:	2900      	cmp	r1, #0
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	bfbc      	itt	lt
 8001250:	2200      	movlt	r2, #0
 8001252:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001256:	ec43 2b1a 	vmov	d10, r2, r3
 800125a:	e6ad      	b.n	8000fb8 <__muldc3+0x2f0>
 800125c:	7fefffff 	.word	0x7fefffff

08001260 <__udivmoddi4>:
 8001260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	9d08      	ldr	r5, [sp, #32]
 8001266:	4604      	mov	r4, r0
 8001268:	468c      	mov	ip, r1
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 8083 	bne.w	8001376 <__udivmoddi4+0x116>
 8001270:	428a      	cmp	r2, r1
 8001272:	4617      	mov	r7, r2
 8001274:	d947      	bls.n	8001306 <__udivmoddi4+0xa6>
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b142      	cbz	r2, 800128e <__udivmoddi4+0x2e>
 800127c:	f1c2 0020 	rsb	r0, r2, #32
 8001280:	fa24 f000 	lsr.w	r0, r4, r0
 8001284:	4091      	lsls	r1, r2
 8001286:	4097      	lsls	r7, r2
 8001288:	ea40 0c01 	orr.w	ip, r0, r1
 800128c:	4094      	lsls	r4, r2
 800128e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001292:	0c23      	lsrs	r3, r4, #16
 8001294:	fbbc f6f8 	udiv	r6, ip, r8
 8001298:	fa1f fe87 	uxth.w	lr, r7
 800129c:	fb08 c116 	mls	r1, r8, r6, ip
 80012a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012a4:	fb06 f10e 	mul.w	r1, r6, lr
 80012a8:	4299      	cmp	r1, r3
 80012aa:	d909      	bls.n	80012c0 <__udivmoddi4+0x60>
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80012b2:	f080 8119 	bcs.w	80014e8 <__udivmoddi4+0x288>
 80012b6:	4299      	cmp	r1, r3
 80012b8:	f240 8116 	bls.w	80014e8 <__udivmoddi4+0x288>
 80012bc:	3e02      	subs	r6, #2
 80012be:	443b      	add	r3, r7
 80012c0:	1a5b      	subs	r3, r3, r1
 80012c2:	b2a4      	uxth	r4, r4
 80012c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80012c8:	fb08 3310 	mls	r3, r8, r0, r3
 80012cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80012d4:	45a6      	cmp	lr, r4
 80012d6:	d909      	bls.n	80012ec <__udivmoddi4+0x8c>
 80012d8:	193c      	adds	r4, r7, r4
 80012da:	f100 33ff 	add.w	r3, r0, #4294967295
 80012de:	f080 8105 	bcs.w	80014ec <__udivmoddi4+0x28c>
 80012e2:	45a6      	cmp	lr, r4
 80012e4:	f240 8102 	bls.w	80014ec <__udivmoddi4+0x28c>
 80012e8:	3802      	subs	r0, #2
 80012ea:	443c      	add	r4, r7
 80012ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012f0:	eba4 040e 	sub.w	r4, r4, lr
 80012f4:	2600      	movs	r6, #0
 80012f6:	b11d      	cbz	r5, 8001300 <__udivmoddi4+0xa0>
 80012f8:	40d4      	lsrs	r4, r2
 80012fa:	2300      	movs	r3, #0
 80012fc:	e9c5 4300 	strd	r4, r3, [r5]
 8001300:	4631      	mov	r1, r6
 8001302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001306:	b902      	cbnz	r2, 800130a <__udivmoddi4+0xaa>
 8001308:	deff      	udf	#255	; 0xff
 800130a:	fab2 f282 	clz	r2, r2
 800130e:	2a00      	cmp	r2, #0
 8001310:	d150      	bne.n	80013b4 <__udivmoddi4+0x154>
 8001312:	1bcb      	subs	r3, r1, r7
 8001314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001318:	fa1f f887 	uxth.w	r8, r7
 800131c:	2601      	movs	r6, #1
 800131e:	fbb3 fcfe 	udiv	ip, r3, lr
 8001322:	0c21      	lsrs	r1, r4, #16
 8001324:	fb0e 331c 	mls	r3, lr, ip, r3
 8001328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800132c:	fb08 f30c 	mul.w	r3, r8, ip
 8001330:	428b      	cmp	r3, r1
 8001332:	d907      	bls.n	8001344 <__udivmoddi4+0xe4>
 8001334:	1879      	adds	r1, r7, r1
 8001336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800133a:	d202      	bcs.n	8001342 <__udivmoddi4+0xe2>
 800133c:	428b      	cmp	r3, r1
 800133e:	f200 80e9 	bhi.w	8001514 <__udivmoddi4+0x2b4>
 8001342:	4684      	mov	ip, r0
 8001344:	1ac9      	subs	r1, r1, r3
 8001346:	b2a3      	uxth	r3, r4
 8001348:	fbb1 f0fe 	udiv	r0, r1, lr
 800134c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001354:	fb08 f800 	mul.w	r8, r8, r0
 8001358:	45a0      	cmp	r8, r4
 800135a:	d907      	bls.n	800136c <__udivmoddi4+0x10c>
 800135c:	193c      	adds	r4, r7, r4
 800135e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001362:	d202      	bcs.n	800136a <__udivmoddi4+0x10a>
 8001364:	45a0      	cmp	r8, r4
 8001366:	f200 80d9 	bhi.w	800151c <__udivmoddi4+0x2bc>
 800136a:	4618      	mov	r0, r3
 800136c:	eba4 0408 	sub.w	r4, r4, r8
 8001370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001374:	e7bf      	b.n	80012f6 <__udivmoddi4+0x96>
 8001376:	428b      	cmp	r3, r1
 8001378:	d909      	bls.n	800138e <__udivmoddi4+0x12e>
 800137a:	2d00      	cmp	r5, #0
 800137c:	f000 80b1 	beq.w	80014e2 <__udivmoddi4+0x282>
 8001380:	2600      	movs	r6, #0
 8001382:	e9c5 0100 	strd	r0, r1, [r5]
 8001386:	4630      	mov	r0, r6
 8001388:	4631      	mov	r1, r6
 800138a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800138e:	fab3 f683 	clz	r6, r3
 8001392:	2e00      	cmp	r6, #0
 8001394:	d14a      	bne.n	800142c <__udivmoddi4+0x1cc>
 8001396:	428b      	cmp	r3, r1
 8001398:	d302      	bcc.n	80013a0 <__udivmoddi4+0x140>
 800139a:	4282      	cmp	r2, r0
 800139c:	f200 80b8 	bhi.w	8001510 <__udivmoddi4+0x2b0>
 80013a0:	1a84      	subs	r4, r0, r2
 80013a2:	eb61 0103 	sbc.w	r1, r1, r3
 80013a6:	2001      	movs	r0, #1
 80013a8:	468c      	mov	ip, r1
 80013aa:	2d00      	cmp	r5, #0
 80013ac:	d0a8      	beq.n	8001300 <__udivmoddi4+0xa0>
 80013ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80013b2:	e7a5      	b.n	8001300 <__udivmoddi4+0xa0>
 80013b4:	f1c2 0320 	rsb	r3, r2, #32
 80013b8:	fa20 f603 	lsr.w	r6, r0, r3
 80013bc:	4097      	lsls	r7, r2
 80013be:	fa01 f002 	lsl.w	r0, r1, r2
 80013c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013c6:	40d9      	lsrs	r1, r3
 80013c8:	4330      	orrs	r0, r6
 80013ca:	0c03      	lsrs	r3, r0, #16
 80013cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80013d0:	fa1f f887 	uxth.w	r8, r7
 80013d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80013d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013dc:	fb06 f108 	mul.w	r1, r6, r8
 80013e0:	4299      	cmp	r1, r3
 80013e2:	fa04 f402 	lsl.w	r4, r4, r2
 80013e6:	d909      	bls.n	80013fc <__udivmoddi4+0x19c>
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80013ee:	f080 808d 	bcs.w	800150c <__udivmoddi4+0x2ac>
 80013f2:	4299      	cmp	r1, r3
 80013f4:	f240 808a 	bls.w	800150c <__udivmoddi4+0x2ac>
 80013f8:	3e02      	subs	r6, #2
 80013fa:	443b      	add	r3, r7
 80013fc:	1a5b      	subs	r3, r3, r1
 80013fe:	b281      	uxth	r1, r0
 8001400:	fbb3 f0fe 	udiv	r0, r3, lr
 8001404:	fb0e 3310 	mls	r3, lr, r0, r3
 8001408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800140c:	fb00 f308 	mul.w	r3, r0, r8
 8001410:	428b      	cmp	r3, r1
 8001412:	d907      	bls.n	8001424 <__udivmoddi4+0x1c4>
 8001414:	1879      	adds	r1, r7, r1
 8001416:	f100 3cff 	add.w	ip, r0, #4294967295
 800141a:	d273      	bcs.n	8001504 <__udivmoddi4+0x2a4>
 800141c:	428b      	cmp	r3, r1
 800141e:	d971      	bls.n	8001504 <__udivmoddi4+0x2a4>
 8001420:	3802      	subs	r0, #2
 8001422:	4439      	add	r1, r7
 8001424:	1acb      	subs	r3, r1, r3
 8001426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800142a:	e778      	b.n	800131e <__udivmoddi4+0xbe>
 800142c:	f1c6 0c20 	rsb	ip, r6, #32
 8001430:	fa03 f406 	lsl.w	r4, r3, r6
 8001434:	fa22 f30c 	lsr.w	r3, r2, ip
 8001438:	431c      	orrs	r4, r3
 800143a:	fa20 f70c 	lsr.w	r7, r0, ip
 800143e:	fa01 f306 	lsl.w	r3, r1, r6
 8001442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001446:	fa21 f10c 	lsr.w	r1, r1, ip
 800144a:	431f      	orrs	r7, r3
 800144c:	0c3b      	lsrs	r3, r7, #16
 800144e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001452:	fa1f f884 	uxth.w	r8, r4
 8001456:	fb0e 1119 	mls	r1, lr, r9, r1
 800145a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800145e:	fb09 fa08 	mul.w	sl, r9, r8
 8001462:	458a      	cmp	sl, r1
 8001464:	fa02 f206 	lsl.w	r2, r2, r6
 8001468:	fa00 f306 	lsl.w	r3, r0, r6
 800146c:	d908      	bls.n	8001480 <__udivmoddi4+0x220>
 800146e:	1861      	adds	r1, r4, r1
 8001470:	f109 30ff 	add.w	r0, r9, #4294967295
 8001474:	d248      	bcs.n	8001508 <__udivmoddi4+0x2a8>
 8001476:	458a      	cmp	sl, r1
 8001478:	d946      	bls.n	8001508 <__udivmoddi4+0x2a8>
 800147a:	f1a9 0902 	sub.w	r9, r9, #2
 800147e:	4421      	add	r1, r4
 8001480:	eba1 010a 	sub.w	r1, r1, sl
 8001484:	b2bf      	uxth	r7, r7
 8001486:	fbb1 f0fe 	udiv	r0, r1, lr
 800148a:	fb0e 1110 	mls	r1, lr, r0, r1
 800148e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001492:	fb00 f808 	mul.w	r8, r0, r8
 8001496:	45b8      	cmp	r8, r7
 8001498:	d907      	bls.n	80014aa <__udivmoddi4+0x24a>
 800149a:	19e7      	adds	r7, r4, r7
 800149c:	f100 31ff 	add.w	r1, r0, #4294967295
 80014a0:	d22e      	bcs.n	8001500 <__udivmoddi4+0x2a0>
 80014a2:	45b8      	cmp	r8, r7
 80014a4:	d92c      	bls.n	8001500 <__udivmoddi4+0x2a0>
 80014a6:	3802      	subs	r0, #2
 80014a8:	4427      	add	r7, r4
 80014aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014ae:	eba7 0708 	sub.w	r7, r7, r8
 80014b2:	fba0 8902 	umull	r8, r9, r0, r2
 80014b6:	454f      	cmp	r7, r9
 80014b8:	46c6      	mov	lr, r8
 80014ba:	4649      	mov	r1, r9
 80014bc:	d31a      	bcc.n	80014f4 <__udivmoddi4+0x294>
 80014be:	d017      	beq.n	80014f0 <__udivmoddi4+0x290>
 80014c0:	b15d      	cbz	r5, 80014da <__udivmoddi4+0x27a>
 80014c2:	ebb3 020e 	subs.w	r2, r3, lr
 80014c6:	eb67 0701 	sbc.w	r7, r7, r1
 80014ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80014ce:	40f2      	lsrs	r2, r6
 80014d0:	ea4c 0202 	orr.w	r2, ip, r2
 80014d4:	40f7      	lsrs	r7, r6
 80014d6:	e9c5 2700 	strd	r2, r7, [r5]
 80014da:	2600      	movs	r6, #0
 80014dc:	4631      	mov	r1, r6
 80014de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014e2:	462e      	mov	r6, r5
 80014e4:	4628      	mov	r0, r5
 80014e6:	e70b      	b.n	8001300 <__udivmoddi4+0xa0>
 80014e8:	4606      	mov	r6, r0
 80014ea:	e6e9      	b.n	80012c0 <__udivmoddi4+0x60>
 80014ec:	4618      	mov	r0, r3
 80014ee:	e6fd      	b.n	80012ec <__udivmoddi4+0x8c>
 80014f0:	4543      	cmp	r3, r8
 80014f2:	d2e5      	bcs.n	80014c0 <__udivmoddi4+0x260>
 80014f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80014f8:	eb69 0104 	sbc.w	r1, r9, r4
 80014fc:	3801      	subs	r0, #1
 80014fe:	e7df      	b.n	80014c0 <__udivmoddi4+0x260>
 8001500:	4608      	mov	r0, r1
 8001502:	e7d2      	b.n	80014aa <__udivmoddi4+0x24a>
 8001504:	4660      	mov	r0, ip
 8001506:	e78d      	b.n	8001424 <__udivmoddi4+0x1c4>
 8001508:	4681      	mov	r9, r0
 800150a:	e7b9      	b.n	8001480 <__udivmoddi4+0x220>
 800150c:	4666      	mov	r6, ip
 800150e:	e775      	b.n	80013fc <__udivmoddi4+0x19c>
 8001510:	4630      	mov	r0, r6
 8001512:	e74a      	b.n	80013aa <__udivmoddi4+0x14a>
 8001514:	f1ac 0c02 	sub.w	ip, ip, #2
 8001518:	4439      	add	r1, r7
 800151a:	e713      	b.n	8001344 <__udivmoddi4+0xe4>
 800151c:	3802      	subs	r0, #2
 800151e:	443c      	add	r4, r7
 8001520:	e724      	b.n	800136c <__udivmoddi4+0x10c>
 8001522:	bf00      	nop

08001524 <__aeabi_idiv0>:
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spRXPositionMutex */
  spRXPositionMutexHandle = osMutexNew(&spRXPositionMutex_attributes);
 800152c:	4818      	ldr	r0, [pc, #96]	; (8001590 <MX_FREERTOS_Init+0x68>)
 800152e:	f005 fe15 	bl	800715c <osMutexNew>
 8001532:	4603      	mov	r3, r0
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <MX_FREERTOS_Init+0x6c>)
 8001536:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of my22HzTimer */
  my22HzTimerHandle = osTimerNew(my22HzTimerCallback, osTimerPeriodic, NULL, &my22HzTimer_attributes);
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_FREERTOS_Init+0x70>)
 800153a:	2200      	movs	r2, #0
 800153c:	2101      	movs	r1, #1
 800153e:	4817      	ldr	r0, [pc, #92]	; (800159c <MX_FREERTOS_Init+0x74>)
 8001540:	f005 fd62 	bl	8007008 <osTimerNew>
 8001544:	4603      	mov	r3, r0
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <MX_FREERTOS_Init+0x78>)
 8001548:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osTimerStart(my22HzTimerHandle, (uint16_t) (DATA_SAMPLE_PERIOD * 1000));
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_FREERTOS_Init+0x78>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fdd4 	bl	8007100 <osTimerStart>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of identifyMagneti */
  identifyMagnetiHandle = osThreadNew(startidentifyMagneticFieldTask, NULL, &identifyMagneti_attributes);
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_FREERTOS_Init+0x7c>)
 800155a:	2100      	movs	r1, #0
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <MX_FREERTOS_Init+0x80>)
 800155e:	f005 fbdd 	bl	8006d1c <osThreadNew>
 8001562:	4603      	mov	r3, r0
 8001564:	4a11      	ldr	r2, [pc, #68]	; (80015ac <MX_FREERTOS_Init+0x84>)
 8001566:	6013      	str	r3, [r2, #0]

  /* creation of estimatePositio */
  estimatePositioHandle = osThreadNew(startEstimatePosition, NULL, &estimatePositio_attributes);
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <MX_FREERTOS_Init+0x88>)
 800156a:	2100      	movs	r1, #0
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_FREERTOS_Init+0x8c>)
 800156e:	f005 fbd5 	bl	8006d1c <osThreadNew>
 8001572:	4603      	mov	r3, r0
 8001574:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <MX_FREERTOS_Init+0x90>)
 8001576:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(startSendData, NULL, &sendData_attributes);
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <MX_FREERTOS_Init+0x94>)
 800157a:	2100      	movs	r1, #0
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <MX_FREERTOS_Init+0x98>)
 800157e:	f005 fbcd 	bl	8006d1c <osThreadNew>
 8001582:	4603      	mov	r3, r0
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <MX_FREERTOS_Init+0x9c>)
 8001586:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	initMagnetiFieldISR();
 8001588:	f000 fe7c 	bl	8002284 <initMagnetiFieldISR>

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800fd84 	.word	0x0800fd84
 8001594:	200071b0 	.word	0x200071b0
 8001598:	0800fd74 	.word	0x0800fd74
 800159c:	08001709 	.word	0x08001709
 80015a0:	200078a4 	.word	0x200078a4
 80015a4:	0800fd08 	.word	0x0800fd08
 80015a8:	080015c9 	.word	0x080015c9
 80015ac:	200071b8 	.word	0x200071b8
 80015b0:	0800fd2c 	.word	0x0800fd2c
 80015b4:	0800164d 	.word	0x0800164d
 80015b8:	200071b4 	.word	0x200071b4
 80015bc:	0800fd50 	.word	0x0800fd50
 80015c0:	080016ad 	.word	0x080016ad
 80015c4:	20008688 	.word	0x20008688

080015c8 <startidentifyMagneticFieldTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startidentifyMagneticFieldTask */
void startidentifyMagneticFieldTask(void *argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startidentifyMagneticFieldTask */

	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	2100      	movs	r1, #0
 80015d6:	2001      	movs	r0, #1
 80015d8:	f005 fc80 	bl	8006edc <osThreadFlagsWait>
		stopMagnetiFieldISR();
 80015dc:	f000 fe5c 	bl	8002298 <stopMagnetiFieldISR>

		buffer_index_to_retrive_data = (buffer_index + 1) % 2;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <startidentifyMagneticFieldTask+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	bfb8      	it	lt
 80015ee:	425b      	neglt	r3, r3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <startidentifyMagneticFieldTask+0x70>)
 80015f4:	701a      	strb	r2, [r3, #0]

		identifyMagneticField(dc_mf_x[buffer_index_to_retrive_data],
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <startidentifyMagneticFieldTask+0x70>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001600:	fb03 f302 	mul.w	r3, r3, r2
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <startidentifyMagneticFieldTask+0x74>)
 8001606:	1898      	adds	r0, r3, r2
				dc_mf_y[buffer_index_to_retrive_data],
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <startidentifyMagneticFieldTask+0x70>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001612:	fb03 f302 	mul.w	r3, r3, r2
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <startidentifyMagneticFieldTask+0x78>)
 8001618:	1899      	adds	r1, r3, r2
				dc_mf_z[buffer_index_to_retrive_data], mf_nodes);
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <startidentifyMagneticFieldTask+0x70>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001624:	fb03 f302 	mul.w	r3, r3, r2
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <startidentifyMagneticFieldTask+0x7c>)
 800162a:	441a      	add	r2, r3
		identifyMagneticField(dc_mf_x[buffer_index_to_retrive_data],
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <startidentifyMagneticFieldTask+0x80>)
 800162e:	f000 fc86 	bl	8001f3e <identifyMagneticField>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001632:	e7cd      	b.n	80015d0 <startidentifyMagneticFieldTask+0x8>
 8001634:	20000ad0 	.word	0x20000ad0
 8001638:	200078a0 	.word	0x200078a0
 800163c:	20000ad8 	.word	0x20000ad8
 8001640:	20001898 	.word	0x20001898
 8001644:	20002658 	.word	0x20002658
 8001648:	20000000 	.word	0x20000000

0800164c <startEstimatePosition>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startEstimatePosition */
void startEstimatePosition(void *argument)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEstimatePosition */

	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	2100      	movs	r1, #0
 800165a:	2001      	movs	r0, #1
 800165c:	f005 fc3e 	bl	8006edc <osThreadFlagsWait>
		if (osMutexAcquire(spRXPositionMutexHandle, osWaitForever) == osOK) {
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <startEstimatePosition+0x54>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fdfd 	bl	8007268 <osMutexAcquire>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ef      	bne.n	8001654 <startEstimatePosition+0x8>
			sp_rx_position = estimatePoisition(mf_nodes);
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <startEstimatePosition+0x58>)
 8001676:	f000 fccf 	bl	8002018 <estimatePoisition>
 800167a:	eef0 6a40 	vmov.f32	s13, s0
 800167e:	eeb0 7a60 	vmov.f32	s14, s1
 8001682:	eef0 7a41 	vmov.f32	s15, s2
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <startEstimatePosition+0x5c>)
 8001688:	edc3 6a00 	vstr	s13, [r3]
 800168c:	ed83 7a01 	vstr	s14, [r3, #4]
 8001690:	edc3 7a02 	vstr	s15, [r3, #8]

			osMutexRelease(spRXPositionMutexHandle);
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <startEstimatePosition+0x54>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f005 fe30 	bl	80072fe <osMutexRelease>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800169e:	e7d9      	b.n	8001654 <startEstimatePosition+0x8>
 80016a0:	200071b0 	.word	0x200071b0
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000ac4 	.word	0x20000ac4

080016ac <startSendData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSendData */
void startSendData(void *argument)
{
 80016ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af04      	add	r7, sp, #16
 80016b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSendData */
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	2100      	movs	r1, #0
 80016bc:	2001      	movs	r0, #1
 80016be:	f005 fc0d 	bl	8006edc <osThreadFlagsWait>

		printf("EsPos: x=%.2f y=%.2f z=%.2f\r\n", sp_rx_position.x,
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <startSendData+0x54>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff66 	bl	8000598 <__aeabi_f2d>
 80016cc:	4680      	mov	r8, r0
 80016ce:	4689      	mov	r9, r1
				sp_rx_position.y, sp_rx_position.z);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <startSendData+0x54>)
 80016d2:	685b      	ldr	r3, [r3, #4]
		printf("EsPos: x=%.2f y=%.2f z=%.2f\r\n", sp_rx_position.x,
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff5f 	bl	8000598 <__aeabi_f2d>
 80016da:	4604      	mov	r4, r0
 80016dc:	460d      	mov	r5, r1
				sp_rx_position.y, sp_rx_position.z);
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <startSendData+0x54>)
 80016e0:	689b      	ldr	r3, [r3, #8]
		printf("EsPos: x=%.2f y=%.2f z=%.2f\r\n", sp_rx_position.x,
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff58 	bl	8000598 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016f0:	e9cd 4500 	strd	r4, r5, [sp]
 80016f4:	4642      	mov	r2, r8
 80016f6:	464b      	mov	r3, r9
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <startSendData+0x58>)
 80016fa:	f009 fe65 	bl	800b3c8 <iprintf>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80016fe:	e7da      	b.n	80016b6 <startSendData+0xa>
 8001700:	20000ac4 	.word	0x20000ac4
 8001704:	0800fc6c 	.word	0x0800fc6c

08001708 <my22HzTimerCallback>:
  /* USER CODE END startSendData */
}

/* my22HzTimerCallback function */
void my22HzTimerCallback(void *argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN my22HzTimerCallback */
	osThreadFlagsSet(estimatePositioHandle, 0x0001U);
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <my22HzTimerCallback+0x28>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	4618      	mov	r0, r3
 8001718:	f005 fb92 	bl	8006e40 <osThreadFlagsSet>
	osThreadFlagsSet(sendDataHandle, 0x0001U);
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <my22HzTimerCallback+0x2c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	4618      	mov	r0, r3
 8001724:	f005 fb8c 	bl	8006e40 <osThreadFlagsSet>
  /* USER CODE END my22HzTimerCallback */
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200071b4 	.word	0x200071b4
 8001734:	20008688 	.word	0x20008688

08001738 <sampleMagneticFieldISR>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void sampleMagneticFieldISR(I2C_HandleTypeDef *i2c) {
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	MagneticField mf_sample;

	if (ui16_sample_index == SAMPLE_SIZE) {
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <sampleMagneticFieldISR+0x164>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	2b6e      	cmp	r3, #110	; 0x6e
 8001746:	d113      	bne.n	8001770 <sampleMagneticFieldISR+0x38>
		buffer_index = (buffer_index + 1) % 2;
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	bfb8      	it	lt
 8001756:	425b      	neglt	r3, r3
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 800175c:	701a      	strb	r2, [r3, #0]
		ui16_sample_index = 0;
 800175e:	4b4f      	ldr	r3, [pc, #316]	; (800189c <sampleMagneticFieldISR+0x164>)
 8001760:	2200      	movs	r2, #0
 8001762:	801a      	strh	r2, [r3, #0]

		osThreadFlagsSet(identifyMagnetiHandle, 0x0001U);
 8001764:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <sampleMagneticFieldISR+0x16c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f005 fb68 	bl	8006e40 <osThreadFlagsSet>
	}

	mf_sample = sampleMagneticField(readMagnetometerData, i2c);
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	484d      	ldr	r0, [pc, #308]	; (80018a8 <sampleMagneticFieldISR+0x170>)
 8001774:	f000 fba4 	bl	8001ec0 <sampleMagneticField>
 8001778:	eeb0 5a40 	vmov.f32	s10, s0
 800177c:	eef0 5a60 	vmov.f32	s11, s1
 8001780:	eeb0 6a41 	vmov.f32	s12, s2
 8001784:	eef0 6a61 	vmov.f32	s13, s3
 8001788:	eeb0 7a42 	vmov.f32	s14, s4
 800178c:	eef0 7a62 	vmov.f32	s15, s5
 8001790:	ed87 5b02 	vstr	d5, [r7, #8]
 8001794:	ed87 6b04 	vstr	d6, [r7, #16]
 8001798:	ed87 7b06 	vstr	d7, [r7, #24]

	d_mf_x_samples[buffer_index][ui16_sample_index] = mf_sample.x;
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461d      	mov	r5, r3
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <sampleMagneticFieldISR+0x164>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	461c      	mov	r4, r3
 80017a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ac:	483f      	ldr	r0, [pc, #252]	; (80018ac <sampleMagneticFieldISR+0x174>)
 80017ae:	216e      	movs	r1, #110	; 0x6e
 80017b0:	fb01 f105 	mul.w	r1, r1, r5
 80017b4:	4421      	add	r1, r4
 80017b6:	00c9      	lsls	r1, r1, #3
 80017b8:	4401      	add	r1, r0
 80017ba:	e9c1 2300 	strd	r2, r3, [r1]
	d_mf_y_samples[buffer_index][ui16_sample_index] = mf_sample.y;
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461d      	mov	r5, r3
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <sampleMagneticFieldISR+0x164>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	461c      	mov	r4, r3
 80017ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ce:	4838      	ldr	r0, [pc, #224]	; (80018b0 <sampleMagneticFieldISR+0x178>)
 80017d0:	216e      	movs	r1, #110	; 0x6e
 80017d2:	fb01 f105 	mul.w	r1, r1, r5
 80017d6:	4421      	add	r1, r4
 80017d8:	00c9      	lsls	r1, r1, #3
 80017da:	4401      	add	r1, r0
 80017dc:	e9c1 2300 	strd	r2, r3, [r1]
	d_mf_z_samples[buffer_index][ui16_sample_index] = mf_sample.z;
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461d      	mov	r5, r3
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <sampleMagneticFieldISR+0x164>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461c      	mov	r4, r3
 80017ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f0:	4830      	ldr	r0, [pc, #192]	; (80018b4 <sampleMagneticFieldISR+0x17c>)
 80017f2:	216e      	movs	r1, #110	; 0x6e
 80017f4:	fb01 f105 	mul.w	r1, r1, r5
 80017f8:	4421      	add	r1, r4
 80017fa:	00c9      	lsls	r1, r1, #3
 80017fc:	4401      	add	r1, r0
 80017fe:	e9c1 2300 	strd	r2, r3, [r1]

	computeDFT(mf_sample.x, dc_mf_x[buffer_index], (int) ui16_sample_index,
 8001802:	ed97 7b02 	vldr	d7, [r7, #8]
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001810:	fb03 f302 	mul.w	r3, r3, r2
 8001814:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <sampleMagneticFieldISR+0x180>)
 8001816:	4413      	add	r3, r2
 8001818:	4a20      	ldr	r2, [pc, #128]	; (800189c <sampleMagneticFieldISR+0x164>)
 800181a:	8812      	ldrh	r2, [r2, #0]
 800181c:	4611      	mov	r1, r2
 800181e:	226e      	movs	r2, #110	; 0x6e
 8001820:	4618      	mov	r0, r3
 8001822:	eeb0 0a47 	vmov.f32	s0, s14
 8001826:	eef0 0a67 	vmov.f32	s1, s15
 800182a:	f000 f84d 	bl	80018c8 <computeDFT>
			SAMPLE_SIZE);
	computeDFT(mf_sample.y, dc_mf_y[buffer_index], (int) ui16_sample_index,
 800182e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 800183c:	fb03 f302 	mul.w	r3, r3, r2
 8001840:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <sampleMagneticFieldISR+0x184>)
 8001842:	4413      	add	r3, r2
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <sampleMagneticFieldISR+0x164>)
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	4611      	mov	r1, r2
 800184a:	226e      	movs	r2, #110	; 0x6e
 800184c:	4618      	mov	r0, r3
 800184e:	eeb0 0a47 	vmov.f32	s0, s14
 8001852:	eef0 0a67 	vmov.f32	s1, s15
 8001856:	f000 f837 	bl	80018c8 <computeDFT>
			SAMPLE_SIZE);
	computeDFT(mf_sample.z, dc_mf_z[buffer_index], (int) ui16_sample_index,
 800185a:	ed97 7b06 	vldr	d7, [r7, #24]
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <sampleMagneticFieldISR+0x168>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001868:	fb03 f302 	mul.w	r3, r3, r2
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <sampleMagneticFieldISR+0x188>)
 800186e:	4413      	add	r3, r2
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <sampleMagneticFieldISR+0x164>)
 8001872:	8812      	ldrh	r2, [r2, #0]
 8001874:	4611      	mov	r1, r2
 8001876:	226e      	movs	r2, #110	; 0x6e
 8001878:	4618      	mov	r0, r3
 800187a:	eeb0 0a47 	vmov.f32	s0, s14
 800187e:	eef0 0a67 	vmov.f32	s1, s15
 8001882:	f000 f821 	bl	80018c8 <computeDFT>
			SAMPLE_SIZE);

	ui16_sample_index++;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <sampleMagneticFieldISR+0x164>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b03      	ldr	r3, [pc, #12]	; (800189c <sampleMagneticFieldISR+0x164>)
 8001890:	801a      	strh	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	20003418 	.word	0x20003418
 80018a0:	20000ad0 	.word	0x20000ad0
 80018a4:	200071b8 	.word	0x200071b8
 80018a8:	08002569 	.word	0x08002569
 80018ac:	200071c0 	.word	0x200071c0
 80018b0:	200078b8 	.word	0x200078b8
 80018b4:	20007f98 	.word	0x20007f98
 80018b8:	20000ad8 	.word	0x20000ad8
 80018bc:	20001898 	.word	0x20001898
 80018c0:	20002658 	.word	0x20002658
 80018c4:	00000000 	.word	0x00000000

080018c8 <computeDFT>:
#include "dft.h"

void computeDFT(const double d_sample, double complex output[restrict], int current_index, size_t n) {
 80018c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018cc:	ed2d 8b04 	vpush	{d8-d9}
 80018d0:	b09b      	sub	sp, #108	; 0x6c
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80018d8:	6378      	str	r0, [r7, #52]	; 0x34
 80018da:	6339      	str	r1, [r7, #48]	; 0x30
 80018dc:	62fa      	str	r2, [r7, #44]	; 0x2c
	double complex dc_angle;

	for (int i = 0; i < current_index; i++) {
 80018de:	2300      	movs	r3, #0
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54
 80018e2:	e0df      	b.n	8001aa4 <computeDFT+0x1dc>
		dc_angle = 2 * I * M_PI * current_index * i / n;
 80018e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018e6:	f7fe fe45 	bl	8000574 <__aeabi_i2d>
 80018ea:	4680      	mov	r8, r0
 80018ec:	4689      	mov	r9, r1
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	4640      	mov	r0, r8
 80018f8:	4649      	mov	r1, r9
 80018fa:	f7fe fea5 	bl	8000648 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	461d      	mov	r5, r3
 8001906:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001908:	f7fe fe34 	bl	8000574 <__aeabi_i2d>
 800190c:	4682      	mov	sl, r0
 800190e:	468b      	mov	fp, r1
 8001910:	4622      	mov	r2, r4
 8001912:	462b      	mov	r3, r5
 8001914:	4650      	mov	r0, sl
 8001916:	4659      	mov	r1, fp
 8001918:	f7fe fe96 	bl	8000648 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	e9c7 2300 	strd	r2, r3, [r7]
 8001924:	a3e2      	add	r3, pc, #904	; (adr r3, 8001cb0 <computeDFT+0x3e8>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	4640      	mov	r0, r8
 800192c:	4649      	mov	r1, r9
 800192e:	f7fe fe8b 	bl	8000648 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4650      	mov	r0, sl
 8001938:	4659      	mov	r1, fp
 800193a:	f7fe fe85 	bl	8000648 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4690      	mov	r8, r2
 8001944:	4699      	mov	r9, r3
 8001946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001948:	f7fe fe04 	bl	8000554 <__aeabi_ui2d>
 800194c:	4604      	mov	r4, r0
 800194e:	460d      	mov	r5, r1
 8001950:	4622      	mov	r2, r4
 8001952:	462b      	mov	r3, r5
 8001954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001958:	f7fe ffa0 	bl	800089c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001964:	4622      	mov	r2, r4
 8001966:	462b      	mov	r3, r5
 8001968:	4640      	mov	r0, r8
 800196a:	4649      	mov	r1, r9
 800196c:	f7fe ff96 	bl	800089c <__aeabi_ddiv>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001978:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800197c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001980:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001984:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		output[i] += 2 * (d_sample * cexp( - dc_angle)) / n;
 8001988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800198e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800199a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a8:	ec41 0b16 	vmov	d6, r0, r1
 80019ac:	ec43 2b17 	vmov	d7, r2, r3
 80019b0:	eeb0 0a46 	vmov.f32	s0, s12
 80019b4:	eef0 0a66 	vmov.f32	s1, s13
 80019b8:	eeb0 1a47 	vmov.f32	s2, s14
 80019bc:	eef0 1a67 	vmov.f32	s3, s15
 80019c0:	f00b fd29 	bl	800d416 <cexp>
 80019c4:	eeb0 6a40 	vmov.f32	s12, s0
 80019c8:	eef0 6a60 	vmov.f32	s13, s1
 80019cc:	eeb0 7a41 	vmov.f32	s14, s2
 80019d0:	eef0 7a61 	vmov.f32	s15, s3
 80019d4:	ec51 0b16 	vmov	r0, r1, d6
 80019d8:	ec55 4b17 	vmov	r4, r5, d7
 80019dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019e0:	f7fe fe32 	bl	8000648 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4690      	mov	r8, r2
 80019ea:	4699      	mov	r9, r3
 80019ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019f0:	4620      	mov	r0, r4
 80019f2:	4629      	mov	r1, r5
 80019f4:	f7fe fe28 	bl	8000648 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	4642      	mov	r2, r8
 8001a02:	464b      	mov	r3, r9
 8001a04:	4640      	mov	r0, r8
 8001a06:	4649      	mov	r1, r9
 8001a08:	f7fe fc68 	bl	80002dc <__adddf3>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4690      	mov	r8, r2
 8001a12:	4699      	mov	r9, r3
 8001a14:	4622      	mov	r2, r4
 8001a16:	462b      	mov	r3, r5
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fc5e 	bl	80002dc <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4692      	mov	sl, r2
 8001a26:	469b      	mov	fp, r3
 8001a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a2a:	f7fe fd93 	bl	8000554 <__aeabi_ui2d>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	460d      	mov	r5, r1
 8001a32:	4622      	mov	r2, r4
 8001a34:	462b      	mov	r3, r5
 8001a36:	4640      	mov	r0, r8
 8001a38:	4649      	mov	r1, r9
 8001a3a:	f7fe ff2f 	bl	800089c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	e9c7 2300 	strd	r2, r3, [r7]
 8001a46:	4622      	mov	r2, r4
 8001a48:	462b      	mov	r3, r5
 8001a4a:	4650      	mov	r0, sl
 8001a4c:	4659      	mov	r1, fp
 8001a4e:	f7fe ff25 	bl	800089c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4692      	mov	sl, r2
 8001a58:	469b      	mov	fp, r3
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a60:	4413      	add	r3, r2
 8001a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a66:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6c:	011a      	lsls	r2, r3, #4
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a70:	189e      	adds	r6, r3, r2
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a7a:	f7fe fc2f 	bl	80002dc <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	4642      	mov	r2, r8
 8001a88:	464b      	mov	r3, r9
 8001a8a:	4650      	mov	r0, sl
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	f7fe fc25 	bl	80002dc <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9c6 4500 	strd	r4, r5, [r6]
 8001a9a:	e9c6 2302 	strd	r2, r3, [r6, #8]
	for (int i = 0; i < current_index; i++) {
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8001aa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f6ff af1b 	blt.w	80018e4 <computeDFT+0x1c>
	}

	for (int i = 0; i < current_index; i++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8001ab2:	e0ed      	b.n	8001c90 <computeDFT+0x3c8>
		dc_angle = 2 * I * M_PI * current_index * i / n;
 8001ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ab6:	f7fe fd5d 	bl	8000574 <__aeabi_i2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fdbd 	bl	8000648 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	469b      	mov	fp, r3
 8001ad6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ad8:	f7fe fd4c 	bl	8000574 <__aeabi_i2d>
 8001adc:	4680      	mov	r8, r0
 8001ade:	4689      	mov	r9, r1
 8001ae0:	4652      	mov	r2, sl
 8001ae2:	465b      	mov	r3, fp
 8001ae4:	4640      	mov	r0, r8
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	f7fe fdae 	bl	8000648 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4692      	mov	sl, r2
 8001af2:	469b      	mov	fp, r3
 8001af4:	a36e      	add	r3, pc, #440	; (adr r3, 8001cb0 <computeDFT+0x3e8>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f7fe fda3 	bl	8000648 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4640      	mov	r0, r8
 8001b08:	4649      	mov	r1, r9
 8001b0a:	f7fe fd9d 	bl	8000648 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4690      	mov	r8, r2
 8001b14:	4699      	mov	r9, r3
 8001b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_ui2d>
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	460d      	mov	r5, r1
 8001b20:	4622      	mov	r2, r4
 8001b22:	462b      	mov	r3, r5
 8001b24:	4650      	mov	r0, sl
 8001b26:	4659      	mov	r1, fp
 8001b28:	f7fe feb8 	bl	800089c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001b34:	4622      	mov	r2, r4
 8001b36:	462b      	mov	r3, r5
 8001b38:	4640      	mov	r0, r8
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	f7fe feae 	bl	800089c <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001b48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b50:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001b54:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		output[current_index] += 2 * (output[i] * cexp( - dc_angle)) / n;
 8001b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b5e:	4413      	add	r3, r2
 8001b60:	ed93 8b00 	vldr	d8, [r3]
 8001b64:	ed93 9b02 	vldr	d9, [r3, #8]
 8001b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
 8001b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b88:	ec41 0b16 	vmov	d6, r0, r1
 8001b8c:	ec43 2b17 	vmov	d7, r2, r3
 8001b90:	eeb0 0a46 	vmov.f32	s0, s12
 8001b94:	eef0 0a66 	vmov.f32	s1, s13
 8001b98:	eeb0 1a47 	vmov.f32	s2, s14
 8001b9c:	eef0 1a67 	vmov.f32	s3, s15
 8001ba0:	f00b fc39 	bl	800d416 <cexp>
 8001ba4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ba8:	eef0 7a60 	vmov.f32	s15, s1
 8001bac:	eeb0 6a41 	vmov.f32	s12, s2
 8001bb0:	eef0 6a61 	vmov.f32	s13, s3
 8001bb4:	eeb0 3a46 	vmov.f32	s6, s12
 8001bb8:	eef0 3a66 	vmov.f32	s7, s13
 8001bbc:	eeb0 2a47 	vmov.f32	s4, s14
 8001bc0:	eef0 2a67 	vmov.f32	s5, s15
 8001bc4:	eeb0 1a49 	vmov.f32	s2, s18
 8001bc8:	eef0 1a69 	vmov.f32	s3, s19
 8001bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8001bd0:	eef0 0a68 	vmov.f32	s1, s17
 8001bd4:	f7ff f878 	bl	8000cc8 <__muldc3>
 8001bd8:	eeb0 6a40 	vmov.f32	s12, s0
 8001bdc:	eef0 6a60 	vmov.f32	s13, s1
 8001be0:	eeb0 7a41 	vmov.f32	s14, s2
 8001be4:	eef0 7a61 	vmov.f32	s15, s3
 8001be8:	ec51 0b16 	vmov	r0, r1, d6
 8001bec:	ec55 4b17 	vmov	r4, r5, d7
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	f7fe fb72 	bl	80002dc <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4692      	mov	sl, r2
 8001bfe:	469b      	mov	fp, r3
 8001c00:	4622      	mov	r2, r4
 8001c02:	462b      	mov	r3, r5
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe fb68 	bl	80002dc <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4690      	mov	r8, r2
 8001c12:	4699      	mov	r9, r3
 8001c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c16:	f7fe fc9d 	bl	8000554 <__aeabi_ui2d>
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	460d      	mov	r5, r1
 8001c1e:	4622      	mov	r2, r4
 8001c20:	462b      	mov	r3, r5
 8001c22:	4650      	mov	r0, sl
 8001c24:	4659      	mov	r1, fp
 8001c26:	f7fe fe39 	bl	800089c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001c32:	4622      	mov	r2, r4
 8001c34:	462b      	mov	r3, r5
 8001c36:	4640      	mov	r0, r8
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fe2f 	bl	800089c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4615      	mov	r5, r2
 8001c44:	461e      	mov	r6, r3
 8001c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c4c:	4413      	add	r3, r2
 8001c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c52:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c5c:	18d4      	adds	r4, r2, r3
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c66:	f7fe fb39 	bl	80002dc <__adddf3>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4690      	mov	r8, r2
 8001c70:	4699      	mov	r9, r3
 8001c72:	4652      	mov	r2, sl
 8001c74:	465b      	mov	r3, fp
 8001c76:	4628      	mov	r0, r5
 8001c78:	4631      	mov	r1, r6
 8001c7a:	f7fe fb2f 	bl	80002dc <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	e9c4 8900 	strd	r8, r9, [r4]
 8001c86:	e9c4 2302 	strd	r2, r3, [r4, #8]
	for (int i = 0; i < current_index; i++) {
 8001c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8001c90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f6ff af0d 	blt.w	8001ab4 <computeDFT+0x1ec>
	}
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	376c      	adds	r7, #108	; 0x6c
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	ecbd 8b04 	vpop	{d8-d9}
 8001ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
 8001cb0:	54442d18 	.word	0x54442d18
 8001cb4:	401921fb 	.word	0x401921fb

08001cb8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a36      	ldr	r2, [pc, #216]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <MX_GPIO_Init+0xf4>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2120      	movs	r1, #32
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d36:	f001 faa5 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4819      	ldr	r0, [pc, #100]	; (8001db4 <MX_GPIO_Init+0xfc>)
 8001d50:	f001 f916 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001d54:	230c      	movs	r3, #12
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d64:	230c      	movs	r3, #12
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f001 f905 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001d76:	2320      	movs	r3, #32
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d90:	f001 f8f6 	bl	8002f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2105      	movs	r1, #5
 8001d98:	2028      	movs	r0, #40	; 0x28
 8001d9a:	f001 f809 	bl	8002db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d9e:	2028      	movs	r0, #40	; 0x28
 8001da0:	f001 f820 	bl	8002de4 <HAL_NVIC_EnableIRQ>

}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	10110000 	.word	0x10110000
 8001db4:	48000800 	.word	0x48000800

08001db8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <MX_I2C1_Init+0x78>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <MX_I2C1_Init+0x7c>)
 8001dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df2:	480e      	ldr	r0, [pc, #56]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001df4:	f001 fa81 	bl	80032fa <HAL_I2C_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dfe:	f000 fb0d 	bl	800241c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e02:	2100      	movs	r1, #0
 8001e04:	4809      	ldr	r0, [pc, #36]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001e06:	f001 ffd9 	bl	8003dbc <HAL_I2CEx_ConfigAnalogFilter>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e10:	f000 fb04 	bl	800241c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e14:	2100      	movs	r1, #0
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_I2C1_Init+0x74>)
 8001e18:	f002 f81b 	bl	8003e52 <HAL_I2CEx_ConfigDigitalFilter>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e22:	f000 fafb 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200090e0 	.word	0x200090e0
 8001e30:	40005400 	.word	0x40005400
 8001e34:	30a0a7fb 	.word	0x30a0a7fb

08001e38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_I2C_MspInit+0x7c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d128      	bne.n	8001eac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e78:	2312      	movs	r3, #18
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e84:	2304      	movs	r3, #4
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480b      	ldr	r0, [pc, #44]	; (8001ebc <HAL_I2C_MspInit+0x84>)
 8001e90:	f001 f876 	bl	8002f80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <sampleMagneticField>:
#include "magnetic_field.h"

MagneticField sampleMagneticField(
		HAL_StatusTypeDef (*readMagneticSensor)(I2C_HandleTypeDef*, double*),
		I2C_HandleTypeDef *i2c) {
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b09a      	sub	sp, #104	; 0x68
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	61f8      	str	r0, [r7, #28]
 8001ec8:	61b9      	str	r1, [r7, #24]
	MagneticField mf_sample;

	double d_response[3];

	if (HAL_OK == readMagneticSensor(i2c, d_response)) {
 8001eca:	f107 0220 	add.w	r2, r7, #32
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	69b8      	ldr	r0, [r7, #24]
 8001ed4:	4798      	blx	r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <sampleMagneticField+0x34>

		mf_sample.x = d_response[0];
 8001edc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		mf_sample.y = d_response[1];
 8001ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ee8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		mf_sample.z = d_response[2];
 8001eec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ef0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	return mf_sample;
 8001ef4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001ef8:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8001efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f04:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f08:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001f0c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f10:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001f14:	ec45 4b15 	vmov	d5, r4, r5
 8001f18:	ec41 0b16 	vmov	d6, r0, r1
 8001f1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f20:	eeb0 0a45 	vmov.f32	s0, s10
 8001f24:	eef0 0a65 	vmov.f32	s1, s11
 8001f28:	eeb0 1a46 	vmov.f32	s2, s12
 8001f2c:	eef0 1a66 	vmov.f32	s3, s13
 8001f30:	eeb0 2a47 	vmov.f32	s4, s14
 8001f34:	eef0 2a67 	vmov.f32	s5, s15
 8001f38:	3768      	adds	r7, #104	; 0x68
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdb0      	pop	{r4, r5, r7, pc}

08001f3e <identifyMagneticField>:

void identifyMagneticField(double complex *d_mf_x_dft, double complex *d_mf_y_dft, double complex *d_mf_z_dft,
		MagneticFieldSource *mf_nodes) {
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b08b      	sub	sp, #44	; 0x2c
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < 3; i++){
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	e02f      	b.n	8001fb2 <identifyMagneticField+0x74>
		int bin = (int) mf_nodes[i].i_frequency / 2;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	0fda      	lsrs	r2, r3, #31
 8001f5e:	4413      	add	r3, r2
 8001f60:	105b      	asrs	r3, r3, #1
 8001f62:	623b      	str	r3, [r7, #32]

		double complex value = d_mf_z_dft[bin];
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	18d1      	adds	r1, r2, r3
 8001f6c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f74:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001f78:	e9c7 2306 	strd	r2, r3, [r7, #24]

		mf_nodes[i].mf_intensity.z = cabs(value);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	019b      	lsls	r3, r3, #6
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	18d4      	adds	r4, r2, r3
 8001f84:	ed97 6b04 	vldr	d6, [r7, #16]
 8001f88:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f8c:	eeb0 0a46 	vmov.f32	s0, s12
 8001f90:	eef0 0a66 	vmov.f32	s1, s13
 8001f94:	eeb0 1a47 	vmov.f32	s2, s14
 8001f98:	eef0 1a67 	vmov.f32	s3, s15
 8001f9c:	f00b fa12 	bl	800d3c4 <cabs>
 8001fa0:	eeb0 7a40 	vmov.f32	s14, s0
 8001fa4:	eef0 7a60 	vmov.f32	s15, s1
 8001fa8:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
	for(int i = 0; i < 3; i++){
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3301      	adds	r3, #1
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	ddcc      	ble.n	8001f52 <identifyMagneticField+0x14>
	}
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	372c      	adds	r7, #44	; 0x2c
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}

08001fc2 <getDistanceFromRSS>:

double getDistanceFromRSS(MagneticFieldSource node) {
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	f107 0c10 	add.w	ip, r7, #16
 8001fce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	double distance = cbrt(node.d_magnetic_cte / node.mf_intensity.z);
 8001fd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fda:	f7fe fc5f 	bl	800089c <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	ec43 2b17 	vmov	d7, r2, r3
 8001fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fea:	eef0 0a67 	vmov.f32	s1, s15
 8001fee:	f00b fa73 	bl	800d4d8 <cbrt>
 8001ff2:	ed87 0b00 	vstr	d0, [r7]

	return distance;
 8001ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ffa:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8002002:	eef0 0a67 	vmov.f32	s1, s15
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800200e:	b004      	add	sp, #16
 8002010:	4770      	bx	lr
 8002012:	0000      	movs	r0, r0
 8002014:	0000      	movs	r0, r0
	...

08002018 <estimatePoisition>:

SpacePosition estimatePoisition(MagneticFieldSource *nodes ) {
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b0a1      	sub	sp, #132	; 0x84
 800201c:	af0c      	add	r7, sp, #48	; 0x30
 800201e:	6178      	str	r0, [r7, #20]
	SpacePosition sp_rx_position;

	double d_distances[3];

	for (int nodeIndex = 0; nodeIndex < 3; nodeIndex++) {
 8002020:	2300      	movs	r3, #0
 8002022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002024:	e021      	b.n	800206a <estimatePoisition+0x52>
		d_distances[nodeIndex] = getDistanceFromRSS(nodes[nodeIndex]);
 8002026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	18d6      	adds	r6, r2, r3
 800202e:	466d      	mov	r5, sp
 8002030:	f106 0410 	add.w	r4, r6, #16
 8002034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002040:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002044:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002048:	f7ff ffbb 	bl	8001fc2 <getDistanceFromRSS>
 800204c:	eeb0 7a40 	vmov.f32	s14, s0
 8002050:	eef0 7a60 	vmov.f32	s15, s1
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800205c:	4413      	add	r3, r2
 800205e:	3b38      	subs	r3, #56	; 0x38
 8002060:	ed83 7b00 	vstr	d7, [r3]
	for (int nodeIndex = 0; nodeIndex < 3; nodeIndex++) {
 8002064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002066:	3301      	adds	r3, #1
 8002068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800206a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206c:	2b02      	cmp	r3, #2
 800206e:	ddda      	ble.n	8002026 <estimatePoisition+0xe>
	}

	sp_rx_position.x = (pow(d_distances[0], 2) - pow(d_distances[1], 2)
 8002070:	ed97 7b06 	vldr	d7, [r7, #24]
 8002074:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002248 <estimatePoisition+0x230>
 8002078:	eeb0 0a47 	vmov.f32	s0, s14
 800207c:	eef0 0a67 	vmov.f32	s1, s15
 8002080:	f00b fc1c 	bl	800d8bc <pow>
 8002084:	ec55 4b10 	vmov	r4, r5, d0
 8002088:	ed97 7b08 	vldr	d7, [r7, #32]
 800208c:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8002248 <estimatePoisition+0x230>
 8002090:	eeb0 0a47 	vmov.f32	s0, s14
 8002094:	eef0 0a67 	vmov.f32	s1, s15
 8002098:	f00b fc10 	bl	800d8bc <pow>
 800209c:	ec53 2b10 	vmov	r2, r3, d0
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe f918 	bl	80002d8 <__aeabi_dsub>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
			+ pow(nodes[1].sp_position.x, 2)) / (2 * nodes[1].sp_position.x);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3340      	adds	r3, #64	; 0x40
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8002248 <estimatePoisition+0x230>
 80020c4:	ec43 2b10 	vmov	d0, r2, r3
 80020c8:	f00b fbf8 	bl	800d8bc <pow>
 80020cc:	ec53 2b10 	vmov	r2, r3, d0
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe f902 	bl	80002dc <__adddf3>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	461d      	mov	r5, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3340      	adds	r3, #64	; 0x40
 80020e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80020e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe fa52 	bl	8000598 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe fbce 	bl	800089c <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fd76 	bl	8000bf8 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
	sp_rx_position.x = (pow(d_distances[0], 2) - pow(d_distances[1], 2)
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
	sp_rx_position.y = (pow(d_distances[0], 2) - pow(d_distances[2], 2)
 8002110:	ed97 7b06 	vldr	d7, [r7, #24]
 8002114:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8002248 <estimatePoisition+0x230>
 8002118:	eeb0 0a47 	vmov.f32	s0, s14
 800211c:	eef0 0a67 	vmov.f32	s1, s15
 8002120:	f00b fbcc 	bl	800d8bc <pow>
 8002124:	ec55 4b10 	vmov	r4, r5, d0
 8002128:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800212c:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002248 <estimatePoisition+0x230>
 8002130:	eeb0 0a47 	vmov.f32	s0, s14
 8002134:	eef0 0a67 	vmov.f32	s1, s15
 8002138:	f00b fbc0 	bl	800d8bc <pow>
 800213c:	ec53 2b10 	vmov	r2, r3, d0
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe f8c8 	bl	80002d8 <__aeabi_dsub>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4614      	mov	r4, r2
 800214e:	461d      	mov	r5, r3
			+ pow(nodes[2].sp_position.x, 2) + pow(nodes[2].sp_position.y, 2)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3380      	adds	r3, #128	; 0x80
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa1e 	bl	8000598 <__aeabi_f2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8002248 <estimatePoisition+0x230>
 8002164:	ec43 2b10 	vmov	d0, r2, r3
 8002168:	f00b fba8 	bl	800d8bc <pow>
 800216c:	ec53 2b10 	vmov	r2, r3, d0
 8002170:	4620      	mov	r0, r4
 8002172:	4629      	mov	r1, r5
 8002174:	f7fe f8b2 	bl	80002dc <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4614      	mov	r4, r2
 800217e:	461d      	mov	r5, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3380      	adds	r3, #128	; 0x80
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fa06 	bl	8000598 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8002248 <estimatePoisition+0x230>
 8002194:	ec43 2b10 	vmov	d0, r2, r3
 8002198:	f00b fb90 	bl	800d8bc <pow>
 800219c:	ec53 2b10 	vmov	r2, r3, d0
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	f7fe f89a 	bl	80002dc <__adddf3>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4614      	mov	r4, r2
 80021ae:	461d      	mov	r5, r3
			- 2 * nodes[2].sp_position.x * sp_rx_position.x)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3380      	adds	r3, #128	; 0x80
 80021b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80021b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c4:	ee17 0a90 	vmov	r0, s15
 80021c8:	f7fe f9e6 	bl	8000598 <__aeabi_f2d>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe f880 	bl	80002d8 <__aeabi_dsub>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
			/ (2 * nodes[2].sp_position.y);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3380      	adds	r3, #128	; 0x80
 80021e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80021e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021ec:	ee17 0a90 	vmov	r0, s15
 80021f0:	f7fe f9d2 	bl	8000598 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4620      	mov	r0, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fe fb4e 	bl	800089c <__aeabi_ddiv>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fcf6 	bl	8000bf8 <__aeabi_d2f>
 800220c:	4603      	mov	r3, r0
	sp_rx_position.y = (pow(d_distances[0], 2) - pow(d_distances[2], 2)
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
	sp_rx_position.z = 0;
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	63fb      	str	r3, [r7, #60]	; 0x3c

	return sp_rx_position;
 8002216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800221a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800221e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222a:	ee06 1a90 	vmov	s13, r1
 800222e:	ee07 2a10 	vmov	s14, r2
 8002232:	ee07 3a90 	vmov	s15, r3
}
 8002236:	eeb0 0a66 	vmov.f32	s0, s13
 800223a:	eef0 0a47 	vmov.f32	s1, s14
 800223e:	eeb0 1a67 	vmov.f32	s2, s15
 8002242:	3754      	adds	r7, #84	; 0x54
 8002244:	46bd      	mov	sp, r7
 8002246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002248:	00000000 	.word	0x00000000
 800224c:	40000000 	.word	0x40000000

08002250 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) ptr, len) != HAL_OK) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4806      	ldr	r0, [pc, #24]	; (8002280 <_write+0x30>)
 8002266:	f003 fb21 	bl	80058ac <HAL_UART_Transmit_IT>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <_write+0x24>
		Error_Handler();
 8002270:	f000 f8d4 	bl	800241c <Error_Handler>
	}

	return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200091c4 	.word	0x200091c4

08002284 <initMagnetiFieldISR>:

void initMagnetiFieldISR() {
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <initMagnetiFieldISR+0x10>)
 800228a:	f002 feed 	bl	8005068 <HAL_TIM_Base_Start_IT>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20009178 	.word	0x20009178

08002298 <stopMagnetiFieldISR>:

void stopMagnetiFieldISR() {
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <stopMagnetiFieldISR+0x10>)
 800229e:	f002 ff5b 	bl	8005158 <HAL_TIM_Base_Stop_IT>
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20009178 	.word	0x20009178

080022ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b0:	f000 fc6d 	bl	8002b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b4:	f000 f82a 	bl	800230c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b8:	f7ff fcfe 	bl	8001cb8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022bc:	f7ff fd7c 	bl	8001db8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80022c0:	f000 fba4 	bl	8002a0c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80022c4:	f000 fb46 	bl	8002954 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	while (initializeLSM303DHLC(&hi2c1) != HAL_OK) {
 80022c8:	e006      	b.n	80022d8 <main+0x2c>
		printf("Trying to connect with sensor. Check wires!\r\n");
 80022ca:	480d      	ldr	r0, [pc, #52]	; (8002300 <main+0x54>)
 80022cc:	f009 f902 	bl	800b4d4 <puts>
		HAL_Delay(1000);
 80022d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d4:	f000 fc92 	bl	8002bfc <HAL_Delay>
	while (initializeLSM303DHLC(&hi2c1) != HAL_OK) {
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <main+0x58>)
 80022da:	f000 f8ad 	bl	8002438 <initializeLSM303DHLC>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f2      	bne.n	80022ca <main+0x1e>
	}

	printf("Sensor connected. Success!\r\n");
 80022e4:	4808      	ldr	r0, [pc, #32]	; (8002308 <main+0x5c>)
 80022e6:	f009 f8f5 	bl	800b4d4 <puts>
	HAL_Delay(500);
 80022ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ee:	f000 fc85 	bl	8002bfc <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80022f2:	f004 fcc9 	bl	8006c88 <osKernelInitialize>
  MX_FREERTOS_Init();
 80022f6:	f7ff f917 	bl	8001528 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80022fa:	f004 fce9 	bl	8006cd0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// Start timer
	while (1) {
 80022fe:	e7fe      	b.n	80022fe <main+0x52>
 8002300:	0800fc8c 	.word	0x0800fc8c
 8002304:	200090e0 	.word	0x200090e0
 8002308:	0800fcbc 	.word	0x0800fcbc

0800230c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b0a8      	sub	sp, #160	; 0xa0
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002316:	2238      	movs	r2, #56	; 0x38
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f008 fb87 	bl	800aa2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002320:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002330:	463b      	mov	r3, r7
 8002332:	2254      	movs	r2, #84	; 0x54
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f008 fb79 	bl	800aa2e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800233c:	2000      	movs	r0, #0
 800233e:	f001 fdd5 	bl	8003eec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002342:	2302      	movs	r3, #2
 8002344:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800234c:	2340      	movs	r3, #64	; 0x40
 800234e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800235c:	2304      	movs	r3, #4
 800235e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002362:	2355      	movs	r3, #85	; 0x55
 8002364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fe68 	bl	8004054 <HAL_RCC_OscConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800238a:	f000 f847 	bl	800241c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238e:	230f      	movs	r3, #15
 8002390:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002392:	2303      	movs	r3, #3
 8002394:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800239e:	2300      	movs	r3, #0
 80023a0:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023a6:	2104      	movs	r1, #4
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 f96b 	bl	8004684 <HAL_RCC_ClockConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80023b4:	f000 f832 	bl	800241c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80023b8:	2341      	movs	r3, #65	; 0x41
 80023ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c4:	463b      	mov	r3, r7
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 fbaa 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80023d2:	f000 f823 	bl	800241c <Error_Handler>
  }
}
 80023d6:	bf00      	nop
 80023d8:	37a0      	adds	r7, #160	; 0xa0
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a08      	ldr	r2, [pc, #32]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023f2:	f000 fbe5 	bl	8002bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM6) {
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d102      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0x26>
		sampleMagneticFieldISR(&hi2c1);
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002402:	f7ff f999 	bl	8001738 <sampleMagneticFieldISR>
	}

  /* USER CODE END Callback 1 */
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40001400 	.word	0x40001400
 8002414:	40001000 	.word	0x40001000
 8002418:	200090e0 	.word	0x200090e0

0800241c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("so far, so bad\r\n");
 8002424:	4803      	ldr	r0, [pc, #12]	; (8002434 <Error_Handler+0x18>)
 8002426:	f009 f855 	bl	800b4d4 <puts>
		HAL_Delay(1000);
 800242a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800242e:	f000 fbe5 	bl	8002bfc <HAL_Delay>
		printf("so far, so bad\r\n");
 8002432:	e7f7      	b.n	8002424 <Error_Handler+0x8>
 8002434:	0800fcd8 	.word	0x0800fcd8

08002438 <initializeLSM303DHLC>:
	        11.16803319,   1.06706581,  -8.39797949,   1.87673398,
	        -8.39797949,   1.06706581,  11.16803319,  -4.74067324,
	         4.11077153,   2.52699216, -10.59071207,   2.27404758,
	        -3.34106226,  -2.0657993 };

HAL_StatusTypeDef initializeLSM303DHLC(I2C_HandleTypeDef *i2c) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	uint8_t ui_init_params[3][2] = { { CRA_REG_M, CRA_REG_M_CONFIG }, {
 8002440:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <initializeLSM303DHLC+0xa0>)
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	e892 0003 	ldmia.w	r2, {r0, r1}
 800244a:	6018      	str	r0, [r3, #0]
 800244c:	3304      	adds	r3, #4
 800244e:	8019      	strh	r1, [r3, #0]
	CRB_REG_M, CRB_REG_M_CONFIG }, { MR_REG_M, MR_REG_M_CONFIG } };

	ret = HAL_I2C_IsDeviceReady(i2c, MY_LSM303DLHC_MAG_ADD, 10, 200);
 8002450:	23c8      	movs	r3, #200	; 0xc8
 8002452:	220a      	movs	r2, #10
 8002454:	213c      	movs	r1, #60	; 0x3c
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f001 f9c8 	bl	80037ec <HAL_I2C_IsDeviceReady>
 800245c:	4603      	mov	r3, r0
 800245e:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <initializeLSM303DHLC+0x32>
		return ret;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	e032      	b.n	80024d0 <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[0],
 800246a:	f107 0208 	add.w	r2, r7, #8
 800246e:	23c8      	movs	r3, #200	; 0xc8
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2302      	movs	r3, #2
 8002474:	213c      	movs	r1, #60	; 0x3c
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 ffce 	bl	8003418 <HAL_I2C_Master_Transmit>
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <initializeLSM303DHLC+0x52>
		return ret;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	e022      	b.n	80024d0 <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[1],
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	1c9a      	adds	r2, r3, #2
 8002490:	23c8      	movs	r3, #200	; 0xc8
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2302      	movs	r3, #2
 8002496:	213c      	movs	r1, #60	; 0x3c
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 ffbd 	bl	8003418 <HAL_I2C_Master_Transmit>
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <initializeLSM303DHLC+0x74>
		return ret;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	e011      	b.n	80024d0 <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[2],
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	1d1a      	adds	r2, r3, #4
 80024b2:	23c8      	movs	r3, #200	; 0xc8
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2302      	movs	r3, #2
 80024b8:	213c      	movs	r1, #60	; 0x3c
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 ffac 	bl	8003418 <HAL_I2C_Master_Transmit>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <initializeLSM303DHLC+0x96>
		return ret;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	e000      	b.n	80024d0 <initializeLSM303DHLC+0x98>
	}

	return ret;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	0800fce8 	.word	0x0800fce8

080024dc <readRawMagnetometerData>:

HAL_StatusTypeDef readRawMagnetometerData(I2C_HandleTypeDef *i2c,
		int16_t *i16_raw_response, uint8_t *ui8_buf_response) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;

	uint8_t reg = OUT_X_H_M;
 80024e8:	2303      	movs	r3, #3
 80024ea:	77bb      	strb	r3, [r7, #30]
	uint8_t ui_lsm_response[6];
	union_ui8_ui16 ui8_16_aux;

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, &reg, 1,
 80024ec:	f107 021e 	add.w	r2, r7, #30
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2301      	movs	r3, #1
 80024f8:	213c      	movs	r1, #60	; 0x3c
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 ff8c 	bl	8003418 <HAL_I2C_Master_Transmit>
 8002500:	4603      	mov	r3, r0
 8002502:	77fb      	strb	r3, [r7, #31]
	HAL_MAX_DELAY);
	if (ret == HAL_OK) {
 8002504:	7ffb      	ldrb	r3, [r7, #31]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d129      	bne.n	800255e <readRawMagnetometerData+0x82>
		ret = HAL_I2C_Master_Receive(i2c, MY_LSM303DLHC_MAG_ADD,
 800250a:	f107 0218 	add.w	r2, r7, #24
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2306      	movs	r3, #6
 8002516:	213c      	movs	r1, #60	; 0x3c
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f001 f871 	bl	8003600 <HAL_I2C_Master_Receive>
 800251e:	4603      	mov	r3, r0
 8002520:	77fb      	strb	r3, [r7, #31]
				ui_lsm_response, 6, HAL_MAX_DELAY);

		if (ret == HAL_OK) {
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d11a      	bne.n	800255e <readRawMagnetometerData+0x82>
			ui8_16_aux.ui8[0] = ui_lsm_response[1];
 8002528:	7e7b      	ldrb	r3, [r7, #25]
 800252a:	743b      	strb	r3, [r7, #16]
			ui8_16_aux.ui8[1] = ui_lsm_response[0];
 800252c:	7e3b      	ldrb	r3, [r7, #24]
 800252e:	747b      	strb	r3, [r7, #17]

			ui8_16_aux.ui8[2] = ui_lsm_response[3];
 8002530:	7efb      	ldrb	r3, [r7, #27]
 8002532:	74bb      	strb	r3, [r7, #18]
			ui8_16_aux.ui8[3] = ui_lsm_response[2];
 8002534:	7ebb      	ldrb	r3, [r7, #26]
 8002536:	74fb      	strb	r3, [r7, #19]

			ui8_16_aux.ui8[4] = ui_lsm_response[5];
 8002538:	7f7b      	ldrb	r3, [r7, #29]
 800253a:	753b      	strb	r3, [r7, #20]
			ui8_16_aux.ui8[5] = ui_lsm_response[4];
 800253c:	7f3b      	ldrb	r3, [r7, #28]
 800253e:	757b      	strb	r3, [r7, #21]

			memcpy(i16_raw_response, ui8_16_aux.i16, 3);
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	2203      	movs	r2, #3
 8002546:	4619      	mov	r1, r3
 8002548:	68b8      	ldr	r0, [r7, #8]
 800254a:	f008 fa62 	bl	800aa12 <memcpy>
			memcpy(ui8_buf_response, ui8_16_aux.ui8, 6);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	6010      	str	r0, [r2, #0]
 800255a:	889b      	ldrh	r3, [r3, #4]
 800255c:	8093      	strh	r3, [r2, #4]
		}
	}

	return ret;
 800255e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <readMagnetometerData>:

HAL_StatusTypeDef readMagnetometerData(I2C_HandleTypeDef *i2c,
		double *d_response) {
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	int16_t i16_raw_response[3];
	uint8_t ui8_raw_response[6];

	ret = readRawMagnetometerData(i2c, i16_raw_response, ui8_raw_response);
 8002572:	f107 0208 	add.w	r2, r7, #8
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ffad 	bl	80024dc <readRawMagnetometerData>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]
	if (ret == HAL_OK) {
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d140      	bne.n	800260e <readMagnetometerData+0xa6>

#if MOCK_VALUES == 1
		d_response[0] = mocked_values_x[mock_value_index] * 0.000001;
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <readMagnetometerData+0xb8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <readMagnetometerData+0xbc>)
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800259a:	a31f      	add	r3, pc, #124	; (adr r3, 8002618 <readMagnetometerData+0xb0>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f7fe f852 	bl	8000648 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	e9c1 2300 	strd	r2, r3, [r1]
		d_response[1] = mocked_values_y[mock_value_index] * 0.000001;
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <readMagnetometerData+0xb8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <readMagnetometerData+0xc0>)
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f103 0408 	add.w	r4, r3, #8
 80025c2:	a315      	add	r3, pc, #84	; (adr r3, 8002618 <readMagnetometerData+0xb0>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f83e 	bl	8000648 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c4 2300 	strd	r2, r3, [r4]
		d_response[2] = mocked_values_z[mock_value_index] * 0.000001;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <readMagnetometerData+0xb8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <readMagnetometerData+0xc4>)
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f103 0410 	add.w	r4, r3, #16
 80025e8:	a30b      	add	r3, pc, #44	; (adr r3, 8002618 <readMagnetometerData+0xb0>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fe f82b 	bl	8000648 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	e9c4 2300 	strd	r2, r3, [r4]

		mock_value_index = (mock_value_index + 1) % MOCK_SIZE;
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <readMagnetometerData+0xb8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	425a      	negs	r2, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	bf58      	it	pl
 8002608:	4253      	negpl	r3, r2
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <readMagnetometerData+0xb8>)
 800260c:	6013      	str	r3, [r2, #0]
		d_response[2] = i16_raw_response[2] / (double) X_Y_GAIN;
#endif

	}

	return ret;
 800260e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	a0b5ed8d 	.word	0xa0b5ed8d
 800261c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002620:	2000341c 	.word	0x2000341c
 8002624:	20003420 	.word	0x20003420
 8002628:	20003c20 	.word	0x20003c20
 800262c:	200000c0 	.word	0x200000c0

08002630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_MspInit+0x50>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <HAL_MspInit+0x50>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6613      	str	r3, [r2, #96]	; 0x60
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_MspInit+0x50>)
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_MspInit+0x50>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_MspInit+0x50>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_MspInit+0x50>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	210f      	movs	r1, #15
 800266a:	f06f 0001 	mvn.w	r0, #1
 800266e:	f000 fb9f 	bl	8002db0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002672:	f001 fcdf 	bl	8004034 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_InitTick+0xcc>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	4a2c      	ldr	r2, [pc, #176]	; (8002750 <HAL_InitTick+0xcc>)
 80026a0:	f043 0320 	orr.w	r3, r3, #32
 80026a4:	6593      	str	r3, [r2, #88]	; 0x58
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_InitTick+0xcc>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026b2:	f107 020c 	add.w	r2, r7, #12
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f002 f9b7 	bl	8004a30 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026c2:	f002 f989 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80026c6:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_InitTick+0xd0>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	0c9b      	lsrs	r3, r3, #18
 80026d2:	3b01      	subs	r3, #1
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_InitTick+0xd4>)
 80026d8:	4a20      	ldr	r2, [pc, #128]	; (800275c <HAL_InitTick+0xd8>)
 80026da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80026dc:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_InitTick+0xd4>)
 80026de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_InitTick+0xd4>)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_InitTick+0xd4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_InitTick+0xd4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80026f6:	4818      	ldr	r0, [pc, #96]	; (8002758 <HAL_InitTick+0xd4>)
 80026f8:	f002 fc5e 	bl	8004fb8 <HAL_TIM_Base_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002706:	2b00      	cmp	r3, #0
 8002708:	d11b      	bne.n	8002742 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800270a:	4813      	ldr	r0, [pc, #76]	; (8002758 <HAL_InitTick+0xd4>)
 800270c:	f002 fcac 	bl	8005068 <HAL_TIM_Base_Start_IT>
 8002710:	4603      	mov	r3, r0
 8002712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800271a:	2b00      	cmp	r3, #0
 800271c:	d111      	bne.n	8002742 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800271e:	2037      	movs	r0, #55	; 0x37
 8002720:	f000 fb60 	bl	8002de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	d808      	bhi.n	800273c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 800272a:	2200      	movs	r2, #0
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	2037      	movs	r0, #55	; 0x37
 8002730:	f000 fb3e 	bl	8002db0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_InitTick+0xdc>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e002      	b.n	8002742 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8002742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002746:	4618      	mov	r0, r3
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	431bde83 	.word	0x431bde83
 8002758:	2000912c 	.word	0x2000912c
 800275c:	40001400 	.word	0x40001400
 8002760:	200008c4 	.word	0x200008c4

08002764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <NMI_Handler+0x4>

0800276a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <HardFault_Handler+0x4>

08002770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <MemManage_Handler+0x4>

08002776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <BusFault_Handler+0x4>

0800277c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <UsageFault_Handler+0x4>

08002782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <USART1_IRQHandler+0x10>)
 8002796:	f003 f90d 	bl	80059b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200091c4 	.word	0x200091c4

080027a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027ac:	f000 fd82 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <TIM6_DAC_IRQHandler+0x10>)
 80027ba:	f002 fcfc 	bl	80051b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20009178 	.word	0x20009178

080027c8 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM7_DAC_IRQHandler+0x10>)
 80027ce:	f002 fcf2 	bl	80051b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000912c 	.word	0x2000912c

080027dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_kill>:

int _kill(int pid, int sig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027f6:	f007 ffe9 	bl	800a7cc <__errno>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2216      	movs	r2, #22
 80027fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_exit>:

void _exit (int status)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ffe7 	bl	80027ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800281e:	e7fe      	b.n	800281e <_exit+0x12>

08002820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
	}

return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_close>:
	}
	return len;
}

int _close(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return -1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002882:	605a      	str	r2, [r3, #4]
	return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <_sbrk+0x5c>)
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <_sbrk+0x60>)
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <_sbrk+0x64>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <_sbrk+0x68>)
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d207      	bcs.n	8002904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f4:	f007 ff6a 	bl	800a7cc <__errno>
 80028f8:	4603      	mov	r3, r0
 80028fa:	220c      	movs	r2, #12
 80028fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e009      	b.n	8002918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <_sbrk+0x64>)
 8002914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20020000 	.word	0x20020000
 8002924:	00000400 	.word	0x00000400
 8002928:	20004420 	.word	0x20004420
 800292c:	200092a8 	.word	0x200092a8

08002930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <SystemInit+0x20>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <SystemInit+0x20>)
 800293c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_TIM6_Init+0x64>)
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <MX_TIM6_Init+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7727 - 1;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_TIM6_Init+0x64>)
 800296c:	f641 622e 	movw	r2, #7726	; 0x1e2e
 8002970:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_TIM6_Init+0x64>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_TIM6_Init+0x64>)
 800297a:	2263      	movs	r2, #99	; 0x63
 800297c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_TIM6_Init+0x64>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <MX_TIM6_Init+0x64>)
 8002986:	f002 fb17 	bl	8004fb8 <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002990:	f7ff fd44 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_TIM6_Init+0x64>)
 80029a2:	f002 fe57 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80029ac:	f7ff fd36 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20009178 	.word	0x20009178
 80029bc:	40001000 	.word	0x40001000

080029c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_TIM_Base_MspInit+0x44>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d113      	bne.n	80029fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_TIM_Base_MspInit+0x48>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_TIM_Base_MspInit+0x48>)
 80029d8:	f043 0310 	orr.w	r3, r3, #16
 80029dc:	6593      	str	r3, [r2, #88]	; 0x58
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_TIM_Base_MspInit+0x48>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2105      	movs	r1, #5
 80029ee:	2036      	movs	r0, #54	; 0x36
 80029f0:	f000 f9de 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029f4:	2036      	movs	r0, #54	; 0x36
 80029f6:	f000 f9f5 	bl	8002de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40001000 	.word	0x40001000
 8002a08:	40021000 	.word	0x40021000

08002a0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a12:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <MX_USART1_UART_Init+0x94>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a54:	4811      	ldr	r0, [pc, #68]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a56:	f002 fed9 	bl	800580c <HAL_UART_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a60:	f7ff fcdc 	bl	800241c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a64:	2100      	movs	r1, #0
 8002a66:	480d      	ldr	r0, [pc, #52]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a68:	f004 f800 	bl	8006a6c <HAL_UARTEx_SetTxFifoThreshold>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a72:	f7ff fcd3 	bl	800241c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a76:	2100      	movs	r1, #0
 8002a78:	4808      	ldr	r0, [pc, #32]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a7a:	f004 f835 	bl	8006ae8 <HAL_UARTEx_SetRxFifoThreshold>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a84:	f7ff fcca 	bl	800241c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a8a:	f003 ffb6 	bl	80069fa <HAL_UARTEx_DisableFifoMode>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a94:	f7ff fcc2 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200091c4 	.word	0x200091c4
 8002aa0:	40013800 	.word	0x40013800

08002aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <HAL_UART_MspInit+0x8c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d12f      	bne.n	8002b26 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002af6:	2330      	movs	r3, #48	; 0x30
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b06:	2307      	movs	r3, #7
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4809      	ldr	r0, [pc, #36]	; (8002b38 <HAL_UART_MspInit+0x94>)
 8002b12:	f000 fa35 	bl	8002f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2105      	movs	r1, #5
 8002b1a:	2025      	movs	r0, #37	; 0x25
 8002b1c:	f000 f948 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b20:	2025      	movs	r0, #37	; 0x25
 8002b22:	f000 f95f 	bl	8002de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b26:	bf00      	nop
 8002b28:	3728      	adds	r7, #40	; 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	48000800 	.word	0x48000800

08002b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b3c:	480d      	ldr	r0, [pc, #52]	; (8002b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b42:	490e      	ldr	r1, [pc, #56]	; (8002b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b44:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <LoopForever+0xe>)
  movs r3, #0
 8002b46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b48:	e002      	b.n	8002b50 <LoopCopyDataInit>

08002b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4e:	3304      	adds	r3, #4

08002b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b54:	d3f9      	bcc.n	8002b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b56:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b58:	4c0b      	ldr	r4, [pc, #44]	; (8002b88 <LoopForever+0x16>)
  movs r3, #0
 8002b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b5c:	e001      	b.n	8002b62 <LoopFillZerobss>

08002b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b60:	3204      	adds	r2, #4

08002b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b64:	d3fb      	bcc.n	8002b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b66:	f7ff fee3 	bl	8002930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b6a:	f007 ff2b 	bl	800a9c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b6e:	f7ff fb9d 	bl	80022ac <main>

08002b72 <LoopForever>:

LoopForever:
    b LoopForever
 8002b72:	e7fe      	b.n	8002b72 <LoopForever>
  ldr   r0, =_estack
 8002b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b7c:	20000aa4 	.word	0x20000aa4
  ldr r2, =_sidata
 8002b80:	08010410 	.word	0x08010410
  ldr r2, =_sbss
 8002b84:	20000aa8 	.word	0x20000aa8
  ldr r4, =_ebss
 8002b88:	200092a8 	.word	0x200092a8

08002b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC1_2_IRQHandler>

08002b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f000 f8fe 	bl	8002d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	f7ff fd70 	bl	8002684 <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	71fb      	strb	r3, [r7, #7]
 8002bae:	e001      	b.n	8002bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bb0:	f7ff fd3e 	bl	8002630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bb4:	79fb      	ldrb	r3, [r7, #7]

}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_IncTick+0x1c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_IncTick+0x20>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <HAL_IncTick+0x1c>)
 8002bd0:	6013      	str	r3, [r2, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	20009254 	.word	0x20009254
 8002be0:	200008c8 	.word	0x200008c8

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20009254 	.word	0x20009254

08002bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff ffee 	bl	8002be4 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d004      	beq.n	8002c20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_Delay+0x40>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c20:	bf00      	nop
 8002c22:	f7ff ffdf 	bl	8002be4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d8f7      	bhi.n	8002c22 <HAL_Delay+0x26>
  {
  }
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200008c8 	.word	0x200008c8

08002c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 0307 	and.w	r3, r3, #7
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db0b      	blt.n	8002cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4907      	ldr	r1, [pc, #28]	; (8002cdc <__NVIC_EnableIRQ+0x38>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e100 	.word	0xe000e100

08002ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db0a      	blt.n	8002d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	490c      	ldr	r1, [pc, #48]	; (8002d2c <__NVIC_SetPriority+0x4c>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	440b      	add	r3, r1
 8002d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d08:	e00a      	b.n	8002d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4908      	ldr	r1, [pc, #32]	; (8002d30 <__NVIC_SetPriority+0x50>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3b04      	subs	r3, #4
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	761a      	strb	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1c3 0307 	rsb	r3, r3, #7
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf28      	it	cs
 8002d52:	2304      	movcs	r3, #4
 8002d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d902      	bls.n	8002d64 <NVIC_EncodePriority+0x30>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	e000      	b.n	8002d66 <NVIC_EncodePriority+0x32>
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	4313      	orrs	r3, r2
         );
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff4c 	bl	8002c40 <__NVIC_SetPriorityGrouping>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dbe:	f7ff ff63 	bl	8002c88 <__NVIC_GetPriorityGrouping>
 8002dc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	6978      	ldr	r0, [r7, #20]
 8002dca:	f7ff ffb3 	bl	8002d34 <NVIC_EncodePriority>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff82 	bl	8002ce0 <__NVIC_SetPriority>
}
 8002ddc:	bf00      	nop
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff56 	bl	8002ca4 <__NVIC_EnableIRQ>
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d005      	beq.n	8002e24 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	e037      	b.n	8002e94 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 020e 	bic.w	r2, r2, #14
 8002e32:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e42:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f202 	lsl.w	r2, r1, r2
 8002e66:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e70:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e88:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e92:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e047      	b.n	8002f76 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 020e 	bic.w	r2, r2, #14
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f003 021f 	and.w	r2, r3, #31
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f32:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00c      	beq.n	8002f56 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f54:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
    }
  }
  return status;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f8e:	e15a      	b.n	8003246 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 814c 	beq.w	8003240 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d00b      	beq.n	8002fc8 <HAL_GPIO_Init+0x48>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d007      	beq.n	8002fc8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fbc:	2b11      	cmp	r3, #17
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b12      	cmp	r3, #18
 8002fc6:	d130      	bne.n	800302a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffe:	2201      	movs	r2, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0201 	and.w	r2, r3, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0xea>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b12      	cmp	r3, #18
 8003068:	d123      	bne.n	80030b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	08da      	lsrs	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3208      	adds	r2, #8
 8003072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	6939      	ldr	r1, [r7, #16]
 80030ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0203 	and.w	r2, r3, #3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a6 	beq.w	8003240 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f4:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <HAL_GPIO_Init+0x2e4>)
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f8:	4a5a      	ldr	r2, [pc, #360]	; (8003264 <HAL_GPIO_Init+0x2e4>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6613      	str	r3, [r2, #96]	; 0x60
 8003100:	4b58      	ldr	r3, [pc, #352]	; (8003264 <HAL_GPIO_Init+0x2e4>)
 8003102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310c:	4a56      	ldr	r2, [pc, #344]	; (8003268 <HAL_GPIO_Init+0x2e8>)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	220f      	movs	r2, #15
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003136:	d01f      	beq.n	8003178 <HAL_GPIO_Init+0x1f8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a4c      	ldr	r2, [pc, #304]	; (800326c <HAL_GPIO_Init+0x2ec>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d019      	beq.n	8003174 <HAL_GPIO_Init+0x1f4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a4b      	ldr	r2, [pc, #300]	; (8003270 <HAL_GPIO_Init+0x2f0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <HAL_GPIO_Init+0x1f0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a4a      	ldr	r2, [pc, #296]	; (8003274 <HAL_GPIO_Init+0x2f4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1ec>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a49      	ldr	r2, [pc, #292]	; (8003278 <HAL_GPIO_Init+0x2f8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1e8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_GPIO_Init+0x2fc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1e4>
 8003160:	2305      	movs	r3, #5
 8003162:	e00a      	b.n	800317a <HAL_GPIO_Init+0x1fa>
 8003164:	2306      	movs	r3, #6
 8003166:	e008      	b.n	800317a <HAL_GPIO_Init+0x1fa>
 8003168:	2304      	movs	r3, #4
 800316a:	e006      	b.n	800317a <HAL_GPIO_Init+0x1fa>
 800316c:	2303      	movs	r3, #3
 800316e:	e004      	b.n	800317a <HAL_GPIO_Init+0x1fa>
 8003170:	2302      	movs	r3, #2
 8003172:	e002      	b.n	800317a <HAL_GPIO_Init+0x1fa>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_GPIO_Init+0x1fa>
 8003178:	2300      	movs	r3, #0
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	f002 0203 	and.w	r2, r2, #3
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	4093      	lsls	r3, r2
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800318a:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_GPIO_Init+0x2e8>)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003198:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_GPIO_Init+0x300>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <HAL_GPIO_Init+0x300>)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80031c2:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <HAL_GPIO_Init+0x300>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <HAL_GPIO_Init+0x300>)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_GPIO_Init+0x300>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <HAL_GPIO_Init+0x300>)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_GPIO_Init+0x300>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	43db      	mvns	r3, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <HAL_GPIO_Init+0x300>)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f47f ae9d 	bne.w	8002f90 <HAL_GPIO_Init+0x10>
  }
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40021000 	.word	0x40021000
 8003268:	40010000 	.word	0x40010000
 800326c:	48000400 	.word	0x48000400
 8003270:	48000800 	.word	0x48000800
 8003274:	48000c00 	.word	0x48000c00
 8003278:	48001000 	.word	0x48001000
 800327c:	48001400 	.word	0x48001400
 8003280:	40010400 	.word	0x40010400

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ca:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f806 	bl	80032e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e081      	b.n	8003410 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fe fd89 	bl	8001e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2224      	movs	r2, #36	; 0x24
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800334a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	e006      	b.n	8003382 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003380:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d104      	bne.n	8003394 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003392:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	021a      	lsls	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69d9      	ldr	r1, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	460b      	mov	r3, r1
 8003426:	817b      	strh	r3, [r7, #10]
 8003428:	4613      	mov	r3, r2
 800342a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b20      	cmp	r3, #32
 8003436:	f040 80da 	bne.w	80035ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_I2C_Master_Transmit+0x30>
 8003444:	2302      	movs	r3, #2
 8003446:	e0d3      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1d8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003450:	f7ff fbc8 	bl	8002be4 <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2319      	movs	r3, #25
 800345c:	2201      	movs	r2, #1
 800345e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 faed 	bl	8003a42 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0be      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2210      	movs	r2, #16
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2bff      	cmp	r3, #255	; 0xff
 80034a2:	d90e      	bls.n	80034c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	22ff      	movs	r2, #255	; 0xff
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	8979      	ldrh	r1, [r7, #10]
 80034b2:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fc50 	bl	8003d60 <I2C_TransferConfig>
 80034c0:	e06c      	b.n	800359c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	8979      	ldrh	r1, [r7, #10]
 80034d4:	4b48      	ldr	r3, [pc, #288]	; (80035f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 fc3f 	bl	8003d60 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80034e2:	e05b      	b.n	800359c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	6a39      	ldr	r1, [r7, #32]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 faea 	bl	8003ac2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e07b      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d034      	beq.n	800359c <HAL_I2C_Master_Transmit+0x184>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d130      	bne.n	800359c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fa7c 	bl	8003a42 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e04d      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2bff      	cmp	r3, #255	; 0xff
 800355c:	d90e      	bls.n	800357c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	b2da      	uxtb	r2, r3
 800356a:	8979      	ldrh	r1, [r7, #10]
 800356c:	2300      	movs	r3, #0
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fbf3 	bl	8003d60 <I2C_TransferConfig>
 800357a:	e00f      	b.n	800359c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	b2da      	uxtb	r2, r3
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	2300      	movs	r3, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fbe2 	bl	8003d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d19e      	bne.n	80034e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	6a39      	ldr	r1, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fac9 	bl	8003b42 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e01a      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2220      	movs	r2, #32
 80035c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_I2C_Master_Transmit+0x1e4>)
 80035ce:	400b      	ands	r3, r1
 80035d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	80002000 	.word	0x80002000
 80035fc:	fe00e800 	.word	0xfe00e800

08003600 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	461a      	mov	r2, r3
 800360c:	460b      	mov	r3, r1
 800360e:	817b      	strh	r3, [r7, #10]
 8003610:	4613      	mov	r3, r2
 8003612:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b20      	cmp	r3, #32
 800361e:	f040 80db 	bne.w	80037d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_I2C_Master_Receive+0x30>
 800362c:	2302      	movs	r3, #2
 800362e:	e0d4      	b.n	80037da <HAL_I2C_Master_Receive+0x1da>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003638:	f7ff fad4 	bl	8002be4 <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2319      	movs	r3, #25
 8003644:	2201      	movs	r2, #1
 8003646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f9f9 	bl	8003a42 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0bf      	b.n	80037da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2222      	movs	r2, #34	; 0x22
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2210      	movs	r2, #16
 8003666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	893a      	ldrh	r2, [r7, #8]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	2bff      	cmp	r3, #255	; 0xff
 800368a:	d90e      	bls.n	80036aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	b2da      	uxtb	r2, r3
 8003698:	8979      	ldrh	r1, [r7, #10]
 800369a:	4b52      	ldr	r3, [pc, #328]	; (80037e4 <HAL_I2C_Master_Receive+0x1e4>)
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fb5c 	bl	8003d60 <I2C_TransferConfig>
 80036a8:	e06d      	b.n	8003786 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	8979      	ldrh	r1, [r7, #10]
 80036bc:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_I2C_Master_Receive+0x1e4>)
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb4b 	bl	8003d60 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80036ca:	e05c      	b.n	8003786 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	6a39      	ldr	r1, [r7, #32]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fa73 	bl	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e07c      	b.n	80037da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d034      	beq.n	8003786 <HAL_I2C_Master_Receive+0x186>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d130      	bne.n	8003786 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f987 	bl	8003a42 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e04d      	b.n	80037da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	2bff      	cmp	r3, #255	; 0xff
 8003746:	d90e      	bls.n	8003766 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	22ff      	movs	r2, #255	; 0xff
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	b2da      	uxtb	r2, r3
 8003754:	8979      	ldrh	r1, [r7, #10]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fafe 	bl	8003d60 <I2C_TransferConfig>
 8003764:	e00f      	b.n	8003786 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	b2da      	uxtb	r2, r3
 8003776:	8979      	ldrh	r1, [r7, #10]
 8003778:	2300      	movs	r3, #0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 faed 	bl	8003d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d19d      	bne.n	80036cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	6a39      	ldr	r1, [r7, #32]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f9d4 	bl	8003b42 <I2C_WaitOnSTOPFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e01a      	b.n	80037da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2220      	movs	r2, #32
 80037aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_I2C_Master_Receive+0x1e8>)
 80037b8:	400b      	ands	r3, r1
 80037ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	80002400 	.word	0x80002400
 80037e8:	fe00e800 	.word	0xfe00e800

080037ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	f040 80f1 	bne.w	80039f0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381c:	d101      	bne.n	8003822 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	e0e7      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_I2C_IsDeviceReady+0x44>
 800382c:	2302      	movs	r3, #2
 800382e:	e0e0      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_I2C_IsDeviceReady+0x72>
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003858:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800385c:	e004      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x7c>
 800385e:	897b      	ldrh	r3, [r7, #10]
 8003860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003864:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800386e:	f7ff f9b9 	bl	8002be4 <HAL_GetTick>
 8003872:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b20      	cmp	r3, #32
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038a0:	e034      	b.n	800390c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d01a      	beq.n	80038e0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7ff f99b 	bl	8002be4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <HAL_I2C_IsDeviceReady+0xd4>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10f      	bne.n	80038e0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e088      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800390c:	7ffb      	ldrb	r3, [r7, #31]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_I2C_IsDeviceReady+0x12c>
 8003912:	7fbb      	ldrb	r3, [r7, #30]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0c4      	beq.n	80038a2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b10      	cmp	r3, #16
 8003924:	d01a      	beq.n	800395c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2200      	movs	r2, #0
 800392e:	2120      	movs	r1, #32
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f886 	bl	8003a42 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e058      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2220      	movs	r2, #32
 8003946:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e04a      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	2120      	movs	r1, #32
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f86b 	bl	8003a42 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e03d      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2210      	movs	r2, #16
 800397c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2220      	movs	r2, #32
 8003984:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d118      	bne.n	80039c0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2120      	movs	r1, #32
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f84a 	bl	8003a42 <I2C_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e01c      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2220      	movs	r2, #32
 80039be:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3301      	adds	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	f63f af3b 	bhi.w	8003846 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d103      	bne.n	8003a18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d007      	beq.n	8003a36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	619a      	str	r2, [r3, #24]
  }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a52:	e022      	b.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d01e      	beq.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7ff f8c2 	bl	8002be4 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d113      	bne.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00f      	b.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d0cd      	beq.n	8003a54 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ace:	e02c      	b.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f8dd 	bl	8003c94 <I2C_IsAcknowledgeFailed>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e02a      	b.n	8003b3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d01e      	beq.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aec:	f7ff f87a 	bl	8002be4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d302      	bcc.n	8003b02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d113      	bne.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d1cb      	bne.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b4e:	e028      	b.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f89d 	bl	8003c94 <I2C_IsAcknowledgeFailed>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e026      	b.n	8003bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b64:	f7ff f83e 	bl	8002be4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d302      	bcc.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d113      	bne.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f043 0220 	orr.w	r2, r3, #32
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e007      	b.n	8003bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d1cf      	bne.n	8003b50 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc8:	e055      	b.n	8003c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f860 	bl	8003c94 <I2C_IsAcknowledgeFailed>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e053      	b.n	8003c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d129      	bne.n	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d105      	bne.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e03f      	b.n	8003c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003c1a:	400b      	ands	r3, r1
 8003c1c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e022      	b.n	8003c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c40:	f7fe ffd0 	bl	8002be4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d302      	bcc.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e007      	b.n	8003c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d1a2      	bne.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	fe00e800 	.word	0xfe00e800

08003c94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d151      	bne.n	8003d52 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cae:	e022      	b.n	8003cf6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d01e      	beq.n	8003cf6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb8:	f7fe ff94 	bl	8002be4 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d302      	bcc.n	8003cce <I2C_IsAcknowledgeFailed+0x3a>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d113      	bne.n	8003cf6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f043 0220 	orr.w	r2, r3, #32
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e02e      	b.n	8003d54 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d1d5      	bne.n	8003cb0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2210      	movs	r2, #16
 8003d0a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2220      	movs	r2, #32
 8003d12:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fe70 	bl	80039fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <I2C_IsAcknowledgeFailed+0xc8>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	fe00e800 	.word	0xfe00e800

08003d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	0d5b      	lsrs	r3, r3, #21
 8003d7c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <I2C_TransferConfig+0x58>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	43db      	mvns	r3, r3
 8003d86:	ea02 0103 	and.w	r1, r2, r3
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d90:	7a7b      	ldrb	r3, [r7, #9]
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	03ff63ff 	.word	0x03ff63ff

08003dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d138      	bne.n	8003e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e032      	b.n	8003e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d139      	bne.n	8003edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e033      	b.n	8003ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2224      	movs	r2, #36	; 0x24
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d141      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003efa:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d131      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f08:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0e:	4a46      	ldr	r2, [pc, #280]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f18:	4b43      	ldr	r3, [pc, #268]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f20:	4a41      	ldr	r2, [pc, #260]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f28:	4b40      	ldr	r3, [pc, #256]	; (800402c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2232      	movs	r2, #50	; 0x32
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	4a3f      	ldr	r2, [pc, #252]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	0c9b      	lsrs	r3, r3, #18
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f3e:	e002      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d102      	bne.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f2      	bne.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f5a:	4b33      	ldr	r3, [pc, #204]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d158      	bne.n	800401a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e057      	b.n	800401c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f6c:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f72:	4a2d      	ldr	r2, [pc, #180]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f7c:	e04d      	b.n	800401a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d141      	bne.n	800400a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f92:	d131      	bne.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9a:	4a23      	ldr	r2, [pc, #140]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fac:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2232      	movs	r2, #50	; 0x32
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	0c9b      	lsrs	r3, r3, #18
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fca:	e002      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d102      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f2      	bne.n	8003fcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff2:	d112      	bne.n	800401a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e011      	b.n	800401c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004008:	e007      	b.n	800401a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004012:	4a05      	ldr	r2, [pc, #20]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004018:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40007000 	.word	0x40007000
 800402c:	200008c0 	.word	0x200008c0
 8004030:	431bde83 	.word	0x431bde83

08004034 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800403e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004042:	6093      	str	r3, [r2, #8]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40007000 	.word	0x40007000

08004054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e308      	b.n	8004678 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d075      	beq.n	800415e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004072:	4ba3      	ldr	r3, [pc, #652]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800407c:	4ba0      	ldr	r3, [pc, #640]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d102      	bne.n	8004092 <HAL_RCC_OscConfig+0x3e>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d002      	beq.n	8004098 <HAL_RCC_OscConfig+0x44>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d10b      	bne.n	80040b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004098:	4b99      	ldr	r3, [pc, #612]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d05b      	beq.n	800415c <HAL_RCC_OscConfig+0x108>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d157      	bne.n	800415c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e2e3      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d106      	bne.n	80040c8 <HAL_RCC_OscConfig+0x74>
 80040ba:	4b91      	ldr	r3, [pc, #580]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a90      	ldr	r2, [pc, #576]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e01d      	b.n	8004104 <HAL_RCC_OscConfig+0xb0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x98>
 80040d2:	4b8b      	ldr	r3, [pc, #556]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a8a      	ldr	r2, [pc, #552]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a87      	ldr	r2, [pc, #540]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0xb0>
 80040ec:	4b84      	ldr	r3, [pc, #528]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a83      	ldr	r2, [pc, #524]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b81      	ldr	r3, [pc, #516]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a80      	ldr	r2, [pc, #512]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d013      	beq.n	8004134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fe fd6a 	bl	8002be4 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7fe fd66 	bl	8002be4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e2a8      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004126:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0xc0>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe fd56 	bl	8002be4 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fd52 	bl	8002be4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e294      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414e:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0xe8>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d075      	beq.n	8004256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416a:	4b65      	ldr	r3, [pc, #404]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004174:	4b62      	ldr	r3, [pc, #392]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b0c      	cmp	r3, #12
 8004182:	d102      	bne.n	800418a <HAL_RCC_OscConfig+0x136>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d002      	beq.n	8004190 <HAL_RCC_OscConfig+0x13c>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d11f      	bne.n	80041d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004190:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x154>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e267      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b55      	ldr	r3, [pc, #340]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	4952      	ldr	r1, [pc, #328]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041bc:	4b51      	ldr	r3, [pc, #324]	; (8004304 <HAL_RCC_OscConfig+0x2b0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fa5f 	bl	8002684 <HAL_InitTick>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d043      	beq.n	8004254 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e253      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d023      	beq.n	8004220 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b49      	ldr	r3, [pc, #292]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a48      	ldr	r2, [pc, #288]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe fcfe 	bl	8002be4 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fe fcfa 	bl	8002be4 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e23c      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fe:	4b40      	ldr	r3, [pc, #256]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	4939      	ldr	r1, [pc, #228]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
 800421e:	e01a      	b.n	8004256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004220:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a36      	ldr	r2, [pc, #216]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe fcda 	bl	8002be4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004234:	f7fe fcd6 	bl	8002be4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e218      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004246:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x1e0>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03c      	beq.n	80042dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	4a23      	ldr	r2, [pc, #140]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fe fcb3 	bl	8002be4 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004282:	f7fe fcaf 	bl	8002be4 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e1f1      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ef      	beq.n	8004282 <HAL_RCC_OscConfig+0x22e>
 80042a2:	e01b      	b.n	80042dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b4:	f7fe fc96 	bl	8002be4 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042bc:	f7fe fc92 	bl	8002be4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e1d4      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1ef      	bne.n	80042bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80ab 	beq.w	8004440 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_RCC_OscConfig+0x2b4>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e005      	b.n	800430a <HAL_RCC_OscConfig+0x2b6>
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	200008c4 	.word	0x200008c4
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	4baf      	ldr	r3, [pc, #700]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	4aae      	ldr	r2, [pc, #696]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	6593      	str	r3, [r2, #88]	; 0x58
 800431a:	4bac      	ldr	r3, [pc, #688]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004326:	2301      	movs	r3, #1
 8004328:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432a:	4ba9      	ldr	r3, [pc, #676]	; (80045d0 <HAL_RCC_OscConfig+0x57c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d118      	bne.n	8004368 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004336:	4ba6      	ldr	r3, [pc, #664]	; (80045d0 <HAL_RCC_OscConfig+0x57c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4aa5      	ldr	r2, [pc, #660]	; (80045d0 <HAL_RCC_OscConfig+0x57c>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004342:	f7fe fc4f 	bl	8002be4 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fe fc4b 	bl	8002be4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e18d      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800435c:	4b9c      	ldr	r3, [pc, #624]	; (80045d0 <HAL_RCC_OscConfig+0x57c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d108      	bne.n	8004382 <HAL_RCC_OscConfig+0x32e>
 8004370:	4b96      	ldr	r3, [pc, #600]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	4a95      	ldr	r2, [pc, #596]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004380:	e024      	b.n	80043cc <HAL_RCC_OscConfig+0x378>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b05      	cmp	r3, #5
 8004388:	d110      	bne.n	80043ac <HAL_RCC_OscConfig+0x358>
 800438a:	4b90      	ldr	r3, [pc, #576]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	4a8e      	ldr	r2, [pc, #568]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439a:	4b8c      	ldr	r3, [pc, #560]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	4a8a      	ldr	r2, [pc, #552]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043aa:	e00f      	b.n	80043cc <HAL_RCC_OscConfig+0x378>
 80043ac:	4b87      	ldr	r3, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	4a86      	ldr	r2, [pc, #536]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043bc:	4b83      	ldr	r3, [pc, #524]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	4a82      	ldr	r2, [pc, #520]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d016      	beq.n	8004402 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fe fc06 	bl	8002be4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043da:	e00a      	b.n	80043f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fe fc02 	bl	8002be4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e142      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f2:	4b76      	ldr	r3, [pc, #472]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ed      	beq.n	80043dc <HAL_RCC_OscConfig+0x388>
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fe fbef 	bl	8002be4 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe fbeb 	bl	8002be4 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e12b      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ed      	bne.n	800440a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800442e:	7ffb      	ldrb	r3, [r7, #31]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004434:	4b65      	ldr	r3, [pc, #404]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	4a64      	ldr	r2, [pc, #400]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800443a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d03c      	beq.n	80044c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01c      	beq.n	800448e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004454:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800445a:	4a5c      	ldr	r2, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004464:	f7fe fbbe 	bl	8002be4 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800446c:	f7fe fbba 	bl	8002be4 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0fc      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800447e:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ef      	beq.n	800446c <HAL_RCC_OscConfig+0x418>
 800448c:	e01b      	b.n	80044c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800448e:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004494:	4a4d      	ldr	r2, [pc, #308]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449e:	f7fe fba1 	bl	8002be4 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a6:	f7fe fb9d 	bl	8002be4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0df      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b8:	4b44      	ldr	r3, [pc, #272]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80044ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ef      	bne.n	80044a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80d3 	beq.w	8004676 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044d0:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	f000 808d 	beq.w	80045f8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d15a      	bne.n	800459c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b39      	ldr	r3, [pc, #228]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a38      	ldr	r2, [pc, #224]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80044ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fe fb77 	bl	8002be4 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fe fb73 	bl	8002be4 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0b5      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004518:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <HAL_RCC_OscConfig+0x580>)
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6a11      	ldr	r1, [r2, #32]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004528:	3a01      	subs	r2, #1
 800452a:	0112      	lsls	r2, r2, #4
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004532:	0212      	lsls	r2, r2, #8
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800453a:	0852      	lsrs	r2, r2, #1
 800453c:	3a01      	subs	r2, #1
 800453e:	0552      	lsls	r2, r2, #21
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0652      	lsls	r2, r2, #25
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004552:	06d2      	lsls	r2, r2, #27
 8004554:	430a      	orrs	r2, r1
 8004556:	491d      	ldr	r1, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004558:	4313      	orrs	r3, r2
 800455a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800455c:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1a      	ldr	r2, [pc, #104]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004566:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fe fb36 	bl	8002be4 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fe fb32 	bl	8002be4 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e074      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x528>
 800459a:	e06c      	b.n	8004676 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a07      	ldr	r2, [pc, #28]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <HAL_RCC_OscConfig+0x578>)
 80045ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe fb0e 	bl	8002be4 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ca:	e00e      	b.n	80045ea <HAL_RCC_OscConfig+0x596>
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
 80045d4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fe fb04 	bl	8002be4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e046      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ea:	4b25      	ldr	r3, [pc, #148]	; (8004680 <HAL_RCC_OscConfig+0x62c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x584>
 80045f6:	e03e      	b.n	8004676 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e039      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <HAL_RCC_OscConfig+0x62c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	429a      	cmp	r2, r3
 8004616:	d12c      	bne.n	8004672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	3b01      	subs	r3, #1
 8004624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d123      	bne.n	8004672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d11b      	bne.n	8004672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d113      	bne.n	8004672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	3b01      	subs	r3, #1
 8004658:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d109      	bne.n	8004672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000

08004684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e11e      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b91      	ldr	r3, [pc, #580]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d910      	bls.n	80046cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b8e      	ldr	r3, [pc, #568]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 020f 	bic.w	r2, r3, #15
 80046b2:	498c      	ldr	r1, [pc, #560]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b8a      	ldr	r3, [pc, #552]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e106      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d073      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d129      	bne.n	8004734 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e0:	4b81      	ldr	r3, [pc, #516]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0f4      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046f0:	f000 f9d0 	bl	8004a94 <RCC_GetSysClockFreqFromPLLSource>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4a7c      	ldr	r2, [pc, #496]	; (80048ec <HAL_RCC_ClockConfig+0x268>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d93f      	bls.n	800477e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046fe:	4b7a      	ldr	r3, [pc, #488]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004712:	2b00      	cmp	r3, #0
 8004714:	d033      	beq.n	800477e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d12f      	bne.n	800477e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800471e:	4b72      	ldr	r3, [pc, #456]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004726:	4a70      	ldr	r2, [pc, #448]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e024      	b.n	800477e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d107      	bne.n	800474c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473c:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0c6      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474c:	4b66      	ldr	r3, [pc, #408]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0be      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800475c:	f000 f8ce 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8004760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4a61      	ldr	r2, [pc, #388]	; (80048ec <HAL_RCC_ClockConfig+0x268>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d909      	bls.n	800477e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800476a:	4b5f      	ldr	r3, [pc, #380]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004772:	4a5d      	ldr	r2, [pc, #372]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477e:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4957      	ldr	r1, [pc, #348]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800478c:	4313      	orrs	r3, r2
 800478e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004790:	f7fe fa28 	bl	8002be4 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fe fa24 	bl	8002be4 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e095      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b4e      	ldr	r3, [pc, #312]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 020c 	and.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1eb      	bne.n	8004798 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d023      	beq.n	8004814 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d8:	4b43      	ldr	r3, [pc, #268]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a42      	ldr	r2, [pc, #264]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047f0:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047f8:	4a3b      	ldr	r2, [pc, #236]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4936      	ldr	r1, [pc, #216]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
 8004812:	e008      	b.n	8004826 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d105      	bne.n	8004826 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800481a:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 8004820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004824:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004826:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d21d      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 020f 	bic.w	r2, r3, #15
 800483c:	4929      	ldr	r1, [pc, #164]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004844:	f7fe f9ce 	bl	8002be4 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484c:	f7fe f9ca 	bl	8002be4 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e03b      	b.n	80048da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d1ed      	bne.n	800484c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4917      	ldr	r1, [pc, #92]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490f      	ldr	r1, [pc, #60]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ae:	f000 f825 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	490c      	ldr	r1, [pc, #48]	; (80048f0 <HAL_RCC_ClockConfig+0x26c>)
 80048c0:	5ccb      	ldrb	r3, [r1, r3]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x270>)
 80048cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x274>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd fed6 	bl	8002684 <HAL_InitTick>
 80048d8:	4603      	mov	r3, r0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40021000 	.word	0x40021000
 80048ec:	04c4b400 	.word	0x04c4b400
 80048f0:	0800fd94 	.word	0x0800fd94
 80048f4:	200008c0 	.word	0x200008c0
 80048f8:	200008c4 	.word	0x200008c4

080048fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004902:	4b2c      	ldr	r3, [pc, #176]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d102      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800490e:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e047      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004914:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b08      	cmp	r3, #8
 800491e:	d102      	bne.n	8004926 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	e03e      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d136      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800493c:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3301      	adds	r3, #1
 8004948:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d10c      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800495a:	68d2      	ldr	r2, [r2, #12]
 800495c:	0a12      	lsrs	r2, r2, #8
 800495e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	617b      	str	r3, [r7, #20]
      break;
 8004968:	e00c      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004974:	68d2      	ldr	r2, [r2, #12]
 8004976:	0a12      	lsrs	r2, r2, #8
 8004978:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
      break;
 8004982:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0e5b      	lsrs	r3, r3, #25
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	3301      	adds	r3, #1
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e001      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049a4:	693b      	ldr	r3, [r7, #16]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000
 80049b8:	00f42400 	.word	0x00f42400
 80049bc:	016e3600 	.word	0x016e3600

080049c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	200008c0 	.word	0x200008c0

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	0800fda4 	.word	0x0800fda4

08004a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a08:	f7ff ffda 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0adb      	lsrs	r3, r3, #11
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	0800fda4 	.word	0x0800fda4

08004a30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0203 	and.w	r2, r3, #3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	08db      	lsrs	r3, r3, #3
 8004a6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <HAL_RCC_GetClockConfig+0x60>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 020f 	and.w	r2, r3, #15
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	601a      	str	r2, [r3, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40022000 	.word	0x40022000

08004a94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d10c      	bne.n	8004ad2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab8:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ac2:	68d2      	ldr	r2, [r2, #12]
 8004ac4:	0a12      	lsrs	r2, r2, #8
 8004ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	617b      	str	r3, [r7, #20]
    break;
 8004ad0:	e00c      	b.n	8004aec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	0a12      	lsrs	r2, r2, #8
 8004ae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ae4:	fb02 f303 	mul.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]
    break;
 8004aea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	0e5b      	lsrs	r3, r3, #25
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	3301      	adds	r3, #1
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b06:	687b      	ldr	r3, [r7, #4]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40021000 	.word	0x40021000
 8004b18:	016e3600 	.word	0x016e3600
 8004b1c:	00f42400 	.word	0x00f42400

08004b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b28:	2300      	movs	r3, #0
 8004b2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8098 	beq.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b42:	4b43      	ldr	r3, [pc, #268]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10d      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	4a3f      	ldr	r2, [pc, #252]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a39      	ldr	r2, [pc, #228]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b76:	f7fe f835 	bl	8002be4 <HAL_GetTick>
 8004b7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b7c:	e009      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fe f831 	bl	8002be4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d902      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	74fb      	strb	r3, [r7, #19]
        break;
 8004b90:	e005      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b92:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ef      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d159      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ba4:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01e      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d019      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc0:	4b23      	ldr	r3, [pc, #140]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bcc:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bdc:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d016      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfe:	f7fd fff1 	bl	8002be4 <HAL_GetTick>
 8004c02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c04:	e00b      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd ffed 	bl	8002be4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d902      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c1c:	e006      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ec      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	4903      	ldr	r1, [pc, #12]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c48:	e008      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
 8004c4c:	74bb      	strb	r3, [r7, #18]
 8004c4e:	e005      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5c:	7c7b      	ldrb	r3, [r7, #17]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c62:	4baf      	ldr	r3, [pc, #700]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	4aae      	ldr	r2, [pc, #696]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7a:	4ba9      	ldr	r3, [pc, #676]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f023 0203 	bic.w	r2, r3, #3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	49a5      	ldr	r1, [pc, #660]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c9c:	4ba0      	ldr	r3, [pc, #640]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 020c 	bic.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	499d      	ldr	r1, [pc, #628]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cbe:	4b98      	ldr	r3, [pc, #608]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4994      	ldr	r1, [pc, #592]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce0:	4b8f      	ldr	r3, [pc, #572]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	498c      	ldr	r1, [pc, #560]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d02:	4b87      	ldr	r3, [pc, #540]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	4983      	ldr	r1, [pc, #524]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d24:	4b7e      	ldr	r3, [pc, #504]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	497b      	ldr	r1, [pc, #492]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d46:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	4972      	ldr	r1, [pc, #456]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d68:	4b6d      	ldr	r3, [pc, #436]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	496a      	ldr	r1, [pc, #424]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d8a:	4b65      	ldr	r3, [pc, #404]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	4961      	ldr	r1, [pc, #388]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dac:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	4959      	ldr	r1, [pc, #356]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dce:	4b54      	ldr	r3, [pc, #336]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	4950      	ldr	r1, [pc, #320]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df0:	4b4b      	ldr	r3, [pc, #300]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	4948      	ldr	r1, [pc, #288]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0e:	d105      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e10:	4b43      	ldr	r3, [pc, #268]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a42      	ldr	r2, [pc, #264]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e28:	4b3d      	ldr	r3, [pc, #244]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e36:	493a      	ldr	r1, [pc, #232]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e48:	4b35      	ldr	r3, [pc, #212]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a34      	ldr	r2, [pc, #208]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d015      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e60:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	492c      	ldr	r1, [pc, #176]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e98:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	491e      	ldr	r1, [pc, #120]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	4910      	ldr	r1, [pc, #64]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d018      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	4902      	ldr	r1, [pc, #8]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f1e:	e001      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004f20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f2e:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d015      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f46:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f54:	4917      	ldr	r1, [pc, #92]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f64:	d105      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f66:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4a12      	ldr	r2, [pc, #72]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d015      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8c:	4909      	ldr	r1, [pc, #36]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f9c:	d105      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004faa:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000

08004fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e049      	b.n	800505e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fd fcee 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fa84 	bl	8005504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e054      	b.n	800512a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a26      	ldr	r2, [pc, #152]	; (8005138 <HAL_TIM_Base_Start_IT+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d01d      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_TIM_Base_Start_IT+0xd4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a21      	ldr	r2, [pc, #132]	; (8005140 <HAL_TIM_Base_Start_IT+0xd8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <HAL_TIM_Base_Start_IT+0xdc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <HAL_TIM_Base_Start_IT+0xe0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1c      	ldr	r2, [pc, #112]	; (800514c <HAL_TIM_Base_Start_IT+0xe4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <HAL_TIM_Base_Start_IT+0xe8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d115      	bne.n	8005114 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_TIM_Base_Start_IT+0xec>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d015      	beq.n	8005126 <HAL_TIM_Base_Start_IT+0xbe>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d011      	beq.n	8005126 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	e008      	b.n	8005126 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e000      	b.n	8005128 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	40015000 	.word	0x40015000
 8005154:	00010007 	.word	0x00010007

08005158 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	f241 1311 	movw	r3, #4369	; 0x1111
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10f      	bne.n	80051a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	f244 4344 	movw	r3, #17476	; 0x4444
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d122      	bne.n	8005212 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d11b      	bne.n	8005212 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f06f 0202 	mvn.w	r2, #2
 80051e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f965 	bl	80054c8 <HAL_TIM_IC_CaptureCallback>
 80051fe:	e005      	b.n	800520c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f957 	bl	80054b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f968 	bl	80054dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d122      	bne.n	8005266 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d11b      	bne.n	8005266 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0204 	mvn.w	r2, #4
 8005236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f93b 	bl	80054c8 <HAL_TIM_IC_CaptureCallback>
 8005252:	e005      	b.n	8005260 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f92d 	bl	80054b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f93e 	bl	80054dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d122      	bne.n	80052ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b08      	cmp	r3, #8
 8005280:	d11b      	bne.n	80052ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0208 	mvn.w	r2, #8
 800528a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2204      	movs	r2, #4
 8005290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f911 	bl	80054c8 <HAL_TIM_IC_CaptureCallback>
 80052a6:	e005      	b.n	80052b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f903 	bl	80054b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f914 	bl	80054dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d122      	bne.n	800530e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d11b      	bne.n	800530e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0210 	mvn.w	r2, #16
 80052de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2208      	movs	r2, #8
 80052e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8e7 	bl	80054c8 <HAL_TIM_IC_CaptureCallback>
 80052fa:	e005      	b.n	8005308 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f8d9 	bl	80054b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8ea 	bl	80054dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10e      	bne.n	800533a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d107      	bne.n	800533a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0201 	mvn.w	r2, #1
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fd f853 	bl	80023e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d10e      	bne.n	8005366 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d107      	bne.n	8005366 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800535e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fa17 	bl	8005794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	2b80      	cmp	r3, #128	; 0x80
 8005382:	d107      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa0a 	bl	80057a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d10e      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d107      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f898 	bl	80054f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d107      	bne.n	80053ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0220 	mvn.w	r2, #32
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9ca 	bl	8005780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fa:	d10f      	bne.n	800541c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540a:	d107      	bne.n	800541c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9d0 	bl	80057bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542a:	d10f      	bne.n	800544c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800543a:	d107      	bne.n	800544c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9c2 	bl	80057d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545a:	d10f      	bne.n	800547c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f9b4 	bl	80057e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005486:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800548a:	d10f      	bne.n	80054ac <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9a6 	bl	80057f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a46      	ldr	r2, [pc, #280]	; (8005630 <TIM_Base_SetConfig+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d017      	beq.n	800554c <TIM_Base_SetConfig+0x48>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x48>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a43      	ldr	r2, [pc, #268]	; (8005634 <TIM_Base_SetConfig+0x130>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x48>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a42      	ldr	r2, [pc, #264]	; (8005638 <TIM_Base_SetConfig+0x134>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x48>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a41      	ldr	r2, [pc, #260]	; (800563c <TIM_Base_SetConfig+0x138>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x48>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a40      	ldr	r2, [pc, #256]	; (8005640 <TIM_Base_SetConfig+0x13c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x48>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3f      	ldr	r2, [pc, #252]	; (8005644 <TIM_Base_SetConfig+0x140>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a33      	ldr	r2, [pc, #204]	; (8005630 <TIM_Base_SetConfig+0x12c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d023      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d01f      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a30      	ldr	r2, [pc, #192]	; (8005634 <TIM_Base_SetConfig+0x130>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01b      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2f      	ldr	r2, [pc, #188]	; (8005638 <TIM_Base_SetConfig+0x134>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d017      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2e      	ldr	r2, [pc, #184]	; (800563c <TIM_Base_SetConfig+0x138>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2d      	ldr	r2, [pc, #180]	; (8005640 <TIM_Base_SetConfig+0x13c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00f      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2d      	ldr	r2, [pc, #180]	; (8005648 <TIM_Base_SetConfig+0x144>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00b      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2c      	ldr	r2, [pc, #176]	; (800564c <TIM_Base_SetConfig+0x148>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <TIM_Base_SetConfig+0x14c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <TIM_Base_SetConfig+0xaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a26      	ldr	r2, [pc, #152]	; (8005644 <TIM_Base_SetConfig+0x140>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d108      	bne.n	80055c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a12      	ldr	r2, [pc, #72]	; (8005630 <TIM_Base_SetConfig+0x12c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <TIM_Base_SetConfig+0x110>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a14      	ldr	r2, [pc, #80]	; (8005640 <TIM_Base_SetConfig+0x13c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00f      	beq.n	8005614 <TIM_Base_SetConfig+0x110>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a14      	ldr	r2, [pc, #80]	; (8005648 <TIM_Base_SetConfig+0x144>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00b      	beq.n	8005614 <TIM_Base_SetConfig+0x110>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <TIM_Base_SetConfig+0x148>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_Base_SetConfig+0x110>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a12      	ldr	r2, [pc, #72]	; (8005650 <TIM_Base_SetConfig+0x14c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_Base_SetConfig+0x110>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a0d      	ldr	r2, [pc, #52]	; (8005644 <TIM_Base_SetConfig+0x140>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d103      	bne.n	800561c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	615a      	str	r2, [r3, #20]
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40015000 	.word	0x40015000
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e074      	b.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a34      	ldr	r2, [pc, #208]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a33      	ldr	r2, [pc, #204]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a31      	ldr	r2, [pc, #196]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a21      	ldr	r2, [pc, #132]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ec:	d01d      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a15      	ldr	r2, [pc, #84]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a11      	ldr	r2, [pc, #68]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d10c      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	4313      	orrs	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40015000 	.word	0x40015000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40014000 	.word	0x40014000

08005780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e042      	b.n	80058a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7fd f937 	bl	8002aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2224      	movs	r2, #36	; 0x24
 800583a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fb04 	bl	8005e5c <UART_SetConfig>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e022      	b.n	80058a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fdc2 	bl	80063f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800587a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800588a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fe49 	bl	8006534 <UART_CheckIdleState>
 80058a2:	4603      	mov	r3, r0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d168      	bne.n	8005996 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_UART_Transmit_IT+0x24>
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e061      	b.n	8005998 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Transmit_IT+0x36>
 80058de:	2302      	movs	r3, #2
 80058e0:	e05a      	b.n	8005998 <HAL_UART_Transmit_IT+0xec>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2221      	movs	r2, #33	; 0x21
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800591a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591e:	d11c      	bne.n	800595a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005928:	d107      	bne.n	800593a <HAL_UART_Transmit_IT+0x8e>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_UART_Transmit_IT+0xf8>)
 8005936:	675a      	str	r2, [r3, #116]	; 0x74
 8005938:	e002      	b.n	8005940 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <HAL_UART_Transmit_IT+0xfc>)
 800593e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	e01b      	b.n	8005992 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d107      	bne.n	8005974 <HAL_UART_Transmit_IT+0xc8>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a0f      	ldr	r2, [pc, #60]	; (80059ac <HAL_UART_Transmit_IT+0x100>)
 8005970:	675a      	str	r2, [r3, #116]	; 0x74
 8005972:	e002      	b.n	800597a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a0e      	ldr	r2, [pc, #56]	; (80059b0 <HAL_UART_Transmit_IT+0x104>)
 8005978:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005990:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	080068e7 	.word	0x080068e7
 80059a8:	0800684d 	.word	0x0800684d
 80059ac:	080067cf 	.word	0x080067cf
 80059b0:	0800675b 	.word	0x0800675b

080059b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059da:	4013      	ands	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d118      	bne.n	8005a16 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d013      	beq.n	8005a16 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 81fb 	beq.w	8005e02 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
      }
      return;
 8005a14:	e1f5      	b.n	8005e02 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80ef 	beq.w	8005bfc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4b73      	ldr	r3, [pc, #460]	; (8005bf0 <HAL_UART_IRQHandler+0x23c>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4b72      	ldr	r3, [pc, #456]	; (8005bf4 <HAL_UART_IRQHandler+0x240>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80e4 	beq.w	8005bfc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <HAL_UART_IRQHandler+0xac>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a56:	f043 0201 	orr.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d010      	beq.n	8005a8c <HAL_UART_IRQHandler+0xd8>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a82:	f043 0204 	orr.w	r2, r3, #4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d010      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x104>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aae:	f043 0202 	orr.w	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d015      	beq.n	8005aee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4b48      	ldr	r3, [pc, #288]	; (8005bf0 <HAL_UART_IRQHandler+0x23c>)
 8005ad0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2208      	movs	r2, #8
 8005adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae4:	f043 0208 	orr.w	r2, r3, #8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d011      	beq.n	8005b1c <HAL_UART_IRQHandler+0x168>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 816f 	beq.w	8005e06 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d011      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d004      	beq.n	8005b76 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d031      	beq.n	8005bda <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fda7 	bl	80066ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d123      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d013      	beq.n	8005bca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba6:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <HAL_UART_IRQHandler+0x244>)
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fd f97f 	bl	8002eb2 <HAL_DMA_Abort_IT>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d017      	beq.n	8005bea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	e00f      	b.n	8005bea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f930 	bl	8005e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	e00b      	b.n	8005bea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f92c 	bl	8005e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	e007      	b.n	8005bea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f928 	bl	8005e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005be8:	e10d      	b.n	8005e06 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bea:	bf00      	nop
    return;
 8005bec:	e10b      	b.n	8005e06 <HAL_UART_IRQHandler+0x452>
 8005bee:	bf00      	nop
 8005bf0:	10000001 	.word	0x10000001
 8005bf4:	04000120 	.word	0x04000120
 8005bf8:	0800672f 	.word	0x0800672f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f040 80ab 	bne.w	8005d5c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a5 	beq.w	8005d5c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 809f 	beq.w	8005d5c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2210      	movs	r2, #16
 8005c24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d155      	bne.n	8005ce0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005c3e:	893b      	ldrh	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 80e2 	beq.w	8005e0a <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c4c:	893a      	ldrh	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	f080 80db 	bcs.w	8005e0a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	893a      	ldrh	r2, [r7, #8]
 8005c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d12b      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0210 	bic.w	r2, r2, #16
 8005cb8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd f89e 	bl	8002e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f8b3 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cde:	e094      	b.n	8005e0a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8087 	beq.w	8005e0e <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8005d00:	897b      	ldrh	r3, [r7, #10]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8083 	beq.w	8005e0e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d16:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0210 	bic.w	r2, r2, #16
 8005d4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d50:	897b      	ldrh	r3, [r7, #10]
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f875 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d5a:	e058      	b.n	8005e0e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <HAL_UART_IRQHandler+0x3ce>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fe1f 	bl	80069be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d80:	e048      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d012      	beq.n	8005db2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d034      	beq.n	8005e12 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	4798      	blx	r3
    }
    return;
 8005db0:	e02f      	b.n	8005e12 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_UART_IRQHandler+0x41a>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fddf 	bl	800698a <UART_EndTransmit_IT>
    return;
 8005dcc:	e022      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_UART_IRQHandler+0x436>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fdff 	bl	80069e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005de8:	e014      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00f      	beq.n	8005e14 <HAL_UART_IRQHandler+0x460>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da0c      	bge.n	8005e14 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fde9 	bl	80069d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e00:	e008      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
      return;
 8005e02:	bf00      	nop
 8005e04:	e006      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
    return;
 8005e06:	bf00      	nop
 8005e08:	e004      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
      return;
 8005e0a:	bf00      	nop
 8005e0c:	e002      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
      return;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_UART_IRQHandler+0x460>
    return;
 8005e12:	bf00      	nop
  }
}
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop

08005e1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	b5b0      	push	{r4, r5, r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4bb1      	ldr	r3, [pc, #708]	; (800614c <UART_SetConfig+0x2f0>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	69f9      	ldr	r1, [r7, #28]
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4aa6      	ldr	r2, [pc, #664]	; (8006150 <UART_SetConfig+0x2f4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ece:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	69f9      	ldr	r1, [r7, #28]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	f023 010f 	bic.w	r1, r3, #15
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a97      	ldr	r2, [pc, #604]	; (8006154 <UART_SetConfig+0x2f8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d120      	bne.n	8005f3e <UART_SetConfig+0xe2>
 8005efc:	4b96      	ldr	r3, [pc, #600]	; (8006158 <UART_SetConfig+0x2fc>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d816      	bhi.n	8005f38 <UART_SetConfig+0xdc>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0xb4>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f2d 	.word	0x08005f2d
 8005f18:	08005f27 	.word	0x08005f27
 8005f1c:	08005f33 	.word	0x08005f33
 8005f20:	2301      	movs	r3, #1
 8005f22:	76fb      	strb	r3, [r7, #27]
 8005f24:	e0e7      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005f26:	2302      	movs	r3, #2
 8005f28:	76fb      	strb	r3, [r7, #27]
 8005f2a:	e0e4      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	76fb      	strb	r3, [r7, #27]
 8005f30:	e0e1      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005f32:	2308      	movs	r3, #8
 8005f34:	76fb      	strb	r3, [r7, #27]
 8005f36:	e0de      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	76fb      	strb	r3, [r7, #27]
 8005f3c:	e0db      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a86      	ldr	r2, [pc, #536]	; (800615c <UART_SetConfig+0x300>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d132      	bne.n	8005fae <UART_SetConfig+0x152>
 8005f48:	4b83      	ldr	r3, [pc, #524]	; (8006158 <UART_SetConfig+0x2fc>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d828      	bhi.n	8005fa8 <UART_SetConfig+0x14c>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x100>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f91 	.word	0x08005f91
 8005f60:	08005fa9 	.word	0x08005fa9
 8005f64:	08005fa9 	.word	0x08005fa9
 8005f68:	08005fa9 	.word	0x08005fa9
 8005f6c:	08005f9d 	.word	0x08005f9d
 8005f70:	08005fa9 	.word	0x08005fa9
 8005f74:	08005fa9 	.word	0x08005fa9
 8005f78:	08005fa9 	.word	0x08005fa9
 8005f7c:	08005f97 	.word	0x08005f97
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fa9 	.word	0x08005fa9
 8005f8c:	08005fa3 	.word	0x08005fa3
 8005f90:	2300      	movs	r3, #0
 8005f92:	76fb      	strb	r3, [r7, #27]
 8005f94:	e0af      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005f96:	2302      	movs	r3, #2
 8005f98:	76fb      	strb	r3, [r7, #27]
 8005f9a:	e0ac      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	76fb      	strb	r3, [r7, #27]
 8005fa0:	e0a9      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	76fb      	strb	r3, [r7, #27]
 8005fa6:	e0a6      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	76fb      	strb	r3, [r7, #27]
 8005fac:	e0a3      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a6b      	ldr	r2, [pc, #428]	; (8006160 <UART_SetConfig+0x304>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d120      	bne.n	8005ffa <UART_SetConfig+0x19e>
 8005fb8:	4b67      	ldr	r3, [pc, #412]	; (8006158 <UART_SetConfig+0x2fc>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fc2:	2b30      	cmp	r3, #48	; 0x30
 8005fc4:	d013      	beq.n	8005fee <UART_SetConfig+0x192>
 8005fc6:	2b30      	cmp	r3, #48	; 0x30
 8005fc8:	d814      	bhi.n	8005ff4 <UART_SetConfig+0x198>
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d009      	beq.n	8005fe2 <UART_SetConfig+0x186>
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d810      	bhi.n	8005ff4 <UART_SetConfig+0x198>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <UART_SetConfig+0x180>
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d006      	beq.n	8005fe8 <UART_SetConfig+0x18c>
 8005fda:	e00b      	b.n	8005ff4 <UART_SetConfig+0x198>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	76fb      	strb	r3, [r7, #27]
 8005fe0:	e089      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	76fb      	strb	r3, [r7, #27]
 8005fe6:	e086      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	76fb      	strb	r3, [r7, #27]
 8005fec:	e083      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005fee:	2308      	movs	r3, #8
 8005ff0:	76fb      	strb	r3, [r7, #27]
 8005ff2:	e080      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	76fb      	strb	r3, [r7, #27]
 8005ff8:	e07d      	b.n	80060f6 <UART_SetConfig+0x29a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a59      	ldr	r2, [pc, #356]	; (8006164 <UART_SetConfig+0x308>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d120      	bne.n	8006046 <UART_SetConfig+0x1ea>
 8006004:	4b54      	ldr	r3, [pc, #336]	; (8006158 <UART_SetConfig+0x2fc>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800600e:	2bc0      	cmp	r3, #192	; 0xc0
 8006010:	d013      	beq.n	800603a <UART_SetConfig+0x1de>
 8006012:	2bc0      	cmp	r3, #192	; 0xc0
 8006014:	d814      	bhi.n	8006040 <UART_SetConfig+0x1e4>
 8006016:	2b80      	cmp	r3, #128	; 0x80
 8006018:	d009      	beq.n	800602e <UART_SetConfig+0x1d2>
 800601a:	2b80      	cmp	r3, #128	; 0x80
 800601c:	d810      	bhi.n	8006040 <UART_SetConfig+0x1e4>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <UART_SetConfig+0x1cc>
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d006      	beq.n	8006034 <UART_SetConfig+0x1d8>
 8006026:	e00b      	b.n	8006040 <UART_SetConfig+0x1e4>
 8006028:	2300      	movs	r3, #0
 800602a:	76fb      	strb	r3, [r7, #27]
 800602c:	e063      	b.n	80060f6 <UART_SetConfig+0x29a>
 800602e:	2302      	movs	r3, #2
 8006030:	76fb      	strb	r3, [r7, #27]
 8006032:	e060      	b.n	80060f6 <UART_SetConfig+0x29a>
 8006034:	2304      	movs	r3, #4
 8006036:	76fb      	strb	r3, [r7, #27]
 8006038:	e05d      	b.n	80060f6 <UART_SetConfig+0x29a>
 800603a:	2308      	movs	r3, #8
 800603c:	76fb      	strb	r3, [r7, #27]
 800603e:	e05a      	b.n	80060f6 <UART_SetConfig+0x29a>
 8006040:	2310      	movs	r3, #16
 8006042:	76fb      	strb	r3, [r7, #27]
 8006044:	e057      	b.n	80060f6 <UART_SetConfig+0x29a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a47      	ldr	r2, [pc, #284]	; (8006168 <UART_SetConfig+0x30c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d125      	bne.n	800609c <UART_SetConfig+0x240>
 8006050:	4b41      	ldr	r3, [pc, #260]	; (8006158 <UART_SetConfig+0x2fc>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605e:	d017      	beq.n	8006090 <UART_SetConfig+0x234>
 8006060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006064:	d817      	bhi.n	8006096 <UART_SetConfig+0x23a>
 8006066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606a:	d00b      	beq.n	8006084 <UART_SetConfig+0x228>
 800606c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006070:	d811      	bhi.n	8006096 <UART_SetConfig+0x23a>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <UART_SetConfig+0x222>
 8006076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607a:	d006      	beq.n	800608a <UART_SetConfig+0x22e>
 800607c:	e00b      	b.n	8006096 <UART_SetConfig+0x23a>
 800607e:	2300      	movs	r3, #0
 8006080:	76fb      	strb	r3, [r7, #27]
 8006082:	e038      	b.n	80060f6 <UART_SetConfig+0x29a>
 8006084:	2302      	movs	r3, #2
 8006086:	76fb      	strb	r3, [r7, #27]
 8006088:	e035      	b.n	80060f6 <UART_SetConfig+0x29a>
 800608a:	2304      	movs	r3, #4
 800608c:	76fb      	strb	r3, [r7, #27]
 800608e:	e032      	b.n	80060f6 <UART_SetConfig+0x29a>
 8006090:	2308      	movs	r3, #8
 8006092:	76fb      	strb	r3, [r7, #27]
 8006094:	e02f      	b.n	80060f6 <UART_SetConfig+0x29a>
 8006096:	2310      	movs	r3, #16
 8006098:	76fb      	strb	r3, [r7, #27]
 800609a:	e02c      	b.n	80060f6 <UART_SetConfig+0x29a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <UART_SetConfig+0x2f4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d125      	bne.n	80060f2 <UART_SetConfig+0x296>
 80060a6:	4b2c      	ldr	r3, [pc, #176]	; (8006158 <UART_SetConfig+0x2fc>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060b4:	d017      	beq.n	80060e6 <UART_SetConfig+0x28a>
 80060b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ba:	d817      	bhi.n	80060ec <UART_SetConfig+0x290>
 80060bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c0:	d00b      	beq.n	80060da <UART_SetConfig+0x27e>
 80060c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c6:	d811      	bhi.n	80060ec <UART_SetConfig+0x290>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <UART_SetConfig+0x278>
 80060cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d0:	d006      	beq.n	80060e0 <UART_SetConfig+0x284>
 80060d2:	e00b      	b.n	80060ec <UART_SetConfig+0x290>
 80060d4:	2300      	movs	r3, #0
 80060d6:	76fb      	strb	r3, [r7, #27]
 80060d8:	e00d      	b.n	80060f6 <UART_SetConfig+0x29a>
 80060da:	2302      	movs	r3, #2
 80060dc:	76fb      	strb	r3, [r7, #27]
 80060de:	e00a      	b.n	80060f6 <UART_SetConfig+0x29a>
 80060e0:	2304      	movs	r3, #4
 80060e2:	76fb      	strb	r3, [r7, #27]
 80060e4:	e007      	b.n	80060f6 <UART_SetConfig+0x29a>
 80060e6:	2308      	movs	r3, #8
 80060e8:	76fb      	strb	r3, [r7, #27]
 80060ea:	e004      	b.n	80060f6 <UART_SetConfig+0x29a>
 80060ec:	2310      	movs	r3, #16
 80060ee:	76fb      	strb	r3, [r7, #27]
 80060f0:	e001      	b.n	80060f6 <UART_SetConfig+0x29a>
 80060f2:	2310      	movs	r3, #16
 80060f4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a15      	ldr	r2, [pc, #84]	; (8006150 <UART_SetConfig+0x2f4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f040 809f 	bne.w	8006240 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006102:	7efb      	ldrb	r3, [r7, #27]
 8006104:	2b08      	cmp	r3, #8
 8006106:	d837      	bhi.n	8006178 <UART_SetConfig+0x31c>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <UART_SetConfig+0x2b4>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006135 	.word	0x08006135
 8006114:	08006179 	.word	0x08006179
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006179 	.word	0x08006179
 8006120:	08006143 	.word	0x08006143
 8006124:	08006179 	.word	0x08006179
 8006128:	08006179 	.word	0x08006179
 800612c:	08006179 	.word	0x08006179
 8006130:	08006171 	.word	0x08006171
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006134:	f7fe fc50 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8006138:	6178      	str	r0, [r7, #20]
        break;
 800613a:	e022      	b.n	8006182 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800613c:	4b0b      	ldr	r3, [pc, #44]	; (800616c <UART_SetConfig+0x310>)
 800613e:	617b      	str	r3, [r7, #20]
        break;
 8006140:	e01f      	b.n	8006182 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006142:	f7fe fbdb 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006146:	6178      	str	r0, [r7, #20]
        break;
 8006148:	e01b      	b.n	8006182 <UART_SetConfig+0x326>
 800614a:	bf00      	nop
 800614c:	cfff69f3 	.word	0xcfff69f3
 8006150:	40008000 	.word	0x40008000
 8006154:	40013800 	.word	0x40013800
 8006158:	40021000 	.word	0x40021000
 800615c:	40004400 	.word	0x40004400
 8006160:	40004800 	.word	0x40004800
 8006164:	40004c00 	.word	0x40004c00
 8006168:	40005000 	.word	0x40005000
 800616c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006174:	617b      	str	r3, [r7, #20]
        break;
 8006176:	e004      	b.n	8006182 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	76bb      	strb	r3, [r7, #26]
        break;
 8006180:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 811b 	beq.w	80063c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	4a96      	ldr	r2, [pc, #600]	; (80063e8 <UART_SetConfig+0x58c>)
 8006190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006194:	461a      	mov	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	fbb3 f3f2 	udiv	r3, r3, r2
 800619c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	4413      	add	r3, r2
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d305      	bcc.n	80061ba <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d902      	bls.n	80061c0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	76bb      	strb	r3, [r7, #26]
 80061be:	e0ff      	b.n	80063c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f04f 0100 	mov.w	r1, #0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	4a86      	ldr	r2, [pc, #536]	; (80063e8 <UART_SetConfig+0x58c>)
 80061ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	f7fa fd5e 	bl	8000c98 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4610      	mov	r0, r2
 80061e2:	4619      	mov	r1, r3
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	020b      	lsls	r3, r1, #8
 80061ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061f2:	0202      	lsls	r2, r0, #8
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	6849      	ldr	r1, [r1, #4]
 80061f8:	0849      	lsrs	r1, r1, #1
 80061fa:	4608      	mov	r0, r1
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	1814      	adds	r4, r2, r0
 8006202:	eb43 0501 	adc.w	r5, r3, r1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	461a      	mov	r2, r3
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7fa fd40 	bl	8000c98 <__aeabi_uldivmod>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4613      	mov	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006226:	d308      	bcc.n	800623a <UART_SetConfig+0x3de>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800622e:	d204      	bcs.n	800623a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	60da      	str	r2, [r3, #12]
 8006238:	e0c2      	b.n	80063c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	76bb      	strb	r3, [r7, #26]
 800623e:	e0bf      	b.n	80063c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006248:	d165      	bne.n	8006316 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800624a:	7efb      	ldrb	r3, [r7, #27]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d828      	bhi.n	80062a2 <UART_SetConfig+0x446>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0x3fc>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	0800627d 	.word	0x0800627d
 800625c:	08006285 	.word	0x08006285
 8006260:	0800628d 	.word	0x0800628d
 8006264:	080062a3 	.word	0x080062a3
 8006268:	08006293 	.word	0x08006293
 800626c:	080062a3 	.word	0x080062a3
 8006270:	080062a3 	.word	0x080062a3
 8006274:	080062a3 	.word	0x080062a3
 8006278:	0800629b 	.word	0x0800629b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800627c:	f7fe fbac 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8006280:	6178      	str	r0, [r7, #20]
        break;
 8006282:	e013      	b.n	80062ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006284:	f7fe fbbe 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8006288:	6178      	str	r0, [r7, #20]
        break;
 800628a:	e00f      	b.n	80062ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800628c:	4b57      	ldr	r3, [pc, #348]	; (80063ec <UART_SetConfig+0x590>)
 800628e:	617b      	str	r3, [r7, #20]
        break;
 8006290:	e00c      	b.n	80062ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006292:	f7fe fb33 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006296:	6178      	str	r0, [r7, #20]
        break;
 8006298:	e008      	b.n	80062ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629e:	617b      	str	r3, [r7, #20]
        break;
 80062a0:	e004      	b.n	80062ac <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	76bb      	strb	r3, [r7, #26]
        break;
 80062aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8086 	beq.w	80063c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	4a4b      	ldr	r2, [pc, #300]	; (80063e8 <UART_SetConfig+0x58c>)
 80062ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062be:	461a      	mov	r2, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c6:	005a      	lsls	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	441a      	add	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	b29b      	uxth	r3, r3
 80062da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d916      	bls.n	8006310 <UART_SetConfig+0x4b4>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d212      	bcs.n	8006310 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f023 030f 	bic.w	r3, r3, #15
 80062f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	b29a      	uxth	r2, r3
 8006300:	89fb      	ldrh	r3, [r7, #14]
 8006302:	4313      	orrs	r3, r2
 8006304:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	89fa      	ldrh	r2, [r7, #14]
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	e057      	b.n	80063c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	76bb      	strb	r3, [r7, #26]
 8006314:	e054      	b.n	80063c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006316:	7efb      	ldrb	r3, [r7, #27]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d828      	bhi.n	800636e <UART_SetConfig+0x512>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0x4c8>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006349 	.word	0x08006349
 8006328:	08006351 	.word	0x08006351
 800632c:	08006359 	.word	0x08006359
 8006330:	0800636f 	.word	0x0800636f
 8006334:	0800635f 	.word	0x0800635f
 8006338:	0800636f 	.word	0x0800636f
 800633c:	0800636f 	.word	0x0800636f
 8006340:	0800636f 	.word	0x0800636f
 8006344:	08006367 	.word	0x08006367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fe fb46 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 800634c:	6178      	str	r0, [r7, #20]
        break;
 800634e:	e013      	b.n	8006378 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7fe fb58 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8006354:	6178      	str	r0, [r7, #20]
        break;
 8006356:	e00f      	b.n	8006378 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006358:	4b24      	ldr	r3, [pc, #144]	; (80063ec <UART_SetConfig+0x590>)
 800635a:	617b      	str	r3, [r7, #20]
        break;
 800635c:	e00c      	b.n	8006378 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635e:	f7fe facd 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006362:	6178      	str	r0, [r7, #20]
        break;
 8006364:	e008      	b.n	8006378 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636a:	617b      	str	r3, [r7, #20]
        break;
 800636c:	e004      	b.n	8006378 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	76bb      	strb	r3, [r7, #26]
        break;
 8006376:	bf00      	nop
    }

    if (pclk != 0U)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d020      	beq.n	80063c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <UART_SetConfig+0x58c>)
 8006384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006388:	461a      	mov	r2, r3
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	441a      	add	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b0f      	cmp	r3, #15
 80063a8:	d908      	bls.n	80063bc <UART_SetConfig+0x560>
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b0:	d204      	bcs.n	80063bc <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e001      	b.n	80063c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bdb0      	pop	{r4, r5, r7, pc}
 80063e6:	bf00      	nop
 80063e8:	0800fdac 	.word	0x0800fdac
 80063ec:	00f42400 	.word	0x00f42400

080063f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01a      	beq.n	8006506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ee:	d10a      	bne.n	8006506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  }
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006544:	f7fc fb4e 	bl	8002be4 <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b08      	cmp	r3, #8
 8006556:	d10e      	bne.n	8006576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f82f 	bl	80065ca <UART_WaitOnFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e025      	b.n	80065c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d10e      	bne.n	80065a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f819 	bl	80065ca <UART_WaitOnFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e00f      	b.n	80065c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	4613      	mov	r3, r2
 80065d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065da:	e062      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d05e      	beq.n	80066a2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e4:	f7fc fafe 	bl	8002be4 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d302      	bcc.n	80065fa <UART_WaitOnFlagUntilTimeout+0x30>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d11d      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e045      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d02e      	beq.n	80066a2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006652:	d126      	bne.n	80066a2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800666c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0201 	bic.w	r2, r2, #1
 800667c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e00f      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4013      	ands	r3, r2
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	bf0c      	ite	eq
 80066b2:	2301      	moveq	r3, #1
 80066b4:	2300      	movne	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d08d      	beq.n	80065dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0210 	bic.w	r2, r2, #16
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff fb6f 	bl	8005e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006768:	2b21      	cmp	r3, #33	; 0x21
 800676a:	d12a      	bne.n	80067c2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d110      	bne.n	800679a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006786:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006796:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006798:	e013      	b.n	80067c2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067dc:	2b21      	cmp	r3, #33	; 0x21
 80067de:	d12f      	bne.n	8006840 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067fa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800680a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800680c:	e018      	b.n	8006840 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006812:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006822:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	1c9a      	adds	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006840:	bf00      	nop
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800685a:	2b21      	cmp	r3, #33	; 0x21
 800685c:	d13d      	bne.n	80068da <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006864:	81fb      	strh	r3, [r7, #14]
 8006866:	e035      	b.n	80068d4 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d111      	bne.n	8006898 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006882:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006892:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006894:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006896:	e020      	b.n	80068da <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d013      	beq.n	80068ce <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	81fb      	strh	r3, [r7, #14]
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1c6      	bne.n	8006868 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f4:	2b21      	cmp	r3, #33	; 0x21
 80068f6:	d142      	bne.n	800697e <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068fe:	81fb      	strh	r3, [r7, #14]
 8006900:	e03a      	b.n	8006978 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d111      	bne.n	8006932 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800691c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800692c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800692e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006930:	e025      	b.n	800697e <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693c:	2b00      	cmp	r3, #0
 800693e:	d018      	beq.n	8006972 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006954:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006972:	89fb      	ldrh	r3, [r7, #14]
 8006974:	3b01      	subs	r3, #1
 8006976:	81fb      	strh	r3, [r7, #14]
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1c1      	bne.n	8006902 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff fa33 	bl	8005e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e027      	b.n	8006a60 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2224      	movs	r2, #36	; 0x24
 8006a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e02d      	b.n	8006ae0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	; 0x24
 8006a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f84f 	bl	8006b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e02d      	b.n	8006b5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2224      	movs	r2, #36	; 0x24
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0201 	bic.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f811 	bl	8006b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d108      	bne.n	8006b86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b84:	e031      	b.n	8006bea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b86:	2308      	movs	r3, #8
 8006b88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	0e5b      	lsrs	r3, r3, #25
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	0f5b      	lsrs	r3, r3, #29
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	7b3a      	ldrb	r2, [r7, #12]
 8006bb2:	4911      	ldr	r1, [pc, #68]	; (8006bf8 <UARTEx_SetNbDataToProcess+0x94>)
 8006bb4:	5c8a      	ldrb	r2, [r1, r2]
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bba:	7b3a      	ldrb	r2, [r7, #12]
 8006bbc:	490f      	ldr	r1, [pc, #60]	; (8006bfc <UARTEx_SetNbDataToProcess+0x98>)
 8006bbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	7b7a      	ldrb	r2, [r7, #13]
 8006bd0:	4909      	ldr	r1, [pc, #36]	; (8006bf8 <UARTEx_SetNbDataToProcess+0x94>)
 8006bd2:	5c8a      	ldrb	r2, [r1, r2]
 8006bd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bd8:	7b7a      	ldrb	r2, [r7, #13]
 8006bda:	4908      	ldr	r1, [pc, #32]	; (8006bfc <UARTEx_SetNbDataToProcess+0x98>)
 8006bdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bde:	fb93 f3f2 	sdiv	r3, r3, r2
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	0800fdc4 	.word	0x0800fdc4
 8006bfc:	0800fdcc 	.word	0x0800fdcc

08006c00 <__NVIC_SetPriority>:
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	db0a      	blt.n	8006c2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	490c      	ldr	r1, [pc, #48]	; (8006c4c <__NVIC_SetPriority+0x4c>)
 8006c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1e:	0112      	lsls	r2, r2, #4
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	440b      	add	r3, r1
 8006c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c28:	e00a      	b.n	8006c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	4908      	ldr	r1, [pc, #32]	; (8006c50 <__NVIC_SetPriority+0x50>)
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	3b04      	subs	r3, #4
 8006c38:	0112      	lsls	r2, r2, #4
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	761a      	strb	r2, [r3, #24]
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	e000e100 	.word	0xe000e100
 8006c50:	e000ed00 	.word	0xe000ed00

08006c54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <SysTick_Handler+0x1c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c5c:	f002 f998 	bl	8008f90 <xTaskGetSchedulerState>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d001      	beq.n	8006c6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c66:	f003 fb37 	bl	800a2d8 <xPortSysTickHandler>
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	e000e010 	.word	0xe000e010

08006c74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c78:	2100      	movs	r1, #0
 8006c7a:	f06f 0004 	mvn.w	r0, #4
 8006c7e:	f7ff ffbf 	bl	8006c00 <__NVIC_SetPriority>
#endif
}
 8006c82:	bf00      	nop
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c8e:	f3ef 8305 	mrs	r3, IPSR
 8006c92:	603b      	str	r3, [r7, #0]
  return(result);
 8006c94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c9a:	f06f 0305 	mvn.w	r3, #5
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	e00c      	b.n	8006cbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <osKernelInitialize+0x44>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006caa:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <osKernelInitialize+0x44>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	607b      	str	r3, [r7, #4]
 8006cb4:	e002      	b.n	8006cbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cbc:	687b      	ldr	r3, [r7, #4]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	20004424 	.word	0x20004424

08006cd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd6:	f3ef 8305 	mrs	r3, IPSR
 8006cda:	603b      	str	r3, [r7, #0]
  return(result);
 8006cdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ce2:	f06f 0305 	mvn.w	r3, #5
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	e010      	b.n	8006d0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <osKernelStart+0x48>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d109      	bne.n	8006d06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006cf2:	f7ff ffbf 	bl	8006c74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006cf6:	4b08      	ldr	r3, [pc, #32]	; (8006d18 <osKernelStart+0x48>)
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006cfc:	f001 fcdc 	bl	80086b8 <vTaskStartScheduler>
      stat = osOK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	607b      	str	r3, [r7, #4]
 8006d04:	e002      	b.n	8006d0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d0c:	687b      	ldr	r3, [r7, #4]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20004424 	.word	0x20004424

08006d1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af04      	add	r7, sp, #16
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d2c:	f3ef 8305 	mrs	r3, IPSR
 8006d30:	617b      	str	r3, [r7, #20]
  return(result);
 8006d32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d17e      	bne.n	8006e36 <osThreadNew+0x11a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d07b      	beq.n	8006e36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d3e:	2380      	movs	r3, #128	; 0x80
 8006d40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d42:	2318      	movs	r3, #24
 8006d44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d045      	beq.n	8006de2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <osThreadNew+0x48>
        name = attr->name;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <osThreadNew+0x6e>
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2b38      	cmp	r3, #56	; 0x38
 8006d7c:	d805      	bhi.n	8006d8a <osThreadNew+0x6e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <osThreadNew+0x72>
        return (NULL);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e054      	b.n	8006e38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	089b      	lsrs	r3, r3, #2
 8006d9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00e      	beq.n	8006dc4 <osThreadNew+0xa8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	2bbb      	cmp	r3, #187	; 0xbb
 8006dac:	d90a      	bls.n	8006dc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <osThreadNew+0xa8>
        mem = 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	e010      	b.n	8006de6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10c      	bne.n	8006de6 <osThreadNew+0xca>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d108      	bne.n	8006de6 <osThreadNew+0xca>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <osThreadNew+0xca>
          mem = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e001      	b.n	8006de6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d110      	bne.n	8006e0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f001 faa0 	bl	8008348 <xTaskCreateStatic>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	e013      	b.n	8006e36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d110      	bne.n	8006e36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	f107 0310 	add.w	r3, r7, #16
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f001 faeb 	bl	8008402 <xTaskCreate>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d001      	beq.n	8006e36 <osThreadNew+0x11a>
            hTask = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e36:	693b      	ldr	r3, [r7, #16]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3728      	adds	r7, #40	; 0x28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <osThreadFlagsSet+0x1a>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da03      	bge.n	8006e62 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8006e5a:	f06f 0303 	mvn.w	r3, #3
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e035      	b.n	8006ece <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295
 8006e66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e68:	f3ef 8305 	mrs	r3, IPSR
 8006e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8006e6e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01f      	beq.n	8006eb4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8006e78:	f107 0308 	add.w	r3, r7, #8
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2201      	movs	r2, #1
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6978      	ldr	r0, [r7, #20]
 8006e86:	f002 fb2b 	bl	80094e0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8006e8a:	f107 030c 	add.w	r3, r7, #12
 8006e8e:	2200      	movs	r2, #0
 8006e90:	9200      	str	r2, [sp, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	6978      	ldr	r0, [r7, #20]
 8006e98:	f002 fb22 	bl	80094e0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d015      	beq.n	8006ece <osThreadFlagsSet+0x8e>
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <osThreadFlagsSet+0x98>)
 8006ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	e00c      	b.n	8006ece <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f002 fa52 	bl	8009364 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8006ec0:	f107 030c 	add.w	r3, r7, #12
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	6978      	ldr	r0, [r7, #20]
 8006eca:	f002 fa4b 	bl	8009364 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08c      	sub	sp, #48	; 0x30
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ee8:	f3ef 8305 	mrs	r3, IPSR
 8006eec:	617b      	str	r3, [r7, #20]
  return(result);
 8006eee:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8006ef4:	f06f 0305 	mvn.w	r3, #5
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efa:	e06b      	b.n	8006fd4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	da03      	bge.n	8006f0a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8006f02:	f06f 0303 	mvn.w	r3, #3
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f08:	e064      	b.n	8006fd4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f18:	e001      	b.n	8006f1e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8006f26:	f001 fce3 	bl	80088f0 <xTaskGetTickCount>
 8006f2a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8006f2c:	f107 0210 	add.w	r2, r7, #16
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f34:	2000      	movs	r0, #0
 8006f36:	f002 f9b5 	bl	80092a4 <xTaskNotifyWait>
 8006f3a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d137      	bne.n	8006fb2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8006f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4013      	ands	r3, r2
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00c      	beq.n	8006f76 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	4013      	ands	r3, r2
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d032      	beq.n	8006fce <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10f      	bne.n	8006f8e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006f6e:	f06f 0302 	mvn.w	r3, #2
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006f74:	e02e      	b.n	8006fd4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d128      	bne.n	8006fd2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006f86:	f06f 0302 	mvn.w	r3, #2
 8006f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006f8c:	e022      	b.n	8006fd4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8006f8e:	f001 fcaf 	bl	80088f0 <xTaskGetTickCount>
 8006f92:	4602      	mov	r2, r0
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d902      	bls.n	8006fa8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa6:	e00e      	b.n	8006fc6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8006fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	e009      	b.n	8006fc6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8006fb8:	f06f 0302 	mvn.w	r3, #2
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fbe:	e002      	b.n	8006fc6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8006fc0:	f06f 0301 	mvn.w	r3, #1
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1af      	bne.n	8006f2c <osThreadFlagsWait+0x50>
 8006fcc:	e002      	b.n	8006fd4 <osThreadFlagsWait+0xf8>
            break;
 8006fce:	bf00      	nop
 8006fd0:	e000      	b.n	8006fd4 <osThreadFlagsWait+0xf8>
            break;
 8006fd2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3730      	adds	r7, #48	; 0x30
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f002 ff9a 	bl	8009f20 <pvTimerGetTimerID>
 8006fec:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	6852      	ldr	r2, [r2, #4]
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
  }
}
 8007000:	bf00      	nop
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b08c      	sub	sp, #48	; 0x30
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	460b      	mov	r3, r1
 8007016:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007018:	2300      	movs	r3, #0
 800701a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800701c:	f3ef 8305 	mrs	r3, IPSR
 8007020:	613b      	str	r3, [r7, #16]
  return(result);
 8007022:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007024:	2b00      	cmp	r3, #0
 8007026:	d163      	bne.n	80070f0 <osTimerNew+0xe8>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d060      	beq.n	80070f0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800702e:	2008      	movs	r0, #8
 8007030:	f003 f9e2 	bl	800a3f8 <pvPortMalloc>
 8007034:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d059      	beq.n	80070f0 <osTimerNew+0xe8>
      callb->func = func;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <osTimerNew+0x4c>
        reload = pdFALSE;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	e001      	b.n	8007058 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007058:	f04f 33ff 	mov.w	r3, #4294967295
 800705c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01c      	beq.n	80070a2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <osTimerNew+0x6e>
          name = attr->name;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <osTimerNew+0x84>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b2b      	cmp	r3, #43	; 0x2b
 8007084:	d902      	bls.n	800708c <osTimerNew+0x84>
          mem = 1;
 8007086:	2301      	movs	r3, #1
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	e00c      	b.n	80070a6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d108      	bne.n	80070a6 <osTimerNew+0x9e>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <osTimerNew+0x9e>
            mem = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e001      	b.n	80070a6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d10c      	bne.n	80070c6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <osTimerNew+0xf4>)
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	2101      	movs	r1, #1
 80070bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070be:	f002 fbb0 	bl	8009822 <xTimerCreateStatic>
 80070c2:	6238      	str	r0, [r7, #32]
 80070c4:	e00b      	b.n	80070de <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d108      	bne.n	80070de <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <osTimerNew+0xf4>)
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	2101      	movs	r1, #1
 80070d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070d8:	f002 fb82 	bl	80097e0 <xTimerCreate>
 80070dc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <osTimerNew+0xe8>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <osTimerNew+0xe8>
        vPortFree (callb);
 80070ea:	6978      	ldr	r0, [r7, #20]
 80070ec:	f003 fa50 	bl	800a590 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80070f0:	6a3b      	ldr	r3, [r7, #32]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3728      	adds	r7, #40	; 0x28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	08006fdf 	.word	0x08006fdf

08007100 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800710e:	f3ef 8305 	mrs	r3, IPSR
 8007112:	60fb      	str	r3, [r7, #12]
  return(result);
 8007114:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <osTimerStart+0x22>
    stat = osErrorISR;
 800711a:	f06f 0305 	mvn.w	r3, #5
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	e017      	b.n	8007152 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007128:	f06f 0303 	mvn.w	r3, #3
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	e010      	b.n	8007152 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007130:	2300      	movs	r3, #0
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	2104      	movs	r1, #4
 800713a:	6938      	ldr	r0, [r7, #16]
 800713c:	f002 fbea 	bl	8009914 <xTimerGenericCommand>
 8007140:	4603      	mov	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d102      	bne.n	800714c <osTimerStart+0x4c>
      stat = osOK;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e002      	b.n	8007152 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800714c:	f06f 0302 	mvn.w	r3, #2
 8007150:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007152:	697b      	ldr	r3, [r7, #20]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007168:	f3ef 8305 	mrs	r3, IPSR
 800716c:	60bb      	str	r3, [r7, #8]
  return(result);
 800716e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007170:	2b00      	cmp	r3, #0
 8007172:	d174      	bne.n	800725e <osMutexNew+0x102>
    if (attr != NULL) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <osMutexNew+0x26>
      type = attr->attr_bits;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	61bb      	str	r3, [r7, #24]
 8007180:	e001      	b.n	8007186 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <osMutexNew+0x3a>
      rmtx = 1U;
 8007190:	2301      	movs	r3, #1
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	e001      	b.n	800719a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d15c      	bne.n	800725e <osMutexNew+0x102>
      mem = -1;
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
 80071a8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d015      	beq.n	80071dc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <osMutexNew+0x6a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	2b4f      	cmp	r3, #79	; 0x4f
 80071be:	d902      	bls.n	80071c6 <osMutexNew+0x6a>
          mem = 1;
 80071c0:	2301      	movs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	e00c      	b.n	80071e0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d108      	bne.n	80071e0 <osMutexNew+0x84>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <osMutexNew+0x84>
            mem = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	e001      	b.n	80071e0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d112      	bne.n	800720c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	4619      	mov	r1, r3
 80071f2:	2004      	movs	r0, #4
 80071f4:	f000 fb17 	bl	8007826 <xQueueCreateMutexStatic>
 80071f8:	61f8      	str	r0, [r7, #28]
 80071fa:	e016      	b.n	800722a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4619      	mov	r1, r3
 8007202:	2001      	movs	r0, #1
 8007204:	f000 fb0f 	bl	8007826 <xQueueCreateMutexStatic>
 8007208:	61f8      	str	r0, [r7, #28]
 800720a:	e00e      	b.n	800722a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007218:	2004      	movs	r0, #4
 800721a:	f000 faec 	bl	80077f6 <xQueueCreateMutex>
 800721e:	61f8      	str	r0, [r7, #28]
 8007220:	e003      	b.n	800722a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007222:	2001      	movs	r0, #1
 8007224:	f000 fae7 	bl	80077f6 <xQueueCreateMutex>
 8007228:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00c      	beq.n	800724a <osMutexNew+0xee>
        if (attr != NULL) {
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <osMutexNew+0xe2>
          name = attr->name;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e001      	b.n	8007242 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007242:	68f9      	ldr	r1, [r7, #12]
 8007244:	69f8      	ldr	r0, [r7, #28]
 8007246:	f001 f821 	bl	800828c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d006      	beq.n	800725e <osMutexNew+0x102>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800725e:	69fb      	ldr	r3, [r7, #28]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007286:	f3ef 8305 	mrs	r3, IPSR
 800728a:	60bb      	str	r3, [r7, #8]
  return(result);
 800728c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007292:	f06f 0305 	mvn.w	r3, #5
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e02c      	b.n	80072f4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80072a0:	f06f 0303 	mvn.w	r3, #3
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e025      	b.n	80072f4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d011      	beq.n	80072d2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6938      	ldr	r0, [r7, #16]
 80072b2:	f000 fb07 	bl	80078c4 <xQueueTakeMutexRecursive>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d01b      	beq.n	80072f4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80072c2:	f06f 0301 	mvn.w	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	e014      	b.n	80072f4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80072ca:	f06f 0302 	mvn.w	r3, #2
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	e010      	b.n	80072f4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6938      	ldr	r0, [r7, #16]
 80072d6:	f000 fda5 	bl	8007e24 <xQueueSemaphoreTake>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d009      	beq.n	80072f4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80072e6:	f06f 0301 	mvn.w	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e002      	b.n	80072f4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80072ee:	f06f 0302 	mvn.w	r3, #2
 80072f2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80072f4:	697b      	ldr	r3, [r7, #20]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800731a:	f3ef 8305 	mrs	r3, IPSR
 800731e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007320:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <osMutexRelease+0x30>
    stat = osErrorISR;
 8007326:	f06f 0305 	mvn.w	r3, #5
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e01f      	b.n	800736e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007334:	f06f 0303 	mvn.w	r3, #3
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	e018      	b.n	800736e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007342:	6938      	ldr	r0, [r7, #16]
 8007344:	f000 fa8a 	bl	800785c <xQueueGiveMutexRecursive>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d00f      	beq.n	800736e <osMutexRelease+0x70>
        stat = osErrorResource;
 800734e:	f06f 0302 	mvn.w	r3, #2
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	e00b      	b.n	800736e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007356:	2300      	movs	r3, #0
 8007358:	2200      	movs	r2, #0
 800735a:	2100      	movs	r1, #0
 800735c:	6938      	ldr	r0, [r7, #16]
 800735e:	f000 fae7 	bl	8007930 <xQueueGenericSend>
 8007362:	4603      	mov	r3, r0
 8007364:	2b01      	cmp	r3, #1
 8007366:	d002      	beq.n	800736e <osMutexRelease+0x70>
        stat = osErrorResource;
 8007368:	f06f 0302 	mvn.w	r3, #2
 800736c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800736e:	697b      	ldr	r3, [r7, #20]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4a07      	ldr	r2, [pc, #28]	; (80073a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	4a06      	ldr	r2, [pc, #24]	; (80073a8 <vApplicationGetIdleTaskMemory+0x30>)
 800738e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2280      	movs	r2, #128	; 0x80
 8007394:	601a      	str	r2, [r3, #0]
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	20004428 	.word	0x20004428
 80073a8:	200044e4 	.word	0x200044e4

080073ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4a07      	ldr	r2, [pc, #28]	; (80073d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80073bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4a06      	ldr	r2, [pc, #24]	; (80073dc <vApplicationGetTimerTaskMemory+0x30>)
 80073c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ca:	601a      	str	r2, [r3, #0]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	200046e4 	.word	0x200046e4
 80073dc:	200047a0 	.word	0x200047a0

080073e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f103 0208 	add.w	r2, r3, #8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f04f 32ff 	mov.w	r2, #4294967295
 80073f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f103 0208 	add.w	r2, r3, #8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f103 0208 	add.w	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d103      	bne.n	80074a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e00c      	b.n	80074bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3308      	adds	r3, #8
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	e002      	b.n	80074b0 <vListInsert+0x2e>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d2f6      	bcs.n	80074aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
}
 80074e8:	bf00      	nop
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6892      	ldr	r2, [r2, #8]
 800750a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6852      	ldr	r2, [r2, #4]
 8007514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	d103      	bne.n	8007528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	1e5a      	subs	r2, r3, #1
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007572:	f002 fe1f 	bl	800a1b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	68f9      	ldr	r1, [r7, #12]
 8007580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	441a      	add	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	3b01      	subs	r3, #1
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	441a      	add	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	22ff      	movs	r2, #255	; 0xff
 80075b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	22ff      	movs	r2, #255	; 0xff
 80075be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d114      	bne.n	80075f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01a      	beq.n	8007606 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3310      	adds	r3, #16
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 fb09 	bl	8008bec <xTaskRemoveFromEventList>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d012      	beq.n	8007606 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <xQueueGenericReset+0xcc>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	e009      	b.n	8007606 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3310      	adds	r3, #16
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff fef2 	bl	80073e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3324      	adds	r3, #36	; 0x24
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff feed 	bl	80073e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007606:	f002 fe05 	bl	800a214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800760a:	2301      	movs	r3, #1
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	; 0x38
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <xQueueGenericCreateStatic+0x52>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <xQueueGenericCreateStatic+0x56>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <xQueueGenericCreateStatic+0x58>
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	623b      	str	r3, [r7, #32]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <xQueueGenericCreateStatic+0x7e>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <xQueueGenericCreateStatic+0x82>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <xQueueGenericCreateStatic+0x84>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	61fb      	str	r3, [r7, #28]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076b6:	2350      	movs	r3, #80	; 0x50
 80076b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b50      	cmp	r3, #80	; 0x50
 80076be:	d00a      	beq.n	80076d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	61bb      	str	r3, [r7, #24]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f83f 	bl	800777c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007700:	4618      	mov	r0, r3
 8007702:	3730      	adds	r7, #48	; 0x30
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	; 0x28
 800770c:	af02      	add	r7, sp, #8
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericCreate+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	613b      	str	r3, [r7, #16]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3350      	adds	r3, #80	; 0x50
 8007740:	4618      	mov	r0, r3
 8007742:	f002 fe59 	bl	800a3f8 <pvPortMalloc>
 8007746:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d011      	beq.n	8007772 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3350      	adds	r3, #80	; 0x50
 8007756:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007760:	79fa      	ldrb	r2, [r7, #7]
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4613      	mov	r3, r2
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f805 	bl	800777c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007772:	69bb      	ldr	r3, [r7, #24]
	}
 8007774:	4618      	mov	r0, r3
 8007776:	3720      	adds	r7, #32
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d103      	bne.n	8007798 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e002      	b.n	800779e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077aa:	2101      	movs	r1, #1
 80077ac:	69b8      	ldr	r0, [r7, #24]
 80077ae:	f7ff fecb 	bl	8007548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00e      	beq.n	80077ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077e2:	2300      	movs	r3, #0
 80077e4:	2200      	movs	r2, #0
 80077e6:	2100      	movs	r1, #0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8a1 	bl	8007930 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80077ee:	bf00      	nop
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b086      	sub	sp, #24
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	4603      	mov	r3, r0
 80077fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007800:	2301      	movs	r3, #1
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	461a      	mov	r2, r3
 800780c:	6939      	ldr	r1, [r7, #16]
 800780e:	6978      	ldr	r0, [r7, #20]
 8007810:	f7ff ff7a 	bl	8007708 <xQueueGenericCreate>
 8007814:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7ff ffd3 	bl	80077c2 <prvInitialiseMutex>

		return xNewQueue;
 800781c:	68fb      	ldr	r3, [r7, #12]
	}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007826:	b580      	push	{r7, lr}
 8007828:	b088      	sub	sp, #32
 800782a:	af02      	add	r7, sp, #8
 800782c:	4603      	mov	r3, r0
 800782e:	6039      	str	r1, [r7, #0]
 8007830:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2200      	movs	r2, #0
 8007842:	6939      	ldr	r1, [r7, #16]
 8007844:	6978      	ldr	r0, [r7, #20]
 8007846:	f7ff fee7 	bl	8007618 <xQueueGenericCreateStatic>
 800784a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7ff ffb8 	bl	80077c2 <prvInitialiseMutex>

		return xNewQueue;
 8007852:	68fb      	ldr	r3, [r7, #12]
	}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800785c:	b590      	push	{r4, r7, lr}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	60fb      	str	r3, [r7, #12]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	689c      	ldr	r4, [r3, #8]
 8007888:	f001 fb72 	bl	8008f70 <xTaskGetCurrentTaskHandle>
 800788c:	4603      	mov	r3, r0
 800788e:	429c      	cmp	r4, r3
 8007890:	d111      	bne.n	80078b6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	1e5a      	subs	r2, r3, #1
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6938      	ldr	r0, [r7, #16]
 80078ac:	f000 f840 	bl	8007930 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80078b0:	2301      	movs	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e001      	b.n	80078ba <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80078ba:	697b      	ldr	r3, [r7, #20]
	}
 80078bc:	4618      	mov	r0, r3
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd90      	pop	{r4, r7, pc}

080078c4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	60fb      	str	r3, [r7, #12]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	689c      	ldr	r4, [r3, #8]
 80078f2:	f001 fb3d 	bl	8008f70 <xTaskGetCurrentTaskHandle>
 80078f6:	4603      	mov	r3, r0
 80078f8:	429c      	cmp	r4, r3
 80078fa:	d107      	bne.n	800790c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007906:	2301      	movs	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	e00c      	b.n	8007926 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6938      	ldr	r0, [r7, #16]
 8007910:	f000 fa88 	bl	8007e24 <xQueueSemaphoreTake>
 8007914:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007926:	697b      	ldr	r3, [r7, #20]
	}
 8007928:	4618      	mov	r0, r3
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd90      	pop	{r4, r7, pc}

08007930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	; 0x38
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800793e:	2300      	movs	r3, #0
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <xQueueGenericSend+0x32>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <xQueueGenericSend+0x40>
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <xQueueGenericSend+0x44>
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <xQueueGenericSend+0x46>
 8007974:	2300      	movs	r3, #0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10a      	bne.n	8007990 <xQueueGenericSend+0x60>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d103      	bne.n	800799e <xQueueGenericSend+0x6e>
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <xQueueGenericSend+0x72>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericSend+0x74>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xQueueGenericSend+0x8e>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079be:	f001 fae7 	bl	8008f90 <xTaskGetSchedulerState>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <xQueueGenericSend+0x9e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <xQueueGenericSend+0xa2>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <xQueueGenericSend+0xa4>
 80079d2:	2300      	movs	r3, #0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <xQueueGenericSend+0xbe>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	61fb      	str	r3, [r7, #28]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079ee:	f002 fbe1 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d302      	bcc.n	8007a04 <xQueueGenericSend+0xd4>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d129      	bne.n	8007a58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a0a:	f000 fb2f 	bl	800806c <prvCopyDataToQueue>
 8007a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d010      	beq.n	8007a3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	3324      	adds	r3, #36	; 0x24
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 f8e5 	bl	8008bec <xTaskRemoveFromEventList>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d013      	beq.n	8007a50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a28:	4b3f      	ldr	r3, [pc, #252]	; (8007b28 <xQueueGenericSend+0x1f8>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	e00a      	b.n	8007a50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a40:	4b39      	ldr	r3, [pc, #228]	; (8007b28 <xQueueGenericSend+0x1f8>)
 8007a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a50:	f002 fbe0 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e063      	b.n	8007b20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d103      	bne.n	8007a66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a5e:	f002 fbd9 	bl	800a214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	e05c      	b.n	8007b20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a6c:	f107 0314 	add.w	r3, r7, #20
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 f91f 	bl	8008cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a76:	2301      	movs	r3, #1
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a7a:	f002 fbcb 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a7e:	f000 fe8b 	bl	8008798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a82:	f002 fb97 	bl	800a1b4 <vPortEnterCritical>
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a8c:	b25b      	sxtb	r3, r3
 8007a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a92:	d103      	bne.n	8007a9c <xQueueGenericSend+0x16c>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa2:	b25b      	sxtb	r3, r3
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d103      	bne.n	8007ab2 <xQueueGenericSend+0x182>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab2:	f002 fbaf 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ab6:	1d3a      	adds	r2, r7, #4
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	4611      	mov	r1, r2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 f90e 	bl	8008ce0 <xTaskCheckForTimeOut>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d124      	bne.n	8007b14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007acc:	f000 fbc6 	bl	800825c <prvIsQueueFull>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d018      	beq.n	8007b08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	3310      	adds	r3, #16
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 f834 	bl	8008b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae6:	f000 fb51 	bl	800818c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007aea:	f000 fe63 	bl	80087b4 <xTaskResumeAll>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f af7c 	bne.w	80079ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <xQueueGenericSend+0x1f8>)
 8007af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	e772      	b.n	80079ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b0a:	f000 fb3f 	bl	800818c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b0e:	f000 fe51 	bl	80087b4 <xTaskResumeAll>
 8007b12:	e76c      	b.n	80079ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b16:	f000 fb39 	bl	800818c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b1a:	f000 fe4b 	bl	80087b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3738      	adds	r7, #56	; 0x38
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b090      	sub	sp, #64	; 0x40
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d103      	bne.n	8007b68 <xQueueGenericSendFromISR+0x3c>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <xQueueGenericSendFromISR+0x40>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <xQueueGenericSendFromISR+0x42>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d103      	bne.n	8007b96 <xQueueGenericSendFromISR+0x6a>
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <xQueueGenericSendFromISR+0x6e>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueGenericSendFromISR+0x70>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	623b      	str	r3, [r7, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bb6:	f002 fbdf 	bl	800a378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bba:	f3ef 8211 	mrs	r2, BASEPRI
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61fa      	str	r2, [r7, #28]
 8007bd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d302      	bcc.n	8007be8 <xQueueGenericSendFromISR+0xbc>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d12f      	bne.n	8007c48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bfe:	f000 fa35 	bl	800806c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d112      	bne.n	8007c32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d016      	beq.n	8007c42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	3324      	adds	r3, #36	; 0x24
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 ffe7 	bl	8008bec <xTaskRemoveFromEventList>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00e      	beq.n	8007c42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e007      	b.n	8007c42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c36:	3301      	adds	r3, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	b25a      	sxtb	r2, r3
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c42:	2301      	movs	r3, #1
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c46:	e001      	b.n	8007c4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3740      	adds	r7, #64	; 0x40
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08c      	sub	sp, #48	; 0x30
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <xQueueReceive+0x30>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	623b      	str	r3, [r7, #32]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d103      	bne.n	8007ca2 <xQueueReceive+0x3e>
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xQueueReceive+0x42>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueReceive+0x44>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueReceive+0x5e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61fb      	str	r3, [r7, #28]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc2:	f001 f965 	bl	8008f90 <xTaskGetSchedulerState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <xQueueReceive+0x6e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <xQueueReceive+0x72>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <xQueueReceive+0x74>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xQueueReceive+0x8e>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	61bb      	str	r3, [r7, #24]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf2:	f002 fa5f 	bl	800a1b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01f      	beq.n	8007d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d06:	f000 fa1b 	bl	8008140 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	1e5a      	subs	r2, r3, #1
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00f      	beq.n	8007d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	3310      	adds	r3, #16
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 ff64 	bl	8008bec <xTaskRemoveFromEventList>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d2a:	4b3d      	ldr	r3, [pc, #244]	; (8007e20 <xQueueReceive+0x1bc>)
 8007d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d3a:	f002 fa6b 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e069      	b.n	8007e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d48:	f002 fa64 	bl	800a214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e062      	b.n	8007e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 ffaa 	bl	8008cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d60:	2301      	movs	r3, #1
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d64:	f002 fa56 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d68:	f000 fd16 	bl	8008798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d6c:	f002 fa22 	bl	800a1b4 <vPortEnterCritical>
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d76:	b25b      	sxtb	r3, r3
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d103      	bne.n	8007d86 <xQueueReceive+0x122>
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d103      	bne.n	8007d9c <xQueueReceive+0x138>
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d9c:	f002 fa3a 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007da0:	1d3a      	adds	r2, r7, #4
 8007da2:	f107 0310 	add.w	r3, r7, #16
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 ff99 	bl	8008ce0 <xTaskCheckForTimeOut>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d123      	bne.n	8007dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db6:	f000 fa3b 	bl	8008230 <prvIsQueueEmpty>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d017      	beq.n	8007df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 febf 	bl	8008b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd0:	f000 f9dc 	bl	800818c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dd4:	f000 fcee 	bl	80087b4 <xTaskResumeAll>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d189      	bne.n	8007cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <xQueueReceive+0x1bc>)
 8007de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	e780      	b.n	8007cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df2:	f000 f9cb 	bl	800818c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007df6:	f000 fcdd 	bl	80087b4 <xTaskResumeAll>
 8007dfa:	e77a      	b.n	8007cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dfe:	f000 f9c5 	bl	800818c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e02:	f000 fcd7 	bl	80087b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e08:	f000 fa12 	bl	8008230 <prvIsQueueEmpty>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f43f af6f 	beq.w	8007cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3730      	adds	r7, #48	; 0x30
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	623b      	str	r3, [r7, #32]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	61fb      	str	r3, [r7, #28]
}
 8007e70:	bf00      	nop
 8007e72:	e7fe      	b.n	8007e72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e74:	f001 f88c 	bl	8008f90 <xTaskGetSchedulerState>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <xQueueSemaphoreTake+0x60>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <xQueueSemaphoreTake+0x64>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <xQueueSemaphoreTake+0x66>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	61bb      	str	r3, [r7, #24]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ea4:	f002 f986 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d024      	beq.n	8007efe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	1e5a      	subs	r2, r3, #1
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ec4:	f001 f9da 	bl	800927c <pvTaskIncrementMutexHeldCount>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00f      	beq.n	8007ef6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	3310      	adds	r3, #16
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fe86 	bl	8008bec <xTaskRemoveFromEventList>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ee6:	4b54      	ldr	r3, [pc, #336]	; (8008038 <xQueueSemaphoreTake+0x214>)
 8007ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ef6:	f002 f98d 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e097      	b.n	800802e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d111      	bne.n	8007f28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	617b      	str	r3, [r7, #20]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f20:	f002 f978 	bl	800a214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e082      	b.n	800802e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f2e:	f107 030c 	add.w	r3, r7, #12
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 febe 	bl	8008cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f3c:	f002 f96a 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f40:	f000 fc2a 	bl	8008798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f44:	f002 f936 	bl	800a1b4 <vPortEnterCritical>
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f4e:	b25b      	sxtb	r3, r3
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d103      	bne.n	8007f5e <xQueueSemaphoreTake+0x13a>
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f64:	b25b      	sxtb	r3, r3
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	d103      	bne.n	8007f74 <xQueueSemaphoreTake+0x150>
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f74:	f002 f94e 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f78:	463a      	mov	r2, r7
 8007f7a:	f107 030c 	add.w	r3, r7, #12
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fead 	bl	8008ce0 <xTaskCheckForTimeOut>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d132      	bne.n	8007ff2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f8e:	f000 f94f 	bl	8008230 <prvIsQueueEmpty>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d026      	beq.n	8007fe6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d109      	bne.n	8007fb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007fa0:	f002 f908 	bl	800a1b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f001 f80f 	bl	8008fcc <xTaskPriorityInherit>
 8007fae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007fb0:	f002 f930 	bl	800a214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	3324      	adds	r3, #36	; 0x24
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fdc5 	bl	8008b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc4:	f000 f8e2 	bl	800818c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fc8:	f000 fbf4 	bl	80087b4 <xTaskResumeAll>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f47f af68 	bne.w	8007ea4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fd4:	4b18      	ldr	r3, [pc, #96]	; (8008038 <xQueueSemaphoreTake+0x214>)
 8007fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	e75e      	b.n	8007ea4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe8:	f000 f8d0 	bl	800818c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fec:	f000 fbe2 	bl	80087b4 <xTaskResumeAll>
 8007ff0:	e758      	b.n	8007ea4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ff4:	f000 f8ca 	bl	800818c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ff8:	f000 fbdc 	bl	80087b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ffe:	f000 f917 	bl	8008230 <prvIsQueueEmpty>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	f43f af4d 	beq.w	8007ea4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00d      	beq.n	800802c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008010:	f002 f8d0 	bl	800a1b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008016:	f000 f811 	bl	800803c <prvGetDisinheritPriorityAfterTimeout>
 800801a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008022:	4618      	mov	r0, r3
 8008024:	f001 f8a8 	bl	8009178 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008028:	f002 f8f4 	bl	800a214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800802c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800802e:	4618      	mov	r0, r3
 8008030:	3738      	adds	r7, #56	; 0x38
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	d006      	beq.n	800805a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e001      	b.n	800805e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800805e:	68fb      	ldr	r3, [r7, #12]
	}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10d      	bne.n	80080a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d14d      	bne.n	800812e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f001 f800 	bl	800909c <xTaskPriorityDisinherit>
 800809c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	e043      	b.n	800812e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d119      	bne.n	80080e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6858      	ldr	r0, [r3, #4]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	461a      	mov	r2, r3
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	f002 fcab 	bl	800aa12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	441a      	add	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d32b      	bcc.n	800812e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	605a      	str	r2, [r3, #4]
 80080de:	e026      	b.n	800812e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68d8      	ldr	r0, [r3, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e8:	461a      	mov	r2, r3
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	f002 fc91 	bl	800aa12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	425b      	negs	r3, r3
 80080fa:	441a      	add	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d207      	bcs.n	800811c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008114:	425b      	negs	r3, r3
 8008116:	441a      	add	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d105      	bne.n	800812e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	3b01      	subs	r3, #1
 800812c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008136:	697b      	ldr	r3, [r7, #20]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d018      	beq.n	8008184 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	441a      	add	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	429a      	cmp	r2, r3
 800816a:	d303      	bcc.n	8008174 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68d9      	ldr	r1, [r3, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	461a      	mov	r2, r3
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f002 fc47 	bl	800aa12 <memcpy>
	}
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008194:	f002 f80e 	bl	800a1b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800819e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a0:	e011      	b.n	80081c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d012      	beq.n	80081d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3324      	adds	r3, #36	; 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fd1c 	bl	8008bec <xTaskRemoveFromEventList>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081ba:	f000 fdf3 	bl	8008da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dce9      	bgt.n	80081a2 <prvUnlockQueue+0x16>
 80081ce:	e000      	b.n	80081d2 <prvUnlockQueue+0x46>
					break;
 80081d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	22ff      	movs	r2, #255	; 0xff
 80081d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081da:	f002 f81b 	bl	800a214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081de:	f001 ffe9 	bl	800a1b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ea:	e011      	b.n	8008210 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d012      	beq.n	800821a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3310      	adds	r3, #16
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fcf7 	bl	8008bec <xTaskRemoveFromEventList>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008204:	f000 fdce 	bl	8008da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	3b01      	subs	r3, #1
 800820c:	b2db      	uxtb	r3, r3
 800820e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008214:	2b00      	cmp	r3, #0
 8008216:	dce9      	bgt.n	80081ec <prvUnlockQueue+0x60>
 8008218:	e000      	b.n	800821c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800821a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	22ff      	movs	r2, #255	; 0xff
 8008220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008224:	f001 fff6 	bl	800a214 <vPortExitCritical>
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008238:	f001 ffbc 	bl	800a1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008244:	2301      	movs	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	e001      	b.n	800824e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800824e:	f001 ffe1 	bl	800a214 <vPortExitCritical>

	return xReturn;
 8008252:	68fb      	ldr	r3, [r7, #12]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008264:	f001 ffa6 	bl	800a1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008270:	429a      	cmp	r2, r3
 8008272:	d102      	bne.n	800827a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008274:	2301      	movs	r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	e001      	b.n	800827e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800827e:	f001 ffc9 	bl	800a214 <vPortExitCritical>

	return xReturn;
 8008282:	68fb      	ldr	r3, [r7, #12]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	e014      	b.n	80082c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800829c:	4a0f      	ldr	r2, [pc, #60]	; (80082dc <vQueueAddToRegistry+0x50>)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10b      	bne.n	80082c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082a8:	490c      	ldr	r1, [pc, #48]	; (80082dc <vQueueAddToRegistry+0x50>)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082b2:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <vQueueAddToRegistry+0x50>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082be:	e006      	b.n	80082ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b07      	cmp	r3, #7
 80082ca:	d9e7      	bls.n	800829c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	20009258 	.word	0x20009258

080082e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082f0:	f001 ff60 	bl	800a1b4 <vPortEnterCritical>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082fa:	b25b      	sxtb	r3, r3
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d103      	bne.n	800830a <vQueueWaitForMessageRestricted+0x2a>
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008310:	b25b      	sxtb	r3, r3
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d103      	bne.n	8008320 <vQueueWaitForMessageRestricted+0x40>
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008320:	f001 ff78 	bl	800a214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	2b00      	cmp	r3, #0
 800832a:	d106      	bne.n	800833a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fc2d 	bl	8008b94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800833a:	6978      	ldr	r0, [r7, #20]
 800833c:	f7ff ff26 	bl	800818c <prvUnlockQueue>
	}
 8008340:	bf00      	nop
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08e      	sub	sp, #56	; 0x38
 800834c:	af04      	add	r7, sp, #16
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <xTaskCreateStatic+0x2a>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	623b      	str	r3, [r7, #32]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTaskCreateStatic+0x46>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	61fb      	str	r3, [r7, #28]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800838e:	23bc      	movs	r3, #188	; 0xbc
 8008390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	2bbc      	cmp	r3, #188	; 0xbc
 8008396:	d00a      	beq.n	80083ae <xTaskCreateStatic+0x66>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	61bb      	str	r3, [r7, #24]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01e      	beq.n	80083f4 <xTaskCreateStatic+0xac>
 80083b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01b      	beq.n	80083f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	2202      	movs	r2, #2
 80083ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083ce:	2300      	movs	r3, #0
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	f107 0314 	add.w	r3, r7, #20
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 f850 	bl	800848c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083ee:	f000 f8f3 	bl	80085d8 <prvAddNewTaskToReadyList>
 80083f2:	e001      	b.n	80083f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083f8:	697b      	ldr	r3, [r7, #20]
	}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3728      	adds	r7, #40	; 0x28
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008402:	b580      	push	{r7, lr}
 8008404:	b08c      	sub	sp, #48	; 0x30
 8008406:	af04      	add	r7, sp, #16
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	603b      	str	r3, [r7, #0]
 800840e:	4613      	mov	r3, r2
 8008410:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4618      	mov	r0, r3
 8008418:	f001 ffee 	bl	800a3f8 <pvPortMalloc>
 800841c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00e      	beq.n	8008442 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008424:	20bc      	movs	r0, #188	; 0xbc
 8008426:	f001 ffe7 	bl	800a3f8 <pvPortMalloc>
 800842a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	631a      	str	r2, [r3, #48]	; 0x30
 8008438:	e005      	b.n	8008446 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800843a:	6978      	ldr	r0, [r7, #20]
 800843c:	f002 f8a8 	bl	800a590 <vPortFree>
 8008440:	e001      	b.n	8008446 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d017      	beq.n	800847c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008454:	88fa      	ldrh	r2, [r7, #6]
 8008456:	2300      	movs	r3, #0
 8008458:	9303      	str	r3, [sp, #12]
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	9302      	str	r3, [sp, #8]
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68b9      	ldr	r1, [r7, #8]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f80e 	bl	800848c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008470:	69f8      	ldr	r0, [r7, #28]
 8008472:	f000 f8b1 	bl	80085d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008476:	2301      	movs	r3, #1
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	e002      	b.n	8008482 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800847c:	f04f 33ff 	mov.w	r3, #4294967295
 8008480:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008482:	69bb      	ldr	r3, [r7, #24]
	}
 8008484:	4618      	mov	r0, r3
 8008486:	3720      	adds	r7, #32
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	461a      	mov	r2, r3
 80084a4:	21a5      	movs	r1, #165	; 0xa5
 80084a6:	f002 fac2 	bl	800aa2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084b4:	3b01      	subs	r3, #1
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f023 0307 	bic.w	r3, r3, #7
 80084c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	f003 0307 	and.w	r3, r3, #7
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	617b      	str	r3, [r7, #20]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01f      	beq.n	800852a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084ea:	2300      	movs	r3, #0
 80084ec:	61fb      	str	r3, [r7, #28]
 80084ee:	e012      	b.n	8008516 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	4413      	add	r3, r2
 80084f6:	7819      	ldrb	r1, [r3, #0]
 80084f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	3334      	adds	r3, #52	; 0x34
 8008500:	460a      	mov	r2, r1
 8008502:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d006      	beq.n	800851e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	3301      	adds	r3, #1
 8008514:	61fb      	str	r3, [r7, #28]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	2b0f      	cmp	r3, #15
 800851a:	d9e9      	bls.n	80084f0 <prvInitialiseNewTask+0x64>
 800851c:	e000      	b.n	8008520 <prvInitialiseNewTask+0x94>
			{
				break;
 800851e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008528:	e003      	b.n	8008532 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	2b37      	cmp	r3, #55	; 0x37
 8008536:	d901      	bls.n	800853c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008538:	2337      	movs	r3, #55	; 0x37
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008540:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008546:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	2200      	movs	r2, #0
 800854c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	3304      	adds	r3, #4
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe ff64 	bl	8007420 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	3318      	adds	r3, #24
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe ff5f 	bl	8007420 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008566:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008576:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	2200      	movs	r2, #0
 8008584:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	3354      	adds	r3, #84	; 0x54
 800858c:	2260      	movs	r2, #96	; 0x60
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f002 fa4c 	bl	800aa2e <memset>
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <prvInitialiseNewTask+0x140>)
 800859a:	659a      	str	r2, [r3, #88]	; 0x58
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	4a0c      	ldr	r2, [pc, #48]	; (80085d0 <prvInitialiseNewTask+0x144>)
 80085a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	4a0b      	ldr	r2, [pc, #44]	; (80085d4 <prvInitialiseNewTask+0x148>)
 80085a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	69b8      	ldr	r0, [r7, #24]
 80085ae:	f001 fcd7 	bl	8009f60 <pxPortInitialiseStack>
 80085b2:	4602      	mov	r2, r0
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c4:	bf00      	nop
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	0800fdf4 	.word	0x0800fdf4
 80085d0:	0800fe14 	.word	0x0800fe14
 80085d4:	0800fdd4 	.word	0x0800fdd4

080085d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085e0:	f001 fde8 	bl	800a1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085e4:	4b2d      	ldr	r3, [pc, #180]	; (800869c <prvAddNewTaskToReadyList+0xc4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	4a2c      	ldr	r2, [pc, #176]	; (800869c <prvAddNewTaskToReadyList+0xc4>)
 80085ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085ee:	4b2c      	ldr	r3, [pc, #176]	; (80086a0 <prvAddNewTaskToReadyList+0xc8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085f6:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <prvAddNewTaskToReadyList+0xc8>)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085fc:	4b27      	ldr	r3, [pc, #156]	; (800869c <prvAddNewTaskToReadyList+0xc4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d110      	bne.n	8008626 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008604:	f000 fbf2 	bl	8008dec <prvInitialiseTaskLists>
 8008608:	e00d      	b.n	8008626 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800860a:	4b26      	ldr	r3, [pc, #152]	; (80086a4 <prvAddNewTaskToReadyList+0xcc>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008612:	4b23      	ldr	r3, [pc, #140]	; (80086a0 <prvAddNewTaskToReadyList+0xc8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	429a      	cmp	r2, r3
 800861e:	d802      	bhi.n	8008626 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008620:	4a1f      	ldr	r2, [pc, #124]	; (80086a0 <prvAddNewTaskToReadyList+0xc8>)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008626:	4b20      	ldr	r3, [pc, #128]	; (80086a8 <prvAddNewTaskToReadyList+0xd0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3301      	adds	r3, #1
 800862c:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <prvAddNewTaskToReadyList+0xd0>)
 800862e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008630:	4b1d      	ldr	r3, [pc, #116]	; (80086a8 <prvAddNewTaskToReadyList+0xd0>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <prvAddNewTaskToReadyList+0xd4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d903      	bls.n	800864c <prvAddNewTaskToReadyList+0x74>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	4a18      	ldr	r2, [pc, #96]	; (80086ac <prvAddNewTaskToReadyList+0xd4>)
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <prvAddNewTaskToReadyList+0xd8>)
 800865a:	441a      	add	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f7fe fee9 	bl	800743a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008668:	f001 fdd4 	bl	800a214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800866c:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <prvAddNewTaskToReadyList+0xcc>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00e      	beq.n	8008692 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008674:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <prvAddNewTaskToReadyList+0xc8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	429a      	cmp	r2, r3
 8008680:	d207      	bcs.n	8008692 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008682:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <prvAddNewTaskToReadyList+0xdc>)
 8008684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20005074 	.word	0x20005074
 80086a0:	20004ba0 	.word	0x20004ba0
 80086a4:	20005080 	.word	0x20005080
 80086a8:	20005090 	.word	0x20005090
 80086ac:	2000507c 	.word	0x2000507c
 80086b0:	20004ba4 	.word	0x20004ba4
 80086b4:	e000ed04 	.word	0xe000ed04

080086b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086c6:	463a      	mov	r2, r7
 80086c8:	1d39      	adds	r1, r7, #4
 80086ca:	f107 0308 	add.w	r3, r7, #8
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fe52 	bl	8007378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	9202      	str	r2, [sp, #8]
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	2300      	movs	r3, #0
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	2300      	movs	r3, #0
 80086e4:	460a      	mov	r2, r1
 80086e6:	4924      	ldr	r1, [pc, #144]	; (8008778 <vTaskStartScheduler+0xc0>)
 80086e8:	4824      	ldr	r0, [pc, #144]	; (800877c <vTaskStartScheduler+0xc4>)
 80086ea:	f7ff fe2d 	bl	8008348 <xTaskCreateStatic>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4a23      	ldr	r2, [pc, #140]	; (8008780 <vTaskStartScheduler+0xc8>)
 80086f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086f4:	4b22      	ldr	r3, [pc, #136]	; (8008780 <vTaskStartScheduler+0xc8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086fc:	2301      	movs	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e001      	b.n	8008706 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d102      	bne.n	8008712 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800870c:	f001 f820 	bl	8009750 <xTimerCreateTimerTask>
 8008710:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d11b      	bne.n	8008750 <vTaskStartScheduler+0x98>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	613b      	str	r3, [r7, #16]
}
 800872a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800872c:	4b15      	ldr	r3, [pc, #84]	; (8008784 <vTaskStartScheduler+0xcc>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3354      	adds	r3, #84	; 0x54
 8008732:	4a15      	ldr	r2, [pc, #84]	; (8008788 <vTaskStartScheduler+0xd0>)
 8008734:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008736:	4b15      	ldr	r3, [pc, #84]	; (800878c <vTaskStartScheduler+0xd4>)
 8008738:	f04f 32ff 	mov.w	r2, #4294967295
 800873c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800873e:	4b14      	ldr	r3, [pc, #80]	; (8008790 <vTaskStartScheduler+0xd8>)
 8008740:	2201      	movs	r2, #1
 8008742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008744:	4b13      	ldr	r3, [pc, #76]	; (8008794 <vTaskStartScheduler+0xdc>)
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800874a:	f001 fc91 	bl	800a070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800874e:	e00e      	b.n	800876e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008756:	d10a      	bne.n	800876e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	60fb      	str	r3, [r7, #12]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <vTaskStartScheduler+0xb4>
}
 800876e:	bf00      	nop
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	0800fcf0 	.word	0x0800fcf0
 800877c:	08008dbd 	.word	0x08008dbd
 8008780:	20005098 	.word	0x20005098
 8008784:	20004ba0 	.word	0x20004ba0
 8008788:	200008d0 	.word	0x200008d0
 800878c:	20005094 	.word	0x20005094
 8008790:	20005080 	.word	0x20005080
 8008794:	20005078 	.word	0x20005078

08008798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800879c:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <vTaskSuspendAll+0x18>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	4a03      	ldr	r2, [pc, #12]	; (80087b0 <vTaskSuspendAll+0x18>)
 80087a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087a6:	bf00      	nop
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	2000509c 	.word	0x2000509c

080087b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087c2:	4b42      	ldr	r3, [pc, #264]	; (80088cc <xTaskResumeAll+0x118>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	603b      	str	r3, [r7, #0]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087e0:	f001 fce8 	bl	800a1b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087e4:	4b39      	ldr	r3, [pc, #228]	; (80088cc <xTaskResumeAll+0x118>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	4a38      	ldr	r2, [pc, #224]	; (80088cc <xTaskResumeAll+0x118>)
 80087ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ee:	4b37      	ldr	r3, [pc, #220]	; (80088cc <xTaskResumeAll+0x118>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d162      	bne.n	80088bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087f6:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <xTaskResumeAll+0x11c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d05e      	beq.n	80088bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087fe:	e02f      	b.n	8008860 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008800:	4b34      	ldr	r3, [pc, #208]	; (80088d4 <xTaskResumeAll+0x120>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3318      	adds	r3, #24
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fe71 	bl	80074f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3304      	adds	r3, #4
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fe6c 	bl	80074f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008820:	4b2d      	ldr	r3, [pc, #180]	; (80088d8 <xTaskResumeAll+0x124>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d903      	bls.n	8008830 <xTaskResumeAll+0x7c>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	4a2a      	ldr	r2, [pc, #168]	; (80088d8 <xTaskResumeAll+0x124>)
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4a27      	ldr	r2, [pc, #156]	; (80088dc <xTaskResumeAll+0x128>)
 800883e:	441a      	add	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f7fe fdf7 	bl	800743a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008850:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <xTaskResumeAll+0x12c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	429a      	cmp	r2, r3
 8008858:	d302      	bcc.n	8008860 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800885a:	4b22      	ldr	r3, [pc, #136]	; (80088e4 <xTaskResumeAll+0x130>)
 800885c:	2201      	movs	r2, #1
 800885e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008860:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <xTaskResumeAll+0x120>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1cb      	bne.n	8008800 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800886e:	f000 fb5f 	bl	8008f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <xTaskResumeAll+0x134>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800887e:	f000 f847 	bl	8008910 <xTaskIncrementTick>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008888:	4b16      	ldr	r3, [pc, #88]	; (80088e4 <xTaskResumeAll+0x130>)
 800888a:	2201      	movs	r2, #1
 800888c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3b01      	subs	r3, #1
 8008892:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f1      	bne.n	800887e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800889a:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <xTaskResumeAll+0x134>)
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088a0:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <xTaskResumeAll+0x130>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d009      	beq.n	80088bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <xTaskResumeAll+0x138>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088bc:	f001 fcaa 	bl	800a214 <vPortExitCritical>

	return xAlreadyYielded;
 80088c0:	68bb      	ldr	r3, [r7, #8]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	2000509c 	.word	0x2000509c
 80088d0:	20005074 	.word	0x20005074
 80088d4:	20005034 	.word	0x20005034
 80088d8:	2000507c 	.word	0x2000507c
 80088dc:	20004ba4 	.word	0x20004ba4
 80088e0:	20004ba0 	.word	0x20004ba0
 80088e4:	20005088 	.word	0x20005088
 80088e8:	20005084 	.word	0x20005084
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <xTaskGetTickCount+0x1c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088fc:	687b      	ldr	r3, [r7, #4]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20005078 	.word	0x20005078

08008910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891a:	4b4f      	ldr	r3, [pc, #316]	; (8008a58 <xTaskIncrementTick+0x148>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 808f 	bne.w	8008a42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008924:	4b4d      	ldr	r3, [pc, #308]	; (8008a5c <xTaskIncrementTick+0x14c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800892c:	4a4b      	ldr	r2, [pc, #300]	; (8008a5c <xTaskIncrementTick+0x14c>)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d120      	bne.n	800897a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008938:	4b49      	ldr	r3, [pc, #292]	; (8008a60 <xTaskIncrementTick+0x150>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <xTaskIncrementTick+0x48>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	603b      	str	r3, [r7, #0]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xTaskIncrementTick+0x46>
 8008958:	4b41      	ldr	r3, [pc, #260]	; (8008a60 <xTaskIncrementTick+0x150>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <xTaskIncrementTick+0x154>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a3f      	ldr	r2, [pc, #252]	; (8008a60 <xTaskIncrementTick+0x150>)
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	4a3f      	ldr	r2, [pc, #252]	; (8008a64 <xTaskIncrementTick+0x154>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	4b3e      	ldr	r3, [pc, #248]	; (8008a68 <xTaskIncrementTick+0x158>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3301      	adds	r3, #1
 8008972:	4a3d      	ldr	r2, [pc, #244]	; (8008a68 <xTaskIncrementTick+0x158>)
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	f000 fadb 	bl	8008f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800897a:	4b3c      	ldr	r3, [pc, #240]	; (8008a6c <xTaskIncrementTick+0x15c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	429a      	cmp	r2, r3
 8008982:	d349      	bcc.n	8008a18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008984:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <xTaskIncrementTick+0x150>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800898e:	4b37      	ldr	r3, [pc, #220]	; (8008a6c <xTaskIncrementTick+0x15c>)
 8008990:	f04f 32ff 	mov.w	r2, #4294967295
 8008994:	601a      	str	r2, [r3, #0]
					break;
 8008996:	e03f      	b.n	8008a18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008998:	4b31      	ldr	r3, [pc, #196]	; (8008a60 <xTaskIncrementTick+0x150>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d203      	bcs.n	80089b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089b0:	4a2e      	ldr	r2, [pc, #184]	; (8008a6c <xTaskIncrementTick+0x15c>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089b6:	e02f      	b.n	8008a18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fd99 	bl	80074f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	3318      	adds	r3, #24
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fd90 	bl	80074f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <xTaskIncrementTick+0x160>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d903      	bls.n	80089e8 <xTaskIncrementTick+0xd8>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <xTaskIncrementTick+0x160>)
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4a1f      	ldr	r2, [pc, #124]	; (8008a74 <xTaskIncrementTick+0x164>)
 80089f6:	441a      	add	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7fe fd1b 	bl	800743a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a08:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <xTaskIncrementTick+0x168>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d3b8      	bcc.n	8008984 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a16:	e7b5      	b.n	8008984 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a18:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <xTaskIncrementTick+0x168>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	4915      	ldr	r1, [pc, #84]	; (8008a74 <xTaskIncrementTick+0x164>)
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d901      	bls.n	8008a34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <xTaskIncrementTick+0x16c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d007      	beq.n	8008a4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
 8008a40:	e004      	b.n	8008a4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a42:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <xTaskIncrementTick+0x170>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3301      	adds	r3, #1
 8008a48:	4a0d      	ldr	r2, [pc, #52]	; (8008a80 <xTaskIncrementTick+0x170>)
 8008a4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a4c:	697b      	ldr	r3, [r7, #20]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	2000509c 	.word	0x2000509c
 8008a5c:	20005078 	.word	0x20005078
 8008a60:	2000502c 	.word	0x2000502c
 8008a64:	20005030 	.word	0x20005030
 8008a68:	2000508c 	.word	0x2000508c
 8008a6c:	20005094 	.word	0x20005094
 8008a70:	2000507c 	.word	0x2000507c
 8008a74:	20004ba4 	.word	0x20004ba4
 8008a78:	20004ba0 	.word	0x20004ba0
 8008a7c:	20005088 	.word	0x20005088
 8008a80:	20005084 	.word	0x20005084

08008a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a8a:	4b2a      	ldr	r3, [pc, #168]	; (8008b34 <vTaskSwitchContext+0xb0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a92:	4b29      	ldr	r3, [pc, #164]	; (8008b38 <vTaskSwitchContext+0xb4>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a98:	e046      	b.n	8008b28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a9a:	4b27      	ldr	r3, [pc, #156]	; (8008b38 <vTaskSwitchContext+0xb4>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	4b26      	ldr	r3, [pc, #152]	; (8008b3c <vTaskSwitchContext+0xb8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e010      	b.n	8008aca <vTaskSwitchContext+0x46>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <vTaskSwitchContext+0x40>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <vTaskSwitchContext+0x3e>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	491d      	ldr	r1, [pc, #116]	; (8008b40 <vTaskSwitchContext+0xbc>)
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0e4      	beq.n	8008aa8 <vTaskSwitchContext+0x24>
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <vTaskSwitchContext+0xbc>)
 8008aea:	4413      	add	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	605a      	str	r2, [r3, #4]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3308      	adds	r3, #8
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d104      	bne.n	8008b0e <vTaskSwitchContext+0x8a>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	605a      	str	r2, [r3, #4]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	4a0b      	ldr	r2, [pc, #44]	; (8008b44 <vTaskSwitchContext+0xc0>)
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <vTaskSwitchContext+0xb8>)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <vTaskSwitchContext+0xc0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3354      	adds	r3, #84	; 0x54
 8008b24:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <vTaskSwitchContext+0xc4>)
 8008b26:	6013      	str	r3, [r2, #0]
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	2000509c 	.word	0x2000509c
 8008b38:	20005088 	.word	0x20005088
 8008b3c:	2000507c 	.word	0x2000507c
 8008b40:	20004ba4 	.word	0x20004ba4
 8008b44:	20004ba0 	.word	0x20004ba0
 8008b48:	200008d0 	.word	0x200008d0

08008b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60fb      	str	r3, [r7, #12]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b72:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vTaskPlaceOnEventList+0x44>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3318      	adds	r3, #24
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7fe fc81 	bl	8007482 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b80:	2101      	movs	r1, #1
 8008b82:	6838      	ldr	r0, [r7, #0]
 8008b84:	f000 fd90 	bl	80096a8 <prvAddCurrentTaskToDelayedList>
}
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20004ba0 	.word	0x20004ba0

08008b94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	617b      	str	r3, [r7, #20]
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3318      	adds	r3, #24
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7fe fc38 	bl	800743a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	68b8      	ldr	r0, [r7, #8]
 8008bda:	f000 fd65 	bl	80096a8 <prvAddCurrentTaskToDelayedList>
	}
 8008bde:	bf00      	nop
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20004ba0 	.word	0x20004ba0

08008bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60fb      	str	r3, [r7, #12]
}
 8008c14:	bf00      	nop
 8008c16:	e7fe      	b.n	8008c16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	3318      	adds	r3, #24
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fc69 	bl	80074f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c22:	4b1e      	ldr	r3, [pc, #120]	; (8008c9c <xTaskRemoveFromEventList+0xb0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d11d      	bne.n	8008c66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fc60 	bl	80074f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c38:	4b19      	ldr	r3, [pc, #100]	; (8008ca0 <xTaskRemoveFromEventList+0xb4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d903      	bls.n	8008c48 <xTaskRemoveFromEventList+0x5c>
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	4a16      	ldr	r2, [pc, #88]	; (8008ca0 <xTaskRemoveFromEventList+0xb4>)
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4a13      	ldr	r2, [pc, #76]	; (8008ca4 <xTaskRemoveFromEventList+0xb8>)
 8008c56:	441a      	add	r2, r3
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f7fe fbeb 	bl	800743a <vListInsertEnd>
 8008c64:	e005      	b.n	8008c72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	3318      	adds	r3, #24
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	480e      	ldr	r0, [pc, #56]	; (8008ca8 <xTaskRemoveFromEventList+0xbc>)
 8008c6e:	f7fe fbe4 	bl	800743a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c76:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <xTaskRemoveFromEventList+0xc0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d905      	bls.n	8008c8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c80:	2301      	movs	r3, #1
 8008c82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <xTaskRemoveFromEventList+0xc4>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	e001      	b.n	8008c90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c90:	697b      	ldr	r3, [r7, #20]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	2000509c 	.word	0x2000509c
 8008ca0:	2000507c 	.word	0x2000507c
 8008ca4:	20004ba4 	.word	0x20004ba4
 8008ca8:	20005034 	.word	0x20005034
 8008cac:	20004ba0 	.word	0x20004ba0
 8008cb0:	20005088 	.word	0x20005088

08008cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <vTaskInternalSetTimeOutState+0x24>)
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <vTaskInternalSetTimeOutState+0x28>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	605a      	str	r2, [r3, #4]
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	2000508c 	.word	0x2000508c
 8008cdc:	20005078 	.word	0x20005078

08008ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	613b      	str	r3, [r7, #16]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60fb      	str	r3, [r7, #12]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d22:	f001 fa47 	bl	800a1b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d26:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <xTaskCheckForTimeOut+0xbc>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d102      	bne.n	8008d46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]
 8008d44:	e023      	b.n	8008d8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <xTaskCheckForTimeOut+0xc0>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d007      	beq.n	8008d62 <xTaskCheckForTimeOut+0x82>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d302      	bcc.n	8008d62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	61fb      	str	r3, [r7, #28]
 8008d60:	e015      	b.n	8008d8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d20b      	bcs.n	8008d84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	1ad2      	subs	r2, r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ff9b 	bl	8008cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	e004      	b.n	8008d8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d8e:	f001 fa41 	bl	800a214 <vPortExitCritical>

	return xReturn;
 8008d92:	69fb      	ldr	r3, [r7, #28]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3720      	adds	r7, #32
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20005078 	.word	0x20005078
 8008da0:	2000508c 	.word	0x2000508c

08008da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008da8:	4b03      	ldr	r3, [pc, #12]	; (8008db8 <vTaskMissedYield+0x14>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
}
 8008dae:	bf00      	nop
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20005088 	.word	0x20005088

08008dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dc4:	f000 f852 	bl	8008e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dc8:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <prvIdleTask+0x28>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d9f9      	bls.n	8008dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <prvIdleTask+0x2c>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008de0:	e7f0      	b.n	8008dc4 <prvIdleTask+0x8>
 8008de2:	bf00      	nop
 8008de4:	20004ba4 	.word	0x20004ba4
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008df2:	2300      	movs	r3, #0
 8008df4:	607b      	str	r3, [r7, #4]
 8008df6:	e00c      	b.n	8008e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4a12      	ldr	r2, [pc, #72]	; (8008e4c <prvInitialiseTaskLists+0x60>)
 8008e04:	4413      	add	r3, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe faea 	bl	80073e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	607b      	str	r3, [r7, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b37      	cmp	r3, #55	; 0x37
 8008e16:	d9ef      	bls.n	8008df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e18:	480d      	ldr	r0, [pc, #52]	; (8008e50 <prvInitialiseTaskLists+0x64>)
 8008e1a:	f7fe fae1 	bl	80073e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e1e:	480d      	ldr	r0, [pc, #52]	; (8008e54 <prvInitialiseTaskLists+0x68>)
 8008e20:	f7fe fade 	bl	80073e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e24:	480c      	ldr	r0, [pc, #48]	; (8008e58 <prvInitialiseTaskLists+0x6c>)
 8008e26:	f7fe fadb 	bl	80073e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e2a:	480c      	ldr	r0, [pc, #48]	; (8008e5c <prvInitialiseTaskLists+0x70>)
 8008e2c:	f7fe fad8 	bl	80073e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e30:	480b      	ldr	r0, [pc, #44]	; (8008e60 <prvInitialiseTaskLists+0x74>)
 8008e32:	f7fe fad5 	bl	80073e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e36:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <prvInitialiseTaskLists+0x78>)
 8008e38:	4a05      	ldr	r2, [pc, #20]	; (8008e50 <prvInitialiseTaskLists+0x64>)
 8008e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <prvInitialiseTaskLists+0x7c>)
 8008e3e:	4a05      	ldr	r2, [pc, #20]	; (8008e54 <prvInitialiseTaskLists+0x68>)
 8008e40:	601a      	str	r2, [r3, #0]
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20004ba4 	.word	0x20004ba4
 8008e50:	20005004 	.word	0x20005004
 8008e54:	20005018 	.word	0x20005018
 8008e58:	20005034 	.word	0x20005034
 8008e5c:	20005048 	.word	0x20005048
 8008e60:	20005060 	.word	0x20005060
 8008e64:	2000502c 	.word	0x2000502c
 8008e68:	20005030 	.word	0x20005030

08008e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e72:	e019      	b.n	8008ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e74:	f001 f99e 	bl	800a1b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e78:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <prvCheckTasksWaitingTermination+0x50>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3304      	adds	r3, #4
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe fb35 	bl	80074f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <prvCheckTasksWaitingTermination+0x54>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	4a0b      	ldr	r2, [pc, #44]	; (8008ec0 <prvCheckTasksWaitingTermination+0x54>)
 8008e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e94:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <prvCheckTasksWaitingTermination+0x58>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <prvCheckTasksWaitingTermination+0x58>)
 8008e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e9e:	f001 f9b9 	bl	800a214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f810 	bl	8008ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ea8:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <prvCheckTasksWaitingTermination+0x58>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e1      	bne.n	8008e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20005048 	.word	0x20005048
 8008ec0:	20005074 	.word	0x20005074
 8008ec4:	2000505c 	.word	0x2000505c

08008ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3354      	adds	r3, #84	; 0x54
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 fb13 	bl	800b500 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d108      	bne.n	8008ef6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 fb51 	bl	800a590 <vPortFree>
				vPortFree( pxTCB );
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 fb4e 	bl	800a590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ef4:	e018      	b.n	8008f28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d103      	bne.n	8008f08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 fb45 	bl	800a590 <vPortFree>
	}
 8008f06:	e00f      	b.n	8008f28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d00a      	beq.n	8008f28 <prvDeleteTCB+0x60>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	60fb      	str	r3, [r7, #12]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <prvDeleteTCB+0x5e>
	}
 8008f28:	bf00      	nop
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <prvResetNextTaskUnblockTime+0x38>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f40:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <prvResetNextTaskUnblockTime+0x3c>)
 8008f42:	f04f 32ff 	mov.w	r2, #4294967295
 8008f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f48:	e008      	b.n	8008f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4a:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <prvResetNextTaskUnblockTime+0x38>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a04      	ldr	r2, [pc, #16]	; (8008f6c <prvResetNextTaskUnblockTime+0x3c>)
 8008f5a:	6013      	str	r3, [r2, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	2000502c 	.word	0x2000502c
 8008f6c:	20005094 	.word	0x20005094

08008f70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <xTaskGetCurrentTaskHandle+0x1c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008f7c:	687b      	ldr	r3, [r7, #4]
	}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	20004ba0 	.word	0x20004ba0

08008f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <xTaskGetSchedulerState+0x34>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	e008      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa4:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <xTaskGetSchedulerState+0x38>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fac:	2302      	movs	r3, #2
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	e001      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fb6:	687b      	ldr	r3, [r7, #4]
	}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	20005080 	.word	0x20005080
 8008fc8:	2000509c 	.word	0x2000509c

08008fcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d051      	beq.n	8009086 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	; (8009090 <xTaskPriorityInherit+0xc4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d241      	bcs.n	8009074 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db06      	blt.n	8009006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff8:	4b25      	ldr	r3, [pc, #148]	; (8009090 <xTaskPriorityInherit+0xc4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6959      	ldr	r1, [r3, #20]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4a1f      	ldr	r2, [pc, #124]	; (8009094 <xTaskPriorityInherit+0xc8>)
 8009018:	4413      	add	r3, r2
 800901a:	4299      	cmp	r1, r3
 800901c:	d122      	bne.n	8009064 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	3304      	adds	r3, #4
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fa66 	bl	80074f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009028:	4b19      	ldr	r3, [pc, #100]	; (8009090 <xTaskPriorityInherit+0xc4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009036:	4b18      	ldr	r3, [pc, #96]	; (8009098 <xTaskPriorityInherit+0xcc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	429a      	cmp	r2, r3
 800903c:	d903      	bls.n	8009046 <xTaskPriorityInherit+0x7a>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009042:	4a15      	ldr	r2, [pc, #84]	; (8009098 <xTaskPriorityInherit+0xcc>)
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	4613      	mov	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4a10      	ldr	r2, [pc, #64]	; (8009094 <xTaskPriorityInherit+0xc8>)
 8009054:	441a      	add	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3304      	adds	r3, #4
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f7fe f9ec 	bl	800743a <vListInsertEnd>
 8009062:	e004      	b.n	800906e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009064:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <xTaskPriorityInherit+0xc4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800906e:	2301      	movs	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e008      	b.n	8009086 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009078:	4b05      	ldr	r3, [pc, #20]	; (8009090 <xTaskPriorityInherit+0xc4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	429a      	cmp	r2, r3
 8009080:	d201      	bcs.n	8009086 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009082:	2301      	movs	r3, #1
 8009084:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009086:	68fb      	ldr	r3, [r7, #12]
	}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20004ba0 	.word	0x20004ba0
 8009094:	20004ba4 	.word	0x20004ba4
 8009098:	2000507c 	.word	0x2000507c

0800909c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d056      	beq.n	8009160 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090b2:	4b2e      	ldr	r3, [pc, #184]	; (800916c <xTaskPriorityDisinherit+0xd0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d00a      	beq.n	80090d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	60fb      	str	r3, [r7, #12]
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	60bb      	str	r3, [r7, #8]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f4:	1e5a      	subs	r2, r3, #1
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009102:	429a      	cmp	r2, r3
 8009104:	d02c      	beq.n	8009160 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910a:	2b00      	cmp	r3, #0
 800910c:	d128      	bne.n	8009160 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3304      	adds	r3, #4
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe f9ee 	bl	80074f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <xTaskPriorityDisinherit+0xd4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d903      	bls.n	8009140 <xTaskPriorityDisinherit+0xa4>
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	4a0c      	ldr	r2, [pc, #48]	; (8009170 <xTaskPriorityDisinherit+0xd4>)
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4a09      	ldr	r2, [pc, #36]	; (8009174 <xTaskPriorityDisinherit+0xd8>)
 800914e:	441a      	add	r2, r3
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f7fe f96f 	bl	800743a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800915c:	2301      	movs	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009160:	697b      	ldr	r3, [r7, #20]
	}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20004ba0 	.word	0x20004ba0
 8009170:	2000507c 	.word	0x2000507c
 8009174:	20004ba4 	.word	0x20004ba4

08009178 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009186:	2301      	movs	r3, #1
 8009188:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d06a      	beq.n	8009266 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	60fb      	str	r3, [r7, #12]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d902      	bls.n	80091be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	e002      	b.n	80091c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d04b      	beq.n	8009266 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d146      	bne.n	8009266 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80091d8:	4b25      	ldr	r3, [pc, #148]	; (8009270 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d10a      	bne.n	80091f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	60bb      	str	r3, [r7, #8]
}
 80091f4:	bf00      	nop
 80091f6:	e7fe      	b.n	80091f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	db04      	blt.n	8009216 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	6959      	ldr	r1, [r3, #20]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4a13      	ldr	r2, [pc, #76]	; (8009274 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009226:	4413      	add	r3, r2
 8009228:	4299      	cmp	r1, r3
 800922a:	d11c      	bne.n	8009266 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	3304      	adds	r3, #4
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe f95f 	bl	80074f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d903      	bls.n	800924a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	4a0c      	ldr	r2, [pc, #48]	; (8009278 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4a07      	ldr	r2, [pc, #28]	; (8009274 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009258:	441a      	add	r2, r3
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	3304      	adds	r3, #4
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f7fe f8ea 	bl	800743a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009266:	bf00      	nop
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20004ba0 	.word	0x20004ba0
 8009274:	20004ba4 	.word	0x20004ba4
 8009278:	2000507c 	.word	0x2000507c

0800927c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d004      	beq.n	8009292 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800928e:	3201      	adds	r2, #1
 8009290:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009292:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009294:	681b      	ldr	r3, [r3, #0]
	}
 8009296:	4618      	mov	r0, r3
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	20004ba0 	.word	0x20004ba0

080092a4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80092b2:	f000 ff7f 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80092b6:	4b29      	ldr	r3, [pc, #164]	; (800935c <xTaskNotifyWait+0xb8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d01c      	beq.n	80092fe <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80092c4:	4b25      	ldr	r3, [pc, #148]	; (800935c <xTaskNotifyWait+0xb8>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	43d2      	mvns	r2, r2
 80092d0:	400a      	ands	r2, r1
 80092d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80092d6:	4b21      	ldr	r3, [pc, #132]	; (800935c <xTaskNotifyWait+0xb8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00b      	beq.n	80092fe <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092e6:	2101      	movs	r1, #1
 80092e8:	6838      	ldr	r0, [r7, #0]
 80092ea:	f000 f9dd 	bl	80096a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80092ee:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <xTaskNotifyWait+0xbc>)
 80092f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80092fe:	f000 ff89 	bl	800a214 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009302:	f000 ff57 	bl	800a1b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800930c:	4b13      	ldr	r3, [pc, #76]	; (800935c <xTaskNotifyWait+0xb8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009318:	4b10      	ldr	r3, [pc, #64]	; (800935c <xTaskNotifyWait+0xb8>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d002      	beq.n	800932c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e00a      	b.n	8009342 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <xTaskNotifyWait+0xb8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	43d2      	mvns	r2, r2
 8009338:	400a      	ands	r2, r1
 800933a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009342:	4b06      	ldr	r3, [pc, #24]	; (800935c <xTaskNotifyWait+0xb8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800934c:	f000 ff62 	bl	800a214 <vPortExitCritical>

		return xReturn;
 8009350:	697b      	ldr	r3, [r7, #20]
	}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20004ba0 	.word	0x20004ba0
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08a      	sub	sp, #40	; 0x28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	603b      	str	r3, [r7, #0]
 8009370:	4613      	mov	r3, r2
 8009372:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009374:	2301      	movs	r3, #1
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <xTaskGenericNotify+0x30>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	61bb      	str	r3, [r7, #24]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009398:	f000 ff0c 	bl	800a1b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80093b2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d82d      	bhi.n	800941e <xTaskGenericNotify+0xba>
 80093c2:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <xTaskGenericNotify+0x64>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	08009441 	.word	0x08009441
 80093cc:	080093dd 	.word	0x080093dd
 80093d0:	080093ef 	.word	0x080093ef
 80093d4:	080093ff 	.word	0x080093ff
 80093d8:	08009409 	.word	0x08009409
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	431a      	orrs	r2, r3
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80093ec:	e02b      	b.n	8009446 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80093fc:	e023      	b.n	8009446 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009406:	e01e      	b.n	8009446 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009408:	7ffb      	ldrb	r3, [r7, #31]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d004      	beq.n	8009418 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009416:	e016      	b.n	8009446 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009418:	2300      	movs	r3, #0
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800941c:	e013      	b.n	8009446 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d00c      	beq.n	8009444 <xTaskGenericNotify+0xe0>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	617b      	str	r3, [r7, #20]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <xTaskGenericNotify+0xda>
					break;
 8009440:	bf00      	nop
 8009442:	e000      	b.n	8009446 <xTaskGenericNotify+0xe2>

					break;
 8009444:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009446:	7ffb      	ldrb	r3, [r7, #31]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d13a      	bne.n	80094c2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	3304      	adds	r3, #4
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe f84f 	bl	80074f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945a:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <xTaskGenericNotify+0x16c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d903      	bls.n	800946a <xTaskGenericNotify+0x106>
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	4a1a      	ldr	r2, [pc, #104]	; (80094d0 <xTaskGenericNotify+0x16c>)
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4a17      	ldr	r2, [pc, #92]	; (80094d4 <xTaskGenericNotify+0x170>)
 8009478:	441a      	add	r2, r3
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	3304      	adds	r3, #4
 800947e:	4619      	mov	r1, r3
 8009480:	4610      	mov	r0, r2
 8009482:	f7fd ffda 	bl	800743a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <xTaskGenericNotify+0x140>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	613b      	str	r3, [r7, #16]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a8:	4b0b      	ldr	r3, [pc, #44]	; (80094d8 <xTaskGenericNotify+0x174>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d907      	bls.n	80094c2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80094b2:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <xTaskGenericNotify+0x178>)
 80094b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80094c2:	f000 fea7 	bl	800a214 <vPortExitCritical>

		return xReturn;
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3728      	adds	r7, #40	; 0x28
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	2000507c 	.word	0x2000507c
 80094d4:	20004ba4 	.word	0x20004ba4
 80094d8:	20004ba0 	.word	0x20004ba0
 80094dc:	e000ed04 	.word	0xe000ed04

080094e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08e      	sub	sp, #56	; 0x38
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	4613      	mov	r3, r2
 80094ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80094f0:	2301      	movs	r3, #1
 80094f2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009510:	f000 ff32 	bl	800a378 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009518:	f3ef 8211 	mrs	r2, BASEPRI
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	623a      	str	r2, [r7, #32]
 800952e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009530:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009532:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800954a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2202      	movs	r2, #2
 8009552:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	2b04      	cmp	r3, #4
 800955a:	d82f      	bhi.n	80095bc <xTaskGenericNotifyFromISR+0xdc>
 800955c:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <xTaskGenericNotifyFromISR+0x84>)
 800955e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009562:	bf00      	nop
 8009564:	080095df 	.word	0x080095df
 8009568:	08009579 	.word	0x08009579
 800956c:	0800958b 	.word	0x0800958b
 8009570:	0800959b 	.word	0x0800959b
 8009574:	080095a5 	.word	0x080095a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	431a      	orrs	r2, r3
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009588:	e02c      	b.n	80095e4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009598:	e024      	b.n	80095e4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80095a2:	e01f      	b.n	80095e4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80095a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d004      	beq.n	80095b6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80095b4:	e016      	b.n	80095e4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80095ba:	e013      	b.n	80095e4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c6:	d00c      	beq.n	80095e2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	61bb      	str	r3, [r7, #24]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xTaskGenericNotifyFromISR+0xfc>
					break;
 80095de:	bf00      	nop
 80095e0:	e000      	b.n	80095e4 <xTaskGenericNotifyFromISR+0x104>
					break;
 80095e2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80095e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d146      	bne.n	800967a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00a      	beq.n	800960a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	617b      	str	r3, [r7, #20]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800960a:	4b21      	ldr	r3, [pc, #132]	; (8009690 <xTaskGenericNotifyFromISR+0x1b0>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d11d      	bne.n	800964e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	3304      	adds	r3, #4
 8009616:	4618      	mov	r0, r3
 8009618:	f7fd ff6c 	bl	80074f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009620:	4b1c      	ldr	r3, [pc, #112]	; (8009694 <xTaskGenericNotifyFromISR+0x1b4>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d903      	bls.n	8009630 <xTaskGenericNotifyFromISR+0x150>
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	4a19      	ldr	r2, [pc, #100]	; (8009694 <xTaskGenericNotifyFromISR+0x1b4>)
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4a16      	ldr	r2, [pc, #88]	; (8009698 <xTaskGenericNotifyFromISR+0x1b8>)
 800963e:	441a      	add	r2, r3
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	3304      	adds	r3, #4
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f7fd fef7 	bl	800743a <vListInsertEnd>
 800964c:	e005      	b.n	800965a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	3318      	adds	r3, #24
 8009652:	4619      	mov	r1, r3
 8009654:	4811      	ldr	r0, [pc, #68]	; (800969c <xTaskGenericNotifyFromISR+0x1bc>)
 8009656:	f7fd fef0 	bl	800743a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <xTaskGenericNotifyFromISR+0x1c0>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	429a      	cmp	r2, r3
 8009666:	d908      	bls.n	800967a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d002      	beq.n	8009674 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800966e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009674:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <xTaskGenericNotifyFromISR+0x1c4>)
 8009676:	2201      	movs	r2, #1
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f383 8811 	msr	BASEPRI, r3
}
 8009684:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009688:	4618      	mov	r0, r3
 800968a:	3738      	adds	r7, #56	; 0x38
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	2000509c 	.word	0x2000509c
 8009694:	2000507c 	.word	0x2000507c
 8009698:	20004ba4 	.word	0x20004ba4
 800969c:	20005034 	.word	0x20005034
 80096a0:	20004ba0 	.word	0x20004ba0
 80096a4:	20005088 	.word	0x20005088

080096a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096b2:	4b21      	ldr	r3, [pc, #132]	; (8009738 <prvAddCurrentTaskToDelayedList+0x90>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096b8:	4b20      	ldr	r3, [pc, #128]	; (800973c <prvAddCurrentTaskToDelayedList+0x94>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3304      	adds	r3, #4
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fd ff18 	bl	80074f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d10a      	bne.n	80096e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096d2:	4b1a      	ldr	r3, [pc, #104]	; (800973c <prvAddCurrentTaskToDelayedList+0x94>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	4819      	ldr	r0, [pc, #100]	; (8009740 <prvAddCurrentTaskToDelayedList+0x98>)
 80096dc:	f7fd fead 	bl	800743a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096e0:	e026      	b.n	8009730 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4413      	add	r3, r2
 80096e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096ea:	4b14      	ldr	r3, [pc, #80]	; (800973c <prvAddCurrentTaskToDelayedList+0x94>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d209      	bcs.n	800970e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <prvAddCurrentTaskToDelayedList+0x94>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f7fd febb 	bl	8007482 <vListInsert>
}
 800970c:	e010      	b.n	8009730 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800970e:	4b0e      	ldr	r3, [pc, #56]	; (8009748 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	4b0a      	ldr	r3, [pc, #40]	; (800973c <prvAddCurrentTaskToDelayedList+0x94>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3304      	adds	r3, #4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fd feb1 	bl	8007482 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009720:	4b0a      	ldr	r3, [pc, #40]	; (800974c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	d202      	bcs.n	8009730 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800972a:	4a08      	ldr	r2, [pc, #32]	; (800974c <prvAddCurrentTaskToDelayedList+0xa4>)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6013      	str	r3, [r2, #0]
}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20005078 	.word	0x20005078
 800973c:	20004ba0 	.word	0x20004ba0
 8009740:	20005060 	.word	0x20005060
 8009744:	20005030 	.word	0x20005030
 8009748:	2000502c 	.word	0x2000502c
 800974c:	20005094 	.word	0x20005094

08009750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08a      	sub	sp, #40	; 0x28
 8009754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800975a:	f000 fba1 	bl	8009ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800975e:	4b1c      	ldr	r3, [pc, #112]	; (80097d0 <xTimerCreateTimerTask+0x80>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d021      	beq.n	80097aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800976e:	1d3a      	adds	r2, r7, #4
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	f107 030c 	add.w	r3, r7, #12
 8009778:	4618      	mov	r0, r3
 800977a:	f7fd fe17 	bl	80073ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	9202      	str	r2, [sp, #8]
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	2302      	movs	r3, #2
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	2300      	movs	r3, #0
 800978e:	460a      	mov	r2, r1
 8009790:	4910      	ldr	r1, [pc, #64]	; (80097d4 <xTimerCreateTimerTask+0x84>)
 8009792:	4811      	ldr	r0, [pc, #68]	; (80097d8 <xTimerCreateTimerTask+0x88>)
 8009794:	f7fe fdd8 	bl	8008348 <xTaskCreateStatic>
 8009798:	4603      	mov	r3, r0
 800979a:	4a10      	ldr	r2, [pc, #64]	; (80097dc <xTimerCreateTimerTask+0x8c>)
 800979c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800979e:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <xTimerCreateTimerTask+0x8c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097a6:	2301      	movs	r3, #1
 80097a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	613b      	str	r3, [r7, #16]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097c6:	697b      	ldr	r3, [r7, #20]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	200050d0 	.word	0x200050d0
 80097d4:	0800fcf8 	.word	0x0800fcf8
 80097d8:	08009a49 	.word	0x08009a49
 80097dc:	200050d4 	.word	0x200050d4

080097e0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80097ee:	202c      	movs	r0, #44	; 0x2c
 80097f0:	f000 fe02 	bl	800a3f8 <pvPortMalloc>
 80097f4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00d      	beq.n	8009818 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f843 	bl	800989e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009818:	697b      	ldr	r3, [r7, #20]
	}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009822:	b580      	push	{r7, lr}
 8009824:	b08a      	sub	sp, #40	; 0x28
 8009826:	af02      	add	r7, sp, #8
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009830:	232c      	movs	r3, #44	; 0x2c
 8009832:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b2c      	cmp	r3, #44	; 0x2c
 8009838:	d00a      	beq.n	8009850 <xTimerCreateStatic+0x2e>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	61bb      	str	r3, [r7, #24]
}
 800984c:	bf00      	nop
 800984e:	e7fe      	b.n	800984e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <xTimerCreateStatic+0x4c>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	617b      	str	r3, [r7, #20]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00d      	beq.n	8009894 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 f805 	bl	800989e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009894:	69fb      	ldr	r3, [r7, #28]
	}
 8009896:	4618      	mov	r0, r3
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b086      	sub	sp, #24
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	617b      	str	r3, [r7, #20]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d01e      	beq.n	800990c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80098ce:	f000 fae7 	bl	8009ea0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	6a3a      	ldr	r2, [r7, #32]
 80098e8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	3304      	adds	r3, #4
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fd fd96 	bl	8007420 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d008      	beq.n	800990c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009900:	f043 0304 	orr.w	r3, r3, #4
 8009904:	b2da      	uxtb	r2, r3
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800990c:	bf00      	nop
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	; 0x28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009922:	2300      	movs	r3, #0
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <xTimerGenericCommand+0x2e>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	623b      	str	r3, [r7, #32]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009942:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <xTimerGenericCommand+0x98>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d02a      	beq.n	80099a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b05      	cmp	r3, #5
 800995a:	dc18      	bgt.n	800998e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800995c:	f7ff fb18 	bl	8008f90 <xTaskGetSchedulerState>
 8009960:	4603      	mov	r3, r0
 8009962:	2b02      	cmp	r3, #2
 8009964:	d109      	bne.n	800997a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <xTimerGenericCommand+0x98>)
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f107 0110 	add.w	r1, r7, #16
 800996e:	2300      	movs	r3, #0
 8009970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009972:	f7fd ffdd 	bl	8007930 <xQueueGenericSend>
 8009976:	6278      	str	r0, [r7, #36]	; 0x24
 8009978:	e012      	b.n	80099a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <xTimerGenericCommand+0x98>)
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	f107 0110 	add.w	r1, r7, #16
 8009982:	2300      	movs	r3, #0
 8009984:	2200      	movs	r2, #0
 8009986:	f7fd ffd3 	bl	8007930 <xQueueGenericSend>
 800998a:	6278      	str	r0, [r7, #36]	; 0x24
 800998c:	e008      	b.n	80099a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800998e:	4b07      	ldr	r3, [pc, #28]	; (80099ac <xTimerGenericCommand+0x98>)
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f107 0110 	add.w	r1, r7, #16
 8009996:	2300      	movs	r3, #0
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	f7fe f8c7 	bl	8007b2c <xQueueGenericSendFromISR>
 800999e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3728      	adds	r7, #40	; 0x28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	200050d0 	.word	0x200050d0

080099b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ba:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <prvProcessExpiredTimer+0x94>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	3304      	adds	r3, #4
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fd fd93 	bl	80074f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d022      	beq.n	8009a22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	18d1      	adds	r1, r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	6978      	ldr	r0, [r7, #20]
 80099ea:	f000 f8d1 	bl	8009b90 <prvInsertTimerInActiveList>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d01f      	beq.n	8009a34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099f4:	2300      	movs	r3, #0
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	2300      	movs	r3, #0
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	2100      	movs	r1, #0
 80099fe:	6978      	ldr	r0, [r7, #20]
 8009a00:	f7ff ff88 	bl	8009914 <xTimerGenericCommand>
 8009a04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d113      	bne.n	8009a34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a28:	f023 0301 	bic.w	r3, r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	6978      	ldr	r0, [r7, #20]
 8009a3a:	4798      	blx	r3
}
 8009a3c:	bf00      	nop
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	200050c8 	.word	0x200050c8

08009a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a50:	f107 0308 	add.w	r3, r7, #8
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 f857 	bl	8009b08 <prvGetNextExpireTime>
 8009a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f803 	bl	8009a6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a66:	f000 f8d5 	bl	8009c14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a6a:	e7f1      	b.n	8009a50 <prvTimerTask+0x8>

08009a6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a76:	f7fe fe8f 	bl	8008798 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a7a:	f107 0308 	add.w	r3, r7, #8
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f866 	bl	8009b50 <prvSampleTimeNow>
 8009a84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d130      	bne.n	8009aee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <prvProcessTimerOrBlockTask+0x3c>
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d806      	bhi.n	8009aa8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a9a:	f7fe fe8b 	bl	80087b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff ff85 	bl	80099b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009aa6:	e024      	b.n	8009af2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009aae:	4b13      	ldr	r3, [pc, #76]	; (8009afc <prvProcessTimerOrBlockTask+0x90>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <prvProcessTimerOrBlockTask+0x50>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e000      	b.n	8009abe <prvProcessTimerOrBlockTask+0x52>
 8009abc:	2300      	movs	r3, #0
 8009abe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ac0:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <prvProcessTimerOrBlockTask+0x94>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	f7fe fc07 	bl	80082e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ad2:	f7fe fe6f 	bl	80087b4 <xTaskResumeAll>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009adc:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <prvProcessTimerOrBlockTask+0x98>)
 8009ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	f3bf 8f6f 	isb	sy
}
 8009aec:	e001      	b.n	8009af2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aee:	f7fe fe61 	bl	80087b4 <xTaskResumeAll>
}
 8009af2:	bf00      	nop
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200050cc 	.word	0x200050cc
 8009b00:	200050d0 	.word	0x200050d0
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b10:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <prvGetNextExpireTime+0x44>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <prvGetNextExpireTime+0x16>
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	e000      	b.n	8009b20 <prvGetNextExpireTime+0x18>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b2c:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <prvGetNextExpireTime+0x44>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	e001      	b.n	8009b3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	200050c8 	.word	0x200050c8

08009b50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b58:	f7fe feca 	bl	80088f0 <xTaskGetTickCount>
 8009b5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <prvSampleTimeNow+0x3c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d205      	bcs.n	8009b74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b68:	f000 f936 	bl	8009dd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	e002      	b.n	8009b7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b7a:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <prvSampleTimeNow+0x3c>)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b80:	68fb      	ldr	r3, [r7, #12]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	200050d8 	.word	0x200050d8

08009b90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d812      	bhi.n	8009bdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d302      	bcc.n	8009bca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	e01b      	b.n	8009c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bca:	4b10      	ldr	r3, [pc, #64]	; (8009c0c <prvInsertTimerInActiveList+0x7c>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7fd fc54 	bl	8007482 <vListInsert>
 8009bda:	e012      	b.n	8009c02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d206      	bcs.n	8009bf2 <prvInsertTimerInActiveList+0x62>
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d302      	bcc.n	8009bf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bec:	2301      	movs	r3, #1
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	e007      	b.n	8009c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bf2:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <prvInsertTimerInActiveList+0x80>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f7fd fc40 	bl	8007482 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c02:	697b      	ldr	r3, [r7, #20]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	200050cc 	.word	0x200050cc
 8009c10:	200050c8 	.word	0x200050c8

08009c14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08e      	sub	sp, #56	; 0x38
 8009c18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c1a:	e0ca      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	da18      	bge.n	8009c54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c22:	1d3b      	adds	r3, r7, #4
 8009c24:	3304      	adds	r3, #4
 8009c26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	61fb      	str	r3, [r7, #28]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4a:	6850      	ldr	r0, [r2, #4]
 8009c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4e:	6892      	ldr	r2, [r2, #8]
 8009c50:	4611      	mov	r1, r2
 8009c52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f2c0 80aa 	blt.w	8009db0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fc41 	bl	80074f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c72:	463b      	mov	r3, r7
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff ff6b 	bl	8009b50 <prvSampleTimeNow>
 8009c7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b09      	cmp	r3, #9
 8009c80:	f200 8097 	bhi.w	8009db2 <prvProcessReceivedCommands+0x19e>
 8009c84:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <prvProcessReceivedCommands+0x78>)
 8009c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8a:	bf00      	nop
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009cb5 	.word	0x08009cb5
 8009c94:	08009cb5 	.word	0x08009cb5
 8009c98:	08009d29 	.word	0x08009d29
 8009c9c:	08009d3d 	.word	0x08009d3d
 8009ca0:	08009d87 	.word	0x08009d87
 8009ca4:	08009cb5 	.word	0x08009cb5
 8009ca8:	08009cb5 	.word	0x08009cb5
 8009cac:	08009d29 	.word	0x08009d29
 8009cb0:	08009d3d 	.word	0x08009d3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cba:	f043 0301 	orr.w	r3, r3, #1
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	18d1      	adds	r1, r2, r3
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd4:	f7ff ff5c 	bl	8009b90 <prvInsertTimerInActiveList>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d069      	beq.n	8009db2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d05e      	beq.n	8009db2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	441a      	add	r2, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	2100      	movs	r1, #0
 8009d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d06:	f7ff fe05 	bl	8009914 <xTimerGenericCommand>
 8009d0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d14f      	bne.n	8009db2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	61bb      	str	r3, [r7, #24]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d3a:	e03a      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	617b      	str	r3, [r7, #20]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	18d1      	adds	r1, r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d80:	f7ff ff06 	bl	8009b90 <prvInsertTimerInActiveList>
					break;
 8009d84:	e015      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d96:	f000 fbfb 	bl	800a590 <vPortFree>
 8009d9a:	e00a      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da2:	f023 0301 	bic.w	r3, r3, #1
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009dae:	e000      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009db0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <prvProcessReceivedCommands+0x1c0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	1d39      	adds	r1, r7, #4
 8009db8:	2200      	movs	r2, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fd ff52 	bl	8007c64 <xQueueReceive>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f47f af2a 	bne.w	8009c1c <prvProcessReceivedCommands+0x8>
	}
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	3730      	adds	r7, #48	; 0x30
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200050d0 	.word	0x200050d0

08009dd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dde:	e048      	b.n	8009e72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009de0:	4b2d      	ldr	r3, [pc, #180]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dea:	4b2b      	ldr	r3, [pc, #172]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3304      	adds	r3, #4
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd fb7b 	bl	80074f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d02e      	beq.n	8009e72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d90e      	bls.n	8009e44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e32:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fd fb20 	bl	8007482 <vListInsert>
 8009e42:	e016      	b.n	8009e72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e44:	2300      	movs	r3, #0
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fd60 	bl	8009914 <xTimerGenericCommand>
 8009e54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	603b      	str	r3, [r7, #0]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e72:	4b09      	ldr	r3, [pc, #36]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1b1      	bne.n	8009de0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e7c:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e82:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <prvSwitchTimerLists+0xc4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a04      	ldr	r2, [pc, #16]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e8a:	4a04      	ldr	r2, [pc, #16]	; (8009e9c <prvSwitchTimerLists+0xc4>)
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	6013      	str	r3, [r2, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	200050c8 	.word	0x200050c8
 8009e9c:	200050cc 	.word	0x200050cc

08009ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ea6:	f000 f985 	bl	800a1b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eaa:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d120      	bne.n	8009ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009eb2:	4814      	ldr	r0, [pc, #80]	; (8009f04 <prvCheckForValidListAndQueue+0x64>)
 8009eb4:	f7fd fa94 	bl	80073e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009eb8:	4813      	ldr	r0, [pc, #76]	; (8009f08 <prvCheckForValidListAndQueue+0x68>)
 8009eba:	f7fd fa91 	bl	80073e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <prvCheckForValidListAndQueue+0x6c>)
 8009ec0:	4a10      	ldr	r2, [pc, #64]	; (8009f04 <prvCheckForValidListAndQueue+0x64>)
 8009ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ec4:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <prvCheckForValidListAndQueue+0x70>)
 8009ec6:	4a10      	ldr	r2, [pc, #64]	; (8009f08 <prvCheckForValidListAndQueue+0x68>)
 8009ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <prvCheckForValidListAndQueue+0x74>)
 8009ed0:	4a11      	ldr	r2, [pc, #68]	; (8009f18 <prvCheckForValidListAndQueue+0x78>)
 8009ed2:	2110      	movs	r1, #16
 8009ed4:	200a      	movs	r0, #10
 8009ed6:	f7fd fb9f 	bl	8007618 <xQueueGenericCreateStatic>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4a08      	ldr	r2, [pc, #32]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ee0:	4b07      	ldr	r3, [pc, #28]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d005      	beq.n	8009ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ee8:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	490b      	ldr	r1, [pc, #44]	; (8009f1c <prvCheckForValidListAndQueue+0x7c>)
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe f9cc 	bl	800828c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ef4:	f000 f98e 	bl	800a214 <vPortExitCritical>
}
 8009ef8:	bf00      	nop
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200050d0 	.word	0x200050d0
 8009f04:	200050a0 	.word	0x200050a0
 8009f08:	200050b4 	.word	0x200050b4
 8009f0c:	200050c8 	.word	0x200050c8
 8009f10:	200050cc 	.word	0x200050cc
 8009f14:	2000517c 	.word	0x2000517c
 8009f18:	200050dc 	.word	0x200050dc
 8009f1c:	0800fd00 	.word	0x0800fd00

08009f20 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <pvTimerGetTimerID+0x28>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	60fb      	str	r3, [r7, #12]
}
 8009f44:	bf00      	nop
 8009f46:	e7fe      	b.n	8009f46 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009f48:	f000 f934 	bl	800a1b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009f52:	f000 f95f 	bl	800a214 <vPortExitCritical>

	return pvReturn;
 8009f56:	693b      	ldr	r3, [r7, #16]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3b04      	subs	r3, #4
 8009f70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3b04      	subs	r3, #4
 8009f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f023 0201 	bic.w	r2, r3, #1
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3b04      	subs	r3, #4
 8009f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f90:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <pxPortInitialiseStack+0x64>)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	3b14      	subs	r3, #20
 8009f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3b04      	subs	r3, #4
 8009fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f06f 0202 	mvn.w	r2, #2
 8009fae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3b20      	subs	r3, #32
 8009fb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	08009fc9 	.word	0x08009fc9

08009fc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fd2:	4b12      	ldr	r3, [pc, #72]	; (800a01c <prvTaskExitError+0x54>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fda:	d00a      	beq.n	8009ff2 <prvTaskExitError+0x2a>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	60fb      	str	r3, [r7, #12]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <prvTaskExitError+0x28>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	60bb      	str	r3, [r7, #8]
}
 800a004:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a006:	bf00      	nop
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0fc      	beq.n	800a008 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a00e:	bf00      	nop
 800a010:	bf00      	nop
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	200008cc 	.word	0x200008cc

0800a020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <pxCurrentTCBConst2>)
 800a022:	6819      	ldr	r1, [r3, #0]
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	f380 8809 	msr	PSP, r0
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8811 	msr	BASEPRI, r0
 800a03a:	4770      	bx	lr
 800a03c:	f3af 8000 	nop.w

0800a040 <pxCurrentTCBConst2>:
 800a040:	20004ba0 	.word	0x20004ba0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a048:	4808      	ldr	r0, [pc, #32]	; (800a06c <prvPortStartFirstTask+0x24>)
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f380 8808 	msr	MSP, r0
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	f380 8814 	msr	CONTROL, r0
 800a05a:	b662      	cpsie	i
 800a05c:	b661      	cpsie	f
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	df00      	svc	0
 800a068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a06a:	bf00      	nop
 800a06c:	e000ed08 	.word	0xe000ed08

0800a070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a076:	4b46      	ldr	r3, [pc, #280]	; (800a190 <xPortStartScheduler+0x120>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a46      	ldr	r2, [pc, #280]	; (800a194 <xPortStartScheduler+0x124>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10a      	bne.n	800a096 <xPortStartScheduler+0x26>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	613b      	str	r3, [r7, #16]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a096:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <xPortStartScheduler+0x120>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a3f      	ldr	r2, [pc, #252]	; (800a198 <xPortStartScheduler+0x128>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d10a      	bne.n	800a0b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	60fb      	str	r3, [r7, #12]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0b6:	4b39      	ldr	r3, [pc, #228]	; (800a19c <xPortStartScheduler+0x12c>)
 800a0b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	22ff      	movs	r2, #255	; 0xff
 800a0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4b31      	ldr	r3, [pc, #196]	; (800a1a0 <xPortStartScheduler+0x130>)
 800a0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0de:	4b31      	ldr	r3, [pc, #196]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0e4:	e009      	b.n	800a0fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0e6:	4b2f      	ldr	r3, [pc, #188]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	4a2d      	ldr	r2, [pc, #180]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a102:	2b80      	cmp	r3, #128	; 0x80
 800a104:	d0ef      	beq.n	800a0e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a106:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f1c3 0307 	rsb	r3, r3, #7
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d00a      	beq.n	800a128 <xPortStartScheduler+0xb8>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60bb      	str	r3, [r7, #8]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a128:	4b1e      	ldr	r3, [pc, #120]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a132:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a13a:	4a1a      	ldr	r2, [pc, #104]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a13c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a146:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a14c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a14      	ldr	r2, [pc, #80]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a15c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a15e:	f000 f8dd 	bl	800a31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a162:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <xPortStartScheduler+0x13c>)
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a168:	f000 f8fc 	bl	800a364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a16c:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <xPortStartScheduler+0x140>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a0f      	ldr	r2, [pc, #60]	; (800a1b0 <xPortStartScheduler+0x140>)
 800a172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a178:	f7ff ff66 	bl	800a048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a17c:	f7fe fc82 	bl	8008a84 <vTaskSwitchContext>
	prvTaskExitError();
 800a180:	f7ff ff22 	bl	8009fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	e000ed00 	.word	0xe000ed00
 800a194:	410fc271 	.word	0x410fc271
 800a198:	410fc270 	.word	0x410fc270
 800a19c:	e000e400 	.word	0xe000e400
 800a1a0:	200051cc 	.word	0x200051cc
 800a1a4:	200051d0 	.word	0x200051d0
 800a1a8:	e000ed20 	.word	0xe000ed20
 800a1ac:	200008cc 	.word	0x200008cc
 800a1b0:	e000ef34 	.word	0xe000ef34

0800a1b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	607b      	str	r3, [r7, #4]
}
 800a1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <vPortEnterCritical+0x58>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	4a0d      	ldr	r2, [pc, #52]	; (800a20c <vPortEnterCritical+0x58>)
 800a1d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <vPortEnterCritical+0x58>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d10f      	bne.n	800a200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <vPortEnterCritical+0x5c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	603b      	str	r3, [r7, #0]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <vPortEnterCritical+0x4a>
	}
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	200008cc 	.word	0x200008cc
 800a210:	e000ed04 	.word	0xe000ed04

0800a214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a21a:	4b12      	ldr	r3, [pc, #72]	; (800a264 <vPortExitCritical+0x50>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <vPortExitCritical+0x24>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	607b      	str	r3, [r7, #4]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <vPortExitCritical+0x50>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4a09      	ldr	r2, [pc, #36]	; (800a264 <vPortExitCritical+0x50>)
 800a240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a242:	4b08      	ldr	r3, [pc, #32]	; (800a264 <vPortExitCritical+0x50>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d105      	bne.n	800a256 <vPortExitCritical+0x42>
 800a24a:	2300      	movs	r3, #0
 800a24c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	f383 8811 	msr	BASEPRI, r3
}
 800a254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	200008cc 	.word	0x200008cc
	...

0800a270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a270:	f3ef 8009 	mrs	r0, PSP
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <pxCurrentTCBConst>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	f01e 0f10 	tst.w	lr, #16
 800a280:	bf08      	it	eq
 800a282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	6010      	str	r0, [r2, #0]
 800a28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a294:	f380 8811 	msr	BASEPRI, r0
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f7fe fbf0 	bl	8008a84 <vTaskSwitchContext>
 800a2a4:	f04f 0000 	mov.w	r0, #0
 800a2a8:	f380 8811 	msr	BASEPRI, r0
 800a2ac:	bc09      	pop	{r0, r3}
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	6808      	ldr	r0, [r1, #0]
 800a2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b6:	f01e 0f10 	tst.w	lr, #16
 800a2ba:	bf08      	it	eq
 800a2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2c0:	f380 8809 	msr	PSP, r0
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst>:
 800a2d0:	20004ba0 	.word	0x20004ba0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2f2:	f7fe fb0d 	bl	8008910 <xTaskIncrementTick>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <xPortSysTickHandler+0x40>)
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	f383 8811 	msr	BASEPRI, r3
}
 800a30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a326:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <vPortSetupTimerInterrupt+0x38>)
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <vPortSetupTimerInterrupt+0x3c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a0a      	ldr	r2, [pc, #40]	; (800a35c <vPortSetupTimerInterrupt+0x40>)
 800a332:	fba2 2303 	umull	r2, r3, r2, r3
 800a336:	099b      	lsrs	r3, r3, #6
 800a338:	4a09      	ldr	r2, [pc, #36]	; (800a360 <vPortSetupTimerInterrupt+0x44>)
 800a33a:	3b01      	subs	r3, #1
 800a33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a33e:	4b04      	ldr	r3, [pc, #16]	; (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a340:	2207      	movs	r2, #7
 800a342:	601a      	str	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	e000e010 	.word	0xe000e010
 800a354:	e000e018 	.word	0xe000e018
 800a358:	200008c0 	.word	0x200008c0
 800a35c:	10624dd3 	.word	0x10624dd3
 800a360:	e000e014 	.word	0xe000e014

0800a364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a374 <vPortEnableVFP+0x10>
 800a368:	6801      	ldr	r1, [r0, #0]
 800a36a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a36e:	6001      	str	r1, [r0, #0]
 800a370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a372:	bf00      	nop
 800a374:	e000ed88 	.word	0xe000ed88

0800a378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a37e:	f3ef 8305 	mrs	r3, IPSR
 800a382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d914      	bls.n	800a3b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a38a:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <vPortValidateInterruptPriority+0x70>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a394:	4b15      	ldr	r3, [pc, #84]	; (800a3ec <vPortValidateInterruptPriority+0x74>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	7afa      	ldrb	r2, [r7, #11]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d20a      	bcs.n	800a3b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	607b      	str	r3, [r7, #4]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <vPortValidateInterruptPriority+0x78>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3bc:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <vPortValidateInterruptPriority+0x7c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d90a      	bls.n	800a3da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	603b      	str	r3, [r7, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <vPortValidateInterruptPriority+0x60>
	}
 800a3da:	bf00      	nop
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	e000e3f0 	.word	0xe000e3f0
 800a3ec:	200051cc 	.word	0x200051cc
 800a3f0:	e000ed0c 	.word	0xe000ed0c
 800a3f4:	200051d0 	.word	0x200051d0

0800a3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a404:	f7fe f9c8 	bl	8008798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a408:	4b5b      	ldr	r3, [pc, #364]	; (800a578 <pvPortMalloc+0x180>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a410:	f000 f920 	bl	800a654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a414:	4b59      	ldr	r3, [pc, #356]	; (800a57c <pvPortMalloc+0x184>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4013      	ands	r3, r2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f040 8093 	bne.w	800a548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01d      	beq.n	800a464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a428:	2208      	movs	r2, #8
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b00      	cmp	r3, #0
 800a438:	d014      	beq.n	800a464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f023 0307 	bic.w	r3, r3, #7
 800a440:	3308      	adds	r3, #8
 800a442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <pvPortMalloc+0x6c>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	617b      	str	r3, [r7, #20]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d06e      	beq.n	800a548 <pvPortMalloc+0x150>
 800a46a:	4b45      	ldr	r3, [pc, #276]	; (800a580 <pvPortMalloc+0x188>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d869      	bhi.n	800a548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a474:	4b43      	ldr	r3, [pc, #268]	; (800a584 <pvPortMalloc+0x18c>)
 800a476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a478:	4b42      	ldr	r3, [pc, #264]	; (800a584 <pvPortMalloc+0x18c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a47e:	e004      	b.n	800a48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d903      	bls.n	800a49c <pvPortMalloc+0xa4>
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1f1      	bne.n	800a480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a49c:	4b36      	ldr	r3, [pc, #216]	; (800a578 <pvPortMalloc+0x180>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d050      	beq.n	800a548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2208      	movs	r2, #8
 800a4ac:	4413      	add	r3, r2
 800a4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d91f      	bls.n	800a508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	613b      	str	r3, [r7, #16]
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	1ad2      	subs	r2, r2, r3
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a502:	69b8      	ldr	r0, [r7, #24]
 800a504:	f000 f908 	bl	800a718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a508:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <pvPortMalloc+0x188>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	4a1b      	ldr	r2, [pc, #108]	; (800a580 <pvPortMalloc+0x188>)
 800a514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a516:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <pvPortMalloc+0x188>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <pvPortMalloc+0x190>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d203      	bcs.n	800a52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a522:	4b17      	ldr	r3, [pc, #92]	; (800a580 <pvPortMalloc+0x188>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a18      	ldr	r2, [pc, #96]	; (800a588 <pvPortMalloc+0x190>)
 800a528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <pvPortMalloc+0x184>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	431a      	orrs	r2, r3
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	2200      	movs	r2, #0
 800a53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <pvPortMalloc+0x194>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	4a11      	ldr	r2, [pc, #68]	; (800a58c <pvPortMalloc+0x194>)
 800a546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a548:	f7fe f934 	bl	80087b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <pvPortMalloc+0x174>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	60fb      	str	r3, [r7, #12]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <pvPortMalloc+0x172>
	return pvReturn;
 800a56c:	69fb      	ldr	r3, [r7, #28]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3728      	adds	r7, #40	; 0x28
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	2000717c 	.word	0x2000717c
 800a57c:	20007190 	.word	0x20007190
 800a580:	20007180 	.word	0x20007180
 800a584:	20007174 	.word	0x20007174
 800a588:	20007184 	.word	0x20007184
 800a58c:	20007188 	.word	0x20007188

0800a590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d04d      	beq.n	800a63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	425b      	negs	r3, r3
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	4b24      	ldr	r3, [pc, #144]	; (800a648 <vPortFree+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <vPortFree+0x44>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <vPortFree+0x62>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	60bb      	str	r3, [r7, #8]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	4b14      	ldr	r3, [pc, #80]	; (800a648 <vPortFree+0xb8>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01e      	beq.n	800a63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d11a      	bne.n	800a63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <vPortFree+0xb8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	43db      	mvns	r3, r3
 800a612:	401a      	ands	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a618:	f7fe f8be 	bl	8008798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <vPortFree+0xbc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4413      	add	r3, r2
 800a626:	4a09      	ldr	r2, [pc, #36]	; (800a64c <vPortFree+0xbc>)
 800a628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a62a:	6938      	ldr	r0, [r7, #16]
 800a62c:	f000 f874 	bl	800a718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <vPortFree+0xc0>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	4a06      	ldr	r2, [pc, #24]	; (800a650 <vPortFree+0xc0>)
 800a638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a63a:	f7fe f8bb 	bl	80087b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a63e:	bf00      	nop
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20007190 	.word	0x20007190
 800a64c:	20007180 	.word	0x20007180
 800a650:	2000718c 	.word	0x2000718c

0800a654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a65a:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 800a65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a660:	4b27      	ldr	r3, [pc, #156]	; (800a700 <prvHeapInit+0xac>)
 800a662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00c      	beq.n	800a688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3307      	adds	r3, #7
 800a672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f023 0307 	bic.w	r3, r3, #7
 800a67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	4a1f      	ldr	r2, [pc, #124]	; (800a700 <prvHeapInit+0xac>)
 800a684:	4413      	add	r3, r2
 800a686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a68c:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <prvHeapInit+0xb0>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a692:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <prvHeapInit+0xb0>)
 800a694:	2200      	movs	r2, #0
 800a696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	4413      	add	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	1a9b      	subs	r3, r3, r2
 800a6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0307 	bic.w	r3, r3, #7
 800a6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4a15      	ldr	r2, [pc, #84]	; (800a708 <prvHeapInit+0xb4>)
 800a6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6b6:	4b14      	ldr	r3, [pc, #80]	; (800a708 <prvHeapInit+0xb4>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6be:	4b12      	ldr	r3, [pc, #72]	; (800a708 <prvHeapInit+0xb4>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6d4:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <prvHeapInit+0xb4>)
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	4a0a      	ldr	r2, [pc, #40]	; (800a70c <prvHeapInit+0xb8>)
 800a6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	4a09      	ldr	r2, [pc, #36]	; (800a710 <prvHeapInit+0xbc>)
 800a6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6ec:	4b09      	ldr	r3, [pc, #36]	; (800a714 <prvHeapInit+0xc0>)
 800a6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6f2:	601a      	str	r2, [r3, #0]
}
 800a6f4:	bf00      	nop
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	200051d4 	.word	0x200051d4
 800a704:	20007174 	.word	0x20007174
 800a708:	2000717c 	.word	0x2000717c
 800a70c:	20007184 	.word	0x20007184
 800a710:	20007180 	.word	0x20007180
 800a714:	20007190 	.word	0x20007190

0800a718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a720:	4b28      	ldr	r3, [pc, #160]	; (800a7c4 <prvInsertBlockIntoFreeList+0xac>)
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	e002      	b.n	800a72c <prvInsertBlockIntoFreeList+0x14>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	429a      	cmp	r2, r3
 800a734:	d8f7      	bhi.n	800a726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	4413      	add	r3, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	429a      	cmp	r2, r3
 800a746:	d108      	bne.n	800a75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	441a      	add	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	441a      	add	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d118      	bne.n	800a7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d00d      	beq.n	800a796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	441a      	add	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	e008      	b.n	800a7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a796:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	e003      	b.n	800a7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d002      	beq.n	800a7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20007174 	.word	0x20007174
 800a7c8:	2000717c 	.word	0x2000717c

0800a7cc <__errno>:
 800a7cc:	4b01      	ldr	r3, [pc, #4]	; (800a7d4 <__errno+0x8>)
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	200008d0 	.word	0x200008d0

0800a7d8 <std>:
 800a7d8:	2300      	movs	r3, #0
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	4604      	mov	r4, r0
 800a7de:	e9c0 3300 	strd	r3, r3, [r0]
 800a7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7e6:	6083      	str	r3, [r0, #8]
 800a7e8:	8181      	strh	r1, [r0, #12]
 800a7ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a7ec:	81c2      	strh	r2, [r0, #14]
 800a7ee:	6183      	str	r3, [r0, #24]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	2208      	movs	r2, #8
 800a7f4:	305c      	adds	r0, #92	; 0x5c
 800a7f6:	f000 f91a 	bl	800aa2e <memset>
 800a7fa:	4b05      	ldr	r3, [pc, #20]	; (800a810 <std+0x38>)
 800a7fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <std+0x3c>)
 800a800:	62a3      	str	r3, [r4, #40]	; 0x28
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <std+0x40>)
 800a804:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <std+0x44>)
 800a808:	6224      	str	r4, [r4, #32]
 800a80a:	6323      	str	r3, [r4, #48]	; 0x30
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	bf00      	nop
 800a810:	0800b5d9 	.word	0x0800b5d9
 800a814:	0800b5fb 	.word	0x0800b5fb
 800a818:	0800b633 	.word	0x0800b633
 800a81c:	0800b657 	.word	0x0800b657

0800a820 <_cleanup_r>:
 800a820:	4901      	ldr	r1, [pc, #4]	; (800a828 <_cleanup_r+0x8>)
 800a822:	f000 b8af 	b.w	800a984 <_fwalk_reent>
 800a826:	bf00      	nop
 800a828:	0800c625 	.word	0x0800c625

0800a82c <__sfmoreglue>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	1e4a      	subs	r2, r1, #1
 800a830:	2568      	movs	r5, #104	; 0x68
 800a832:	4355      	muls	r5, r2
 800a834:	460e      	mov	r6, r1
 800a836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a83a:	f000 f901 	bl	800aa40 <_malloc_r>
 800a83e:	4604      	mov	r4, r0
 800a840:	b140      	cbz	r0, 800a854 <__sfmoreglue+0x28>
 800a842:	2100      	movs	r1, #0
 800a844:	e9c0 1600 	strd	r1, r6, [r0]
 800a848:	300c      	adds	r0, #12
 800a84a:	60a0      	str	r0, [r4, #8]
 800a84c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a850:	f000 f8ed 	bl	800aa2e <memset>
 800a854:	4620      	mov	r0, r4
 800a856:	bd70      	pop	{r4, r5, r6, pc}

0800a858 <__sfp_lock_acquire>:
 800a858:	4801      	ldr	r0, [pc, #4]	; (800a860 <__sfp_lock_acquire+0x8>)
 800a85a:	f000 b8d8 	b.w	800aa0e <__retarget_lock_acquire_recursive>
 800a85e:	bf00      	nop
 800a860:	200092a0 	.word	0x200092a0

0800a864 <__sfp_lock_release>:
 800a864:	4801      	ldr	r0, [pc, #4]	; (800a86c <__sfp_lock_release+0x8>)
 800a866:	f000 b8d3 	b.w	800aa10 <__retarget_lock_release_recursive>
 800a86a:	bf00      	nop
 800a86c:	200092a0 	.word	0x200092a0

0800a870 <__sinit_lock_acquire>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__sinit_lock_acquire+0x8>)
 800a872:	f000 b8cc 	b.w	800aa0e <__retarget_lock_acquire_recursive>
 800a876:	bf00      	nop
 800a878:	2000929b 	.word	0x2000929b

0800a87c <__sinit_lock_release>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__sinit_lock_release+0x8>)
 800a87e:	f000 b8c7 	b.w	800aa10 <__retarget_lock_release_recursive>
 800a882:	bf00      	nop
 800a884:	2000929b 	.word	0x2000929b

0800a888 <__sinit>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	4604      	mov	r4, r0
 800a88c:	f7ff fff0 	bl	800a870 <__sinit_lock_acquire>
 800a890:	69a3      	ldr	r3, [r4, #24]
 800a892:	b11b      	cbz	r3, 800a89c <__sinit+0x14>
 800a894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a898:	f7ff bff0 	b.w	800a87c <__sinit_lock_release>
 800a89c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a8a2:	4b13      	ldr	r3, [pc, #76]	; (800a8f0 <__sinit+0x68>)
 800a8a4:	4a13      	ldr	r2, [pc, #76]	; (800a8f4 <__sinit+0x6c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8aa:	42a3      	cmp	r3, r4
 800a8ac:	bf04      	itt	eq
 800a8ae:	2301      	moveq	r3, #1
 800a8b0:	61a3      	streq	r3, [r4, #24]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f820 	bl	800a8f8 <__sfp>
 800a8b8:	6060      	str	r0, [r4, #4]
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 f81c 	bl	800a8f8 <__sfp>
 800a8c0:	60a0      	str	r0, [r4, #8]
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 f818 	bl	800a8f8 <__sfp>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	60e0      	str	r0, [r4, #12]
 800a8cc:	2104      	movs	r1, #4
 800a8ce:	6860      	ldr	r0, [r4, #4]
 800a8d0:	f7ff ff82 	bl	800a7d8 <std>
 800a8d4:	68a0      	ldr	r0, [r4, #8]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	2109      	movs	r1, #9
 800a8da:	f7ff ff7d 	bl	800a7d8 <std>
 800a8de:	68e0      	ldr	r0, [r4, #12]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	2112      	movs	r1, #18
 800a8e4:	f7ff ff78 	bl	800a7d8 <std>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	61a3      	str	r3, [r4, #24]
 800a8ec:	e7d2      	b.n	800a894 <__sinit+0xc>
 800a8ee:	bf00      	nop
 800a8f0:	0800fe34 	.word	0x0800fe34
 800a8f4:	0800a821 	.word	0x0800a821

0800a8f8 <__sfp>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	4607      	mov	r7, r0
 800a8fc:	f7ff ffac 	bl	800a858 <__sfp_lock_acquire>
 800a900:	4b1e      	ldr	r3, [pc, #120]	; (800a97c <__sfp+0x84>)
 800a902:	681e      	ldr	r6, [r3, #0]
 800a904:	69b3      	ldr	r3, [r6, #24]
 800a906:	b913      	cbnz	r3, 800a90e <__sfp+0x16>
 800a908:	4630      	mov	r0, r6
 800a90a:	f7ff ffbd 	bl	800a888 <__sinit>
 800a90e:	3648      	adds	r6, #72	; 0x48
 800a910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a914:	3b01      	subs	r3, #1
 800a916:	d503      	bpl.n	800a920 <__sfp+0x28>
 800a918:	6833      	ldr	r3, [r6, #0]
 800a91a:	b30b      	cbz	r3, 800a960 <__sfp+0x68>
 800a91c:	6836      	ldr	r6, [r6, #0]
 800a91e:	e7f7      	b.n	800a910 <__sfp+0x18>
 800a920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a924:	b9d5      	cbnz	r5, 800a95c <__sfp+0x64>
 800a926:	4b16      	ldr	r3, [pc, #88]	; (800a980 <__sfp+0x88>)
 800a928:	60e3      	str	r3, [r4, #12]
 800a92a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a92e:	6665      	str	r5, [r4, #100]	; 0x64
 800a930:	f000 f86c 	bl	800aa0c <__retarget_lock_init_recursive>
 800a934:	f7ff ff96 	bl	800a864 <__sfp_lock_release>
 800a938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a93c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a940:	6025      	str	r5, [r4, #0]
 800a942:	61a5      	str	r5, [r4, #24]
 800a944:	2208      	movs	r2, #8
 800a946:	4629      	mov	r1, r5
 800a948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a94c:	f000 f86f 	bl	800aa2e <memset>
 800a950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a958:	4620      	mov	r0, r4
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95c:	3468      	adds	r4, #104	; 0x68
 800a95e:	e7d9      	b.n	800a914 <__sfp+0x1c>
 800a960:	2104      	movs	r1, #4
 800a962:	4638      	mov	r0, r7
 800a964:	f7ff ff62 	bl	800a82c <__sfmoreglue>
 800a968:	4604      	mov	r4, r0
 800a96a:	6030      	str	r0, [r6, #0]
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d1d5      	bne.n	800a91c <__sfp+0x24>
 800a970:	f7ff ff78 	bl	800a864 <__sfp_lock_release>
 800a974:	230c      	movs	r3, #12
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	e7ee      	b.n	800a958 <__sfp+0x60>
 800a97a:	bf00      	nop
 800a97c:	0800fe34 	.word	0x0800fe34
 800a980:	ffff0001 	.word	0xffff0001

0800a984 <_fwalk_reent>:
 800a984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a988:	4606      	mov	r6, r0
 800a98a:	4688      	mov	r8, r1
 800a98c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a990:	2700      	movs	r7, #0
 800a992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a996:	f1b9 0901 	subs.w	r9, r9, #1
 800a99a:	d505      	bpl.n	800a9a8 <_fwalk_reent+0x24>
 800a99c:	6824      	ldr	r4, [r4, #0]
 800a99e:	2c00      	cmp	r4, #0
 800a9a0:	d1f7      	bne.n	800a992 <_fwalk_reent+0xe>
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a8:	89ab      	ldrh	r3, [r5, #12]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d907      	bls.n	800a9be <_fwalk_reent+0x3a>
 800a9ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	d003      	beq.n	800a9be <_fwalk_reent+0x3a>
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	47c0      	blx	r8
 800a9bc:	4307      	orrs	r7, r0
 800a9be:	3568      	adds	r5, #104	; 0x68
 800a9c0:	e7e9      	b.n	800a996 <_fwalk_reent+0x12>
	...

0800a9c4 <__libc_init_array>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	4d0d      	ldr	r5, [pc, #52]	; (800a9fc <__libc_init_array+0x38>)
 800a9c8:	4c0d      	ldr	r4, [pc, #52]	; (800aa00 <__libc_init_array+0x3c>)
 800a9ca:	1b64      	subs	r4, r4, r5
 800a9cc:	10a4      	asrs	r4, r4, #2
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	42a6      	cmp	r6, r4
 800a9d2:	d109      	bne.n	800a9e8 <__libc_init_array+0x24>
 800a9d4:	4d0b      	ldr	r5, [pc, #44]	; (800aa04 <__libc_init_array+0x40>)
 800a9d6:	4c0c      	ldr	r4, [pc, #48]	; (800aa08 <__libc_init_array+0x44>)
 800a9d8:	f005 f914 	bl	800fc04 <_init>
 800a9dc:	1b64      	subs	r4, r4, r5
 800a9de:	10a4      	asrs	r4, r4, #2
 800a9e0:	2600      	movs	r6, #0
 800a9e2:	42a6      	cmp	r6, r4
 800a9e4:	d105      	bne.n	800a9f2 <__libc_init_array+0x2e>
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ec:	4798      	blx	r3
 800a9ee:	3601      	adds	r6, #1
 800a9f0:	e7ee      	b.n	800a9d0 <__libc_init_array+0xc>
 800a9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f6:	4798      	blx	r3
 800a9f8:	3601      	adds	r6, #1
 800a9fa:	e7f2      	b.n	800a9e2 <__libc_init_array+0x1e>
 800a9fc:	08010408 	.word	0x08010408
 800aa00:	08010408 	.word	0x08010408
 800aa04:	08010408 	.word	0x08010408
 800aa08:	0801040c 	.word	0x0801040c

0800aa0c <__retarget_lock_init_recursive>:
 800aa0c:	4770      	bx	lr

0800aa0e <__retarget_lock_acquire_recursive>:
 800aa0e:	4770      	bx	lr

0800aa10 <__retarget_lock_release_recursive>:
 800aa10:	4770      	bx	lr

0800aa12 <memcpy>:
 800aa12:	440a      	add	r2, r1
 800aa14:	4291      	cmp	r1, r2
 800aa16:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa1a:	d100      	bne.n	800aa1e <memcpy+0xc>
 800aa1c:	4770      	bx	lr
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa28:	4291      	cmp	r1, r2
 800aa2a:	d1f9      	bne.n	800aa20 <memcpy+0xe>
 800aa2c:	bd10      	pop	{r4, pc}

0800aa2e <memset>:
 800aa2e:	4402      	add	r2, r0
 800aa30:	4603      	mov	r3, r0
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d100      	bne.n	800aa38 <memset+0xa>
 800aa36:	4770      	bx	lr
 800aa38:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3c:	e7f9      	b.n	800aa32 <memset+0x4>
	...

0800aa40 <_malloc_r>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	1ccd      	adds	r5, r1, #3
 800aa44:	f025 0503 	bic.w	r5, r5, #3
 800aa48:	3508      	adds	r5, #8
 800aa4a:	2d0c      	cmp	r5, #12
 800aa4c:	bf38      	it	cc
 800aa4e:	250c      	movcc	r5, #12
 800aa50:	2d00      	cmp	r5, #0
 800aa52:	4606      	mov	r6, r0
 800aa54:	db01      	blt.n	800aa5a <_malloc_r+0x1a>
 800aa56:	42a9      	cmp	r1, r5
 800aa58:	d903      	bls.n	800aa62 <_malloc_r+0x22>
 800aa5a:	230c      	movs	r3, #12
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	2000      	movs	r0, #0
 800aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa62:	f001 fe9d 	bl	800c7a0 <__malloc_lock>
 800aa66:	4921      	ldr	r1, [pc, #132]	; (800aaec <_malloc_r+0xac>)
 800aa68:	680a      	ldr	r2, [r1, #0]
 800aa6a:	4614      	mov	r4, r2
 800aa6c:	b99c      	cbnz	r4, 800aa96 <_malloc_r+0x56>
 800aa6e:	4f20      	ldr	r7, [pc, #128]	; (800aaf0 <_malloc_r+0xb0>)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	b923      	cbnz	r3, 800aa7e <_malloc_r+0x3e>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4630      	mov	r0, r6
 800aa78:	f000 fd9e 	bl	800b5b8 <_sbrk_r>
 800aa7c:	6038      	str	r0, [r7, #0]
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4630      	mov	r0, r6
 800aa82:	f000 fd99 	bl	800b5b8 <_sbrk_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d123      	bne.n	800aad2 <_malloc_r+0x92>
 800aa8a:	230c      	movs	r3, #12
 800aa8c:	6033      	str	r3, [r6, #0]
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f001 fe8c 	bl	800c7ac <__malloc_unlock>
 800aa94:	e7e3      	b.n	800aa5e <_malloc_r+0x1e>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	1b5b      	subs	r3, r3, r5
 800aa9a:	d417      	bmi.n	800aacc <_malloc_r+0x8c>
 800aa9c:	2b0b      	cmp	r3, #11
 800aa9e:	d903      	bls.n	800aaa8 <_malloc_r+0x68>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	441c      	add	r4, r3
 800aaa4:	6025      	str	r5, [r4, #0]
 800aaa6:	e004      	b.n	800aab2 <_malloc_r+0x72>
 800aaa8:	6863      	ldr	r3, [r4, #4]
 800aaaa:	42a2      	cmp	r2, r4
 800aaac:	bf0c      	ite	eq
 800aaae:	600b      	streq	r3, [r1, #0]
 800aab0:	6053      	strne	r3, [r2, #4]
 800aab2:	4630      	mov	r0, r6
 800aab4:	f001 fe7a 	bl	800c7ac <__malloc_unlock>
 800aab8:	f104 000b 	add.w	r0, r4, #11
 800aabc:	1d23      	adds	r3, r4, #4
 800aabe:	f020 0007 	bic.w	r0, r0, #7
 800aac2:	1ac2      	subs	r2, r0, r3
 800aac4:	d0cc      	beq.n	800aa60 <_malloc_r+0x20>
 800aac6:	1a1b      	subs	r3, r3, r0
 800aac8:	50a3      	str	r3, [r4, r2]
 800aaca:	e7c9      	b.n	800aa60 <_malloc_r+0x20>
 800aacc:	4622      	mov	r2, r4
 800aace:	6864      	ldr	r4, [r4, #4]
 800aad0:	e7cc      	b.n	800aa6c <_malloc_r+0x2c>
 800aad2:	1cc4      	adds	r4, r0, #3
 800aad4:	f024 0403 	bic.w	r4, r4, #3
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d0e3      	beq.n	800aaa4 <_malloc_r+0x64>
 800aadc:	1a21      	subs	r1, r4, r0
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 fd6a 	bl	800b5b8 <_sbrk_r>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d1dd      	bne.n	800aaa4 <_malloc_r+0x64>
 800aae8:	e7cf      	b.n	800aa8a <_malloc_r+0x4a>
 800aaea:	bf00      	nop
 800aaec:	20007194 	.word	0x20007194
 800aaf0:	20007198 	.word	0x20007198

0800aaf4 <__cvt>:
 800aaf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf8:	ec55 4b10 	vmov	r4, r5, d0
 800aafc:	2d00      	cmp	r5, #0
 800aafe:	460e      	mov	r6, r1
 800ab00:	4619      	mov	r1, r3
 800ab02:	462b      	mov	r3, r5
 800ab04:	bfbb      	ittet	lt
 800ab06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab0a:	461d      	movlt	r5, r3
 800ab0c:	2300      	movge	r3, #0
 800ab0e:	232d      	movlt	r3, #45	; 0x2d
 800ab10:	700b      	strb	r3, [r1, #0]
 800ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab18:	4691      	mov	r9, r2
 800ab1a:	f023 0820 	bic.w	r8, r3, #32
 800ab1e:	bfbc      	itt	lt
 800ab20:	4622      	movlt	r2, r4
 800ab22:	4614      	movlt	r4, r2
 800ab24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab28:	d005      	beq.n	800ab36 <__cvt+0x42>
 800ab2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab2e:	d100      	bne.n	800ab32 <__cvt+0x3e>
 800ab30:	3601      	adds	r6, #1
 800ab32:	2102      	movs	r1, #2
 800ab34:	e000      	b.n	800ab38 <__cvt+0x44>
 800ab36:	2103      	movs	r1, #3
 800ab38:	ab03      	add	r3, sp, #12
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	ab02      	add	r3, sp, #8
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	ec45 4b10 	vmov	d0, r4, r5
 800ab44:	4653      	mov	r3, sl
 800ab46:	4632      	mov	r2, r6
 800ab48:	f000 fefa 	bl	800b940 <_dtoa_r>
 800ab4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab50:	4607      	mov	r7, r0
 800ab52:	d102      	bne.n	800ab5a <__cvt+0x66>
 800ab54:	f019 0f01 	tst.w	r9, #1
 800ab58:	d022      	beq.n	800aba0 <__cvt+0xac>
 800ab5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab5e:	eb07 0906 	add.w	r9, r7, r6
 800ab62:	d110      	bne.n	800ab86 <__cvt+0x92>
 800ab64:	783b      	ldrb	r3, [r7, #0]
 800ab66:	2b30      	cmp	r3, #48	; 0x30
 800ab68:	d10a      	bne.n	800ab80 <__cvt+0x8c>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4620      	mov	r0, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f5 ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 800ab76:	b918      	cbnz	r0, 800ab80 <__cvt+0x8c>
 800ab78:	f1c6 0601 	rsb	r6, r6, #1
 800ab7c:	f8ca 6000 	str.w	r6, [sl]
 800ab80:	f8da 3000 	ldr.w	r3, [sl]
 800ab84:	4499      	add	r9, r3
 800ab86:	2200      	movs	r2, #0
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	f7f5 ffc3 	bl	8000b18 <__aeabi_dcmpeq>
 800ab92:	b108      	cbz	r0, 800ab98 <__cvt+0xa4>
 800ab94:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab98:	2230      	movs	r2, #48	; 0x30
 800ab9a:	9b03      	ldr	r3, [sp, #12]
 800ab9c:	454b      	cmp	r3, r9
 800ab9e:	d307      	bcc.n	800abb0 <__cvt+0xbc>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba4:	1bdb      	subs	r3, r3, r7
 800aba6:	4638      	mov	r0, r7
 800aba8:	6013      	str	r3, [r2, #0]
 800abaa:	b004      	add	sp, #16
 800abac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb0:	1c59      	adds	r1, r3, #1
 800abb2:	9103      	str	r1, [sp, #12]
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	e7f0      	b.n	800ab9a <__cvt+0xa6>

0800abb8 <__exponent>:
 800abb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abba:	4603      	mov	r3, r0
 800abbc:	2900      	cmp	r1, #0
 800abbe:	bfb8      	it	lt
 800abc0:	4249      	neglt	r1, r1
 800abc2:	f803 2b02 	strb.w	r2, [r3], #2
 800abc6:	bfb4      	ite	lt
 800abc8:	222d      	movlt	r2, #45	; 0x2d
 800abca:	222b      	movge	r2, #43	; 0x2b
 800abcc:	2909      	cmp	r1, #9
 800abce:	7042      	strb	r2, [r0, #1]
 800abd0:	dd2a      	ble.n	800ac28 <__exponent+0x70>
 800abd2:	f10d 0407 	add.w	r4, sp, #7
 800abd6:	46a4      	mov	ip, r4
 800abd8:	270a      	movs	r7, #10
 800abda:	46a6      	mov	lr, r4
 800abdc:	460a      	mov	r2, r1
 800abde:	fb91 f6f7 	sdiv	r6, r1, r7
 800abe2:	fb07 1516 	mls	r5, r7, r6, r1
 800abe6:	3530      	adds	r5, #48	; 0x30
 800abe8:	2a63      	cmp	r2, #99	; 0x63
 800abea:	f104 34ff 	add.w	r4, r4, #4294967295
 800abee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abf2:	4631      	mov	r1, r6
 800abf4:	dcf1      	bgt.n	800abda <__exponent+0x22>
 800abf6:	3130      	adds	r1, #48	; 0x30
 800abf8:	f1ae 0502 	sub.w	r5, lr, #2
 800abfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac00:	1c44      	adds	r4, r0, #1
 800ac02:	4629      	mov	r1, r5
 800ac04:	4561      	cmp	r1, ip
 800ac06:	d30a      	bcc.n	800ac1e <__exponent+0x66>
 800ac08:	f10d 0209 	add.w	r2, sp, #9
 800ac0c:	eba2 020e 	sub.w	r2, r2, lr
 800ac10:	4565      	cmp	r5, ip
 800ac12:	bf88      	it	hi
 800ac14:	2200      	movhi	r2, #0
 800ac16:	4413      	add	r3, r2
 800ac18:	1a18      	subs	r0, r3, r0
 800ac1a:	b003      	add	sp, #12
 800ac1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac26:	e7ed      	b.n	800ac04 <__exponent+0x4c>
 800ac28:	2330      	movs	r3, #48	; 0x30
 800ac2a:	3130      	adds	r1, #48	; 0x30
 800ac2c:	7083      	strb	r3, [r0, #2]
 800ac2e:	70c1      	strb	r1, [r0, #3]
 800ac30:	1d03      	adds	r3, r0, #4
 800ac32:	e7f1      	b.n	800ac18 <__exponent+0x60>

0800ac34 <_printf_float>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	ed2d 8b02 	vpush	{d8}
 800ac3c:	b08d      	sub	sp, #52	; 0x34
 800ac3e:	460c      	mov	r4, r1
 800ac40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac44:	4616      	mov	r6, r2
 800ac46:	461f      	mov	r7, r3
 800ac48:	4605      	mov	r5, r0
 800ac4a:	f001 fd27 	bl	800c69c <_localeconv_r>
 800ac4e:	f8d0 a000 	ldr.w	sl, [r0]
 800ac52:	4650      	mov	r0, sl
 800ac54:	f7f5 fae4 	bl	8000220 <strlen>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	9305      	str	r3, [sp, #20]
 800ac60:	f8d8 3000 	ldr.w	r3, [r8]
 800ac64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac68:	3307      	adds	r3, #7
 800ac6a:	f023 0307 	bic.w	r3, r3, #7
 800ac6e:	f103 0208 	add.w	r2, r3, #8
 800ac72:	f8c8 2000 	str.w	r2, [r8]
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac86:	9307      	str	r3, [sp, #28]
 800ac88:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac8c:	ee08 0a10 	vmov	s16, r0
 800ac90:	4b9f      	ldr	r3, [pc, #636]	; (800af10 <_printf_float+0x2dc>)
 800ac92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac96:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9a:	f7f5 ff6f 	bl	8000b7c <__aeabi_dcmpun>
 800ac9e:	bb88      	cbnz	r0, 800ad04 <_printf_float+0xd0>
 800aca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aca4:	4b9a      	ldr	r3, [pc, #616]	; (800af10 <_printf_float+0x2dc>)
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	f7f5 ff49 	bl	8000b40 <__aeabi_dcmple>
 800acae:	bb48      	cbnz	r0, 800ad04 <_printf_float+0xd0>
 800acb0:	2200      	movs	r2, #0
 800acb2:	2300      	movs	r3, #0
 800acb4:	4640      	mov	r0, r8
 800acb6:	4649      	mov	r1, r9
 800acb8:	f7f5 ff38 	bl	8000b2c <__aeabi_dcmplt>
 800acbc:	b110      	cbz	r0, 800acc4 <_printf_float+0x90>
 800acbe:	232d      	movs	r3, #45	; 0x2d
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc4:	4b93      	ldr	r3, [pc, #588]	; (800af14 <_printf_float+0x2e0>)
 800acc6:	4894      	ldr	r0, [pc, #592]	; (800af18 <_printf_float+0x2e4>)
 800acc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800accc:	bf94      	ite	ls
 800acce:	4698      	movls	r8, r3
 800acd0:	4680      	movhi	r8, r0
 800acd2:	2303      	movs	r3, #3
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	f023 0204 	bic.w	r2, r3, #4
 800acdc:	6022      	str	r2, [r4, #0]
 800acde:	f04f 0900 	mov.w	r9, #0
 800ace2:	9700      	str	r7, [sp, #0]
 800ace4:	4633      	mov	r3, r6
 800ace6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ace8:	4621      	mov	r1, r4
 800acea:	4628      	mov	r0, r5
 800acec:	f000 f9d8 	bl	800b0a0 <_printf_common>
 800acf0:	3001      	adds	r0, #1
 800acf2:	f040 8090 	bne.w	800ae16 <_printf_float+0x1e2>
 800acf6:	f04f 30ff 	mov.w	r0, #4294967295
 800acfa:	b00d      	add	sp, #52	; 0x34
 800acfc:	ecbd 8b02 	vpop	{d8}
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	4642      	mov	r2, r8
 800ad06:	464b      	mov	r3, r9
 800ad08:	4640      	mov	r0, r8
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	f7f5 ff36 	bl	8000b7c <__aeabi_dcmpun>
 800ad10:	b140      	cbz	r0, 800ad24 <_printf_float+0xf0>
 800ad12:	464b      	mov	r3, r9
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfbc      	itt	lt
 800ad18:	232d      	movlt	r3, #45	; 0x2d
 800ad1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad1e:	487f      	ldr	r0, [pc, #508]	; (800af1c <_printf_float+0x2e8>)
 800ad20:	4b7f      	ldr	r3, [pc, #508]	; (800af20 <_printf_float+0x2ec>)
 800ad22:	e7d1      	b.n	800acc8 <_printf_float+0x94>
 800ad24:	6863      	ldr	r3, [r4, #4]
 800ad26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad2a:	9206      	str	r2, [sp, #24]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	d13f      	bne.n	800adb0 <_printf_float+0x17c>
 800ad30:	2306      	movs	r3, #6
 800ad32:	6063      	str	r3, [r4, #4]
 800ad34:	9b05      	ldr	r3, [sp, #20]
 800ad36:	6861      	ldr	r1, [r4, #4]
 800ad38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	ab0a      	add	r3, sp, #40	; 0x28
 800ad42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad46:	ab09      	add	r3, sp, #36	; 0x24
 800ad48:	ec49 8b10 	vmov	d0, r8, r9
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	6022      	str	r2, [r4, #0]
 800ad50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad54:	4628      	mov	r0, r5
 800ad56:	f7ff fecd 	bl	800aaf4 <__cvt>
 800ad5a:	9b06      	ldr	r3, [sp, #24]
 800ad5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad5e:	2b47      	cmp	r3, #71	; 0x47
 800ad60:	4680      	mov	r8, r0
 800ad62:	d108      	bne.n	800ad76 <_printf_float+0x142>
 800ad64:	1cc8      	adds	r0, r1, #3
 800ad66:	db02      	blt.n	800ad6e <_printf_float+0x13a>
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	4299      	cmp	r1, r3
 800ad6c:	dd41      	ble.n	800adf2 <_printf_float+0x1be>
 800ad6e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad72:	fa5f fb8b 	uxtb.w	fp, fp
 800ad76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad7a:	d820      	bhi.n	800adbe <_printf_float+0x18a>
 800ad7c:	3901      	subs	r1, #1
 800ad7e:	465a      	mov	r2, fp
 800ad80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad84:	9109      	str	r1, [sp, #36]	; 0x24
 800ad86:	f7ff ff17 	bl	800abb8 <__exponent>
 800ad8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8c:	1813      	adds	r3, r2, r0
 800ad8e:	2a01      	cmp	r2, #1
 800ad90:	4681      	mov	r9, r0
 800ad92:	6123      	str	r3, [r4, #16]
 800ad94:	dc02      	bgt.n	800ad9c <_printf_float+0x168>
 800ad96:	6822      	ldr	r2, [r4, #0]
 800ad98:	07d2      	lsls	r2, r2, #31
 800ad9a:	d501      	bpl.n	800ada0 <_printf_float+0x16c>
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d09c      	beq.n	800ace2 <_printf_float+0xae>
 800ada8:	232d      	movs	r3, #45	; 0x2d
 800adaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adae:	e798      	b.n	800ace2 <_printf_float+0xae>
 800adb0:	9a06      	ldr	r2, [sp, #24]
 800adb2:	2a47      	cmp	r2, #71	; 0x47
 800adb4:	d1be      	bne.n	800ad34 <_printf_float+0x100>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1bc      	bne.n	800ad34 <_printf_float+0x100>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7b9      	b.n	800ad32 <_printf_float+0xfe>
 800adbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adc2:	d118      	bne.n	800adf6 <_printf_float+0x1c2>
 800adc4:	2900      	cmp	r1, #0
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	dd0b      	ble.n	800ade2 <_printf_float+0x1ae>
 800adca:	6121      	str	r1, [r4, #16]
 800adcc:	b913      	cbnz	r3, 800add4 <_printf_float+0x1a0>
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	07d0      	lsls	r0, r2, #31
 800add2:	d502      	bpl.n	800adda <_printf_float+0x1a6>
 800add4:	3301      	adds	r3, #1
 800add6:	440b      	add	r3, r1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	65a1      	str	r1, [r4, #88]	; 0x58
 800addc:	f04f 0900 	mov.w	r9, #0
 800ade0:	e7de      	b.n	800ada0 <_printf_float+0x16c>
 800ade2:	b913      	cbnz	r3, 800adea <_printf_float+0x1b6>
 800ade4:	6822      	ldr	r2, [r4, #0]
 800ade6:	07d2      	lsls	r2, r2, #31
 800ade8:	d501      	bpl.n	800adee <_printf_float+0x1ba>
 800adea:	3302      	adds	r3, #2
 800adec:	e7f4      	b.n	800add8 <_printf_float+0x1a4>
 800adee:	2301      	movs	r3, #1
 800adf0:	e7f2      	b.n	800add8 <_printf_float+0x1a4>
 800adf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf8:	4299      	cmp	r1, r3
 800adfa:	db05      	blt.n	800ae08 <_printf_float+0x1d4>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	6121      	str	r1, [r4, #16]
 800ae00:	07d8      	lsls	r0, r3, #31
 800ae02:	d5ea      	bpl.n	800adda <_printf_float+0x1a6>
 800ae04:	1c4b      	adds	r3, r1, #1
 800ae06:	e7e7      	b.n	800add8 <_printf_float+0x1a4>
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	bfd4      	ite	le
 800ae0c:	f1c1 0202 	rsble	r2, r1, #2
 800ae10:	2201      	movgt	r2, #1
 800ae12:	4413      	add	r3, r2
 800ae14:	e7e0      	b.n	800add8 <_printf_float+0x1a4>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	055a      	lsls	r2, r3, #21
 800ae1a:	d407      	bmi.n	800ae2c <_printf_float+0x1f8>
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	4642      	mov	r2, r8
 800ae20:	4631      	mov	r1, r6
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	d12c      	bne.n	800ae84 <_printf_float+0x250>
 800ae2a:	e764      	b.n	800acf6 <_printf_float+0xc2>
 800ae2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae30:	f240 80e0 	bls.w	800aff4 <_printf_float+0x3c0>
 800ae34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f7f5 fe6c 	bl	8000b18 <__aeabi_dcmpeq>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d034      	beq.n	800aeae <_printf_float+0x27a>
 800ae44:	4a37      	ldr	r2, [pc, #220]	; (800af24 <_printf_float+0x2f0>)
 800ae46:	2301      	movs	r3, #1
 800ae48:	4631      	mov	r1, r6
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	47b8      	blx	r7
 800ae4e:	3001      	adds	r0, #1
 800ae50:	f43f af51 	beq.w	800acf6 <_printf_float+0xc2>
 800ae54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	db02      	blt.n	800ae62 <_printf_float+0x22e>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	07d8      	lsls	r0, r3, #31
 800ae60:	d510      	bpl.n	800ae84 <_printf_float+0x250>
 800ae62:	ee18 3a10 	vmov	r3, s16
 800ae66:	4652      	mov	r2, sl
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f af41 	beq.w	800acf6 <_printf_float+0xc2>
 800ae74:	f04f 0800 	mov.w	r8, #0
 800ae78:	f104 091a 	add.w	r9, r4, #26
 800ae7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	4543      	cmp	r3, r8
 800ae82:	dc09      	bgt.n	800ae98 <_printf_float+0x264>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	079b      	lsls	r3, r3, #30
 800ae88:	f100 8105 	bmi.w	800b096 <_printf_float+0x462>
 800ae8c:	68e0      	ldr	r0, [r4, #12]
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae90:	4298      	cmp	r0, r3
 800ae92:	bfb8      	it	lt
 800ae94:	4618      	movlt	r0, r3
 800ae96:	e730      	b.n	800acfa <_printf_float+0xc6>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	464a      	mov	r2, r9
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f af27 	beq.w	800acf6 <_printf_float+0xc2>
 800aea8:	f108 0801 	add.w	r8, r8, #1
 800aeac:	e7e6      	b.n	800ae7c <_printf_float+0x248>
 800aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc39      	bgt.n	800af28 <_printf_float+0x2f4>
 800aeb4:	4a1b      	ldr	r2, [pc, #108]	; (800af24 <_printf_float+0x2f0>)
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f af19 	beq.w	800acf6 <_printf_float+0xc2>
 800aec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aec8:	4313      	orrs	r3, r2
 800aeca:	d102      	bne.n	800aed2 <_printf_float+0x29e>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	07d9      	lsls	r1, r3, #31
 800aed0:	d5d8      	bpl.n	800ae84 <_printf_float+0x250>
 800aed2:	ee18 3a10 	vmov	r3, s16
 800aed6:	4652      	mov	r2, sl
 800aed8:	4631      	mov	r1, r6
 800aeda:	4628      	mov	r0, r5
 800aedc:	47b8      	blx	r7
 800aede:	3001      	adds	r0, #1
 800aee0:	f43f af09 	beq.w	800acf6 <_printf_float+0xc2>
 800aee4:	f04f 0900 	mov.w	r9, #0
 800aee8:	f104 0a1a 	add.w	sl, r4, #26
 800aeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeee:	425b      	negs	r3, r3
 800aef0:	454b      	cmp	r3, r9
 800aef2:	dc01      	bgt.n	800aef8 <_printf_float+0x2c4>
 800aef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef6:	e792      	b.n	800ae1e <_printf_float+0x1ea>
 800aef8:	2301      	movs	r3, #1
 800aefa:	4652      	mov	r2, sl
 800aefc:	4631      	mov	r1, r6
 800aefe:	4628      	mov	r0, r5
 800af00:	47b8      	blx	r7
 800af02:	3001      	adds	r0, #1
 800af04:	f43f aef7 	beq.w	800acf6 <_printf_float+0xc2>
 800af08:	f109 0901 	add.w	r9, r9, #1
 800af0c:	e7ee      	b.n	800aeec <_printf_float+0x2b8>
 800af0e:	bf00      	nop
 800af10:	7fefffff 	.word	0x7fefffff
 800af14:	0800fe38 	.word	0x0800fe38
 800af18:	0800fe3c 	.word	0x0800fe3c
 800af1c:	0800fe44 	.word	0x0800fe44
 800af20:	0800fe40 	.word	0x0800fe40
 800af24:	0800fe48 	.word	0x0800fe48
 800af28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af2c:	429a      	cmp	r2, r3
 800af2e:	bfa8      	it	ge
 800af30:	461a      	movge	r2, r3
 800af32:	2a00      	cmp	r2, #0
 800af34:	4691      	mov	r9, r2
 800af36:	dc37      	bgt.n	800afa8 <_printf_float+0x374>
 800af38:	f04f 0b00 	mov.w	fp, #0
 800af3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af40:	f104 021a 	add.w	r2, r4, #26
 800af44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af46:	9305      	str	r3, [sp, #20]
 800af48:	eba3 0309 	sub.w	r3, r3, r9
 800af4c:	455b      	cmp	r3, fp
 800af4e:	dc33      	bgt.n	800afb8 <_printf_float+0x384>
 800af50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af54:	429a      	cmp	r2, r3
 800af56:	db3b      	blt.n	800afd0 <_printf_float+0x39c>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	07da      	lsls	r2, r3, #31
 800af5c:	d438      	bmi.n	800afd0 <_printf_float+0x39c>
 800af5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af60:	9b05      	ldr	r3, [sp, #20]
 800af62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	eba2 0901 	sub.w	r9, r2, r1
 800af6a:	4599      	cmp	r9, r3
 800af6c:	bfa8      	it	ge
 800af6e:	4699      	movge	r9, r3
 800af70:	f1b9 0f00 	cmp.w	r9, #0
 800af74:	dc35      	bgt.n	800afe2 <_printf_float+0x3ae>
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af7e:	f104 0a1a 	add.w	sl, r4, #26
 800af82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	eba3 0309 	sub.w	r3, r3, r9
 800af8c:	4543      	cmp	r3, r8
 800af8e:	f77f af79 	ble.w	800ae84 <_printf_float+0x250>
 800af92:	2301      	movs	r3, #1
 800af94:	4652      	mov	r2, sl
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	f43f aeaa 	beq.w	800acf6 <_printf_float+0xc2>
 800afa2:	f108 0801 	add.w	r8, r8, #1
 800afa6:	e7ec      	b.n	800af82 <_printf_float+0x34e>
 800afa8:	4613      	mov	r3, r2
 800afaa:	4631      	mov	r1, r6
 800afac:	4642      	mov	r2, r8
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	d1c0      	bne.n	800af38 <_printf_float+0x304>
 800afb6:	e69e      	b.n	800acf6 <_printf_float+0xc2>
 800afb8:	2301      	movs	r3, #1
 800afba:	4631      	mov	r1, r6
 800afbc:	4628      	mov	r0, r5
 800afbe:	9205      	str	r2, [sp, #20]
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	f43f ae97 	beq.w	800acf6 <_printf_float+0xc2>
 800afc8:	9a05      	ldr	r2, [sp, #20]
 800afca:	f10b 0b01 	add.w	fp, fp, #1
 800afce:	e7b9      	b.n	800af44 <_printf_float+0x310>
 800afd0:	ee18 3a10 	vmov	r3, s16
 800afd4:	4652      	mov	r2, sl
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	d1be      	bne.n	800af5e <_printf_float+0x32a>
 800afe0:	e689      	b.n	800acf6 <_printf_float+0xc2>
 800afe2:	9a05      	ldr	r2, [sp, #20]
 800afe4:	464b      	mov	r3, r9
 800afe6:	4442      	add	r2, r8
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	47b8      	blx	r7
 800afee:	3001      	adds	r0, #1
 800aff0:	d1c1      	bne.n	800af76 <_printf_float+0x342>
 800aff2:	e680      	b.n	800acf6 <_printf_float+0xc2>
 800aff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff6:	2a01      	cmp	r2, #1
 800aff8:	dc01      	bgt.n	800affe <_printf_float+0x3ca>
 800affa:	07db      	lsls	r3, r3, #31
 800affc:	d538      	bpl.n	800b070 <_printf_float+0x43c>
 800affe:	2301      	movs	r3, #1
 800b000:	4642      	mov	r2, r8
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f ae74 	beq.w	800acf6 <_printf_float+0xc2>
 800b00e:	ee18 3a10 	vmov	r3, s16
 800b012:	4652      	mov	r2, sl
 800b014:	4631      	mov	r1, r6
 800b016:	4628      	mov	r0, r5
 800b018:	47b8      	blx	r7
 800b01a:	3001      	adds	r0, #1
 800b01c:	f43f ae6b 	beq.w	800acf6 <_printf_float+0xc2>
 800b020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b024:	2200      	movs	r2, #0
 800b026:	2300      	movs	r3, #0
 800b028:	f7f5 fd76 	bl	8000b18 <__aeabi_dcmpeq>
 800b02c:	b9d8      	cbnz	r0, 800b066 <_printf_float+0x432>
 800b02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b030:	f108 0201 	add.w	r2, r8, #1
 800b034:	3b01      	subs	r3, #1
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	d10e      	bne.n	800b05e <_printf_float+0x42a>
 800b040:	e659      	b.n	800acf6 <_printf_float+0xc2>
 800b042:	2301      	movs	r3, #1
 800b044:	4652      	mov	r2, sl
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f ae52 	beq.w	800acf6 <_printf_float+0xc2>
 800b052:	f108 0801 	add.w	r8, r8, #1
 800b056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b058:	3b01      	subs	r3, #1
 800b05a:	4543      	cmp	r3, r8
 800b05c:	dcf1      	bgt.n	800b042 <_printf_float+0x40e>
 800b05e:	464b      	mov	r3, r9
 800b060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b064:	e6dc      	b.n	800ae20 <_printf_float+0x1ec>
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	f104 0a1a 	add.w	sl, r4, #26
 800b06e:	e7f2      	b.n	800b056 <_printf_float+0x422>
 800b070:	2301      	movs	r3, #1
 800b072:	4642      	mov	r2, r8
 800b074:	e7df      	b.n	800b036 <_printf_float+0x402>
 800b076:	2301      	movs	r3, #1
 800b078:	464a      	mov	r2, r9
 800b07a:	4631      	mov	r1, r6
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b8      	blx	r7
 800b080:	3001      	adds	r0, #1
 800b082:	f43f ae38 	beq.w	800acf6 <_printf_float+0xc2>
 800b086:	f108 0801 	add.w	r8, r8, #1
 800b08a:	68e3      	ldr	r3, [r4, #12]
 800b08c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b08e:	1a5b      	subs	r3, r3, r1
 800b090:	4543      	cmp	r3, r8
 800b092:	dcf0      	bgt.n	800b076 <_printf_float+0x442>
 800b094:	e6fa      	b.n	800ae8c <_printf_float+0x258>
 800b096:	f04f 0800 	mov.w	r8, #0
 800b09a:	f104 0919 	add.w	r9, r4, #25
 800b09e:	e7f4      	b.n	800b08a <_printf_float+0x456>

0800b0a0 <_printf_common>:
 800b0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a4:	4616      	mov	r6, r2
 800b0a6:	4699      	mov	r9, r3
 800b0a8:	688a      	ldr	r2, [r1, #8]
 800b0aa:	690b      	ldr	r3, [r1, #16]
 800b0ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	bfb8      	it	lt
 800b0b4:	4613      	movlt	r3, r2
 800b0b6:	6033      	str	r3, [r6, #0]
 800b0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0bc:	4607      	mov	r7, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	b10a      	cbz	r2, 800b0c6 <_printf_common+0x26>
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	6033      	str	r3, [r6, #0]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	0699      	lsls	r1, r3, #26
 800b0ca:	bf42      	ittt	mi
 800b0cc:	6833      	ldrmi	r3, [r6, #0]
 800b0ce:	3302      	addmi	r3, #2
 800b0d0:	6033      	strmi	r3, [r6, #0]
 800b0d2:	6825      	ldr	r5, [r4, #0]
 800b0d4:	f015 0506 	ands.w	r5, r5, #6
 800b0d8:	d106      	bne.n	800b0e8 <_printf_common+0x48>
 800b0da:	f104 0a19 	add.w	sl, r4, #25
 800b0de:	68e3      	ldr	r3, [r4, #12]
 800b0e0:	6832      	ldr	r2, [r6, #0]
 800b0e2:	1a9b      	subs	r3, r3, r2
 800b0e4:	42ab      	cmp	r3, r5
 800b0e6:	dc26      	bgt.n	800b136 <_printf_common+0x96>
 800b0e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0ec:	1e13      	subs	r3, r2, #0
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	bf18      	it	ne
 800b0f2:	2301      	movne	r3, #1
 800b0f4:	0692      	lsls	r2, r2, #26
 800b0f6:	d42b      	bmi.n	800b150 <_printf_common+0xb0>
 800b0f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	4638      	mov	r0, r7
 800b100:	47c0      	blx	r8
 800b102:	3001      	adds	r0, #1
 800b104:	d01e      	beq.n	800b144 <_printf_common+0xa4>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	68e5      	ldr	r5, [r4, #12]
 800b10a:	6832      	ldr	r2, [r6, #0]
 800b10c:	f003 0306 	and.w	r3, r3, #6
 800b110:	2b04      	cmp	r3, #4
 800b112:	bf08      	it	eq
 800b114:	1aad      	subeq	r5, r5, r2
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	6922      	ldr	r2, [r4, #16]
 800b11a:	bf0c      	ite	eq
 800b11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b120:	2500      	movne	r5, #0
 800b122:	4293      	cmp	r3, r2
 800b124:	bfc4      	itt	gt
 800b126:	1a9b      	subgt	r3, r3, r2
 800b128:	18ed      	addgt	r5, r5, r3
 800b12a:	2600      	movs	r6, #0
 800b12c:	341a      	adds	r4, #26
 800b12e:	42b5      	cmp	r5, r6
 800b130:	d11a      	bne.n	800b168 <_printf_common+0xc8>
 800b132:	2000      	movs	r0, #0
 800b134:	e008      	b.n	800b148 <_printf_common+0xa8>
 800b136:	2301      	movs	r3, #1
 800b138:	4652      	mov	r2, sl
 800b13a:	4649      	mov	r1, r9
 800b13c:	4638      	mov	r0, r7
 800b13e:	47c0      	blx	r8
 800b140:	3001      	adds	r0, #1
 800b142:	d103      	bne.n	800b14c <_printf_common+0xac>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295
 800b148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14c:	3501      	adds	r5, #1
 800b14e:	e7c6      	b.n	800b0de <_printf_common+0x3e>
 800b150:	18e1      	adds	r1, r4, r3
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	2030      	movs	r0, #48	; 0x30
 800b156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b15a:	4422      	add	r2, r4
 800b15c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b164:	3302      	adds	r3, #2
 800b166:	e7c7      	b.n	800b0f8 <_printf_common+0x58>
 800b168:	2301      	movs	r3, #1
 800b16a:	4622      	mov	r2, r4
 800b16c:	4649      	mov	r1, r9
 800b16e:	4638      	mov	r0, r7
 800b170:	47c0      	blx	r8
 800b172:	3001      	adds	r0, #1
 800b174:	d0e6      	beq.n	800b144 <_printf_common+0xa4>
 800b176:	3601      	adds	r6, #1
 800b178:	e7d9      	b.n	800b12e <_printf_common+0x8e>
	...

0800b17c <_printf_i>:
 800b17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b180:	460c      	mov	r4, r1
 800b182:	4691      	mov	r9, r2
 800b184:	7e27      	ldrb	r7, [r4, #24]
 800b186:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b188:	2f78      	cmp	r7, #120	; 0x78
 800b18a:	4680      	mov	r8, r0
 800b18c:	469a      	mov	sl, r3
 800b18e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b192:	d807      	bhi.n	800b1a4 <_printf_i+0x28>
 800b194:	2f62      	cmp	r7, #98	; 0x62
 800b196:	d80a      	bhi.n	800b1ae <_printf_i+0x32>
 800b198:	2f00      	cmp	r7, #0
 800b19a:	f000 80d8 	beq.w	800b34e <_printf_i+0x1d2>
 800b19e:	2f58      	cmp	r7, #88	; 0x58
 800b1a0:	f000 80a3 	beq.w	800b2ea <_printf_i+0x16e>
 800b1a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b1a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1ac:	e03a      	b.n	800b224 <_printf_i+0xa8>
 800b1ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1b2:	2b15      	cmp	r3, #21
 800b1b4:	d8f6      	bhi.n	800b1a4 <_printf_i+0x28>
 800b1b6:	a001      	add	r0, pc, #4	; (adr r0, 800b1bc <_printf_i+0x40>)
 800b1b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b1bc:	0800b215 	.word	0x0800b215
 800b1c0:	0800b229 	.word	0x0800b229
 800b1c4:	0800b1a5 	.word	0x0800b1a5
 800b1c8:	0800b1a5 	.word	0x0800b1a5
 800b1cc:	0800b1a5 	.word	0x0800b1a5
 800b1d0:	0800b1a5 	.word	0x0800b1a5
 800b1d4:	0800b229 	.word	0x0800b229
 800b1d8:	0800b1a5 	.word	0x0800b1a5
 800b1dc:	0800b1a5 	.word	0x0800b1a5
 800b1e0:	0800b1a5 	.word	0x0800b1a5
 800b1e4:	0800b1a5 	.word	0x0800b1a5
 800b1e8:	0800b335 	.word	0x0800b335
 800b1ec:	0800b259 	.word	0x0800b259
 800b1f0:	0800b317 	.word	0x0800b317
 800b1f4:	0800b1a5 	.word	0x0800b1a5
 800b1f8:	0800b1a5 	.word	0x0800b1a5
 800b1fc:	0800b357 	.word	0x0800b357
 800b200:	0800b1a5 	.word	0x0800b1a5
 800b204:	0800b259 	.word	0x0800b259
 800b208:	0800b1a5 	.word	0x0800b1a5
 800b20c:	0800b1a5 	.word	0x0800b1a5
 800b210:	0800b31f 	.word	0x0800b31f
 800b214:	680b      	ldr	r3, [r1, #0]
 800b216:	1d1a      	adds	r2, r3, #4
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	600a      	str	r2, [r1, #0]
 800b21c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b224:	2301      	movs	r3, #1
 800b226:	e0a3      	b.n	800b370 <_printf_i+0x1f4>
 800b228:	6825      	ldr	r5, [r4, #0]
 800b22a:	6808      	ldr	r0, [r1, #0]
 800b22c:	062e      	lsls	r6, r5, #24
 800b22e:	f100 0304 	add.w	r3, r0, #4
 800b232:	d50a      	bpl.n	800b24a <_printf_i+0xce>
 800b234:	6805      	ldr	r5, [r0, #0]
 800b236:	600b      	str	r3, [r1, #0]
 800b238:	2d00      	cmp	r5, #0
 800b23a:	da03      	bge.n	800b244 <_printf_i+0xc8>
 800b23c:	232d      	movs	r3, #45	; 0x2d
 800b23e:	426d      	negs	r5, r5
 800b240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b244:	485e      	ldr	r0, [pc, #376]	; (800b3c0 <_printf_i+0x244>)
 800b246:	230a      	movs	r3, #10
 800b248:	e019      	b.n	800b27e <_printf_i+0x102>
 800b24a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b24e:	6805      	ldr	r5, [r0, #0]
 800b250:	600b      	str	r3, [r1, #0]
 800b252:	bf18      	it	ne
 800b254:	b22d      	sxthne	r5, r5
 800b256:	e7ef      	b.n	800b238 <_printf_i+0xbc>
 800b258:	680b      	ldr	r3, [r1, #0]
 800b25a:	6825      	ldr	r5, [r4, #0]
 800b25c:	1d18      	adds	r0, r3, #4
 800b25e:	6008      	str	r0, [r1, #0]
 800b260:	0628      	lsls	r0, r5, #24
 800b262:	d501      	bpl.n	800b268 <_printf_i+0xec>
 800b264:	681d      	ldr	r5, [r3, #0]
 800b266:	e002      	b.n	800b26e <_printf_i+0xf2>
 800b268:	0669      	lsls	r1, r5, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0xe8>
 800b26c:	881d      	ldrh	r5, [r3, #0]
 800b26e:	4854      	ldr	r0, [pc, #336]	; (800b3c0 <_printf_i+0x244>)
 800b270:	2f6f      	cmp	r7, #111	; 0x6f
 800b272:	bf0c      	ite	eq
 800b274:	2308      	moveq	r3, #8
 800b276:	230a      	movne	r3, #10
 800b278:	2100      	movs	r1, #0
 800b27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b27e:	6866      	ldr	r6, [r4, #4]
 800b280:	60a6      	str	r6, [r4, #8]
 800b282:	2e00      	cmp	r6, #0
 800b284:	bfa2      	ittt	ge
 800b286:	6821      	ldrge	r1, [r4, #0]
 800b288:	f021 0104 	bicge.w	r1, r1, #4
 800b28c:	6021      	strge	r1, [r4, #0]
 800b28e:	b90d      	cbnz	r5, 800b294 <_printf_i+0x118>
 800b290:	2e00      	cmp	r6, #0
 800b292:	d04d      	beq.n	800b330 <_printf_i+0x1b4>
 800b294:	4616      	mov	r6, r2
 800b296:	fbb5 f1f3 	udiv	r1, r5, r3
 800b29a:	fb03 5711 	mls	r7, r3, r1, r5
 800b29e:	5dc7      	ldrb	r7, [r0, r7]
 800b2a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2a4:	462f      	mov	r7, r5
 800b2a6:	42bb      	cmp	r3, r7
 800b2a8:	460d      	mov	r5, r1
 800b2aa:	d9f4      	bls.n	800b296 <_printf_i+0x11a>
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d10b      	bne.n	800b2c8 <_printf_i+0x14c>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07df      	lsls	r7, r3, #31
 800b2b4:	d508      	bpl.n	800b2c8 <_printf_i+0x14c>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	6861      	ldr	r1, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	bfde      	ittt	le
 800b2be:	2330      	movle	r3, #48	; 0x30
 800b2c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2c8:	1b92      	subs	r2, r2, r6
 800b2ca:	6122      	str	r2, [r4, #16]
 800b2cc:	f8cd a000 	str.w	sl, [sp]
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	aa03      	add	r2, sp, #12
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f7ff fee2 	bl	800b0a0 <_printf_common>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d14c      	bne.n	800b37a <_printf_i+0x1fe>
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	b004      	add	sp, #16
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	4835      	ldr	r0, [pc, #212]	; (800b3c0 <_printf_i+0x244>)
 800b2ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	680e      	ldr	r6, [r1, #0]
 800b2f4:	061f      	lsls	r7, r3, #24
 800b2f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b2fa:	600e      	str	r6, [r1, #0]
 800b2fc:	d514      	bpl.n	800b328 <_printf_i+0x1ac>
 800b2fe:	07d9      	lsls	r1, r3, #31
 800b300:	bf44      	itt	mi
 800b302:	f043 0320 	orrmi.w	r3, r3, #32
 800b306:	6023      	strmi	r3, [r4, #0]
 800b308:	b91d      	cbnz	r5, 800b312 <_printf_i+0x196>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f023 0320 	bic.w	r3, r3, #32
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	2310      	movs	r3, #16
 800b314:	e7b0      	b.n	800b278 <_printf_i+0xfc>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	f043 0320 	orr.w	r3, r3, #32
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	2378      	movs	r3, #120	; 0x78
 800b320:	4828      	ldr	r0, [pc, #160]	; (800b3c4 <_printf_i+0x248>)
 800b322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b326:	e7e3      	b.n	800b2f0 <_printf_i+0x174>
 800b328:	065e      	lsls	r6, r3, #25
 800b32a:	bf48      	it	mi
 800b32c:	b2ad      	uxthmi	r5, r5
 800b32e:	e7e6      	b.n	800b2fe <_printf_i+0x182>
 800b330:	4616      	mov	r6, r2
 800b332:	e7bb      	b.n	800b2ac <_printf_i+0x130>
 800b334:	680b      	ldr	r3, [r1, #0]
 800b336:	6826      	ldr	r6, [r4, #0]
 800b338:	6960      	ldr	r0, [r4, #20]
 800b33a:	1d1d      	adds	r5, r3, #4
 800b33c:	600d      	str	r5, [r1, #0]
 800b33e:	0635      	lsls	r5, r6, #24
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	d501      	bpl.n	800b348 <_printf_i+0x1cc>
 800b344:	6018      	str	r0, [r3, #0]
 800b346:	e002      	b.n	800b34e <_printf_i+0x1d2>
 800b348:	0671      	lsls	r1, r6, #25
 800b34a:	d5fb      	bpl.n	800b344 <_printf_i+0x1c8>
 800b34c:	8018      	strh	r0, [r3, #0]
 800b34e:	2300      	movs	r3, #0
 800b350:	6123      	str	r3, [r4, #16]
 800b352:	4616      	mov	r6, r2
 800b354:	e7ba      	b.n	800b2cc <_printf_i+0x150>
 800b356:	680b      	ldr	r3, [r1, #0]
 800b358:	1d1a      	adds	r2, r3, #4
 800b35a:	600a      	str	r2, [r1, #0]
 800b35c:	681e      	ldr	r6, [r3, #0]
 800b35e:	6862      	ldr	r2, [r4, #4]
 800b360:	2100      	movs	r1, #0
 800b362:	4630      	mov	r0, r6
 800b364:	f7f4 ff64 	bl	8000230 <memchr>
 800b368:	b108      	cbz	r0, 800b36e <_printf_i+0x1f2>
 800b36a:	1b80      	subs	r0, r0, r6
 800b36c:	6060      	str	r0, [r4, #4]
 800b36e:	6863      	ldr	r3, [r4, #4]
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	2300      	movs	r3, #0
 800b374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b378:	e7a8      	b.n	800b2cc <_printf_i+0x150>
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	4632      	mov	r2, r6
 800b37e:	4649      	mov	r1, r9
 800b380:	4640      	mov	r0, r8
 800b382:	47d0      	blx	sl
 800b384:	3001      	adds	r0, #1
 800b386:	d0ab      	beq.n	800b2e0 <_printf_i+0x164>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	079b      	lsls	r3, r3, #30
 800b38c:	d413      	bmi.n	800b3b6 <_printf_i+0x23a>
 800b38e:	68e0      	ldr	r0, [r4, #12]
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	4298      	cmp	r0, r3
 800b394:	bfb8      	it	lt
 800b396:	4618      	movlt	r0, r3
 800b398:	e7a4      	b.n	800b2e4 <_printf_i+0x168>
 800b39a:	2301      	movs	r3, #1
 800b39c:	4632      	mov	r2, r6
 800b39e:	4649      	mov	r1, r9
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	47d0      	blx	sl
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d09b      	beq.n	800b2e0 <_printf_i+0x164>
 800b3a8:	3501      	adds	r5, #1
 800b3aa:	68e3      	ldr	r3, [r4, #12]
 800b3ac:	9903      	ldr	r1, [sp, #12]
 800b3ae:	1a5b      	subs	r3, r3, r1
 800b3b0:	42ab      	cmp	r3, r5
 800b3b2:	dcf2      	bgt.n	800b39a <_printf_i+0x21e>
 800b3b4:	e7eb      	b.n	800b38e <_printf_i+0x212>
 800b3b6:	2500      	movs	r5, #0
 800b3b8:	f104 0619 	add.w	r6, r4, #25
 800b3bc:	e7f5      	b.n	800b3aa <_printf_i+0x22e>
 800b3be:	bf00      	nop
 800b3c0:	0800fe4a 	.word	0x0800fe4a
 800b3c4:	0800fe5b 	.word	0x0800fe5b

0800b3c8 <iprintf>:
 800b3c8:	b40f      	push	{r0, r1, r2, r3}
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <iprintf+0x2c>)
 800b3cc:	b513      	push	{r0, r1, r4, lr}
 800b3ce:	681c      	ldr	r4, [r3, #0]
 800b3d0:	b124      	cbz	r4, 800b3dc <iprintf+0x14>
 800b3d2:	69a3      	ldr	r3, [r4, #24]
 800b3d4:	b913      	cbnz	r3, 800b3dc <iprintf+0x14>
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7ff fa56 	bl	800a888 <__sinit>
 800b3dc:	ab05      	add	r3, sp, #20
 800b3de:	9a04      	ldr	r2, [sp, #16]
 800b3e0:	68a1      	ldr	r1, [r4, #8]
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f001 fdef 	bl	800cfc8 <_vfiprintf_r>
 800b3ea:	b002      	add	sp, #8
 800b3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f0:	b004      	add	sp, #16
 800b3f2:	4770      	bx	lr
 800b3f4:	200008d0 	.word	0x200008d0

0800b3f8 <_puts_r>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	460e      	mov	r6, r1
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	b118      	cbz	r0, 800b408 <_puts_r+0x10>
 800b400:	6983      	ldr	r3, [r0, #24]
 800b402:	b90b      	cbnz	r3, 800b408 <_puts_r+0x10>
 800b404:	f7ff fa40 	bl	800a888 <__sinit>
 800b408:	69ab      	ldr	r3, [r5, #24]
 800b40a:	68ac      	ldr	r4, [r5, #8]
 800b40c:	b913      	cbnz	r3, 800b414 <_puts_r+0x1c>
 800b40e:	4628      	mov	r0, r5
 800b410:	f7ff fa3a 	bl	800a888 <__sinit>
 800b414:	4b2c      	ldr	r3, [pc, #176]	; (800b4c8 <_puts_r+0xd0>)
 800b416:	429c      	cmp	r4, r3
 800b418:	d120      	bne.n	800b45c <_puts_r+0x64>
 800b41a:	686c      	ldr	r4, [r5, #4]
 800b41c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b41e:	07db      	lsls	r3, r3, #31
 800b420:	d405      	bmi.n	800b42e <_puts_r+0x36>
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	0598      	lsls	r0, r3, #22
 800b426:	d402      	bmi.n	800b42e <_puts_r+0x36>
 800b428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b42a:	f7ff faf0 	bl	800aa0e <__retarget_lock_acquire_recursive>
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	0719      	lsls	r1, r3, #28
 800b432:	d51d      	bpl.n	800b470 <_puts_r+0x78>
 800b434:	6923      	ldr	r3, [r4, #16]
 800b436:	b1db      	cbz	r3, 800b470 <_puts_r+0x78>
 800b438:	3e01      	subs	r6, #1
 800b43a:	68a3      	ldr	r3, [r4, #8]
 800b43c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b440:	3b01      	subs	r3, #1
 800b442:	60a3      	str	r3, [r4, #8]
 800b444:	bb39      	cbnz	r1, 800b496 <_puts_r+0x9e>
 800b446:	2b00      	cmp	r3, #0
 800b448:	da38      	bge.n	800b4bc <_puts_r+0xc4>
 800b44a:	4622      	mov	r2, r4
 800b44c:	210a      	movs	r1, #10
 800b44e:	4628      	mov	r0, r5
 800b450:	f000 f906 	bl	800b660 <__swbuf_r>
 800b454:	3001      	adds	r0, #1
 800b456:	d011      	beq.n	800b47c <_puts_r+0x84>
 800b458:	250a      	movs	r5, #10
 800b45a:	e011      	b.n	800b480 <_puts_r+0x88>
 800b45c:	4b1b      	ldr	r3, [pc, #108]	; (800b4cc <_puts_r+0xd4>)
 800b45e:	429c      	cmp	r4, r3
 800b460:	d101      	bne.n	800b466 <_puts_r+0x6e>
 800b462:	68ac      	ldr	r4, [r5, #8]
 800b464:	e7da      	b.n	800b41c <_puts_r+0x24>
 800b466:	4b1a      	ldr	r3, [pc, #104]	; (800b4d0 <_puts_r+0xd8>)
 800b468:	429c      	cmp	r4, r3
 800b46a:	bf08      	it	eq
 800b46c:	68ec      	ldreq	r4, [r5, #12]
 800b46e:	e7d5      	b.n	800b41c <_puts_r+0x24>
 800b470:	4621      	mov	r1, r4
 800b472:	4628      	mov	r0, r5
 800b474:	f000 f958 	bl	800b728 <__swsetup_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d0dd      	beq.n	800b438 <_puts_r+0x40>
 800b47c:	f04f 35ff 	mov.w	r5, #4294967295
 800b480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b482:	07da      	lsls	r2, r3, #31
 800b484:	d405      	bmi.n	800b492 <_puts_r+0x9a>
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	059b      	lsls	r3, r3, #22
 800b48a:	d402      	bmi.n	800b492 <_puts_r+0x9a>
 800b48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b48e:	f7ff fabf 	bl	800aa10 <__retarget_lock_release_recursive>
 800b492:	4628      	mov	r0, r5
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	2b00      	cmp	r3, #0
 800b498:	da04      	bge.n	800b4a4 <_puts_r+0xac>
 800b49a:	69a2      	ldr	r2, [r4, #24]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	dc06      	bgt.n	800b4ae <_puts_r+0xb6>
 800b4a0:	290a      	cmp	r1, #10
 800b4a2:	d004      	beq.n	800b4ae <_puts_r+0xb6>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	6022      	str	r2, [r4, #0]
 800b4aa:	7019      	strb	r1, [r3, #0]
 800b4ac:	e7c5      	b.n	800b43a <_puts_r+0x42>
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	f000 f8d5 	bl	800b660 <__swbuf_r>
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d1bf      	bne.n	800b43a <_puts_r+0x42>
 800b4ba:	e7df      	b.n	800b47c <_puts_r+0x84>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	250a      	movs	r5, #10
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	6022      	str	r2, [r4, #0]
 800b4c4:	701d      	strb	r5, [r3, #0]
 800b4c6:	e7db      	b.n	800b480 <_puts_r+0x88>
 800b4c8:	0800fdf4 	.word	0x0800fdf4
 800b4cc:	0800fe14 	.word	0x0800fe14
 800b4d0:	0800fdd4 	.word	0x0800fdd4

0800b4d4 <puts>:
 800b4d4:	4b02      	ldr	r3, [pc, #8]	; (800b4e0 <puts+0xc>)
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f7ff bf8d 	b.w	800b3f8 <_puts_r>
 800b4de:	bf00      	nop
 800b4e0:	200008d0 	.word	0x200008d0

0800b4e4 <cleanup_glue>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	6809      	ldr	r1, [r1, #0]
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	b109      	cbz	r1, 800b4f2 <cleanup_glue+0xe>
 800b4ee:	f7ff fff9 	bl	800b4e4 <cleanup_glue>
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4fa:	f001 bceb 	b.w	800ced4 <_free_r>
	...

0800b500 <_reclaim_reent>:
 800b500:	4b2c      	ldr	r3, [pc, #176]	; (800b5b4 <_reclaim_reent+0xb4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4283      	cmp	r3, r0
 800b506:	b570      	push	{r4, r5, r6, lr}
 800b508:	4604      	mov	r4, r0
 800b50a:	d051      	beq.n	800b5b0 <_reclaim_reent+0xb0>
 800b50c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b50e:	b143      	cbz	r3, 800b522 <_reclaim_reent+0x22>
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d14a      	bne.n	800b5ac <_reclaim_reent+0xac>
 800b516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b518:	6819      	ldr	r1, [r3, #0]
 800b51a:	b111      	cbz	r1, 800b522 <_reclaim_reent+0x22>
 800b51c:	4620      	mov	r0, r4
 800b51e:	f001 fcd9 	bl	800ced4 <_free_r>
 800b522:	6961      	ldr	r1, [r4, #20]
 800b524:	b111      	cbz	r1, 800b52c <_reclaim_reent+0x2c>
 800b526:	4620      	mov	r0, r4
 800b528:	f001 fcd4 	bl	800ced4 <_free_r>
 800b52c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b52e:	b111      	cbz	r1, 800b536 <_reclaim_reent+0x36>
 800b530:	4620      	mov	r0, r4
 800b532:	f001 fccf 	bl	800ced4 <_free_r>
 800b536:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b538:	b111      	cbz	r1, 800b540 <_reclaim_reent+0x40>
 800b53a:	4620      	mov	r0, r4
 800b53c:	f001 fcca 	bl	800ced4 <_free_r>
 800b540:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b542:	b111      	cbz	r1, 800b54a <_reclaim_reent+0x4a>
 800b544:	4620      	mov	r0, r4
 800b546:	f001 fcc5 	bl	800ced4 <_free_r>
 800b54a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b54c:	b111      	cbz	r1, 800b554 <_reclaim_reent+0x54>
 800b54e:	4620      	mov	r0, r4
 800b550:	f001 fcc0 	bl	800ced4 <_free_r>
 800b554:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b556:	b111      	cbz	r1, 800b55e <_reclaim_reent+0x5e>
 800b558:	4620      	mov	r0, r4
 800b55a:	f001 fcbb 	bl	800ced4 <_free_r>
 800b55e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b560:	b111      	cbz	r1, 800b568 <_reclaim_reent+0x68>
 800b562:	4620      	mov	r0, r4
 800b564:	f001 fcb6 	bl	800ced4 <_free_r>
 800b568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b56a:	b111      	cbz	r1, 800b572 <_reclaim_reent+0x72>
 800b56c:	4620      	mov	r0, r4
 800b56e:	f001 fcb1 	bl	800ced4 <_free_r>
 800b572:	69a3      	ldr	r3, [r4, #24]
 800b574:	b1e3      	cbz	r3, 800b5b0 <_reclaim_reent+0xb0>
 800b576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b578:	4620      	mov	r0, r4
 800b57a:	4798      	blx	r3
 800b57c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b57e:	b1b9      	cbz	r1, 800b5b0 <_reclaim_reent+0xb0>
 800b580:	4620      	mov	r0, r4
 800b582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b586:	f7ff bfad 	b.w	800b4e4 <cleanup_glue>
 800b58a:	5949      	ldr	r1, [r1, r5]
 800b58c:	b941      	cbnz	r1, 800b5a0 <_reclaim_reent+0xa0>
 800b58e:	3504      	adds	r5, #4
 800b590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b592:	2d80      	cmp	r5, #128	; 0x80
 800b594:	68d9      	ldr	r1, [r3, #12]
 800b596:	d1f8      	bne.n	800b58a <_reclaim_reent+0x8a>
 800b598:	4620      	mov	r0, r4
 800b59a:	f001 fc9b 	bl	800ced4 <_free_r>
 800b59e:	e7ba      	b.n	800b516 <_reclaim_reent+0x16>
 800b5a0:	680e      	ldr	r6, [r1, #0]
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f001 fc96 	bl	800ced4 <_free_r>
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	e7ef      	b.n	800b58c <_reclaim_reent+0x8c>
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	e7ef      	b.n	800b590 <_reclaim_reent+0x90>
 800b5b0:	bd70      	pop	{r4, r5, r6, pc}
 800b5b2:	bf00      	nop
 800b5b4:	200008d0 	.word	0x200008d0

0800b5b8 <_sbrk_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d06      	ldr	r5, [pc, #24]	; (800b5d4 <_sbrk_r+0x1c>)
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4604      	mov	r4, r0
 800b5c0:	4608      	mov	r0, r1
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	f7f7 f97e 	bl	80028c4 <_sbrk>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_sbrk_r+0x1a>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_sbrk_r+0x1a>
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	200092a4 	.word	0x200092a4

0800b5d8 <__sread>:
 800b5d8:	b510      	push	{r4, lr}
 800b5da:	460c      	mov	r4, r1
 800b5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e0:	f001 fe22 	bl	800d228 <_read_r>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	bfab      	itete	ge
 800b5e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b5ec:	181b      	addge	r3, r3, r0
 800b5ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5f2:	bfac      	ite	ge
 800b5f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5f6:	81a3      	strhlt	r3, [r4, #12]
 800b5f8:	bd10      	pop	{r4, pc}

0800b5fa <__swrite>:
 800b5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fe:	461f      	mov	r7, r3
 800b600:	898b      	ldrh	r3, [r1, #12]
 800b602:	05db      	lsls	r3, r3, #23
 800b604:	4605      	mov	r5, r0
 800b606:	460c      	mov	r4, r1
 800b608:	4616      	mov	r6, r2
 800b60a:	d505      	bpl.n	800b618 <__swrite+0x1e>
 800b60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b610:	2302      	movs	r3, #2
 800b612:	2200      	movs	r2, #0
 800b614:	f001 f846 	bl	800c6a4 <_lseek_r>
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b61e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b622:	81a3      	strh	r3, [r4, #12]
 800b624:	4632      	mov	r2, r6
 800b626:	463b      	mov	r3, r7
 800b628:	4628      	mov	r0, r5
 800b62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b62e:	f000 b869 	b.w	800b704 <_write_r>

0800b632 <__sseek>:
 800b632:	b510      	push	{r4, lr}
 800b634:	460c      	mov	r4, r1
 800b636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63a:	f001 f833 	bl	800c6a4 <_lseek_r>
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	bf15      	itete	ne
 800b644:	6560      	strne	r0, [r4, #84]	; 0x54
 800b646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b64a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b64e:	81a3      	strheq	r3, [r4, #12]
 800b650:	bf18      	it	ne
 800b652:	81a3      	strhne	r3, [r4, #12]
 800b654:	bd10      	pop	{r4, pc}

0800b656 <__sclose>:
 800b656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65a:	f000 b8d3 	b.w	800b804 <_close_r>
	...

0800b660 <__swbuf_r>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	460e      	mov	r6, r1
 800b664:	4614      	mov	r4, r2
 800b666:	4605      	mov	r5, r0
 800b668:	b118      	cbz	r0, 800b672 <__swbuf_r+0x12>
 800b66a:	6983      	ldr	r3, [r0, #24]
 800b66c:	b90b      	cbnz	r3, 800b672 <__swbuf_r+0x12>
 800b66e:	f7ff f90b 	bl	800a888 <__sinit>
 800b672:	4b21      	ldr	r3, [pc, #132]	; (800b6f8 <__swbuf_r+0x98>)
 800b674:	429c      	cmp	r4, r3
 800b676:	d12b      	bne.n	800b6d0 <__swbuf_r+0x70>
 800b678:	686c      	ldr	r4, [r5, #4]
 800b67a:	69a3      	ldr	r3, [r4, #24]
 800b67c:	60a3      	str	r3, [r4, #8]
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	071a      	lsls	r2, r3, #28
 800b682:	d52f      	bpl.n	800b6e4 <__swbuf_r+0x84>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	b36b      	cbz	r3, 800b6e4 <__swbuf_r+0x84>
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	6820      	ldr	r0, [r4, #0]
 800b68c:	1ac0      	subs	r0, r0, r3
 800b68e:	6963      	ldr	r3, [r4, #20]
 800b690:	b2f6      	uxtb	r6, r6
 800b692:	4283      	cmp	r3, r0
 800b694:	4637      	mov	r7, r6
 800b696:	dc04      	bgt.n	800b6a2 <__swbuf_r+0x42>
 800b698:	4621      	mov	r1, r4
 800b69a:	4628      	mov	r0, r5
 800b69c:	f000 ffc2 	bl	800c624 <_fflush_r>
 800b6a0:	bb30      	cbnz	r0, 800b6f0 <__swbuf_r+0x90>
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	60a3      	str	r3, [r4, #8]
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	6022      	str	r2, [r4, #0]
 800b6ae:	701e      	strb	r6, [r3, #0]
 800b6b0:	6963      	ldr	r3, [r4, #20]
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	4283      	cmp	r3, r0
 800b6b6:	d004      	beq.n	800b6c2 <__swbuf_r+0x62>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	07db      	lsls	r3, r3, #31
 800b6bc:	d506      	bpl.n	800b6cc <__swbuf_r+0x6c>
 800b6be:	2e0a      	cmp	r6, #10
 800b6c0:	d104      	bne.n	800b6cc <__swbuf_r+0x6c>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f000 ffad 	bl	800c624 <_fflush_r>
 800b6ca:	b988      	cbnz	r0, 800b6f0 <__swbuf_r+0x90>
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d0:	4b0a      	ldr	r3, [pc, #40]	; (800b6fc <__swbuf_r+0x9c>)
 800b6d2:	429c      	cmp	r4, r3
 800b6d4:	d101      	bne.n	800b6da <__swbuf_r+0x7a>
 800b6d6:	68ac      	ldr	r4, [r5, #8]
 800b6d8:	e7cf      	b.n	800b67a <__swbuf_r+0x1a>
 800b6da:	4b09      	ldr	r3, [pc, #36]	; (800b700 <__swbuf_r+0xa0>)
 800b6dc:	429c      	cmp	r4, r3
 800b6de:	bf08      	it	eq
 800b6e0:	68ec      	ldreq	r4, [r5, #12]
 800b6e2:	e7ca      	b.n	800b67a <__swbuf_r+0x1a>
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f81e 	bl	800b728 <__swsetup_r>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d0cb      	beq.n	800b688 <__swbuf_r+0x28>
 800b6f0:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f4:	e7ea      	b.n	800b6cc <__swbuf_r+0x6c>
 800b6f6:	bf00      	nop
 800b6f8:	0800fdf4 	.word	0x0800fdf4
 800b6fc:	0800fe14 	.word	0x0800fe14
 800b700:	0800fdd4 	.word	0x0800fdd4

0800b704 <_write_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	; (800b724 <_write_r+0x20>)
 800b708:	4604      	mov	r4, r0
 800b70a:	4608      	mov	r0, r1
 800b70c:	4611      	mov	r1, r2
 800b70e:	2200      	movs	r2, #0
 800b710:	602a      	str	r2, [r5, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	f7f6 fd9c 	bl	8002250 <_write>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d102      	bne.n	800b722 <_write_r+0x1e>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b103      	cbz	r3, 800b722 <_write_r+0x1e>
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	200092a4 	.word	0x200092a4

0800b728 <__swsetup_r>:
 800b728:	4b32      	ldr	r3, [pc, #200]	; (800b7f4 <__swsetup_r+0xcc>)
 800b72a:	b570      	push	{r4, r5, r6, lr}
 800b72c:	681d      	ldr	r5, [r3, #0]
 800b72e:	4606      	mov	r6, r0
 800b730:	460c      	mov	r4, r1
 800b732:	b125      	cbz	r5, 800b73e <__swsetup_r+0x16>
 800b734:	69ab      	ldr	r3, [r5, #24]
 800b736:	b913      	cbnz	r3, 800b73e <__swsetup_r+0x16>
 800b738:	4628      	mov	r0, r5
 800b73a:	f7ff f8a5 	bl	800a888 <__sinit>
 800b73e:	4b2e      	ldr	r3, [pc, #184]	; (800b7f8 <__swsetup_r+0xd0>)
 800b740:	429c      	cmp	r4, r3
 800b742:	d10f      	bne.n	800b764 <__swsetup_r+0x3c>
 800b744:	686c      	ldr	r4, [r5, #4]
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b74c:	0719      	lsls	r1, r3, #28
 800b74e:	d42c      	bmi.n	800b7aa <__swsetup_r+0x82>
 800b750:	06dd      	lsls	r5, r3, #27
 800b752:	d411      	bmi.n	800b778 <__swsetup_r+0x50>
 800b754:	2309      	movs	r3, #9
 800b756:	6033      	str	r3, [r6, #0]
 800b758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b75c:	81a3      	strh	r3, [r4, #12]
 800b75e:	f04f 30ff 	mov.w	r0, #4294967295
 800b762:	e03e      	b.n	800b7e2 <__swsetup_r+0xba>
 800b764:	4b25      	ldr	r3, [pc, #148]	; (800b7fc <__swsetup_r+0xd4>)
 800b766:	429c      	cmp	r4, r3
 800b768:	d101      	bne.n	800b76e <__swsetup_r+0x46>
 800b76a:	68ac      	ldr	r4, [r5, #8]
 800b76c:	e7eb      	b.n	800b746 <__swsetup_r+0x1e>
 800b76e:	4b24      	ldr	r3, [pc, #144]	; (800b800 <__swsetup_r+0xd8>)
 800b770:	429c      	cmp	r4, r3
 800b772:	bf08      	it	eq
 800b774:	68ec      	ldreq	r4, [r5, #12]
 800b776:	e7e6      	b.n	800b746 <__swsetup_r+0x1e>
 800b778:	0758      	lsls	r0, r3, #29
 800b77a:	d512      	bpl.n	800b7a2 <__swsetup_r+0x7a>
 800b77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b77e:	b141      	cbz	r1, 800b792 <__swsetup_r+0x6a>
 800b780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b784:	4299      	cmp	r1, r3
 800b786:	d002      	beq.n	800b78e <__swsetup_r+0x66>
 800b788:	4630      	mov	r0, r6
 800b78a:	f001 fba3 	bl	800ced4 <_free_r>
 800b78e:	2300      	movs	r3, #0
 800b790:	6363      	str	r3, [r4, #52]	; 0x34
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b798:	81a3      	strh	r3, [r4, #12]
 800b79a:	2300      	movs	r3, #0
 800b79c:	6063      	str	r3, [r4, #4]
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	f043 0308 	orr.w	r3, r3, #8
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	b94b      	cbnz	r3, 800b7c2 <__swsetup_r+0x9a>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7b8:	d003      	beq.n	800b7c2 <__swsetup_r+0x9a>
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f000 ffa7 	bl	800c710 <__smakebuf_r>
 800b7c2:	89a0      	ldrh	r0, [r4, #12]
 800b7c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7c8:	f010 0301 	ands.w	r3, r0, #1
 800b7cc:	d00a      	beq.n	800b7e4 <__swsetup_r+0xbc>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60a3      	str	r3, [r4, #8]
 800b7d2:	6963      	ldr	r3, [r4, #20]
 800b7d4:	425b      	negs	r3, r3
 800b7d6:	61a3      	str	r3, [r4, #24]
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	b943      	cbnz	r3, 800b7ee <__swsetup_r+0xc6>
 800b7dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7e0:	d1ba      	bne.n	800b758 <__swsetup_r+0x30>
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	0781      	lsls	r1, r0, #30
 800b7e6:	bf58      	it	pl
 800b7e8:	6963      	ldrpl	r3, [r4, #20]
 800b7ea:	60a3      	str	r3, [r4, #8]
 800b7ec:	e7f4      	b.n	800b7d8 <__swsetup_r+0xb0>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e7f7      	b.n	800b7e2 <__swsetup_r+0xba>
 800b7f2:	bf00      	nop
 800b7f4:	200008d0 	.word	0x200008d0
 800b7f8:	0800fdf4 	.word	0x0800fdf4
 800b7fc:	0800fe14 	.word	0x0800fe14
 800b800:	0800fdd4 	.word	0x0800fdd4

0800b804 <_close_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d06      	ldr	r5, [pc, #24]	; (800b820 <_close_r+0x1c>)
 800b808:	2300      	movs	r3, #0
 800b80a:	4604      	mov	r4, r0
 800b80c:	4608      	mov	r0, r1
 800b80e:	602b      	str	r3, [r5, #0]
 800b810:	f7f7 f823 	bl	800285a <_close>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_close_r+0x1a>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_close_r+0x1a>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	200092a4 	.word	0x200092a4

0800b824 <quorem>:
 800b824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	6903      	ldr	r3, [r0, #16]
 800b82a:	690c      	ldr	r4, [r1, #16]
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	4607      	mov	r7, r0
 800b830:	f2c0 8081 	blt.w	800b936 <quorem+0x112>
 800b834:	3c01      	subs	r4, #1
 800b836:	f101 0814 	add.w	r8, r1, #20
 800b83a:	f100 0514 	add.w	r5, r0, #20
 800b83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b84c:	3301      	adds	r3, #1
 800b84e:	429a      	cmp	r2, r3
 800b850:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b858:	fbb2 f6f3 	udiv	r6, r2, r3
 800b85c:	d331      	bcc.n	800b8c2 <quorem+0x9e>
 800b85e:	f04f 0e00 	mov.w	lr, #0
 800b862:	4640      	mov	r0, r8
 800b864:	46ac      	mov	ip, r5
 800b866:	46f2      	mov	sl, lr
 800b868:	f850 2b04 	ldr.w	r2, [r0], #4
 800b86c:	b293      	uxth	r3, r2
 800b86e:	fb06 e303 	mla	r3, r6, r3, lr
 800b872:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b876:	b29b      	uxth	r3, r3
 800b878:	ebaa 0303 	sub.w	r3, sl, r3
 800b87c:	0c12      	lsrs	r2, r2, #16
 800b87e:	f8dc a000 	ldr.w	sl, [ip]
 800b882:	fb06 e202 	mla	r2, r6, r2, lr
 800b886:	fa13 f38a 	uxtah	r3, r3, sl
 800b88a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b88e:	fa1f fa82 	uxth.w	sl, r2
 800b892:	f8dc 2000 	ldr.w	r2, [ip]
 800b896:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b89a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8a4:	4581      	cmp	r9, r0
 800b8a6:	f84c 3b04 	str.w	r3, [ip], #4
 800b8aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b8ae:	d2db      	bcs.n	800b868 <quorem+0x44>
 800b8b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8b4:	b92b      	cbnz	r3, 800b8c2 <quorem+0x9e>
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	3b04      	subs	r3, #4
 800b8ba:	429d      	cmp	r5, r3
 800b8bc:	461a      	mov	r2, r3
 800b8be:	d32e      	bcc.n	800b91e <quorem+0xfa>
 800b8c0:	613c      	str	r4, [r7, #16]
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	f001 f9f6 	bl	800ccb4 <__mcmp>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	db24      	blt.n	800b916 <quorem+0xf2>
 800b8cc:	3601      	adds	r6, #1
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f04f 0c00 	mov.w	ip, #0
 800b8d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8d8:	f8d0 e000 	ldr.w	lr, [r0]
 800b8dc:	b293      	uxth	r3, r2
 800b8de:	ebac 0303 	sub.w	r3, ip, r3
 800b8e2:	0c12      	lsrs	r2, r2, #16
 800b8e4:	fa13 f38e 	uxtah	r3, r3, lr
 800b8e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8f6:	45c1      	cmp	r9, r8
 800b8f8:	f840 3b04 	str.w	r3, [r0], #4
 800b8fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b900:	d2e8      	bcs.n	800b8d4 <quorem+0xb0>
 800b902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b90a:	b922      	cbnz	r2, 800b916 <quorem+0xf2>
 800b90c:	3b04      	subs	r3, #4
 800b90e:	429d      	cmp	r5, r3
 800b910:	461a      	mov	r2, r3
 800b912:	d30a      	bcc.n	800b92a <quorem+0x106>
 800b914:	613c      	str	r4, [r7, #16]
 800b916:	4630      	mov	r0, r6
 800b918:	b003      	add	sp, #12
 800b91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91e:	6812      	ldr	r2, [r2, #0]
 800b920:	3b04      	subs	r3, #4
 800b922:	2a00      	cmp	r2, #0
 800b924:	d1cc      	bne.n	800b8c0 <quorem+0x9c>
 800b926:	3c01      	subs	r4, #1
 800b928:	e7c7      	b.n	800b8ba <quorem+0x96>
 800b92a:	6812      	ldr	r2, [r2, #0]
 800b92c:	3b04      	subs	r3, #4
 800b92e:	2a00      	cmp	r2, #0
 800b930:	d1f0      	bne.n	800b914 <quorem+0xf0>
 800b932:	3c01      	subs	r4, #1
 800b934:	e7eb      	b.n	800b90e <quorem+0xea>
 800b936:	2000      	movs	r0, #0
 800b938:	e7ee      	b.n	800b918 <quorem+0xf4>
 800b93a:	0000      	movs	r0, r0
 800b93c:	0000      	movs	r0, r0
	...

0800b940 <_dtoa_r>:
 800b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	ed2d 8b02 	vpush	{d8}
 800b948:	ec57 6b10 	vmov	r6, r7, d0
 800b94c:	b095      	sub	sp, #84	; 0x54
 800b94e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b950:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b954:	9105      	str	r1, [sp, #20]
 800b956:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b95a:	4604      	mov	r4, r0
 800b95c:	9209      	str	r2, [sp, #36]	; 0x24
 800b95e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b960:	b975      	cbnz	r5, 800b980 <_dtoa_r+0x40>
 800b962:	2010      	movs	r0, #16
 800b964:	f000 ff14 	bl	800c790 <malloc>
 800b968:	4602      	mov	r2, r0
 800b96a:	6260      	str	r0, [r4, #36]	; 0x24
 800b96c:	b920      	cbnz	r0, 800b978 <_dtoa_r+0x38>
 800b96e:	4bb2      	ldr	r3, [pc, #712]	; (800bc38 <_dtoa_r+0x2f8>)
 800b970:	21ea      	movs	r1, #234	; 0xea
 800b972:	48b2      	ldr	r0, [pc, #712]	; (800bc3c <_dtoa_r+0x2fc>)
 800b974:	f001 fc6a 	bl	800d24c <__assert_func>
 800b978:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b97c:	6005      	str	r5, [r0, #0]
 800b97e:	60c5      	str	r5, [r0, #12]
 800b980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b982:	6819      	ldr	r1, [r3, #0]
 800b984:	b151      	cbz	r1, 800b99c <_dtoa_r+0x5c>
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	604a      	str	r2, [r1, #4]
 800b98a:	2301      	movs	r3, #1
 800b98c:	4093      	lsls	r3, r2
 800b98e:	608b      	str	r3, [r1, #8]
 800b990:	4620      	mov	r0, r4
 800b992:	f000 ff51 	bl	800c838 <_Bfree>
 800b996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]
 800b99c:	1e3b      	subs	r3, r7, #0
 800b99e:	bfb9      	ittee	lt
 800b9a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b9a4:	9303      	strlt	r3, [sp, #12]
 800b9a6:	2300      	movge	r3, #0
 800b9a8:	f8c8 3000 	strge.w	r3, [r8]
 800b9ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b9b0:	4ba3      	ldr	r3, [pc, #652]	; (800bc40 <_dtoa_r+0x300>)
 800b9b2:	bfbc      	itt	lt
 800b9b4:	2201      	movlt	r2, #1
 800b9b6:	f8c8 2000 	strlt.w	r2, [r8]
 800b9ba:	ea33 0309 	bics.w	r3, r3, r9
 800b9be:	d11b      	bne.n	800b9f8 <_dtoa_r+0xb8>
 800b9c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9cc:	4333      	orrs	r3, r6
 800b9ce:	f000 857a 	beq.w	800c4c6 <_dtoa_r+0xb86>
 800b9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9d4:	b963      	cbnz	r3, 800b9f0 <_dtoa_r+0xb0>
 800b9d6:	4b9b      	ldr	r3, [pc, #620]	; (800bc44 <_dtoa_r+0x304>)
 800b9d8:	e024      	b.n	800ba24 <_dtoa_r+0xe4>
 800b9da:	4b9b      	ldr	r3, [pc, #620]	; (800bc48 <_dtoa_r+0x308>)
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	9800      	ldr	r0, [sp, #0]
 800b9e6:	b015      	add	sp, #84	; 0x54
 800b9e8:	ecbd 8b02 	vpop	{d8}
 800b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f0:	4b94      	ldr	r3, [pc, #592]	; (800bc44 <_dtoa_r+0x304>)
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	3303      	adds	r3, #3
 800b9f6:	e7f3      	b.n	800b9e0 <_dtoa_r+0xa0>
 800b9f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	ec51 0b17 	vmov	r0, r1, d7
 800ba02:	2300      	movs	r3, #0
 800ba04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ba08:	f7f5 f886 	bl	8000b18 <__aeabi_dcmpeq>
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	b158      	cbz	r0, 800ba28 <_dtoa_r+0xe8>
 800ba10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba12:	2301      	movs	r3, #1
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 8551 	beq.w	800c4c0 <_dtoa_r+0xb80>
 800ba1e:	488b      	ldr	r0, [pc, #556]	; (800bc4c <_dtoa_r+0x30c>)
 800ba20:	6018      	str	r0, [r3, #0]
 800ba22:	1e43      	subs	r3, r0, #1
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	e7dd      	b.n	800b9e4 <_dtoa_r+0xa4>
 800ba28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ba2c:	aa12      	add	r2, sp, #72	; 0x48
 800ba2e:	a913      	add	r1, sp, #76	; 0x4c
 800ba30:	4620      	mov	r0, r4
 800ba32:	f001 f9e3 	bl	800cdfc <__d2b>
 800ba36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba3a:	4683      	mov	fp, r0
 800ba3c:	2d00      	cmp	r5, #0
 800ba3e:	d07c      	beq.n	800bb3a <_dtoa_r+0x1fa>
 800ba40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ba46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ba4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba5a:	4b7d      	ldr	r3, [pc, #500]	; (800bc50 <_dtoa_r+0x310>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4630      	mov	r0, r6
 800ba60:	4639      	mov	r1, r7
 800ba62:	f7f4 fc39 	bl	80002d8 <__aeabi_dsub>
 800ba66:	a36e      	add	r3, pc, #440	; (adr r3, 800bc20 <_dtoa_r+0x2e0>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fdec 	bl	8000648 <__aeabi_dmul>
 800ba70:	a36d      	add	r3, pc, #436	; (adr r3, 800bc28 <_dtoa_r+0x2e8>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f7f4 fc31 	bl	80002dc <__adddf3>
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	460f      	mov	r7, r1
 800ba80:	f7f4 fd78 	bl	8000574 <__aeabi_i2d>
 800ba84:	a36a      	add	r3, pc, #424	; (adr r3, 800bc30 <_dtoa_r+0x2f0>)
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	f7f4 fddd 	bl	8000648 <__aeabi_dmul>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4630      	mov	r0, r6
 800ba94:	4639      	mov	r1, r7
 800ba96:	f7f4 fc21 	bl	80002dc <__adddf3>
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460f      	mov	r7, r1
 800ba9e:	f7f5 f883 	bl	8000ba8 <__aeabi_d2iz>
 800baa2:	2200      	movs	r2, #0
 800baa4:	4682      	mov	sl, r0
 800baa6:	2300      	movs	r3, #0
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f5 f83e 	bl	8000b2c <__aeabi_dcmplt>
 800bab0:	b148      	cbz	r0, 800bac6 <_dtoa_r+0x186>
 800bab2:	4650      	mov	r0, sl
 800bab4:	f7f4 fd5e 	bl	8000574 <__aeabi_i2d>
 800bab8:	4632      	mov	r2, r6
 800baba:	463b      	mov	r3, r7
 800babc:	f7f5 f82c 	bl	8000b18 <__aeabi_dcmpeq>
 800bac0:	b908      	cbnz	r0, 800bac6 <_dtoa_r+0x186>
 800bac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bac6:	f1ba 0f16 	cmp.w	sl, #22
 800baca:	d854      	bhi.n	800bb76 <_dtoa_r+0x236>
 800bacc:	4b61      	ldr	r3, [pc, #388]	; (800bc54 <_dtoa_r+0x314>)
 800bace:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bada:	f7f5 f827 	bl	8000b2c <__aeabi_dcmplt>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d04b      	beq.n	800bb7a <_dtoa_r+0x23a>
 800bae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bae6:	2300      	movs	r3, #0
 800bae8:	930e      	str	r3, [sp, #56]	; 0x38
 800baea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800baec:	1b5d      	subs	r5, r3, r5
 800baee:	1e6b      	subs	r3, r5, #1
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	bf43      	ittte	mi
 800baf4:	2300      	movmi	r3, #0
 800baf6:	f1c5 0801 	rsbmi	r8, r5, #1
 800bafa:	9304      	strmi	r3, [sp, #16]
 800bafc:	f04f 0800 	movpl.w	r8, #0
 800bb00:	f1ba 0f00 	cmp.w	sl, #0
 800bb04:	db3b      	blt.n	800bb7e <_dtoa_r+0x23e>
 800bb06:	9b04      	ldr	r3, [sp, #16]
 800bb08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bb0c:	4453      	add	r3, sl
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	2300      	movs	r3, #0
 800bb12:	9306      	str	r3, [sp, #24]
 800bb14:	9b05      	ldr	r3, [sp, #20]
 800bb16:	2b09      	cmp	r3, #9
 800bb18:	d869      	bhi.n	800bbee <_dtoa_r+0x2ae>
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	bfc4      	itt	gt
 800bb1e:	3b04      	subgt	r3, #4
 800bb20:	9305      	strgt	r3, [sp, #20]
 800bb22:	9b05      	ldr	r3, [sp, #20]
 800bb24:	f1a3 0302 	sub.w	r3, r3, #2
 800bb28:	bfcc      	ite	gt
 800bb2a:	2500      	movgt	r5, #0
 800bb2c:	2501      	movle	r5, #1
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d869      	bhi.n	800bc06 <_dtoa_r+0x2c6>
 800bb32:	e8df f003 	tbb	[pc, r3]
 800bb36:	4e2c      	.short	0x4e2c
 800bb38:	5a4c      	.short	0x5a4c
 800bb3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bb3e:	441d      	add	r5, r3
 800bb40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb44:	2b20      	cmp	r3, #32
 800bb46:	bfc1      	itttt	gt
 800bb48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb50:	fa09 f303 	lslgt.w	r3, r9, r3
 800bb54:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb58:	bfda      	itte	le
 800bb5a:	f1c3 0320 	rsble	r3, r3, #32
 800bb5e:	fa06 f003 	lslle.w	r0, r6, r3
 800bb62:	4318      	orrgt	r0, r3
 800bb64:	f7f4 fcf6 	bl	8000554 <__aeabi_ui2d>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb70:	3d01      	subs	r5, #1
 800bb72:	9310      	str	r3, [sp, #64]	; 0x40
 800bb74:	e771      	b.n	800ba5a <_dtoa_r+0x11a>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e7b6      	b.n	800bae8 <_dtoa_r+0x1a8>
 800bb7a:	900e      	str	r0, [sp, #56]	; 0x38
 800bb7c:	e7b5      	b.n	800baea <_dtoa_r+0x1aa>
 800bb7e:	f1ca 0300 	rsb	r3, sl, #0
 800bb82:	9306      	str	r3, [sp, #24]
 800bb84:	2300      	movs	r3, #0
 800bb86:	eba8 080a 	sub.w	r8, r8, sl
 800bb8a:	930d      	str	r3, [sp, #52]	; 0x34
 800bb8c:	e7c2      	b.n	800bb14 <_dtoa_r+0x1d4>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	9308      	str	r3, [sp, #32]
 800bb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dc39      	bgt.n	800bc0c <_dtoa_r+0x2cc>
 800bb98:	f04f 0901 	mov.w	r9, #1
 800bb9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bba0:	464b      	mov	r3, r9
 800bba2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bba6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bba8:	2200      	movs	r2, #0
 800bbaa:	6042      	str	r2, [r0, #4]
 800bbac:	2204      	movs	r2, #4
 800bbae:	f102 0614 	add.w	r6, r2, #20
 800bbb2:	429e      	cmp	r6, r3
 800bbb4:	6841      	ldr	r1, [r0, #4]
 800bbb6:	d92f      	bls.n	800bc18 <_dtoa_r+0x2d8>
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fdfd 	bl	800c7b8 <_Balloc>
 800bbbe:	9000      	str	r0, [sp, #0]
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d14b      	bne.n	800bc5c <_dtoa_r+0x31c>
 800bbc4:	4b24      	ldr	r3, [pc, #144]	; (800bc58 <_dtoa_r+0x318>)
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbcc:	e6d1      	b.n	800b972 <_dtoa_r+0x32>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e7de      	b.n	800bb90 <_dtoa_r+0x250>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9308      	str	r3, [sp, #32]
 800bbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd8:	eb0a 0903 	add.w	r9, sl, r3
 800bbdc:	f109 0301 	add.w	r3, r9, #1
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	bfb8      	it	lt
 800bbe6:	2301      	movlt	r3, #1
 800bbe8:	e7dd      	b.n	800bba6 <_dtoa_r+0x266>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e7f2      	b.n	800bbd4 <_dtoa_r+0x294>
 800bbee:	2501      	movs	r5, #1
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	9305      	str	r3, [sp, #20]
 800bbf4:	9508      	str	r5, [sp, #32]
 800bbf6:	f04f 39ff 	mov.w	r9, #4294967295
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc00:	2312      	movs	r3, #18
 800bc02:	9209      	str	r2, [sp, #36]	; 0x24
 800bc04:	e7cf      	b.n	800bba6 <_dtoa_r+0x266>
 800bc06:	2301      	movs	r3, #1
 800bc08:	9308      	str	r3, [sp, #32]
 800bc0a:	e7f4      	b.n	800bbf6 <_dtoa_r+0x2b6>
 800bc0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bc10:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc14:	464b      	mov	r3, r9
 800bc16:	e7c6      	b.n	800bba6 <_dtoa_r+0x266>
 800bc18:	3101      	adds	r1, #1
 800bc1a:	6041      	str	r1, [r0, #4]
 800bc1c:	0052      	lsls	r2, r2, #1
 800bc1e:	e7c6      	b.n	800bbae <_dtoa_r+0x26e>
 800bc20:	636f4361 	.word	0x636f4361
 800bc24:	3fd287a7 	.word	0x3fd287a7
 800bc28:	8b60c8b3 	.word	0x8b60c8b3
 800bc2c:	3fc68a28 	.word	0x3fc68a28
 800bc30:	509f79fb 	.word	0x509f79fb
 800bc34:	3fd34413 	.word	0x3fd34413
 800bc38:	0800fe79 	.word	0x0800fe79
 800bc3c:	0800fe90 	.word	0x0800fe90
 800bc40:	7ff00000 	.word	0x7ff00000
 800bc44:	0800fe75 	.word	0x0800fe75
 800bc48:	0800fe6c 	.word	0x0800fe6c
 800bc4c:	0800fe49 	.word	0x0800fe49
 800bc50:	3ff80000 	.word	0x3ff80000
 800bc54:	0800ff88 	.word	0x0800ff88
 800bc58:	0800feef 	.word	0x0800feef
 800bc5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc5e:	9a00      	ldr	r2, [sp, #0]
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	9b01      	ldr	r3, [sp, #4]
 800bc64:	2b0e      	cmp	r3, #14
 800bc66:	f200 80ad 	bhi.w	800bdc4 <_dtoa_r+0x484>
 800bc6a:	2d00      	cmp	r5, #0
 800bc6c:	f000 80aa 	beq.w	800bdc4 <_dtoa_r+0x484>
 800bc70:	f1ba 0f00 	cmp.w	sl, #0
 800bc74:	dd36      	ble.n	800bce4 <_dtoa_r+0x3a4>
 800bc76:	4ac3      	ldr	r2, [pc, #780]	; (800bf84 <_dtoa_r+0x644>)
 800bc78:	f00a 030f 	and.w	r3, sl, #15
 800bc7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc80:	ed93 7b00 	vldr	d7, [r3]
 800bc84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bc88:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bc8c:	eeb0 8a47 	vmov.f32	s16, s14
 800bc90:	eef0 8a67 	vmov.f32	s17, s15
 800bc94:	d016      	beq.n	800bcc4 <_dtoa_r+0x384>
 800bc96:	4bbc      	ldr	r3, [pc, #752]	; (800bf88 <_dtoa_r+0x648>)
 800bc98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bca0:	f7f4 fdfc 	bl	800089c <__aeabi_ddiv>
 800bca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bca8:	f007 070f 	and.w	r7, r7, #15
 800bcac:	2503      	movs	r5, #3
 800bcae:	4eb6      	ldr	r6, [pc, #728]	; (800bf88 <_dtoa_r+0x648>)
 800bcb0:	b957      	cbnz	r7, 800bcc8 <_dtoa_r+0x388>
 800bcb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb6:	ec53 2b18 	vmov	r2, r3, d8
 800bcba:	f7f4 fdef 	bl	800089c <__aeabi_ddiv>
 800bcbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcc2:	e029      	b.n	800bd18 <_dtoa_r+0x3d8>
 800bcc4:	2502      	movs	r5, #2
 800bcc6:	e7f2      	b.n	800bcae <_dtoa_r+0x36e>
 800bcc8:	07f9      	lsls	r1, r7, #31
 800bcca:	d508      	bpl.n	800bcde <_dtoa_r+0x39e>
 800bccc:	ec51 0b18 	vmov	r0, r1, d8
 800bcd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcd4:	f7f4 fcb8 	bl	8000648 <__aeabi_dmul>
 800bcd8:	ec41 0b18 	vmov	d8, r0, r1
 800bcdc:	3501      	adds	r5, #1
 800bcde:	107f      	asrs	r7, r7, #1
 800bce0:	3608      	adds	r6, #8
 800bce2:	e7e5      	b.n	800bcb0 <_dtoa_r+0x370>
 800bce4:	f000 80a6 	beq.w	800be34 <_dtoa_r+0x4f4>
 800bce8:	f1ca 0600 	rsb	r6, sl, #0
 800bcec:	4ba5      	ldr	r3, [pc, #660]	; (800bf84 <_dtoa_r+0x644>)
 800bcee:	4fa6      	ldr	r7, [pc, #664]	; (800bf88 <_dtoa_r+0x648>)
 800bcf0:	f006 020f 	and.w	r2, r6, #15
 800bcf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd00:	f7f4 fca2 	bl	8000648 <__aeabi_dmul>
 800bd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd08:	1136      	asrs	r6, r6, #4
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	2502      	movs	r5, #2
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	f040 8085 	bne.w	800be1e <_dtoa_r+0x4de>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1d2      	bne.n	800bcbe <_dtoa_r+0x37e>
 800bd18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f000 808c 	beq.w	800be38 <_dtoa_r+0x4f8>
 800bd20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd24:	4b99      	ldr	r3, [pc, #612]	; (800bf8c <_dtoa_r+0x64c>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 fefe 	bl	8000b2c <__aeabi_dcmplt>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f000 8081 	beq.w	800be38 <_dtoa_r+0x4f8>
 800bd36:	9b01      	ldr	r3, [sp, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d07d      	beq.n	800be38 <_dtoa_r+0x4f8>
 800bd3c:	f1b9 0f00 	cmp.w	r9, #0
 800bd40:	dd3c      	ble.n	800bdbc <_dtoa_r+0x47c>
 800bd42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bd46:	9307      	str	r3, [sp, #28]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4b91      	ldr	r3, [pc, #580]	; (800bf90 <_dtoa_r+0x650>)
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4639      	mov	r1, r7
 800bd50:	f7f4 fc7a 	bl	8000648 <__aeabi_dmul>
 800bd54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd58:	3501      	adds	r5, #1
 800bd5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bd5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd62:	4628      	mov	r0, r5
 800bd64:	f7f4 fc06 	bl	8000574 <__aeabi_i2d>
 800bd68:	4632      	mov	r2, r6
 800bd6a:	463b      	mov	r3, r7
 800bd6c:	f7f4 fc6c 	bl	8000648 <__aeabi_dmul>
 800bd70:	4b88      	ldr	r3, [pc, #544]	; (800bf94 <_dtoa_r+0x654>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	f7f4 fab2 	bl	80002dc <__adddf3>
 800bd78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd80:	9303      	str	r3, [sp, #12]
 800bd82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d15c      	bne.n	800be42 <_dtoa_r+0x502>
 800bd88:	4b83      	ldr	r3, [pc, #524]	; (800bf98 <_dtoa_r+0x658>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 faa2 	bl	80002d8 <__aeabi_dsub>
 800bd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd98:	4606      	mov	r6, r0
 800bd9a:	460f      	mov	r7, r1
 800bd9c:	f7f4 fee4 	bl	8000b68 <__aeabi_dcmpgt>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	f040 8296 	bne.w	800c2d2 <_dtoa_r+0x992>
 800bda6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	f7f4 febb 	bl	8000b2c <__aeabi_dcmplt>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f040 8288 	bne.w	800c2cc <_dtoa_r+0x98c>
 800bdbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bdc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f2c0 8158 	blt.w	800c07c <_dtoa_r+0x73c>
 800bdcc:	f1ba 0f0e 	cmp.w	sl, #14
 800bdd0:	f300 8154 	bgt.w	800c07c <_dtoa_r+0x73c>
 800bdd4:	4b6b      	ldr	r3, [pc, #428]	; (800bf84 <_dtoa_r+0x644>)
 800bdd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bdda:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f280 80e3 	bge.w	800bfac <_dtoa_r+0x66c>
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f300 80df 	bgt.w	800bfac <_dtoa_r+0x66c>
 800bdee:	f040 826d 	bne.w	800c2cc <_dtoa_r+0x98c>
 800bdf2:	4b69      	ldr	r3, [pc, #420]	; (800bf98 <_dtoa_r+0x658>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 fc25 	bl	8000648 <__aeabi_dmul>
 800bdfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be02:	f7f4 fea7 	bl	8000b54 <__aeabi_dcmpge>
 800be06:	9e01      	ldr	r6, [sp, #4]
 800be08:	4637      	mov	r7, r6
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f040 8243 	bne.w	800c296 <_dtoa_r+0x956>
 800be10:	9d00      	ldr	r5, [sp, #0]
 800be12:	2331      	movs	r3, #49	; 0x31
 800be14:	f805 3b01 	strb.w	r3, [r5], #1
 800be18:	f10a 0a01 	add.w	sl, sl, #1
 800be1c:	e23f      	b.n	800c29e <_dtoa_r+0x95e>
 800be1e:	07f2      	lsls	r2, r6, #31
 800be20:	d505      	bpl.n	800be2e <_dtoa_r+0x4ee>
 800be22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be26:	f7f4 fc0f 	bl	8000648 <__aeabi_dmul>
 800be2a:	3501      	adds	r5, #1
 800be2c:	2301      	movs	r3, #1
 800be2e:	1076      	asrs	r6, r6, #1
 800be30:	3708      	adds	r7, #8
 800be32:	e76c      	b.n	800bd0e <_dtoa_r+0x3ce>
 800be34:	2502      	movs	r5, #2
 800be36:	e76f      	b.n	800bd18 <_dtoa_r+0x3d8>
 800be38:	9b01      	ldr	r3, [sp, #4]
 800be3a:	f8cd a01c 	str.w	sl, [sp, #28]
 800be3e:	930c      	str	r3, [sp, #48]	; 0x30
 800be40:	e78d      	b.n	800bd5e <_dtoa_r+0x41e>
 800be42:	9900      	ldr	r1, [sp, #0]
 800be44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800be46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be48:	4b4e      	ldr	r3, [pc, #312]	; (800bf84 <_dtoa_r+0x644>)
 800be4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be4e:	4401      	add	r1, r0
 800be50:	9102      	str	r1, [sp, #8]
 800be52:	9908      	ldr	r1, [sp, #32]
 800be54:	eeb0 8a47 	vmov.f32	s16, s14
 800be58:	eef0 8a67 	vmov.f32	s17, s15
 800be5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be64:	2900      	cmp	r1, #0
 800be66:	d045      	beq.n	800bef4 <_dtoa_r+0x5b4>
 800be68:	494c      	ldr	r1, [pc, #304]	; (800bf9c <_dtoa_r+0x65c>)
 800be6a:	2000      	movs	r0, #0
 800be6c:	f7f4 fd16 	bl	800089c <__aeabi_ddiv>
 800be70:	ec53 2b18 	vmov	r2, r3, d8
 800be74:	f7f4 fa30 	bl	80002d8 <__aeabi_dsub>
 800be78:	9d00      	ldr	r5, [sp, #0]
 800be7a:	ec41 0b18 	vmov	d8, r0, r1
 800be7e:	4639      	mov	r1, r7
 800be80:	4630      	mov	r0, r6
 800be82:	f7f4 fe91 	bl	8000ba8 <__aeabi_d2iz>
 800be86:	900c      	str	r0, [sp, #48]	; 0x30
 800be88:	f7f4 fb74 	bl	8000574 <__aeabi_i2d>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 fa20 	bl	80002d8 <__aeabi_dsub>
 800be98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be9a:	3330      	adds	r3, #48	; 0x30
 800be9c:	f805 3b01 	strb.w	r3, [r5], #1
 800bea0:	ec53 2b18 	vmov	r2, r3, d8
 800bea4:	4606      	mov	r6, r0
 800bea6:	460f      	mov	r7, r1
 800bea8:	f7f4 fe40 	bl	8000b2c <__aeabi_dcmplt>
 800beac:	2800      	cmp	r0, #0
 800beae:	d165      	bne.n	800bf7c <_dtoa_r+0x63c>
 800beb0:	4632      	mov	r2, r6
 800beb2:	463b      	mov	r3, r7
 800beb4:	4935      	ldr	r1, [pc, #212]	; (800bf8c <_dtoa_r+0x64c>)
 800beb6:	2000      	movs	r0, #0
 800beb8:	f7f4 fa0e 	bl	80002d8 <__aeabi_dsub>
 800bebc:	ec53 2b18 	vmov	r2, r3, d8
 800bec0:	f7f4 fe34 	bl	8000b2c <__aeabi_dcmplt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f040 80b9 	bne.w	800c03c <_dtoa_r+0x6fc>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	429d      	cmp	r5, r3
 800bece:	f43f af75 	beq.w	800bdbc <_dtoa_r+0x47c>
 800bed2:	4b2f      	ldr	r3, [pc, #188]	; (800bf90 <_dtoa_r+0x650>)
 800bed4:	ec51 0b18 	vmov	r0, r1, d8
 800bed8:	2200      	movs	r2, #0
 800beda:	f7f4 fbb5 	bl	8000648 <__aeabi_dmul>
 800bede:	4b2c      	ldr	r3, [pc, #176]	; (800bf90 <_dtoa_r+0x650>)
 800bee0:	ec41 0b18 	vmov	d8, r0, r1
 800bee4:	2200      	movs	r2, #0
 800bee6:	4630      	mov	r0, r6
 800bee8:	4639      	mov	r1, r7
 800beea:	f7f4 fbad 	bl	8000648 <__aeabi_dmul>
 800beee:	4606      	mov	r6, r0
 800bef0:	460f      	mov	r7, r1
 800bef2:	e7c4      	b.n	800be7e <_dtoa_r+0x53e>
 800bef4:	ec51 0b17 	vmov	r0, r1, d7
 800bef8:	f7f4 fba6 	bl	8000648 <__aeabi_dmul>
 800befc:	9b02      	ldr	r3, [sp, #8]
 800befe:	9d00      	ldr	r5, [sp, #0]
 800bf00:	930c      	str	r3, [sp, #48]	; 0x30
 800bf02:	ec41 0b18 	vmov	d8, r0, r1
 800bf06:	4639      	mov	r1, r7
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7f4 fe4d 	bl	8000ba8 <__aeabi_d2iz>
 800bf0e:	9011      	str	r0, [sp, #68]	; 0x44
 800bf10:	f7f4 fb30 	bl	8000574 <__aeabi_i2d>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4630      	mov	r0, r6
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	f7f4 f9dc 	bl	80002d8 <__aeabi_dsub>
 800bf20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf22:	3330      	adds	r3, #48	; 0x30
 800bf24:	f805 3b01 	strb.w	r3, [r5], #1
 800bf28:	9b02      	ldr	r3, [sp, #8]
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	460f      	mov	r7, r1
 800bf30:	f04f 0200 	mov.w	r2, #0
 800bf34:	d134      	bne.n	800bfa0 <_dtoa_r+0x660>
 800bf36:	4b19      	ldr	r3, [pc, #100]	; (800bf9c <_dtoa_r+0x65c>)
 800bf38:	ec51 0b18 	vmov	r0, r1, d8
 800bf3c:	f7f4 f9ce 	bl	80002dc <__adddf3>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4630      	mov	r0, r6
 800bf46:	4639      	mov	r1, r7
 800bf48:	f7f4 fe0e 	bl	8000b68 <__aeabi_dcmpgt>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d175      	bne.n	800c03c <_dtoa_r+0x6fc>
 800bf50:	ec53 2b18 	vmov	r2, r3, d8
 800bf54:	4911      	ldr	r1, [pc, #68]	; (800bf9c <_dtoa_r+0x65c>)
 800bf56:	2000      	movs	r0, #0
 800bf58:	f7f4 f9be 	bl	80002d8 <__aeabi_dsub>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 fde2 	bl	8000b2c <__aeabi_dcmplt>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	f43f af27 	beq.w	800bdbc <_dtoa_r+0x47c>
 800bf6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf70:	1e6b      	subs	r3, r5, #1
 800bf72:	930c      	str	r3, [sp, #48]	; 0x30
 800bf74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf78:	2b30      	cmp	r3, #48	; 0x30
 800bf7a:	d0f8      	beq.n	800bf6e <_dtoa_r+0x62e>
 800bf7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bf80:	e04a      	b.n	800c018 <_dtoa_r+0x6d8>
 800bf82:	bf00      	nop
 800bf84:	0800ff88 	.word	0x0800ff88
 800bf88:	0800ff60 	.word	0x0800ff60
 800bf8c:	3ff00000 	.word	0x3ff00000
 800bf90:	40240000 	.word	0x40240000
 800bf94:	401c0000 	.word	0x401c0000
 800bf98:	40140000 	.word	0x40140000
 800bf9c:	3fe00000 	.word	0x3fe00000
 800bfa0:	4baf      	ldr	r3, [pc, #700]	; (800c260 <_dtoa_r+0x920>)
 800bfa2:	f7f4 fb51 	bl	8000648 <__aeabi_dmul>
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460f      	mov	r7, r1
 800bfaa:	e7ac      	b.n	800bf06 <_dtoa_r+0x5c6>
 800bfac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bfb0:	9d00      	ldr	r5, [sp, #0]
 800bfb2:	4642      	mov	r2, r8
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	f7f4 fc6f 	bl	800089c <__aeabi_ddiv>
 800bfbe:	f7f4 fdf3 	bl	8000ba8 <__aeabi_d2iz>
 800bfc2:	9002      	str	r0, [sp, #8]
 800bfc4:	f7f4 fad6 	bl	8000574 <__aeabi_i2d>
 800bfc8:	4642      	mov	r2, r8
 800bfca:	464b      	mov	r3, r9
 800bfcc:	f7f4 fb3c 	bl	8000648 <__aeabi_dmul>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f7f4 f97e 	bl	80002d8 <__aeabi_dsub>
 800bfdc:	9e02      	ldr	r6, [sp, #8]
 800bfde:	9f01      	ldr	r7, [sp, #4]
 800bfe0:	3630      	adds	r6, #48	; 0x30
 800bfe2:	f805 6b01 	strb.w	r6, [r5], #1
 800bfe6:	9e00      	ldr	r6, [sp, #0]
 800bfe8:	1bae      	subs	r6, r5, r6
 800bfea:	42b7      	cmp	r7, r6
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	d137      	bne.n	800c062 <_dtoa_r+0x722>
 800bff2:	f7f4 f973 	bl	80002dc <__adddf3>
 800bff6:	4642      	mov	r2, r8
 800bff8:	464b      	mov	r3, r9
 800bffa:	4606      	mov	r6, r0
 800bffc:	460f      	mov	r7, r1
 800bffe:	f7f4 fdb3 	bl	8000b68 <__aeabi_dcmpgt>
 800c002:	b9c8      	cbnz	r0, 800c038 <_dtoa_r+0x6f8>
 800c004:	4642      	mov	r2, r8
 800c006:	464b      	mov	r3, r9
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 fd84 	bl	8000b18 <__aeabi_dcmpeq>
 800c010:	b110      	cbz	r0, 800c018 <_dtoa_r+0x6d8>
 800c012:	9b02      	ldr	r3, [sp, #8]
 800c014:	07d9      	lsls	r1, r3, #31
 800c016:	d40f      	bmi.n	800c038 <_dtoa_r+0x6f8>
 800c018:	4620      	mov	r0, r4
 800c01a:	4659      	mov	r1, fp
 800c01c:	f000 fc0c 	bl	800c838 <_Bfree>
 800c020:	2300      	movs	r3, #0
 800c022:	702b      	strb	r3, [r5, #0]
 800c024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c026:	f10a 0001 	add.w	r0, sl, #1
 800c02a:	6018      	str	r0, [r3, #0]
 800c02c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f43f acd8 	beq.w	800b9e4 <_dtoa_r+0xa4>
 800c034:	601d      	str	r5, [r3, #0]
 800c036:	e4d5      	b.n	800b9e4 <_dtoa_r+0xa4>
 800c038:	f8cd a01c 	str.w	sl, [sp, #28]
 800c03c:	462b      	mov	r3, r5
 800c03e:	461d      	mov	r5, r3
 800c040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c044:	2a39      	cmp	r2, #57	; 0x39
 800c046:	d108      	bne.n	800c05a <_dtoa_r+0x71a>
 800c048:	9a00      	ldr	r2, [sp, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d1f7      	bne.n	800c03e <_dtoa_r+0x6fe>
 800c04e:	9a07      	ldr	r2, [sp, #28]
 800c050:	9900      	ldr	r1, [sp, #0]
 800c052:	3201      	adds	r2, #1
 800c054:	9207      	str	r2, [sp, #28]
 800c056:	2230      	movs	r2, #48	; 0x30
 800c058:	700a      	strb	r2, [r1, #0]
 800c05a:	781a      	ldrb	r2, [r3, #0]
 800c05c:	3201      	adds	r2, #1
 800c05e:	701a      	strb	r2, [r3, #0]
 800c060:	e78c      	b.n	800bf7c <_dtoa_r+0x63c>
 800c062:	4b7f      	ldr	r3, [pc, #508]	; (800c260 <_dtoa_r+0x920>)
 800c064:	2200      	movs	r2, #0
 800c066:	f7f4 faef 	bl	8000648 <__aeabi_dmul>
 800c06a:	2200      	movs	r2, #0
 800c06c:	2300      	movs	r3, #0
 800c06e:	4606      	mov	r6, r0
 800c070:	460f      	mov	r7, r1
 800c072:	f7f4 fd51 	bl	8000b18 <__aeabi_dcmpeq>
 800c076:	2800      	cmp	r0, #0
 800c078:	d09b      	beq.n	800bfb2 <_dtoa_r+0x672>
 800c07a:	e7cd      	b.n	800c018 <_dtoa_r+0x6d8>
 800c07c:	9a08      	ldr	r2, [sp, #32]
 800c07e:	2a00      	cmp	r2, #0
 800c080:	f000 80c4 	beq.w	800c20c <_dtoa_r+0x8cc>
 800c084:	9a05      	ldr	r2, [sp, #20]
 800c086:	2a01      	cmp	r2, #1
 800c088:	f300 80a8 	bgt.w	800c1dc <_dtoa_r+0x89c>
 800c08c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c08e:	2a00      	cmp	r2, #0
 800c090:	f000 80a0 	beq.w	800c1d4 <_dtoa_r+0x894>
 800c094:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c098:	9e06      	ldr	r6, [sp, #24]
 800c09a:	4645      	mov	r5, r8
 800c09c:	9a04      	ldr	r2, [sp, #16]
 800c09e:	2101      	movs	r1, #1
 800c0a0:	441a      	add	r2, r3
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	4498      	add	r8, r3
 800c0a6:	9204      	str	r2, [sp, #16]
 800c0a8:	f000 fc82 	bl	800c9b0 <__i2b>
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	2d00      	cmp	r5, #0
 800c0b0:	dd0b      	ble.n	800c0ca <_dtoa_r+0x78a>
 800c0b2:	9b04      	ldr	r3, [sp, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dd08      	ble.n	800c0ca <_dtoa_r+0x78a>
 800c0b8:	42ab      	cmp	r3, r5
 800c0ba:	9a04      	ldr	r2, [sp, #16]
 800c0bc:	bfa8      	it	ge
 800c0be:	462b      	movge	r3, r5
 800c0c0:	eba8 0803 	sub.w	r8, r8, r3
 800c0c4:	1aed      	subs	r5, r5, r3
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	9304      	str	r3, [sp, #16]
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	b1fb      	cbz	r3, 800c10e <_dtoa_r+0x7ce>
 800c0ce:	9b08      	ldr	r3, [sp, #32]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 809f 	beq.w	800c214 <_dtoa_r+0x8d4>
 800c0d6:	2e00      	cmp	r6, #0
 800c0d8:	dd11      	ble.n	800c0fe <_dtoa_r+0x7be>
 800c0da:	4639      	mov	r1, r7
 800c0dc:	4632      	mov	r2, r6
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 fd22 	bl	800cb28 <__pow5mult>
 800c0e4:	465a      	mov	r2, fp
 800c0e6:	4601      	mov	r1, r0
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f000 fc76 	bl	800c9dc <__multiply>
 800c0f0:	4659      	mov	r1, fp
 800c0f2:	9007      	str	r0, [sp, #28]
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f000 fb9f 	bl	800c838 <_Bfree>
 800c0fa:	9b07      	ldr	r3, [sp, #28]
 800c0fc:	469b      	mov	fp, r3
 800c0fe:	9b06      	ldr	r3, [sp, #24]
 800c100:	1b9a      	subs	r2, r3, r6
 800c102:	d004      	beq.n	800c10e <_dtoa_r+0x7ce>
 800c104:	4659      	mov	r1, fp
 800c106:	4620      	mov	r0, r4
 800c108:	f000 fd0e 	bl	800cb28 <__pow5mult>
 800c10c:	4683      	mov	fp, r0
 800c10e:	2101      	movs	r1, #1
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fc4d 	bl	800c9b0 <__i2b>
 800c116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c118:	2b00      	cmp	r3, #0
 800c11a:	4606      	mov	r6, r0
 800c11c:	dd7c      	ble.n	800c218 <_dtoa_r+0x8d8>
 800c11e:	461a      	mov	r2, r3
 800c120:	4601      	mov	r1, r0
 800c122:	4620      	mov	r0, r4
 800c124:	f000 fd00 	bl	800cb28 <__pow5mult>
 800c128:	9b05      	ldr	r3, [sp, #20]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	4606      	mov	r6, r0
 800c12e:	dd76      	ble.n	800c21e <_dtoa_r+0x8de>
 800c130:	2300      	movs	r3, #0
 800c132:	9306      	str	r3, [sp, #24]
 800c134:	6933      	ldr	r3, [r6, #16]
 800c136:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c13a:	6918      	ldr	r0, [r3, #16]
 800c13c:	f000 fbe8 	bl	800c910 <__hi0bits>
 800c140:	f1c0 0020 	rsb	r0, r0, #32
 800c144:	9b04      	ldr	r3, [sp, #16]
 800c146:	4418      	add	r0, r3
 800c148:	f010 001f 	ands.w	r0, r0, #31
 800c14c:	f000 8086 	beq.w	800c25c <_dtoa_r+0x91c>
 800c150:	f1c0 0320 	rsb	r3, r0, #32
 800c154:	2b04      	cmp	r3, #4
 800c156:	dd7f      	ble.n	800c258 <_dtoa_r+0x918>
 800c158:	f1c0 001c 	rsb	r0, r0, #28
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	4403      	add	r3, r0
 800c160:	4480      	add	r8, r0
 800c162:	4405      	add	r5, r0
 800c164:	9304      	str	r3, [sp, #16]
 800c166:	f1b8 0f00 	cmp.w	r8, #0
 800c16a:	dd05      	ble.n	800c178 <_dtoa_r+0x838>
 800c16c:	4659      	mov	r1, fp
 800c16e:	4642      	mov	r2, r8
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fd33 	bl	800cbdc <__lshift>
 800c176:	4683      	mov	fp, r0
 800c178:	9b04      	ldr	r3, [sp, #16]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	dd05      	ble.n	800c18a <_dtoa_r+0x84a>
 800c17e:	4631      	mov	r1, r6
 800c180:	461a      	mov	r2, r3
 800c182:	4620      	mov	r0, r4
 800c184:	f000 fd2a 	bl	800cbdc <__lshift>
 800c188:	4606      	mov	r6, r0
 800c18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d069      	beq.n	800c264 <_dtoa_r+0x924>
 800c190:	4631      	mov	r1, r6
 800c192:	4658      	mov	r0, fp
 800c194:	f000 fd8e 	bl	800ccb4 <__mcmp>
 800c198:	2800      	cmp	r0, #0
 800c19a:	da63      	bge.n	800c264 <_dtoa_r+0x924>
 800c19c:	2300      	movs	r3, #0
 800c19e:	4659      	mov	r1, fp
 800c1a0:	220a      	movs	r2, #10
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 fb6a 	bl	800c87c <__multadd>
 800c1a8:	9b08      	ldr	r3, [sp, #32]
 800c1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1ae:	4683      	mov	fp, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 818f 	beq.w	800c4d4 <_dtoa_r+0xb94>
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	220a      	movs	r2, #10
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 fb5d 	bl	800c87c <__multadd>
 800c1c2:	f1b9 0f00 	cmp.w	r9, #0
 800c1c6:	4607      	mov	r7, r0
 800c1c8:	f300 808e 	bgt.w	800c2e8 <_dtoa_r+0x9a8>
 800c1cc:	9b05      	ldr	r3, [sp, #20]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	dc50      	bgt.n	800c274 <_dtoa_r+0x934>
 800c1d2:	e089      	b.n	800c2e8 <_dtoa_r+0x9a8>
 800c1d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1da:	e75d      	b.n	800c098 <_dtoa_r+0x758>
 800c1dc:	9b01      	ldr	r3, [sp, #4]
 800c1de:	1e5e      	subs	r6, r3, #1
 800c1e0:	9b06      	ldr	r3, [sp, #24]
 800c1e2:	42b3      	cmp	r3, r6
 800c1e4:	bfbf      	itttt	lt
 800c1e6:	9b06      	ldrlt	r3, [sp, #24]
 800c1e8:	9606      	strlt	r6, [sp, #24]
 800c1ea:	1af2      	sublt	r2, r6, r3
 800c1ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c1ee:	bfb6      	itet	lt
 800c1f0:	189b      	addlt	r3, r3, r2
 800c1f2:	1b9e      	subge	r6, r3, r6
 800c1f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c1f6:	9b01      	ldr	r3, [sp, #4]
 800c1f8:	bfb8      	it	lt
 800c1fa:	2600      	movlt	r6, #0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	bfb5      	itete	lt
 800c200:	eba8 0503 	sublt.w	r5, r8, r3
 800c204:	9b01      	ldrge	r3, [sp, #4]
 800c206:	2300      	movlt	r3, #0
 800c208:	4645      	movge	r5, r8
 800c20a:	e747      	b.n	800c09c <_dtoa_r+0x75c>
 800c20c:	9e06      	ldr	r6, [sp, #24]
 800c20e:	9f08      	ldr	r7, [sp, #32]
 800c210:	4645      	mov	r5, r8
 800c212:	e74c      	b.n	800c0ae <_dtoa_r+0x76e>
 800c214:	9a06      	ldr	r2, [sp, #24]
 800c216:	e775      	b.n	800c104 <_dtoa_r+0x7c4>
 800c218:	9b05      	ldr	r3, [sp, #20]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	dc18      	bgt.n	800c250 <_dtoa_r+0x910>
 800c21e:	9b02      	ldr	r3, [sp, #8]
 800c220:	b9b3      	cbnz	r3, 800c250 <_dtoa_r+0x910>
 800c222:	9b03      	ldr	r3, [sp, #12]
 800c224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c228:	b9a3      	cbnz	r3, 800c254 <_dtoa_r+0x914>
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c230:	0d1b      	lsrs	r3, r3, #20
 800c232:	051b      	lsls	r3, r3, #20
 800c234:	b12b      	cbz	r3, 800c242 <_dtoa_r+0x902>
 800c236:	9b04      	ldr	r3, [sp, #16]
 800c238:	3301      	adds	r3, #1
 800c23a:	9304      	str	r3, [sp, #16]
 800c23c:	f108 0801 	add.w	r8, r8, #1
 800c240:	2301      	movs	r3, #1
 800c242:	9306      	str	r3, [sp, #24]
 800c244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c246:	2b00      	cmp	r3, #0
 800c248:	f47f af74 	bne.w	800c134 <_dtoa_r+0x7f4>
 800c24c:	2001      	movs	r0, #1
 800c24e:	e779      	b.n	800c144 <_dtoa_r+0x804>
 800c250:	2300      	movs	r3, #0
 800c252:	e7f6      	b.n	800c242 <_dtoa_r+0x902>
 800c254:	9b02      	ldr	r3, [sp, #8]
 800c256:	e7f4      	b.n	800c242 <_dtoa_r+0x902>
 800c258:	d085      	beq.n	800c166 <_dtoa_r+0x826>
 800c25a:	4618      	mov	r0, r3
 800c25c:	301c      	adds	r0, #28
 800c25e:	e77d      	b.n	800c15c <_dtoa_r+0x81c>
 800c260:	40240000 	.word	0x40240000
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	dc38      	bgt.n	800c2dc <_dtoa_r+0x99c>
 800c26a:	9b05      	ldr	r3, [sp, #20]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	dd35      	ble.n	800c2dc <_dtoa_r+0x99c>
 800c270:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c274:	f1b9 0f00 	cmp.w	r9, #0
 800c278:	d10d      	bne.n	800c296 <_dtoa_r+0x956>
 800c27a:	4631      	mov	r1, r6
 800c27c:	464b      	mov	r3, r9
 800c27e:	2205      	movs	r2, #5
 800c280:	4620      	mov	r0, r4
 800c282:	f000 fafb 	bl	800c87c <__multadd>
 800c286:	4601      	mov	r1, r0
 800c288:	4606      	mov	r6, r0
 800c28a:	4658      	mov	r0, fp
 800c28c:	f000 fd12 	bl	800ccb4 <__mcmp>
 800c290:	2800      	cmp	r0, #0
 800c292:	f73f adbd 	bgt.w	800be10 <_dtoa_r+0x4d0>
 800c296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c298:	9d00      	ldr	r5, [sp, #0]
 800c29a:	ea6f 0a03 	mvn.w	sl, r3
 800c29e:	f04f 0800 	mov.w	r8, #0
 800c2a2:	4631      	mov	r1, r6
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 fac7 	bl	800c838 <_Bfree>
 800c2aa:	2f00      	cmp	r7, #0
 800c2ac:	f43f aeb4 	beq.w	800c018 <_dtoa_r+0x6d8>
 800c2b0:	f1b8 0f00 	cmp.w	r8, #0
 800c2b4:	d005      	beq.n	800c2c2 <_dtoa_r+0x982>
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d003      	beq.n	800c2c2 <_dtoa_r+0x982>
 800c2ba:	4641      	mov	r1, r8
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fabb 	bl	800c838 <_Bfree>
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f000 fab7 	bl	800c838 <_Bfree>
 800c2ca:	e6a5      	b.n	800c018 <_dtoa_r+0x6d8>
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	4637      	mov	r7, r6
 800c2d0:	e7e1      	b.n	800c296 <_dtoa_r+0x956>
 800c2d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c2d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c2d8:	4637      	mov	r7, r6
 800c2da:	e599      	b.n	800be10 <_dtoa_r+0x4d0>
 800c2dc:	9b08      	ldr	r3, [sp, #32]
 800c2de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 80fd 	beq.w	800c4e2 <_dtoa_r+0xba2>
 800c2e8:	2d00      	cmp	r5, #0
 800c2ea:	dd05      	ble.n	800c2f8 <_dtoa_r+0x9b8>
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	462a      	mov	r2, r5
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f000 fc73 	bl	800cbdc <__lshift>
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	9b06      	ldr	r3, [sp, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d05c      	beq.n	800c3b8 <_dtoa_r+0xa78>
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4620      	mov	r0, r4
 800c302:	f000 fa59 	bl	800c7b8 <_Balloc>
 800c306:	4605      	mov	r5, r0
 800c308:	b928      	cbnz	r0, 800c316 <_dtoa_r+0x9d6>
 800c30a:	4b80      	ldr	r3, [pc, #512]	; (800c50c <_dtoa_r+0xbcc>)
 800c30c:	4602      	mov	r2, r0
 800c30e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c312:	f7ff bb2e 	b.w	800b972 <_dtoa_r+0x32>
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	3202      	adds	r2, #2
 800c31a:	0092      	lsls	r2, r2, #2
 800c31c:	f107 010c 	add.w	r1, r7, #12
 800c320:	300c      	adds	r0, #12
 800c322:	f7fe fb76 	bl	800aa12 <memcpy>
 800c326:	2201      	movs	r2, #1
 800c328:	4629      	mov	r1, r5
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 fc56 	bl	800cbdc <__lshift>
 800c330:	9b00      	ldr	r3, [sp, #0]
 800c332:	3301      	adds	r3, #1
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	9b00      	ldr	r3, [sp, #0]
 800c338:	444b      	add	r3, r9
 800c33a:	9307      	str	r3, [sp, #28]
 800c33c:	9b02      	ldr	r3, [sp, #8]
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	46b8      	mov	r8, r7
 800c344:	9306      	str	r3, [sp, #24]
 800c346:	4607      	mov	r7, r0
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	4631      	mov	r1, r6
 800c34c:	3b01      	subs	r3, #1
 800c34e:	4658      	mov	r0, fp
 800c350:	9302      	str	r3, [sp, #8]
 800c352:	f7ff fa67 	bl	800b824 <quorem>
 800c356:	4603      	mov	r3, r0
 800c358:	3330      	adds	r3, #48	; 0x30
 800c35a:	9004      	str	r0, [sp, #16]
 800c35c:	4641      	mov	r1, r8
 800c35e:	4658      	mov	r0, fp
 800c360:	9308      	str	r3, [sp, #32]
 800c362:	f000 fca7 	bl	800ccb4 <__mcmp>
 800c366:	463a      	mov	r2, r7
 800c368:	4681      	mov	r9, r0
 800c36a:	4631      	mov	r1, r6
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 fcbd 	bl	800ccec <__mdiff>
 800c372:	68c2      	ldr	r2, [r0, #12]
 800c374:	9b08      	ldr	r3, [sp, #32]
 800c376:	4605      	mov	r5, r0
 800c378:	bb02      	cbnz	r2, 800c3bc <_dtoa_r+0xa7c>
 800c37a:	4601      	mov	r1, r0
 800c37c:	4658      	mov	r0, fp
 800c37e:	f000 fc99 	bl	800ccb4 <__mcmp>
 800c382:	9b08      	ldr	r3, [sp, #32]
 800c384:	4602      	mov	r2, r0
 800c386:	4629      	mov	r1, r5
 800c388:	4620      	mov	r0, r4
 800c38a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c38e:	f000 fa53 	bl	800c838 <_Bfree>
 800c392:	9b05      	ldr	r3, [sp, #20]
 800c394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c396:	9d01      	ldr	r5, [sp, #4]
 800c398:	ea43 0102 	orr.w	r1, r3, r2
 800c39c:	9b06      	ldr	r3, [sp, #24]
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	9b08      	ldr	r3, [sp, #32]
 800c3a2:	d10d      	bne.n	800c3c0 <_dtoa_r+0xa80>
 800c3a4:	2b39      	cmp	r3, #57	; 0x39
 800c3a6:	d029      	beq.n	800c3fc <_dtoa_r+0xabc>
 800c3a8:	f1b9 0f00 	cmp.w	r9, #0
 800c3ac:	dd01      	ble.n	800c3b2 <_dtoa_r+0xa72>
 800c3ae:	9b04      	ldr	r3, [sp, #16]
 800c3b0:	3331      	adds	r3, #49	; 0x31
 800c3b2:	9a02      	ldr	r2, [sp, #8]
 800c3b4:	7013      	strb	r3, [r2, #0]
 800c3b6:	e774      	b.n	800c2a2 <_dtoa_r+0x962>
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	e7b9      	b.n	800c330 <_dtoa_r+0x9f0>
 800c3bc:	2201      	movs	r2, #1
 800c3be:	e7e2      	b.n	800c386 <_dtoa_r+0xa46>
 800c3c0:	f1b9 0f00 	cmp.w	r9, #0
 800c3c4:	db06      	blt.n	800c3d4 <_dtoa_r+0xa94>
 800c3c6:	9905      	ldr	r1, [sp, #20]
 800c3c8:	ea41 0909 	orr.w	r9, r1, r9
 800c3cc:	9906      	ldr	r1, [sp, #24]
 800c3ce:	ea59 0101 	orrs.w	r1, r9, r1
 800c3d2:	d120      	bne.n	800c416 <_dtoa_r+0xad6>
 800c3d4:	2a00      	cmp	r2, #0
 800c3d6:	ddec      	ble.n	800c3b2 <_dtoa_r+0xa72>
 800c3d8:	4659      	mov	r1, fp
 800c3da:	2201      	movs	r2, #1
 800c3dc:	4620      	mov	r0, r4
 800c3de:	9301      	str	r3, [sp, #4]
 800c3e0:	f000 fbfc 	bl	800cbdc <__lshift>
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4683      	mov	fp, r0
 800c3e8:	f000 fc64 	bl	800ccb4 <__mcmp>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	9b01      	ldr	r3, [sp, #4]
 800c3f0:	dc02      	bgt.n	800c3f8 <_dtoa_r+0xab8>
 800c3f2:	d1de      	bne.n	800c3b2 <_dtoa_r+0xa72>
 800c3f4:	07da      	lsls	r2, r3, #31
 800c3f6:	d5dc      	bpl.n	800c3b2 <_dtoa_r+0xa72>
 800c3f8:	2b39      	cmp	r3, #57	; 0x39
 800c3fa:	d1d8      	bne.n	800c3ae <_dtoa_r+0xa6e>
 800c3fc:	9a02      	ldr	r2, [sp, #8]
 800c3fe:	2339      	movs	r3, #57	; 0x39
 800c400:	7013      	strb	r3, [r2, #0]
 800c402:	462b      	mov	r3, r5
 800c404:	461d      	mov	r5, r3
 800c406:	3b01      	subs	r3, #1
 800c408:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c40c:	2a39      	cmp	r2, #57	; 0x39
 800c40e:	d050      	beq.n	800c4b2 <_dtoa_r+0xb72>
 800c410:	3201      	adds	r2, #1
 800c412:	701a      	strb	r2, [r3, #0]
 800c414:	e745      	b.n	800c2a2 <_dtoa_r+0x962>
 800c416:	2a00      	cmp	r2, #0
 800c418:	dd03      	ble.n	800c422 <_dtoa_r+0xae2>
 800c41a:	2b39      	cmp	r3, #57	; 0x39
 800c41c:	d0ee      	beq.n	800c3fc <_dtoa_r+0xabc>
 800c41e:	3301      	adds	r3, #1
 800c420:	e7c7      	b.n	800c3b2 <_dtoa_r+0xa72>
 800c422:	9a01      	ldr	r2, [sp, #4]
 800c424:	9907      	ldr	r1, [sp, #28]
 800c426:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c42a:	428a      	cmp	r2, r1
 800c42c:	d02a      	beq.n	800c484 <_dtoa_r+0xb44>
 800c42e:	4659      	mov	r1, fp
 800c430:	2300      	movs	r3, #0
 800c432:	220a      	movs	r2, #10
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fa21 	bl	800c87c <__multadd>
 800c43a:	45b8      	cmp	r8, r7
 800c43c:	4683      	mov	fp, r0
 800c43e:	f04f 0300 	mov.w	r3, #0
 800c442:	f04f 020a 	mov.w	r2, #10
 800c446:	4641      	mov	r1, r8
 800c448:	4620      	mov	r0, r4
 800c44a:	d107      	bne.n	800c45c <_dtoa_r+0xb1c>
 800c44c:	f000 fa16 	bl	800c87c <__multadd>
 800c450:	4680      	mov	r8, r0
 800c452:	4607      	mov	r7, r0
 800c454:	9b01      	ldr	r3, [sp, #4]
 800c456:	3301      	adds	r3, #1
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	e775      	b.n	800c348 <_dtoa_r+0xa08>
 800c45c:	f000 fa0e 	bl	800c87c <__multadd>
 800c460:	4639      	mov	r1, r7
 800c462:	4680      	mov	r8, r0
 800c464:	2300      	movs	r3, #0
 800c466:	220a      	movs	r2, #10
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fa07 	bl	800c87c <__multadd>
 800c46e:	4607      	mov	r7, r0
 800c470:	e7f0      	b.n	800c454 <_dtoa_r+0xb14>
 800c472:	f1b9 0f00 	cmp.w	r9, #0
 800c476:	9a00      	ldr	r2, [sp, #0]
 800c478:	bfcc      	ite	gt
 800c47a:	464d      	movgt	r5, r9
 800c47c:	2501      	movle	r5, #1
 800c47e:	4415      	add	r5, r2
 800c480:	f04f 0800 	mov.w	r8, #0
 800c484:	4659      	mov	r1, fp
 800c486:	2201      	movs	r2, #1
 800c488:	4620      	mov	r0, r4
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	f000 fba6 	bl	800cbdc <__lshift>
 800c490:	4631      	mov	r1, r6
 800c492:	4683      	mov	fp, r0
 800c494:	f000 fc0e 	bl	800ccb4 <__mcmp>
 800c498:	2800      	cmp	r0, #0
 800c49a:	dcb2      	bgt.n	800c402 <_dtoa_r+0xac2>
 800c49c:	d102      	bne.n	800c4a4 <_dtoa_r+0xb64>
 800c49e:	9b01      	ldr	r3, [sp, #4]
 800c4a0:	07db      	lsls	r3, r3, #31
 800c4a2:	d4ae      	bmi.n	800c402 <_dtoa_r+0xac2>
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	461d      	mov	r5, r3
 800c4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4ac:	2a30      	cmp	r2, #48	; 0x30
 800c4ae:	d0fa      	beq.n	800c4a6 <_dtoa_r+0xb66>
 800c4b0:	e6f7      	b.n	800c2a2 <_dtoa_r+0x962>
 800c4b2:	9a00      	ldr	r2, [sp, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d1a5      	bne.n	800c404 <_dtoa_r+0xac4>
 800c4b8:	f10a 0a01 	add.w	sl, sl, #1
 800c4bc:	2331      	movs	r3, #49	; 0x31
 800c4be:	e779      	b.n	800c3b4 <_dtoa_r+0xa74>
 800c4c0:	4b13      	ldr	r3, [pc, #76]	; (800c510 <_dtoa_r+0xbd0>)
 800c4c2:	f7ff baaf 	b.w	800ba24 <_dtoa_r+0xe4>
 800c4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f47f aa86 	bne.w	800b9da <_dtoa_r+0x9a>
 800c4ce:	4b11      	ldr	r3, [pc, #68]	; (800c514 <_dtoa_r+0xbd4>)
 800c4d0:	f7ff baa8 	b.w	800ba24 <_dtoa_r+0xe4>
 800c4d4:	f1b9 0f00 	cmp.w	r9, #0
 800c4d8:	dc03      	bgt.n	800c4e2 <_dtoa_r+0xba2>
 800c4da:	9b05      	ldr	r3, [sp, #20]
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	f73f aec9 	bgt.w	800c274 <_dtoa_r+0x934>
 800c4e2:	9d00      	ldr	r5, [sp, #0]
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4658      	mov	r0, fp
 800c4e8:	f7ff f99c 	bl	800b824 <quorem>
 800c4ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c4f0:	f805 3b01 	strb.w	r3, [r5], #1
 800c4f4:	9a00      	ldr	r2, [sp, #0]
 800c4f6:	1aaa      	subs	r2, r5, r2
 800c4f8:	4591      	cmp	r9, r2
 800c4fa:	ddba      	ble.n	800c472 <_dtoa_r+0xb32>
 800c4fc:	4659      	mov	r1, fp
 800c4fe:	2300      	movs	r3, #0
 800c500:	220a      	movs	r2, #10
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f9ba 	bl	800c87c <__multadd>
 800c508:	4683      	mov	fp, r0
 800c50a:	e7eb      	b.n	800c4e4 <_dtoa_r+0xba4>
 800c50c:	0800feef 	.word	0x0800feef
 800c510:	0800fe48 	.word	0x0800fe48
 800c514:	0800fe6c 	.word	0x0800fe6c

0800c518 <__sflush_r>:
 800c518:	898a      	ldrh	r2, [r1, #12]
 800c51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c51e:	4605      	mov	r5, r0
 800c520:	0710      	lsls	r0, r2, #28
 800c522:	460c      	mov	r4, r1
 800c524:	d458      	bmi.n	800c5d8 <__sflush_r+0xc0>
 800c526:	684b      	ldr	r3, [r1, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	dc05      	bgt.n	800c538 <__sflush_r+0x20>
 800c52c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c52e:	2b00      	cmp	r3, #0
 800c530:	dc02      	bgt.n	800c538 <__sflush_r+0x20>
 800c532:	2000      	movs	r0, #0
 800c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	d0f9      	beq.n	800c532 <__sflush_r+0x1a>
 800c53e:	2300      	movs	r3, #0
 800c540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c544:	682f      	ldr	r7, [r5, #0]
 800c546:	602b      	str	r3, [r5, #0]
 800c548:	d032      	beq.n	800c5b0 <__sflush_r+0x98>
 800c54a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	075a      	lsls	r2, r3, #29
 800c550:	d505      	bpl.n	800c55e <__sflush_r+0x46>
 800c552:	6863      	ldr	r3, [r4, #4]
 800c554:	1ac0      	subs	r0, r0, r3
 800c556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c558:	b10b      	cbz	r3, 800c55e <__sflush_r+0x46>
 800c55a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c55c:	1ac0      	subs	r0, r0, r3
 800c55e:	2300      	movs	r3, #0
 800c560:	4602      	mov	r2, r0
 800c562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c564:	6a21      	ldr	r1, [r4, #32]
 800c566:	4628      	mov	r0, r5
 800c568:	47b0      	blx	r6
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	d106      	bne.n	800c57e <__sflush_r+0x66>
 800c570:	6829      	ldr	r1, [r5, #0]
 800c572:	291d      	cmp	r1, #29
 800c574:	d82c      	bhi.n	800c5d0 <__sflush_r+0xb8>
 800c576:	4a2a      	ldr	r2, [pc, #168]	; (800c620 <__sflush_r+0x108>)
 800c578:	40ca      	lsrs	r2, r1
 800c57a:	07d6      	lsls	r6, r2, #31
 800c57c:	d528      	bpl.n	800c5d0 <__sflush_r+0xb8>
 800c57e:	2200      	movs	r2, #0
 800c580:	6062      	str	r2, [r4, #4]
 800c582:	04d9      	lsls	r1, r3, #19
 800c584:	6922      	ldr	r2, [r4, #16]
 800c586:	6022      	str	r2, [r4, #0]
 800c588:	d504      	bpl.n	800c594 <__sflush_r+0x7c>
 800c58a:	1c42      	adds	r2, r0, #1
 800c58c:	d101      	bne.n	800c592 <__sflush_r+0x7a>
 800c58e:	682b      	ldr	r3, [r5, #0]
 800c590:	b903      	cbnz	r3, 800c594 <__sflush_r+0x7c>
 800c592:	6560      	str	r0, [r4, #84]	; 0x54
 800c594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c596:	602f      	str	r7, [r5, #0]
 800c598:	2900      	cmp	r1, #0
 800c59a:	d0ca      	beq.n	800c532 <__sflush_r+0x1a>
 800c59c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5a0:	4299      	cmp	r1, r3
 800c5a2:	d002      	beq.n	800c5aa <__sflush_r+0x92>
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	f000 fc95 	bl	800ced4 <_free_r>
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	6360      	str	r0, [r4, #52]	; 0x34
 800c5ae:	e7c1      	b.n	800c534 <__sflush_r+0x1c>
 800c5b0:	6a21      	ldr	r1, [r4, #32]
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	47b0      	blx	r6
 800c5b8:	1c41      	adds	r1, r0, #1
 800c5ba:	d1c7      	bne.n	800c54c <__sflush_r+0x34>
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0c4      	beq.n	800c54c <__sflush_r+0x34>
 800c5c2:	2b1d      	cmp	r3, #29
 800c5c4:	d001      	beq.n	800c5ca <__sflush_r+0xb2>
 800c5c6:	2b16      	cmp	r3, #22
 800c5c8:	d101      	bne.n	800c5ce <__sflush_r+0xb6>
 800c5ca:	602f      	str	r7, [r5, #0]
 800c5cc:	e7b1      	b.n	800c532 <__sflush_r+0x1a>
 800c5ce:	89a3      	ldrh	r3, [r4, #12]
 800c5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	e7ad      	b.n	800c534 <__sflush_r+0x1c>
 800c5d8:	690f      	ldr	r7, [r1, #16]
 800c5da:	2f00      	cmp	r7, #0
 800c5dc:	d0a9      	beq.n	800c532 <__sflush_r+0x1a>
 800c5de:	0793      	lsls	r3, r2, #30
 800c5e0:	680e      	ldr	r6, [r1, #0]
 800c5e2:	bf08      	it	eq
 800c5e4:	694b      	ldreq	r3, [r1, #20]
 800c5e6:	600f      	str	r7, [r1, #0]
 800c5e8:	bf18      	it	ne
 800c5ea:	2300      	movne	r3, #0
 800c5ec:	eba6 0807 	sub.w	r8, r6, r7
 800c5f0:	608b      	str	r3, [r1, #8]
 800c5f2:	f1b8 0f00 	cmp.w	r8, #0
 800c5f6:	dd9c      	ble.n	800c532 <__sflush_r+0x1a>
 800c5f8:	6a21      	ldr	r1, [r4, #32]
 800c5fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c5fc:	4643      	mov	r3, r8
 800c5fe:	463a      	mov	r2, r7
 800c600:	4628      	mov	r0, r5
 800c602:	47b0      	blx	r6
 800c604:	2800      	cmp	r0, #0
 800c606:	dc06      	bgt.n	800c616 <__sflush_r+0xfe>
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c60e:	81a3      	strh	r3, [r4, #12]
 800c610:	f04f 30ff 	mov.w	r0, #4294967295
 800c614:	e78e      	b.n	800c534 <__sflush_r+0x1c>
 800c616:	4407      	add	r7, r0
 800c618:	eba8 0800 	sub.w	r8, r8, r0
 800c61c:	e7e9      	b.n	800c5f2 <__sflush_r+0xda>
 800c61e:	bf00      	nop
 800c620:	20400001 	.word	0x20400001

0800c624 <_fflush_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	690b      	ldr	r3, [r1, #16]
 800c628:	4605      	mov	r5, r0
 800c62a:	460c      	mov	r4, r1
 800c62c:	b913      	cbnz	r3, 800c634 <_fflush_r+0x10>
 800c62e:	2500      	movs	r5, #0
 800c630:	4628      	mov	r0, r5
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	b118      	cbz	r0, 800c63e <_fflush_r+0x1a>
 800c636:	6983      	ldr	r3, [r0, #24]
 800c638:	b90b      	cbnz	r3, 800c63e <_fflush_r+0x1a>
 800c63a:	f7fe f925 	bl	800a888 <__sinit>
 800c63e:	4b14      	ldr	r3, [pc, #80]	; (800c690 <_fflush_r+0x6c>)
 800c640:	429c      	cmp	r4, r3
 800c642:	d11b      	bne.n	800c67c <_fflush_r+0x58>
 800c644:	686c      	ldr	r4, [r5, #4]
 800c646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0ef      	beq.n	800c62e <_fflush_r+0xa>
 800c64e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c650:	07d0      	lsls	r0, r2, #31
 800c652:	d404      	bmi.n	800c65e <_fflush_r+0x3a>
 800c654:	0599      	lsls	r1, r3, #22
 800c656:	d402      	bmi.n	800c65e <_fflush_r+0x3a>
 800c658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c65a:	f7fe f9d8 	bl	800aa0e <__retarget_lock_acquire_recursive>
 800c65e:	4628      	mov	r0, r5
 800c660:	4621      	mov	r1, r4
 800c662:	f7ff ff59 	bl	800c518 <__sflush_r>
 800c666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c668:	07da      	lsls	r2, r3, #31
 800c66a:	4605      	mov	r5, r0
 800c66c:	d4e0      	bmi.n	800c630 <_fflush_r+0xc>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	059b      	lsls	r3, r3, #22
 800c672:	d4dd      	bmi.n	800c630 <_fflush_r+0xc>
 800c674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c676:	f7fe f9cb 	bl	800aa10 <__retarget_lock_release_recursive>
 800c67a:	e7d9      	b.n	800c630 <_fflush_r+0xc>
 800c67c:	4b05      	ldr	r3, [pc, #20]	; (800c694 <_fflush_r+0x70>)
 800c67e:	429c      	cmp	r4, r3
 800c680:	d101      	bne.n	800c686 <_fflush_r+0x62>
 800c682:	68ac      	ldr	r4, [r5, #8]
 800c684:	e7df      	b.n	800c646 <_fflush_r+0x22>
 800c686:	4b04      	ldr	r3, [pc, #16]	; (800c698 <_fflush_r+0x74>)
 800c688:	429c      	cmp	r4, r3
 800c68a:	bf08      	it	eq
 800c68c:	68ec      	ldreq	r4, [r5, #12]
 800c68e:	e7da      	b.n	800c646 <_fflush_r+0x22>
 800c690:	0800fdf4 	.word	0x0800fdf4
 800c694:	0800fe14 	.word	0x0800fe14
 800c698:	0800fdd4 	.word	0x0800fdd4

0800c69c <_localeconv_r>:
 800c69c:	4800      	ldr	r0, [pc, #0]	; (800c6a0 <_localeconv_r+0x4>)
 800c69e:	4770      	bx	lr
 800c6a0:	20000a24 	.word	0x20000a24

0800c6a4 <_lseek_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4d07      	ldr	r5, [pc, #28]	; (800c6c4 <_lseek_r+0x20>)
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	4608      	mov	r0, r1
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	602a      	str	r2, [r5, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f7f6 f8f8 	bl	80028a8 <_lseek>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_lseek_r+0x1e>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_lseek_r+0x1e>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	200092a4 	.word	0x200092a4

0800c6c8 <__swhatbuf_r>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	460e      	mov	r6, r1
 800c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	b096      	sub	sp, #88	; 0x58
 800c6d4:	4614      	mov	r4, r2
 800c6d6:	461d      	mov	r5, r3
 800c6d8:	da07      	bge.n	800c6ea <__swhatbuf_r+0x22>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	602b      	str	r3, [r5, #0]
 800c6de:	89b3      	ldrh	r3, [r6, #12]
 800c6e0:	061a      	lsls	r2, r3, #24
 800c6e2:	d410      	bmi.n	800c706 <__swhatbuf_r+0x3e>
 800c6e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6e8:	e00e      	b.n	800c708 <__swhatbuf_r+0x40>
 800c6ea:	466a      	mov	r2, sp
 800c6ec:	f000 fdde 	bl	800d2ac <_fstat_r>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	dbf2      	blt.n	800c6da <__swhatbuf_r+0x12>
 800c6f4:	9a01      	ldr	r2, [sp, #4]
 800c6f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6fe:	425a      	negs	r2, r3
 800c700:	415a      	adcs	r2, r3
 800c702:	602a      	str	r2, [r5, #0]
 800c704:	e7ee      	b.n	800c6e4 <__swhatbuf_r+0x1c>
 800c706:	2340      	movs	r3, #64	; 0x40
 800c708:	2000      	movs	r0, #0
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	b016      	add	sp, #88	; 0x58
 800c70e:	bd70      	pop	{r4, r5, r6, pc}

0800c710 <__smakebuf_r>:
 800c710:	898b      	ldrh	r3, [r1, #12]
 800c712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c714:	079d      	lsls	r5, r3, #30
 800c716:	4606      	mov	r6, r0
 800c718:	460c      	mov	r4, r1
 800c71a:	d507      	bpl.n	800c72c <__smakebuf_r+0x1c>
 800c71c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	6123      	str	r3, [r4, #16]
 800c724:	2301      	movs	r3, #1
 800c726:	6163      	str	r3, [r4, #20]
 800c728:	b002      	add	sp, #8
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	ab01      	add	r3, sp, #4
 800c72e:	466a      	mov	r2, sp
 800c730:	f7ff ffca 	bl	800c6c8 <__swhatbuf_r>
 800c734:	9900      	ldr	r1, [sp, #0]
 800c736:	4605      	mov	r5, r0
 800c738:	4630      	mov	r0, r6
 800c73a:	f7fe f981 	bl	800aa40 <_malloc_r>
 800c73e:	b948      	cbnz	r0, 800c754 <__smakebuf_r+0x44>
 800c740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c744:	059a      	lsls	r2, r3, #22
 800c746:	d4ef      	bmi.n	800c728 <__smakebuf_r+0x18>
 800c748:	f023 0303 	bic.w	r3, r3, #3
 800c74c:	f043 0302 	orr.w	r3, r3, #2
 800c750:	81a3      	strh	r3, [r4, #12]
 800c752:	e7e3      	b.n	800c71c <__smakebuf_r+0xc>
 800c754:	4b0d      	ldr	r3, [pc, #52]	; (800c78c <__smakebuf_r+0x7c>)
 800c756:	62b3      	str	r3, [r6, #40]	; 0x28
 800c758:	89a3      	ldrh	r3, [r4, #12]
 800c75a:	6020      	str	r0, [r4, #0]
 800c75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c760:	81a3      	strh	r3, [r4, #12]
 800c762:	9b00      	ldr	r3, [sp, #0]
 800c764:	6163      	str	r3, [r4, #20]
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	6120      	str	r0, [r4, #16]
 800c76a:	b15b      	cbz	r3, 800c784 <__smakebuf_r+0x74>
 800c76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c770:	4630      	mov	r0, r6
 800c772:	f000 fdad 	bl	800d2d0 <_isatty_r>
 800c776:	b128      	cbz	r0, 800c784 <__smakebuf_r+0x74>
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	f023 0303 	bic.w	r3, r3, #3
 800c77e:	f043 0301 	orr.w	r3, r3, #1
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	89a0      	ldrh	r0, [r4, #12]
 800c786:	4305      	orrs	r5, r0
 800c788:	81a5      	strh	r5, [r4, #12]
 800c78a:	e7cd      	b.n	800c728 <__smakebuf_r+0x18>
 800c78c:	0800a821 	.word	0x0800a821

0800c790 <malloc>:
 800c790:	4b02      	ldr	r3, [pc, #8]	; (800c79c <malloc+0xc>)
 800c792:	4601      	mov	r1, r0
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	f7fe b953 	b.w	800aa40 <_malloc_r>
 800c79a:	bf00      	nop
 800c79c:	200008d0 	.word	0x200008d0

0800c7a0 <__malloc_lock>:
 800c7a0:	4801      	ldr	r0, [pc, #4]	; (800c7a8 <__malloc_lock+0x8>)
 800c7a2:	f7fe b934 	b.w	800aa0e <__retarget_lock_acquire_recursive>
 800c7a6:	bf00      	nop
 800c7a8:	2000929c 	.word	0x2000929c

0800c7ac <__malloc_unlock>:
 800c7ac:	4801      	ldr	r0, [pc, #4]	; (800c7b4 <__malloc_unlock+0x8>)
 800c7ae:	f7fe b92f 	b.w	800aa10 <__retarget_lock_release_recursive>
 800c7b2:	bf00      	nop
 800c7b4:	2000929c 	.word	0x2000929c

0800c7b8 <_Balloc>:
 800c7b8:	b570      	push	{r4, r5, r6, lr}
 800c7ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7bc:	4604      	mov	r4, r0
 800c7be:	460d      	mov	r5, r1
 800c7c0:	b976      	cbnz	r6, 800c7e0 <_Balloc+0x28>
 800c7c2:	2010      	movs	r0, #16
 800c7c4:	f7ff ffe4 	bl	800c790 <malloc>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	6260      	str	r0, [r4, #36]	; 0x24
 800c7cc:	b920      	cbnz	r0, 800c7d8 <_Balloc+0x20>
 800c7ce:	4b18      	ldr	r3, [pc, #96]	; (800c830 <_Balloc+0x78>)
 800c7d0:	4818      	ldr	r0, [pc, #96]	; (800c834 <_Balloc+0x7c>)
 800c7d2:	2166      	movs	r1, #102	; 0x66
 800c7d4:	f000 fd3a 	bl	800d24c <__assert_func>
 800c7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7dc:	6006      	str	r6, [r0, #0]
 800c7de:	60c6      	str	r6, [r0, #12]
 800c7e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7e2:	68f3      	ldr	r3, [r6, #12]
 800c7e4:	b183      	cbz	r3, 800c808 <_Balloc+0x50>
 800c7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7ee:	b9b8      	cbnz	r0, 800c820 <_Balloc+0x68>
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c7f6:	1d72      	adds	r2, r6, #5
 800c7f8:	0092      	lsls	r2, r2, #2
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 fb5a 	bl	800ceb4 <_calloc_r>
 800c800:	b160      	cbz	r0, 800c81c <_Balloc+0x64>
 800c802:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c806:	e00e      	b.n	800c826 <_Balloc+0x6e>
 800c808:	2221      	movs	r2, #33	; 0x21
 800c80a:	2104      	movs	r1, #4
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 fb51 	bl	800ceb4 <_calloc_r>
 800c812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c814:	60f0      	str	r0, [r6, #12]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1e4      	bne.n	800c7e6 <_Balloc+0x2e>
 800c81c:	2000      	movs	r0, #0
 800c81e:	bd70      	pop	{r4, r5, r6, pc}
 800c820:	6802      	ldr	r2, [r0, #0]
 800c822:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c826:	2300      	movs	r3, #0
 800c828:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c82c:	e7f7      	b.n	800c81e <_Balloc+0x66>
 800c82e:	bf00      	nop
 800c830:	0800fe79 	.word	0x0800fe79
 800c834:	0800ff00 	.word	0x0800ff00

0800c838 <_Bfree>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c83c:	4605      	mov	r5, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	b976      	cbnz	r6, 800c860 <_Bfree+0x28>
 800c842:	2010      	movs	r0, #16
 800c844:	f7ff ffa4 	bl	800c790 <malloc>
 800c848:	4602      	mov	r2, r0
 800c84a:	6268      	str	r0, [r5, #36]	; 0x24
 800c84c:	b920      	cbnz	r0, 800c858 <_Bfree+0x20>
 800c84e:	4b09      	ldr	r3, [pc, #36]	; (800c874 <_Bfree+0x3c>)
 800c850:	4809      	ldr	r0, [pc, #36]	; (800c878 <_Bfree+0x40>)
 800c852:	218a      	movs	r1, #138	; 0x8a
 800c854:	f000 fcfa 	bl	800d24c <__assert_func>
 800c858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c85c:	6006      	str	r6, [r0, #0]
 800c85e:	60c6      	str	r6, [r0, #12]
 800c860:	b13c      	cbz	r4, 800c872 <_Bfree+0x3a>
 800c862:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c864:	6862      	ldr	r2, [r4, #4]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c86c:	6021      	str	r1, [r4, #0]
 800c86e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	0800fe79 	.word	0x0800fe79
 800c878:	0800ff00 	.word	0x0800ff00

0800c87c <__multadd>:
 800c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	690e      	ldr	r6, [r1, #16]
 800c882:	4607      	mov	r7, r0
 800c884:	4698      	mov	r8, r3
 800c886:	460c      	mov	r4, r1
 800c888:	f101 0014 	add.w	r0, r1, #20
 800c88c:	2300      	movs	r3, #0
 800c88e:	6805      	ldr	r5, [r0, #0]
 800c890:	b2a9      	uxth	r1, r5
 800c892:	fb02 8101 	mla	r1, r2, r1, r8
 800c896:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c89a:	0c2d      	lsrs	r5, r5, #16
 800c89c:	fb02 c505 	mla	r5, r2, r5, ip
 800c8a0:	b289      	uxth	r1, r1
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c8a8:	429e      	cmp	r6, r3
 800c8aa:	f840 1b04 	str.w	r1, [r0], #4
 800c8ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c8b2:	dcec      	bgt.n	800c88e <__multadd+0x12>
 800c8b4:	f1b8 0f00 	cmp.w	r8, #0
 800c8b8:	d022      	beq.n	800c900 <__multadd+0x84>
 800c8ba:	68a3      	ldr	r3, [r4, #8]
 800c8bc:	42b3      	cmp	r3, r6
 800c8be:	dc19      	bgt.n	800c8f4 <__multadd+0x78>
 800c8c0:	6861      	ldr	r1, [r4, #4]
 800c8c2:	4638      	mov	r0, r7
 800c8c4:	3101      	adds	r1, #1
 800c8c6:	f7ff ff77 	bl	800c7b8 <_Balloc>
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	b928      	cbnz	r0, 800c8da <__multadd+0x5e>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	4b0d      	ldr	r3, [pc, #52]	; (800c908 <__multadd+0x8c>)
 800c8d2:	480e      	ldr	r0, [pc, #56]	; (800c90c <__multadd+0x90>)
 800c8d4:	21b5      	movs	r1, #181	; 0xb5
 800c8d6:	f000 fcb9 	bl	800d24c <__assert_func>
 800c8da:	6922      	ldr	r2, [r4, #16]
 800c8dc:	3202      	adds	r2, #2
 800c8de:	f104 010c 	add.w	r1, r4, #12
 800c8e2:	0092      	lsls	r2, r2, #2
 800c8e4:	300c      	adds	r0, #12
 800c8e6:	f7fe f894 	bl	800aa12 <memcpy>
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff ffa3 	bl	800c838 <_Bfree>
 800c8f2:	462c      	mov	r4, r5
 800c8f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c8f8:	3601      	adds	r6, #1
 800c8fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800c8fe:	6126      	str	r6, [r4, #16]
 800c900:	4620      	mov	r0, r4
 800c902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c906:	bf00      	nop
 800c908:	0800feef 	.word	0x0800feef
 800c90c:	0800ff00 	.word	0x0800ff00

0800c910 <__hi0bits>:
 800c910:	0c03      	lsrs	r3, r0, #16
 800c912:	041b      	lsls	r3, r3, #16
 800c914:	b9d3      	cbnz	r3, 800c94c <__hi0bits+0x3c>
 800c916:	0400      	lsls	r0, r0, #16
 800c918:	2310      	movs	r3, #16
 800c91a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c91e:	bf04      	itt	eq
 800c920:	0200      	lsleq	r0, r0, #8
 800c922:	3308      	addeq	r3, #8
 800c924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c928:	bf04      	itt	eq
 800c92a:	0100      	lsleq	r0, r0, #4
 800c92c:	3304      	addeq	r3, #4
 800c92e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c932:	bf04      	itt	eq
 800c934:	0080      	lsleq	r0, r0, #2
 800c936:	3302      	addeq	r3, #2
 800c938:	2800      	cmp	r0, #0
 800c93a:	db05      	blt.n	800c948 <__hi0bits+0x38>
 800c93c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c940:	f103 0301 	add.w	r3, r3, #1
 800c944:	bf08      	it	eq
 800c946:	2320      	moveq	r3, #32
 800c948:	4618      	mov	r0, r3
 800c94a:	4770      	bx	lr
 800c94c:	2300      	movs	r3, #0
 800c94e:	e7e4      	b.n	800c91a <__hi0bits+0xa>

0800c950 <__lo0bits>:
 800c950:	6803      	ldr	r3, [r0, #0]
 800c952:	f013 0207 	ands.w	r2, r3, #7
 800c956:	4601      	mov	r1, r0
 800c958:	d00b      	beq.n	800c972 <__lo0bits+0x22>
 800c95a:	07da      	lsls	r2, r3, #31
 800c95c:	d424      	bmi.n	800c9a8 <__lo0bits+0x58>
 800c95e:	0798      	lsls	r0, r3, #30
 800c960:	bf49      	itett	mi
 800c962:	085b      	lsrmi	r3, r3, #1
 800c964:	089b      	lsrpl	r3, r3, #2
 800c966:	2001      	movmi	r0, #1
 800c968:	600b      	strmi	r3, [r1, #0]
 800c96a:	bf5c      	itt	pl
 800c96c:	600b      	strpl	r3, [r1, #0]
 800c96e:	2002      	movpl	r0, #2
 800c970:	4770      	bx	lr
 800c972:	b298      	uxth	r0, r3
 800c974:	b9b0      	cbnz	r0, 800c9a4 <__lo0bits+0x54>
 800c976:	0c1b      	lsrs	r3, r3, #16
 800c978:	2010      	movs	r0, #16
 800c97a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c97e:	bf04      	itt	eq
 800c980:	0a1b      	lsreq	r3, r3, #8
 800c982:	3008      	addeq	r0, #8
 800c984:	071a      	lsls	r2, r3, #28
 800c986:	bf04      	itt	eq
 800c988:	091b      	lsreq	r3, r3, #4
 800c98a:	3004      	addeq	r0, #4
 800c98c:	079a      	lsls	r2, r3, #30
 800c98e:	bf04      	itt	eq
 800c990:	089b      	lsreq	r3, r3, #2
 800c992:	3002      	addeq	r0, #2
 800c994:	07da      	lsls	r2, r3, #31
 800c996:	d403      	bmi.n	800c9a0 <__lo0bits+0x50>
 800c998:	085b      	lsrs	r3, r3, #1
 800c99a:	f100 0001 	add.w	r0, r0, #1
 800c99e:	d005      	beq.n	800c9ac <__lo0bits+0x5c>
 800c9a0:	600b      	str	r3, [r1, #0]
 800c9a2:	4770      	bx	lr
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	e7e8      	b.n	800c97a <__lo0bits+0x2a>
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	4770      	bx	lr
 800c9ac:	2020      	movs	r0, #32
 800c9ae:	4770      	bx	lr

0800c9b0 <__i2b>:
 800c9b0:	b510      	push	{r4, lr}
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	f7ff feff 	bl	800c7b8 <_Balloc>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	b928      	cbnz	r0, 800c9ca <__i2b+0x1a>
 800c9be:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <__i2b+0x24>)
 800c9c0:	4805      	ldr	r0, [pc, #20]	; (800c9d8 <__i2b+0x28>)
 800c9c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c9c6:	f000 fc41 	bl	800d24c <__assert_func>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	6144      	str	r4, [r0, #20]
 800c9ce:	6103      	str	r3, [r0, #16]
 800c9d0:	bd10      	pop	{r4, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0800feef 	.word	0x0800feef
 800c9d8:	0800ff00 	.word	0x0800ff00

0800c9dc <__multiply>:
 800c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e0:	4614      	mov	r4, r2
 800c9e2:	690a      	ldr	r2, [r1, #16]
 800c9e4:	6923      	ldr	r3, [r4, #16]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	bfb8      	it	lt
 800c9ea:	460b      	movlt	r3, r1
 800c9ec:	460d      	mov	r5, r1
 800c9ee:	bfbc      	itt	lt
 800c9f0:	4625      	movlt	r5, r4
 800c9f2:	461c      	movlt	r4, r3
 800c9f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c9f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c9fc:	68ab      	ldr	r3, [r5, #8]
 800c9fe:	6869      	ldr	r1, [r5, #4]
 800ca00:	eb0a 0709 	add.w	r7, sl, r9
 800ca04:	42bb      	cmp	r3, r7
 800ca06:	b085      	sub	sp, #20
 800ca08:	bfb8      	it	lt
 800ca0a:	3101      	addlt	r1, #1
 800ca0c:	f7ff fed4 	bl	800c7b8 <_Balloc>
 800ca10:	b930      	cbnz	r0, 800ca20 <__multiply+0x44>
 800ca12:	4602      	mov	r2, r0
 800ca14:	4b42      	ldr	r3, [pc, #264]	; (800cb20 <__multiply+0x144>)
 800ca16:	4843      	ldr	r0, [pc, #268]	; (800cb24 <__multiply+0x148>)
 800ca18:	f240 115d 	movw	r1, #349	; 0x15d
 800ca1c:	f000 fc16 	bl	800d24c <__assert_func>
 800ca20:	f100 0614 	add.w	r6, r0, #20
 800ca24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ca28:	4633      	mov	r3, r6
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	4543      	cmp	r3, r8
 800ca2e:	d31e      	bcc.n	800ca6e <__multiply+0x92>
 800ca30:	f105 0c14 	add.w	ip, r5, #20
 800ca34:	f104 0314 	add.w	r3, r4, #20
 800ca38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ca3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ca40:	9202      	str	r2, [sp, #8]
 800ca42:	ebac 0205 	sub.w	r2, ip, r5
 800ca46:	3a15      	subs	r2, #21
 800ca48:	f022 0203 	bic.w	r2, r2, #3
 800ca4c:	3204      	adds	r2, #4
 800ca4e:	f105 0115 	add.w	r1, r5, #21
 800ca52:	458c      	cmp	ip, r1
 800ca54:	bf38      	it	cc
 800ca56:	2204      	movcc	r2, #4
 800ca58:	9201      	str	r2, [sp, #4]
 800ca5a:	9a02      	ldr	r2, [sp, #8]
 800ca5c:	9303      	str	r3, [sp, #12]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d808      	bhi.n	800ca74 <__multiply+0x98>
 800ca62:	2f00      	cmp	r7, #0
 800ca64:	dc55      	bgt.n	800cb12 <__multiply+0x136>
 800ca66:	6107      	str	r7, [r0, #16]
 800ca68:	b005      	add	sp, #20
 800ca6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6e:	f843 2b04 	str.w	r2, [r3], #4
 800ca72:	e7db      	b.n	800ca2c <__multiply+0x50>
 800ca74:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca78:	f1ba 0f00 	cmp.w	sl, #0
 800ca7c:	d020      	beq.n	800cac0 <__multiply+0xe4>
 800ca7e:	f105 0e14 	add.w	lr, r5, #20
 800ca82:	46b1      	mov	r9, r6
 800ca84:	2200      	movs	r2, #0
 800ca86:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ca8a:	f8d9 b000 	ldr.w	fp, [r9]
 800ca8e:	b2a1      	uxth	r1, r4
 800ca90:	fa1f fb8b 	uxth.w	fp, fp
 800ca94:	fb0a b101 	mla	r1, sl, r1, fp
 800ca98:	4411      	add	r1, r2
 800ca9a:	f8d9 2000 	ldr.w	r2, [r9]
 800ca9e:	0c24      	lsrs	r4, r4, #16
 800caa0:	0c12      	lsrs	r2, r2, #16
 800caa2:	fb0a 2404 	mla	r4, sl, r4, r2
 800caa6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800caaa:	b289      	uxth	r1, r1
 800caac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cab0:	45f4      	cmp	ip, lr
 800cab2:	f849 1b04 	str.w	r1, [r9], #4
 800cab6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800caba:	d8e4      	bhi.n	800ca86 <__multiply+0xaa>
 800cabc:	9901      	ldr	r1, [sp, #4]
 800cabe:	5072      	str	r2, [r6, r1]
 800cac0:	9a03      	ldr	r2, [sp, #12]
 800cac2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cac6:	3304      	adds	r3, #4
 800cac8:	f1b9 0f00 	cmp.w	r9, #0
 800cacc:	d01f      	beq.n	800cb0e <__multiply+0x132>
 800cace:	6834      	ldr	r4, [r6, #0]
 800cad0:	f105 0114 	add.w	r1, r5, #20
 800cad4:	46b6      	mov	lr, r6
 800cad6:	f04f 0a00 	mov.w	sl, #0
 800cada:	880a      	ldrh	r2, [r1, #0]
 800cadc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cae0:	fb09 b202 	mla	r2, r9, r2, fp
 800cae4:	4492      	add	sl, r2
 800cae6:	b2a4      	uxth	r4, r4
 800cae8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800caec:	f84e 4b04 	str.w	r4, [lr], #4
 800caf0:	f851 4b04 	ldr.w	r4, [r1], #4
 800caf4:	f8be 2000 	ldrh.w	r2, [lr]
 800caf8:	0c24      	lsrs	r4, r4, #16
 800cafa:	fb09 2404 	mla	r4, r9, r4, r2
 800cafe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cb02:	458c      	cmp	ip, r1
 800cb04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cb08:	d8e7      	bhi.n	800cada <__multiply+0xfe>
 800cb0a:	9a01      	ldr	r2, [sp, #4]
 800cb0c:	50b4      	str	r4, [r6, r2]
 800cb0e:	3604      	adds	r6, #4
 800cb10:	e7a3      	b.n	800ca5a <__multiply+0x7e>
 800cb12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1a5      	bne.n	800ca66 <__multiply+0x8a>
 800cb1a:	3f01      	subs	r7, #1
 800cb1c:	e7a1      	b.n	800ca62 <__multiply+0x86>
 800cb1e:	bf00      	nop
 800cb20:	0800feef 	.word	0x0800feef
 800cb24:	0800ff00 	.word	0x0800ff00

0800cb28 <__pow5mult>:
 800cb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb2c:	4615      	mov	r5, r2
 800cb2e:	f012 0203 	ands.w	r2, r2, #3
 800cb32:	4606      	mov	r6, r0
 800cb34:	460f      	mov	r7, r1
 800cb36:	d007      	beq.n	800cb48 <__pow5mult+0x20>
 800cb38:	4c25      	ldr	r4, [pc, #148]	; (800cbd0 <__pow5mult+0xa8>)
 800cb3a:	3a01      	subs	r2, #1
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb42:	f7ff fe9b 	bl	800c87c <__multadd>
 800cb46:	4607      	mov	r7, r0
 800cb48:	10ad      	asrs	r5, r5, #2
 800cb4a:	d03d      	beq.n	800cbc8 <__pow5mult+0xa0>
 800cb4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb4e:	b97c      	cbnz	r4, 800cb70 <__pow5mult+0x48>
 800cb50:	2010      	movs	r0, #16
 800cb52:	f7ff fe1d 	bl	800c790 <malloc>
 800cb56:	4602      	mov	r2, r0
 800cb58:	6270      	str	r0, [r6, #36]	; 0x24
 800cb5a:	b928      	cbnz	r0, 800cb68 <__pow5mult+0x40>
 800cb5c:	4b1d      	ldr	r3, [pc, #116]	; (800cbd4 <__pow5mult+0xac>)
 800cb5e:	481e      	ldr	r0, [pc, #120]	; (800cbd8 <__pow5mult+0xb0>)
 800cb60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cb64:	f000 fb72 	bl	800d24c <__assert_func>
 800cb68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb6c:	6004      	str	r4, [r0, #0]
 800cb6e:	60c4      	str	r4, [r0, #12]
 800cb70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb78:	b94c      	cbnz	r4, 800cb8e <__pow5mult+0x66>
 800cb7a:	f240 2171 	movw	r1, #625	; 0x271
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7ff ff16 	bl	800c9b0 <__i2b>
 800cb84:	2300      	movs	r3, #0
 800cb86:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	6003      	str	r3, [r0, #0]
 800cb8e:	f04f 0900 	mov.w	r9, #0
 800cb92:	07eb      	lsls	r3, r5, #31
 800cb94:	d50a      	bpl.n	800cbac <__pow5mult+0x84>
 800cb96:	4639      	mov	r1, r7
 800cb98:	4622      	mov	r2, r4
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f7ff ff1e 	bl	800c9dc <__multiply>
 800cba0:	4639      	mov	r1, r7
 800cba2:	4680      	mov	r8, r0
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7ff fe47 	bl	800c838 <_Bfree>
 800cbaa:	4647      	mov	r7, r8
 800cbac:	106d      	asrs	r5, r5, #1
 800cbae:	d00b      	beq.n	800cbc8 <__pow5mult+0xa0>
 800cbb0:	6820      	ldr	r0, [r4, #0]
 800cbb2:	b938      	cbnz	r0, 800cbc4 <__pow5mult+0x9c>
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f7ff ff0f 	bl	800c9dc <__multiply>
 800cbbe:	6020      	str	r0, [r4, #0]
 800cbc0:	f8c0 9000 	str.w	r9, [r0]
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	e7e4      	b.n	800cb92 <__pow5mult+0x6a>
 800cbc8:	4638      	mov	r0, r7
 800cbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbce:	bf00      	nop
 800cbd0:	08010050 	.word	0x08010050
 800cbd4:	0800fe79 	.word	0x0800fe79
 800cbd8:	0800ff00 	.word	0x0800ff00

0800cbdc <__lshift>:
 800cbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe0:	460c      	mov	r4, r1
 800cbe2:	6849      	ldr	r1, [r1, #4]
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbea:	68a3      	ldr	r3, [r4, #8]
 800cbec:	4607      	mov	r7, r0
 800cbee:	4691      	mov	r9, r2
 800cbf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbf4:	f108 0601 	add.w	r6, r8, #1
 800cbf8:	42b3      	cmp	r3, r6
 800cbfa:	db0b      	blt.n	800cc14 <__lshift+0x38>
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7ff fddb 	bl	800c7b8 <_Balloc>
 800cc02:	4605      	mov	r5, r0
 800cc04:	b948      	cbnz	r0, 800cc1a <__lshift+0x3e>
 800cc06:	4602      	mov	r2, r0
 800cc08:	4b28      	ldr	r3, [pc, #160]	; (800ccac <__lshift+0xd0>)
 800cc0a:	4829      	ldr	r0, [pc, #164]	; (800ccb0 <__lshift+0xd4>)
 800cc0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc10:	f000 fb1c 	bl	800d24c <__assert_func>
 800cc14:	3101      	adds	r1, #1
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	e7ee      	b.n	800cbf8 <__lshift+0x1c>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f100 0114 	add.w	r1, r0, #20
 800cc20:	f100 0210 	add.w	r2, r0, #16
 800cc24:	4618      	mov	r0, r3
 800cc26:	4553      	cmp	r3, sl
 800cc28:	db33      	blt.n	800cc92 <__lshift+0xb6>
 800cc2a:	6920      	ldr	r0, [r4, #16]
 800cc2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc30:	f104 0314 	add.w	r3, r4, #20
 800cc34:	f019 091f 	ands.w	r9, r9, #31
 800cc38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc40:	d02b      	beq.n	800cc9a <__lshift+0xbe>
 800cc42:	f1c9 0e20 	rsb	lr, r9, #32
 800cc46:	468a      	mov	sl, r1
 800cc48:	2200      	movs	r2, #0
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	fa00 f009 	lsl.w	r0, r0, r9
 800cc50:	4302      	orrs	r2, r0
 800cc52:	f84a 2b04 	str.w	r2, [sl], #4
 800cc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5a:	459c      	cmp	ip, r3
 800cc5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc60:	d8f3      	bhi.n	800cc4a <__lshift+0x6e>
 800cc62:	ebac 0304 	sub.w	r3, ip, r4
 800cc66:	3b15      	subs	r3, #21
 800cc68:	f023 0303 	bic.w	r3, r3, #3
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	f104 0015 	add.w	r0, r4, #21
 800cc72:	4584      	cmp	ip, r0
 800cc74:	bf38      	it	cc
 800cc76:	2304      	movcc	r3, #4
 800cc78:	50ca      	str	r2, [r1, r3]
 800cc7a:	b10a      	cbz	r2, 800cc80 <__lshift+0xa4>
 800cc7c:	f108 0602 	add.w	r6, r8, #2
 800cc80:	3e01      	subs	r6, #1
 800cc82:	4638      	mov	r0, r7
 800cc84:	612e      	str	r6, [r5, #16]
 800cc86:	4621      	mov	r1, r4
 800cc88:	f7ff fdd6 	bl	800c838 <_Bfree>
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc92:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc96:	3301      	adds	r3, #1
 800cc98:	e7c5      	b.n	800cc26 <__lshift+0x4a>
 800cc9a:	3904      	subs	r1, #4
 800cc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cca0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cca4:	459c      	cmp	ip, r3
 800cca6:	d8f9      	bhi.n	800cc9c <__lshift+0xc0>
 800cca8:	e7ea      	b.n	800cc80 <__lshift+0xa4>
 800ccaa:	bf00      	nop
 800ccac:	0800feef 	.word	0x0800feef
 800ccb0:	0800ff00 	.word	0x0800ff00

0800ccb4 <__mcmp>:
 800ccb4:	b530      	push	{r4, r5, lr}
 800ccb6:	6902      	ldr	r2, [r0, #16]
 800ccb8:	690c      	ldr	r4, [r1, #16]
 800ccba:	1b12      	subs	r2, r2, r4
 800ccbc:	d10e      	bne.n	800ccdc <__mcmp+0x28>
 800ccbe:	f100 0314 	add.w	r3, r0, #20
 800ccc2:	3114      	adds	r1, #20
 800ccc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ccc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ccd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ccd4:	42a5      	cmp	r5, r4
 800ccd6:	d003      	beq.n	800cce0 <__mcmp+0x2c>
 800ccd8:	d305      	bcc.n	800cce6 <__mcmp+0x32>
 800ccda:	2201      	movs	r2, #1
 800ccdc:	4610      	mov	r0, r2
 800ccde:	bd30      	pop	{r4, r5, pc}
 800cce0:	4283      	cmp	r3, r0
 800cce2:	d3f3      	bcc.n	800cccc <__mcmp+0x18>
 800cce4:	e7fa      	b.n	800ccdc <__mcmp+0x28>
 800cce6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccea:	e7f7      	b.n	800ccdc <__mcmp+0x28>

0800ccec <__mdiff>:
 800ccec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	4617      	mov	r7, r2
 800ccfa:	f7ff ffdb 	bl	800ccb4 <__mcmp>
 800ccfe:	1e05      	subs	r5, r0, #0
 800cd00:	d110      	bne.n	800cd24 <__mdiff+0x38>
 800cd02:	4629      	mov	r1, r5
 800cd04:	4630      	mov	r0, r6
 800cd06:	f7ff fd57 	bl	800c7b8 <_Balloc>
 800cd0a:	b930      	cbnz	r0, 800cd1a <__mdiff+0x2e>
 800cd0c:	4b39      	ldr	r3, [pc, #228]	; (800cdf4 <__mdiff+0x108>)
 800cd0e:	4602      	mov	r2, r0
 800cd10:	f240 2132 	movw	r1, #562	; 0x232
 800cd14:	4838      	ldr	r0, [pc, #224]	; (800cdf8 <__mdiff+0x10c>)
 800cd16:	f000 fa99 	bl	800d24c <__assert_func>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd24:	bfa4      	itt	ge
 800cd26:	463b      	movge	r3, r7
 800cd28:	4627      	movge	r7, r4
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	bfa6      	itte	ge
 800cd30:	461c      	movge	r4, r3
 800cd32:	2500      	movge	r5, #0
 800cd34:	2501      	movlt	r5, #1
 800cd36:	f7ff fd3f 	bl	800c7b8 <_Balloc>
 800cd3a:	b920      	cbnz	r0, 800cd46 <__mdiff+0x5a>
 800cd3c:	4b2d      	ldr	r3, [pc, #180]	; (800cdf4 <__mdiff+0x108>)
 800cd3e:	4602      	mov	r2, r0
 800cd40:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cd44:	e7e6      	b.n	800cd14 <__mdiff+0x28>
 800cd46:	693e      	ldr	r6, [r7, #16]
 800cd48:	60c5      	str	r5, [r0, #12]
 800cd4a:	6925      	ldr	r5, [r4, #16]
 800cd4c:	f107 0114 	add.w	r1, r7, #20
 800cd50:	f104 0914 	add.w	r9, r4, #20
 800cd54:	f100 0e14 	add.w	lr, r0, #20
 800cd58:	f107 0210 	add.w	r2, r7, #16
 800cd5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cd60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cd64:	46f2      	mov	sl, lr
 800cd66:	2700      	movs	r7, #0
 800cd68:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd70:	fa1f f883 	uxth.w	r8, r3
 800cd74:	fa17 f78b 	uxtah	r7, r7, fp
 800cd78:	0c1b      	lsrs	r3, r3, #16
 800cd7a:	eba7 0808 	sub.w	r8, r7, r8
 800cd7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd86:	fa1f f888 	uxth.w	r8, r8
 800cd8a:	141f      	asrs	r7, r3, #16
 800cd8c:	454d      	cmp	r5, r9
 800cd8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd92:	f84a 3b04 	str.w	r3, [sl], #4
 800cd96:	d8e7      	bhi.n	800cd68 <__mdiff+0x7c>
 800cd98:	1b2b      	subs	r3, r5, r4
 800cd9a:	3b15      	subs	r3, #21
 800cd9c:	f023 0303 	bic.w	r3, r3, #3
 800cda0:	3304      	adds	r3, #4
 800cda2:	3415      	adds	r4, #21
 800cda4:	42a5      	cmp	r5, r4
 800cda6:	bf38      	it	cc
 800cda8:	2304      	movcc	r3, #4
 800cdaa:	4419      	add	r1, r3
 800cdac:	4473      	add	r3, lr
 800cdae:	469e      	mov	lr, r3
 800cdb0:	460d      	mov	r5, r1
 800cdb2:	4565      	cmp	r5, ip
 800cdb4:	d30e      	bcc.n	800cdd4 <__mdiff+0xe8>
 800cdb6:	f10c 0203 	add.w	r2, ip, #3
 800cdba:	1a52      	subs	r2, r2, r1
 800cdbc:	f022 0203 	bic.w	r2, r2, #3
 800cdc0:	3903      	subs	r1, #3
 800cdc2:	458c      	cmp	ip, r1
 800cdc4:	bf38      	it	cc
 800cdc6:	2200      	movcc	r2, #0
 800cdc8:	441a      	add	r2, r3
 800cdca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cdce:	b17b      	cbz	r3, 800cdf0 <__mdiff+0x104>
 800cdd0:	6106      	str	r6, [r0, #16]
 800cdd2:	e7a5      	b.n	800cd20 <__mdiff+0x34>
 800cdd4:	f855 8b04 	ldr.w	r8, [r5], #4
 800cdd8:	fa17 f488 	uxtah	r4, r7, r8
 800cddc:	1422      	asrs	r2, r4, #16
 800cdde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cde2:	b2a4      	uxth	r4, r4
 800cde4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cde8:	f84e 4b04 	str.w	r4, [lr], #4
 800cdec:	1417      	asrs	r7, r2, #16
 800cdee:	e7e0      	b.n	800cdb2 <__mdiff+0xc6>
 800cdf0:	3e01      	subs	r6, #1
 800cdf2:	e7ea      	b.n	800cdca <__mdiff+0xde>
 800cdf4:	0800feef 	.word	0x0800feef
 800cdf8:	0800ff00 	.word	0x0800ff00

0800cdfc <__d2b>:
 800cdfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce00:	4689      	mov	r9, r1
 800ce02:	2101      	movs	r1, #1
 800ce04:	ec57 6b10 	vmov	r6, r7, d0
 800ce08:	4690      	mov	r8, r2
 800ce0a:	f7ff fcd5 	bl	800c7b8 <_Balloc>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	b930      	cbnz	r0, 800ce20 <__d2b+0x24>
 800ce12:	4602      	mov	r2, r0
 800ce14:	4b25      	ldr	r3, [pc, #148]	; (800ceac <__d2b+0xb0>)
 800ce16:	4826      	ldr	r0, [pc, #152]	; (800ceb0 <__d2b+0xb4>)
 800ce18:	f240 310a 	movw	r1, #778	; 0x30a
 800ce1c:	f000 fa16 	bl	800d24c <__assert_func>
 800ce20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ce24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce28:	bb35      	cbnz	r5, 800ce78 <__d2b+0x7c>
 800ce2a:	2e00      	cmp	r6, #0
 800ce2c:	9301      	str	r3, [sp, #4]
 800ce2e:	d028      	beq.n	800ce82 <__d2b+0x86>
 800ce30:	4668      	mov	r0, sp
 800ce32:	9600      	str	r6, [sp, #0]
 800ce34:	f7ff fd8c 	bl	800c950 <__lo0bits>
 800ce38:	9900      	ldr	r1, [sp, #0]
 800ce3a:	b300      	cbz	r0, 800ce7e <__d2b+0x82>
 800ce3c:	9a01      	ldr	r2, [sp, #4]
 800ce3e:	f1c0 0320 	rsb	r3, r0, #32
 800ce42:	fa02 f303 	lsl.w	r3, r2, r3
 800ce46:	430b      	orrs	r3, r1
 800ce48:	40c2      	lsrs	r2, r0
 800ce4a:	6163      	str	r3, [r4, #20]
 800ce4c:	9201      	str	r2, [sp, #4]
 800ce4e:	9b01      	ldr	r3, [sp, #4]
 800ce50:	61a3      	str	r3, [r4, #24]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bf14      	ite	ne
 800ce56:	2202      	movne	r2, #2
 800ce58:	2201      	moveq	r2, #1
 800ce5a:	6122      	str	r2, [r4, #16]
 800ce5c:	b1d5      	cbz	r5, 800ce94 <__d2b+0x98>
 800ce5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce62:	4405      	add	r5, r0
 800ce64:	f8c9 5000 	str.w	r5, [r9]
 800ce68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce6c:	f8c8 0000 	str.w	r0, [r8]
 800ce70:	4620      	mov	r0, r4
 800ce72:	b003      	add	sp, #12
 800ce74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce7c:	e7d5      	b.n	800ce2a <__d2b+0x2e>
 800ce7e:	6161      	str	r1, [r4, #20]
 800ce80:	e7e5      	b.n	800ce4e <__d2b+0x52>
 800ce82:	a801      	add	r0, sp, #4
 800ce84:	f7ff fd64 	bl	800c950 <__lo0bits>
 800ce88:	9b01      	ldr	r3, [sp, #4]
 800ce8a:	6163      	str	r3, [r4, #20]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	6122      	str	r2, [r4, #16]
 800ce90:	3020      	adds	r0, #32
 800ce92:	e7e3      	b.n	800ce5c <__d2b+0x60>
 800ce94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce9c:	f8c9 0000 	str.w	r0, [r9]
 800cea0:	6918      	ldr	r0, [r3, #16]
 800cea2:	f7ff fd35 	bl	800c910 <__hi0bits>
 800cea6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ceaa:	e7df      	b.n	800ce6c <__d2b+0x70>
 800ceac:	0800feef 	.word	0x0800feef
 800ceb0:	0800ff00 	.word	0x0800ff00

0800ceb4 <_calloc_r>:
 800ceb4:	b513      	push	{r0, r1, r4, lr}
 800ceb6:	434a      	muls	r2, r1
 800ceb8:	4611      	mov	r1, r2
 800ceba:	9201      	str	r2, [sp, #4]
 800cebc:	f7fd fdc0 	bl	800aa40 <_malloc_r>
 800cec0:	4604      	mov	r4, r0
 800cec2:	b118      	cbz	r0, 800cecc <_calloc_r+0x18>
 800cec4:	9a01      	ldr	r2, [sp, #4]
 800cec6:	2100      	movs	r1, #0
 800cec8:	f7fd fdb1 	bl	800aa2e <memset>
 800cecc:	4620      	mov	r0, r4
 800cece:	b002      	add	sp, #8
 800ced0:	bd10      	pop	{r4, pc}
	...

0800ced4 <_free_r>:
 800ced4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d048      	beq.n	800cf6c <_free_r+0x98>
 800ceda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cede:	9001      	str	r0, [sp, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f1a1 0404 	sub.w	r4, r1, #4
 800cee6:	bfb8      	it	lt
 800cee8:	18e4      	addlt	r4, r4, r3
 800ceea:	f7ff fc59 	bl	800c7a0 <__malloc_lock>
 800ceee:	4a20      	ldr	r2, [pc, #128]	; (800cf70 <_free_r+0x9c>)
 800cef0:	9801      	ldr	r0, [sp, #4]
 800cef2:	6813      	ldr	r3, [r2, #0]
 800cef4:	4615      	mov	r5, r2
 800cef6:	b933      	cbnz	r3, 800cf06 <_free_r+0x32>
 800cef8:	6063      	str	r3, [r4, #4]
 800cefa:	6014      	str	r4, [r2, #0]
 800cefc:	b003      	add	sp, #12
 800cefe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf02:	f7ff bc53 	b.w	800c7ac <__malloc_unlock>
 800cf06:	42a3      	cmp	r3, r4
 800cf08:	d90b      	bls.n	800cf22 <_free_r+0x4e>
 800cf0a:	6821      	ldr	r1, [r4, #0]
 800cf0c:	1862      	adds	r2, r4, r1
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	bf04      	itt	eq
 800cf12:	681a      	ldreq	r2, [r3, #0]
 800cf14:	685b      	ldreq	r3, [r3, #4]
 800cf16:	6063      	str	r3, [r4, #4]
 800cf18:	bf04      	itt	eq
 800cf1a:	1852      	addeq	r2, r2, r1
 800cf1c:	6022      	streq	r2, [r4, #0]
 800cf1e:	602c      	str	r4, [r5, #0]
 800cf20:	e7ec      	b.n	800cefc <_free_r+0x28>
 800cf22:	461a      	mov	r2, r3
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	b10b      	cbz	r3, 800cf2c <_free_r+0x58>
 800cf28:	42a3      	cmp	r3, r4
 800cf2a:	d9fa      	bls.n	800cf22 <_free_r+0x4e>
 800cf2c:	6811      	ldr	r1, [r2, #0]
 800cf2e:	1855      	adds	r5, r2, r1
 800cf30:	42a5      	cmp	r5, r4
 800cf32:	d10b      	bne.n	800cf4c <_free_r+0x78>
 800cf34:	6824      	ldr	r4, [r4, #0]
 800cf36:	4421      	add	r1, r4
 800cf38:	1854      	adds	r4, r2, r1
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	6011      	str	r1, [r2, #0]
 800cf3e:	d1dd      	bne.n	800cefc <_free_r+0x28>
 800cf40:	681c      	ldr	r4, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	6053      	str	r3, [r2, #4]
 800cf46:	4421      	add	r1, r4
 800cf48:	6011      	str	r1, [r2, #0]
 800cf4a:	e7d7      	b.n	800cefc <_free_r+0x28>
 800cf4c:	d902      	bls.n	800cf54 <_free_r+0x80>
 800cf4e:	230c      	movs	r3, #12
 800cf50:	6003      	str	r3, [r0, #0]
 800cf52:	e7d3      	b.n	800cefc <_free_r+0x28>
 800cf54:	6825      	ldr	r5, [r4, #0]
 800cf56:	1961      	adds	r1, r4, r5
 800cf58:	428b      	cmp	r3, r1
 800cf5a:	bf04      	itt	eq
 800cf5c:	6819      	ldreq	r1, [r3, #0]
 800cf5e:	685b      	ldreq	r3, [r3, #4]
 800cf60:	6063      	str	r3, [r4, #4]
 800cf62:	bf04      	itt	eq
 800cf64:	1949      	addeq	r1, r1, r5
 800cf66:	6021      	streq	r1, [r4, #0]
 800cf68:	6054      	str	r4, [r2, #4]
 800cf6a:	e7c7      	b.n	800cefc <_free_r+0x28>
 800cf6c:	b003      	add	sp, #12
 800cf6e:	bd30      	pop	{r4, r5, pc}
 800cf70:	20007194 	.word	0x20007194

0800cf74 <__sfputc_r>:
 800cf74:	6893      	ldr	r3, [r2, #8]
 800cf76:	3b01      	subs	r3, #1
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	b410      	push	{r4}
 800cf7c:	6093      	str	r3, [r2, #8]
 800cf7e:	da08      	bge.n	800cf92 <__sfputc_r+0x1e>
 800cf80:	6994      	ldr	r4, [r2, #24]
 800cf82:	42a3      	cmp	r3, r4
 800cf84:	db01      	blt.n	800cf8a <__sfputc_r+0x16>
 800cf86:	290a      	cmp	r1, #10
 800cf88:	d103      	bne.n	800cf92 <__sfputc_r+0x1e>
 800cf8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf8e:	f7fe bb67 	b.w	800b660 <__swbuf_r>
 800cf92:	6813      	ldr	r3, [r2, #0]
 800cf94:	1c58      	adds	r0, r3, #1
 800cf96:	6010      	str	r0, [r2, #0]
 800cf98:	7019      	strb	r1, [r3, #0]
 800cf9a:	4608      	mov	r0, r1
 800cf9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <__sfputs_r>:
 800cfa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	460f      	mov	r7, r1
 800cfa8:	4614      	mov	r4, r2
 800cfaa:	18d5      	adds	r5, r2, r3
 800cfac:	42ac      	cmp	r4, r5
 800cfae:	d101      	bne.n	800cfb4 <__sfputs_r+0x12>
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	e007      	b.n	800cfc4 <__sfputs_r+0x22>
 800cfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb8:	463a      	mov	r2, r7
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff ffda 	bl	800cf74 <__sfputc_r>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d1f3      	bne.n	800cfac <__sfputs_r+0xa>
 800cfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfc8 <_vfiprintf_r>:
 800cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	460d      	mov	r5, r1
 800cfce:	b09d      	sub	sp, #116	; 0x74
 800cfd0:	4614      	mov	r4, r2
 800cfd2:	4698      	mov	r8, r3
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	b118      	cbz	r0, 800cfe0 <_vfiprintf_r+0x18>
 800cfd8:	6983      	ldr	r3, [r0, #24]
 800cfda:	b90b      	cbnz	r3, 800cfe0 <_vfiprintf_r+0x18>
 800cfdc:	f7fd fc54 	bl	800a888 <__sinit>
 800cfe0:	4b89      	ldr	r3, [pc, #548]	; (800d208 <_vfiprintf_r+0x240>)
 800cfe2:	429d      	cmp	r5, r3
 800cfe4:	d11b      	bne.n	800d01e <_vfiprintf_r+0x56>
 800cfe6:	6875      	ldr	r5, [r6, #4]
 800cfe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfea:	07d9      	lsls	r1, r3, #31
 800cfec:	d405      	bmi.n	800cffa <_vfiprintf_r+0x32>
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	059a      	lsls	r2, r3, #22
 800cff2:	d402      	bmi.n	800cffa <_vfiprintf_r+0x32>
 800cff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff6:	f7fd fd0a 	bl	800aa0e <__retarget_lock_acquire_recursive>
 800cffa:	89ab      	ldrh	r3, [r5, #12]
 800cffc:	071b      	lsls	r3, r3, #28
 800cffe:	d501      	bpl.n	800d004 <_vfiprintf_r+0x3c>
 800d000:	692b      	ldr	r3, [r5, #16]
 800d002:	b9eb      	cbnz	r3, 800d040 <_vfiprintf_r+0x78>
 800d004:	4629      	mov	r1, r5
 800d006:	4630      	mov	r0, r6
 800d008:	f7fe fb8e 	bl	800b728 <__swsetup_r>
 800d00c:	b1c0      	cbz	r0, 800d040 <_vfiprintf_r+0x78>
 800d00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d010:	07dc      	lsls	r4, r3, #31
 800d012:	d50e      	bpl.n	800d032 <_vfiprintf_r+0x6a>
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	b01d      	add	sp, #116	; 0x74
 800d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01e:	4b7b      	ldr	r3, [pc, #492]	; (800d20c <_vfiprintf_r+0x244>)
 800d020:	429d      	cmp	r5, r3
 800d022:	d101      	bne.n	800d028 <_vfiprintf_r+0x60>
 800d024:	68b5      	ldr	r5, [r6, #8]
 800d026:	e7df      	b.n	800cfe8 <_vfiprintf_r+0x20>
 800d028:	4b79      	ldr	r3, [pc, #484]	; (800d210 <_vfiprintf_r+0x248>)
 800d02a:	429d      	cmp	r5, r3
 800d02c:	bf08      	it	eq
 800d02e:	68f5      	ldreq	r5, [r6, #12]
 800d030:	e7da      	b.n	800cfe8 <_vfiprintf_r+0x20>
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	0598      	lsls	r0, r3, #22
 800d036:	d4ed      	bmi.n	800d014 <_vfiprintf_r+0x4c>
 800d038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03a:	f7fd fce9 	bl	800aa10 <__retarget_lock_release_recursive>
 800d03e:	e7e9      	b.n	800d014 <_vfiprintf_r+0x4c>
 800d040:	2300      	movs	r3, #0
 800d042:	9309      	str	r3, [sp, #36]	; 0x24
 800d044:	2320      	movs	r3, #32
 800d046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d04e:	2330      	movs	r3, #48	; 0x30
 800d050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d214 <_vfiprintf_r+0x24c>
 800d054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d058:	f04f 0901 	mov.w	r9, #1
 800d05c:	4623      	mov	r3, r4
 800d05e:	469a      	mov	sl, r3
 800d060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d064:	b10a      	cbz	r2, 800d06a <_vfiprintf_r+0xa2>
 800d066:	2a25      	cmp	r2, #37	; 0x25
 800d068:	d1f9      	bne.n	800d05e <_vfiprintf_r+0x96>
 800d06a:	ebba 0b04 	subs.w	fp, sl, r4
 800d06e:	d00b      	beq.n	800d088 <_vfiprintf_r+0xc0>
 800d070:	465b      	mov	r3, fp
 800d072:	4622      	mov	r2, r4
 800d074:	4629      	mov	r1, r5
 800d076:	4630      	mov	r0, r6
 800d078:	f7ff ff93 	bl	800cfa2 <__sfputs_r>
 800d07c:	3001      	adds	r0, #1
 800d07e:	f000 80aa 	beq.w	800d1d6 <_vfiprintf_r+0x20e>
 800d082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d084:	445a      	add	r2, fp
 800d086:	9209      	str	r2, [sp, #36]	; 0x24
 800d088:	f89a 3000 	ldrb.w	r3, [sl]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 80a2 	beq.w	800d1d6 <_vfiprintf_r+0x20e>
 800d092:	2300      	movs	r3, #0
 800d094:	f04f 32ff 	mov.w	r2, #4294967295
 800d098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d09c:	f10a 0a01 	add.w	sl, sl, #1
 800d0a0:	9304      	str	r3, [sp, #16]
 800d0a2:	9307      	str	r3, [sp, #28]
 800d0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800d0aa:	4654      	mov	r4, sl
 800d0ac:	2205      	movs	r2, #5
 800d0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b2:	4858      	ldr	r0, [pc, #352]	; (800d214 <_vfiprintf_r+0x24c>)
 800d0b4:	f7f3 f8bc 	bl	8000230 <memchr>
 800d0b8:	9a04      	ldr	r2, [sp, #16]
 800d0ba:	b9d8      	cbnz	r0, 800d0f4 <_vfiprintf_r+0x12c>
 800d0bc:	06d1      	lsls	r1, r2, #27
 800d0be:	bf44      	itt	mi
 800d0c0:	2320      	movmi	r3, #32
 800d0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c6:	0713      	lsls	r3, r2, #28
 800d0c8:	bf44      	itt	mi
 800d0ca:	232b      	movmi	r3, #43	; 0x2b
 800d0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d6:	d015      	beq.n	800d104 <_vfiprintf_r+0x13c>
 800d0d8:	9a07      	ldr	r2, [sp, #28]
 800d0da:	4654      	mov	r4, sl
 800d0dc:	2000      	movs	r0, #0
 800d0de:	f04f 0c0a 	mov.w	ip, #10
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0e8:	3b30      	subs	r3, #48	; 0x30
 800d0ea:	2b09      	cmp	r3, #9
 800d0ec:	d94e      	bls.n	800d18c <_vfiprintf_r+0x1c4>
 800d0ee:	b1b0      	cbz	r0, 800d11e <_vfiprintf_r+0x156>
 800d0f0:	9207      	str	r2, [sp, #28]
 800d0f2:	e014      	b.n	800d11e <_vfiprintf_r+0x156>
 800d0f4:	eba0 0308 	sub.w	r3, r0, r8
 800d0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	9304      	str	r3, [sp, #16]
 800d100:	46a2      	mov	sl, r4
 800d102:	e7d2      	b.n	800d0aa <_vfiprintf_r+0xe2>
 800d104:	9b03      	ldr	r3, [sp, #12]
 800d106:	1d19      	adds	r1, r3, #4
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	9103      	str	r1, [sp, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	bfbb      	ittet	lt
 800d110:	425b      	neglt	r3, r3
 800d112:	f042 0202 	orrlt.w	r2, r2, #2
 800d116:	9307      	strge	r3, [sp, #28]
 800d118:	9307      	strlt	r3, [sp, #28]
 800d11a:	bfb8      	it	lt
 800d11c:	9204      	strlt	r2, [sp, #16]
 800d11e:	7823      	ldrb	r3, [r4, #0]
 800d120:	2b2e      	cmp	r3, #46	; 0x2e
 800d122:	d10c      	bne.n	800d13e <_vfiprintf_r+0x176>
 800d124:	7863      	ldrb	r3, [r4, #1]
 800d126:	2b2a      	cmp	r3, #42	; 0x2a
 800d128:	d135      	bne.n	800d196 <_vfiprintf_r+0x1ce>
 800d12a:	9b03      	ldr	r3, [sp, #12]
 800d12c:	1d1a      	adds	r2, r3, #4
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	9203      	str	r2, [sp, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	bfb8      	it	lt
 800d136:	f04f 33ff 	movlt.w	r3, #4294967295
 800d13a:	3402      	adds	r4, #2
 800d13c:	9305      	str	r3, [sp, #20]
 800d13e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d224 <_vfiprintf_r+0x25c>
 800d142:	7821      	ldrb	r1, [r4, #0]
 800d144:	2203      	movs	r2, #3
 800d146:	4650      	mov	r0, sl
 800d148:	f7f3 f872 	bl	8000230 <memchr>
 800d14c:	b140      	cbz	r0, 800d160 <_vfiprintf_r+0x198>
 800d14e:	2340      	movs	r3, #64	; 0x40
 800d150:	eba0 000a 	sub.w	r0, r0, sl
 800d154:	fa03 f000 	lsl.w	r0, r3, r0
 800d158:	9b04      	ldr	r3, [sp, #16]
 800d15a:	4303      	orrs	r3, r0
 800d15c:	3401      	adds	r4, #1
 800d15e:	9304      	str	r3, [sp, #16]
 800d160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d164:	482c      	ldr	r0, [pc, #176]	; (800d218 <_vfiprintf_r+0x250>)
 800d166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d16a:	2206      	movs	r2, #6
 800d16c:	f7f3 f860 	bl	8000230 <memchr>
 800d170:	2800      	cmp	r0, #0
 800d172:	d03f      	beq.n	800d1f4 <_vfiprintf_r+0x22c>
 800d174:	4b29      	ldr	r3, [pc, #164]	; (800d21c <_vfiprintf_r+0x254>)
 800d176:	bb1b      	cbnz	r3, 800d1c0 <_vfiprintf_r+0x1f8>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	3307      	adds	r3, #7
 800d17c:	f023 0307 	bic.w	r3, r3, #7
 800d180:	3308      	adds	r3, #8
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d186:	443b      	add	r3, r7
 800d188:	9309      	str	r3, [sp, #36]	; 0x24
 800d18a:	e767      	b.n	800d05c <_vfiprintf_r+0x94>
 800d18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d190:	460c      	mov	r4, r1
 800d192:	2001      	movs	r0, #1
 800d194:	e7a5      	b.n	800d0e2 <_vfiprintf_r+0x11a>
 800d196:	2300      	movs	r3, #0
 800d198:	3401      	adds	r4, #1
 800d19a:	9305      	str	r3, [sp, #20]
 800d19c:	4619      	mov	r1, r3
 800d19e:	f04f 0c0a 	mov.w	ip, #10
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a8:	3a30      	subs	r2, #48	; 0x30
 800d1aa:	2a09      	cmp	r2, #9
 800d1ac:	d903      	bls.n	800d1b6 <_vfiprintf_r+0x1ee>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d0c5      	beq.n	800d13e <_vfiprintf_r+0x176>
 800d1b2:	9105      	str	r1, [sp, #20]
 800d1b4:	e7c3      	b.n	800d13e <_vfiprintf_r+0x176>
 800d1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e7f0      	b.n	800d1a2 <_vfiprintf_r+0x1da>
 800d1c0:	ab03      	add	r3, sp, #12
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	4b16      	ldr	r3, [pc, #88]	; (800d220 <_vfiprintf_r+0x258>)
 800d1c8:	a904      	add	r1, sp, #16
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	f7fd fd32 	bl	800ac34 <_printf_float>
 800d1d0:	4607      	mov	r7, r0
 800d1d2:	1c78      	adds	r0, r7, #1
 800d1d4:	d1d6      	bne.n	800d184 <_vfiprintf_r+0x1bc>
 800d1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1d8:	07d9      	lsls	r1, r3, #31
 800d1da:	d405      	bmi.n	800d1e8 <_vfiprintf_r+0x220>
 800d1dc:	89ab      	ldrh	r3, [r5, #12]
 800d1de:	059a      	lsls	r2, r3, #22
 800d1e0:	d402      	bmi.n	800d1e8 <_vfiprintf_r+0x220>
 800d1e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e4:	f7fd fc14 	bl	800aa10 <__retarget_lock_release_recursive>
 800d1e8:	89ab      	ldrh	r3, [r5, #12]
 800d1ea:	065b      	lsls	r3, r3, #25
 800d1ec:	f53f af12 	bmi.w	800d014 <_vfiprintf_r+0x4c>
 800d1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1f2:	e711      	b.n	800d018 <_vfiprintf_r+0x50>
 800d1f4:	ab03      	add	r3, sp, #12
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	462a      	mov	r2, r5
 800d1fa:	4b09      	ldr	r3, [pc, #36]	; (800d220 <_vfiprintf_r+0x258>)
 800d1fc:	a904      	add	r1, sp, #16
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7fd ffbc 	bl	800b17c <_printf_i>
 800d204:	e7e4      	b.n	800d1d0 <_vfiprintf_r+0x208>
 800d206:	bf00      	nop
 800d208:	0800fdf4 	.word	0x0800fdf4
 800d20c:	0800fe14 	.word	0x0800fe14
 800d210:	0800fdd4 	.word	0x0800fdd4
 800d214:	0801005c 	.word	0x0801005c
 800d218:	08010066 	.word	0x08010066
 800d21c:	0800ac35 	.word	0x0800ac35
 800d220:	0800cfa3 	.word	0x0800cfa3
 800d224:	08010062 	.word	0x08010062

0800d228 <_read_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	; (800d248 <_read_r+0x20>)
 800d22c:	4604      	mov	r4, r0
 800d22e:	4608      	mov	r0, r1
 800d230:	4611      	mov	r1, r2
 800d232:	2200      	movs	r2, #0
 800d234:	602a      	str	r2, [r5, #0]
 800d236:	461a      	mov	r2, r3
 800d238:	f7f5 faf2 	bl	8002820 <_read>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d102      	bne.n	800d246 <_read_r+0x1e>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	b103      	cbz	r3, 800d246 <_read_r+0x1e>
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	200092a4 	.word	0x200092a4

0800d24c <__assert_func>:
 800d24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d24e:	4614      	mov	r4, r2
 800d250:	461a      	mov	r2, r3
 800d252:	4b09      	ldr	r3, [pc, #36]	; (800d278 <__assert_func+0x2c>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4605      	mov	r5, r0
 800d258:	68d8      	ldr	r0, [r3, #12]
 800d25a:	b14c      	cbz	r4, 800d270 <__assert_func+0x24>
 800d25c:	4b07      	ldr	r3, [pc, #28]	; (800d27c <__assert_func+0x30>)
 800d25e:	9100      	str	r1, [sp, #0]
 800d260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d264:	4906      	ldr	r1, [pc, #24]	; (800d280 <__assert_func+0x34>)
 800d266:	462b      	mov	r3, r5
 800d268:	f000 f80e 	bl	800d288 <fiprintf>
 800d26c:	f000 f85f 	bl	800d32e <abort>
 800d270:	4b04      	ldr	r3, [pc, #16]	; (800d284 <__assert_func+0x38>)
 800d272:	461c      	mov	r4, r3
 800d274:	e7f3      	b.n	800d25e <__assert_func+0x12>
 800d276:	bf00      	nop
 800d278:	200008d0 	.word	0x200008d0
 800d27c:	0801006d 	.word	0x0801006d
 800d280:	0801007a 	.word	0x0801007a
 800d284:	080100a8 	.word	0x080100a8

0800d288 <fiprintf>:
 800d288:	b40e      	push	{r1, r2, r3}
 800d28a:	b503      	push	{r0, r1, lr}
 800d28c:	4601      	mov	r1, r0
 800d28e:	ab03      	add	r3, sp, #12
 800d290:	4805      	ldr	r0, [pc, #20]	; (800d2a8 <fiprintf+0x20>)
 800d292:	f853 2b04 	ldr.w	r2, [r3], #4
 800d296:	6800      	ldr	r0, [r0, #0]
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	f7ff fe95 	bl	800cfc8 <_vfiprintf_r>
 800d29e:	b002      	add	sp, #8
 800d2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2a4:	b003      	add	sp, #12
 800d2a6:	4770      	bx	lr
 800d2a8:	200008d0 	.word	0x200008d0

0800d2ac <_fstat_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d07      	ldr	r5, [pc, #28]	; (800d2cc <_fstat_r+0x20>)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	602b      	str	r3, [r5, #0]
 800d2ba:	f7f5 fada 	bl	8002872 <_fstat>
 800d2be:	1c43      	adds	r3, r0, #1
 800d2c0:	d102      	bne.n	800d2c8 <_fstat_r+0x1c>
 800d2c2:	682b      	ldr	r3, [r5, #0]
 800d2c4:	b103      	cbz	r3, 800d2c8 <_fstat_r+0x1c>
 800d2c6:	6023      	str	r3, [r4, #0]
 800d2c8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ca:	bf00      	nop
 800d2cc:	200092a4 	.word	0x200092a4

0800d2d0 <_isatty_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d06      	ldr	r5, [pc, #24]	; (800d2ec <_isatty_r+0x1c>)
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	602b      	str	r3, [r5, #0]
 800d2dc:	f7f5 fad9 	bl	8002892 <_isatty>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_isatty_r+0x1a>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_isatty_r+0x1a>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	200092a4 	.word	0x200092a4

0800d2f0 <__ascii_mbtowc>:
 800d2f0:	b082      	sub	sp, #8
 800d2f2:	b901      	cbnz	r1, 800d2f6 <__ascii_mbtowc+0x6>
 800d2f4:	a901      	add	r1, sp, #4
 800d2f6:	b142      	cbz	r2, 800d30a <__ascii_mbtowc+0x1a>
 800d2f8:	b14b      	cbz	r3, 800d30e <__ascii_mbtowc+0x1e>
 800d2fa:	7813      	ldrb	r3, [r2, #0]
 800d2fc:	600b      	str	r3, [r1, #0]
 800d2fe:	7812      	ldrb	r2, [r2, #0]
 800d300:	1e10      	subs	r0, r2, #0
 800d302:	bf18      	it	ne
 800d304:	2001      	movne	r0, #1
 800d306:	b002      	add	sp, #8
 800d308:	4770      	bx	lr
 800d30a:	4610      	mov	r0, r2
 800d30c:	e7fb      	b.n	800d306 <__ascii_mbtowc+0x16>
 800d30e:	f06f 0001 	mvn.w	r0, #1
 800d312:	e7f8      	b.n	800d306 <__ascii_mbtowc+0x16>

0800d314 <__ascii_wctomb>:
 800d314:	b149      	cbz	r1, 800d32a <__ascii_wctomb+0x16>
 800d316:	2aff      	cmp	r2, #255	; 0xff
 800d318:	bf85      	ittet	hi
 800d31a:	238a      	movhi	r3, #138	; 0x8a
 800d31c:	6003      	strhi	r3, [r0, #0]
 800d31e:	700a      	strbls	r2, [r1, #0]
 800d320:	f04f 30ff 	movhi.w	r0, #4294967295
 800d324:	bf98      	it	ls
 800d326:	2001      	movls	r0, #1
 800d328:	4770      	bx	lr
 800d32a:	4608      	mov	r0, r1
 800d32c:	4770      	bx	lr

0800d32e <abort>:
 800d32e:	b508      	push	{r3, lr}
 800d330:	2006      	movs	r0, #6
 800d332:	f000 f82b 	bl	800d38c <raise>
 800d336:	2001      	movs	r0, #1
 800d338:	f7f5 fa68 	bl	800280c <_exit>

0800d33c <_raise_r>:
 800d33c:	291f      	cmp	r1, #31
 800d33e:	b538      	push	{r3, r4, r5, lr}
 800d340:	4604      	mov	r4, r0
 800d342:	460d      	mov	r5, r1
 800d344:	d904      	bls.n	800d350 <_raise_r+0x14>
 800d346:	2316      	movs	r3, #22
 800d348:	6003      	str	r3, [r0, #0]
 800d34a:	f04f 30ff 	mov.w	r0, #4294967295
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d352:	b112      	cbz	r2, 800d35a <_raise_r+0x1e>
 800d354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d358:	b94b      	cbnz	r3, 800d36e <_raise_r+0x32>
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 f830 	bl	800d3c0 <_getpid_r>
 800d360:	462a      	mov	r2, r5
 800d362:	4601      	mov	r1, r0
 800d364:	4620      	mov	r0, r4
 800d366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d36a:	f000 b817 	b.w	800d39c <_kill_r>
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d00a      	beq.n	800d388 <_raise_r+0x4c>
 800d372:	1c59      	adds	r1, r3, #1
 800d374:	d103      	bne.n	800d37e <_raise_r+0x42>
 800d376:	2316      	movs	r3, #22
 800d378:	6003      	str	r3, [r0, #0]
 800d37a:	2001      	movs	r0, #1
 800d37c:	e7e7      	b.n	800d34e <_raise_r+0x12>
 800d37e:	2400      	movs	r4, #0
 800d380:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d384:	4628      	mov	r0, r5
 800d386:	4798      	blx	r3
 800d388:	2000      	movs	r0, #0
 800d38a:	e7e0      	b.n	800d34e <_raise_r+0x12>

0800d38c <raise>:
 800d38c:	4b02      	ldr	r3, [pc, #8]	; (800d398 <raise+0xc>)
 800d38e:	4601      	mov	r1, r0
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	f7ff bfd3 	b.w	800d33c <_raise_r>
 800d396:	bf00      	nop
 800d398:	200008d0 	.word	0x200008d0

0800d39c <_kill_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4d07      	ldr	r5, [pc, #28]	; (800d3bc <_kill_r+0x20>)
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	4611      	mov	r1, r2
 800d3a8:	602b      	str	r3, [r5, #0]
 800d3aa:	f7f5 fa1f 	bl	80027ec <_kill>
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	d102      	bne.n	800d3b8 <_kill_r+0x1c>
 800d3b2:	682b      	ldr	r3, [r5, #0]
 800d3b4:	b103      	cbz	r3, 800d3b8 <_kill_r+0x1c>
 800d3b6:	6023      	str	r3, [r4, #0]
 800d3b8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ba:	bf00      	nop
 800d3bc:	200092a4 	.word	0x200092a4

0800d3c0 <_getpid_r>:
 800d3c0:	f7f5 ba0c 	b.w	80027dc <_getpid>

0800d3c4 <cabs>:
 800d3c4:	b508      	push	{r3, lr}
 800d3c6:	ed2d 8b06 	vpush	{d8-d10}
 800d3ca:	eeb0 aa40 	vmov.f32	s20, s0
 800d3ce:	eef0 aa60 	vmov.f32	s21, s1
 800d3d2:	eeb0 9a41 	vmov.f32	s18, s2
 800d3d6:	eef0 9a61 	vmov.f32	s19, s3
 800d3da:	f000 f879 	bl	800d4d0 <creal>
 800d3de:	eeb0 1a49 	vmov.f32	s2, s18
 800d3e2:	eef0 1a69 	vmov.f32	s3, s19
 800d3e6:	eeb0 8a40 	vmov.f32	s16, s0
 800d3ea:	eef0 8a60 	vmov.f32	s17, s1
 800d3ee:	eeb0 0a4a 	vmov.f32	s0, s20
 800d3f2:	eef0 0a6a 	vmov.f32	s1, s21
 800d3f6:	f000 f866 	bl	800d4c6 <cimag>
 800d3fa:	eeb0 1a40 	vmov.f32	s2, s0
 800d3fe:	eef0 1a60 	vmov.f32	s3, s1
 800d402:	eeb0 0a48 	vmov.f32	s0, s16
 800d406:	eef0 0a68 	vmov.f32	s1, s17
 800d40a:	ecbd 8b06 	vpop	{d8-d10}
 800d40e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d412:	f000 ba19 	b.w	800d848 <hypot>

0800d416 <cexp>:
 800d416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41a:	ed2d 8b06 	vpush	{d8-d10}
 800d41e:	eeb0 aa40 	vmov.f32	s20, s0
 800d422:	eef0 aa60 	vmov.f32	s21, s1
 800d426:	eeb0 8a41 	vmov.f32	s16, s2
 800d42a:	eef0 8a61 	vmov.f32	s17, s3
 800d42e:	f000 f84f 	bl	800d4d0 <creal>
 800d432:	eeb0 1a48 	vmov.f32	s2, s16
 800d436:	eef0 1a68 	vmov.f32	s3, s17
 800d43a:	eeb0 9a40 	vmov.f32	s18, s0
 800d43e:	eef0 9a60 	vmov.f32	s19, s1
 800d442:	eeb0 0a4a 	vmov.f32	s0, s20
 800d446:	eef0 0a6a 	vmov.f32	s1, s21
 800d44a:	f000 f83c 	bl	800d4c6 <cimag>
 800d44e:	eeb0 8a40 	vmov.f32	s16, s0
 800d452:	eef0 8a60 	vmov.f32	s17, s1
 800d456:	eeb0 0a49 	vmov.f32	s0, s18
 800d45a:	eef0 0a69 	vmov.f32	s1, s19
 800d45e:	f000 f9a3 	bl	800d7a8 <exp>
 800d462:	ec57 6b10 	vmov	r6, r7, d0
 800d466:	eeb0 0a48 	vmov.f32	s0, s16
 800d46a:	eef0 0a68 	vmov.f32	s1, s17
 800d46e:	f000 f947 	bl	800d700 <sin>
 800d472:	4632      	mov	r2, r6
 800d474:	463b      	mov	r3, r7
 800d476:	ec51 0b10 	vmov	r0, r1, d0
 800d47a:	f7f3 f8e5 	bl	8000648 <__aeabi_dmul>
 800d47e:	eeb0 0a48 	vmov.f32	s0, s16
 800d482:	eef0 0a68 	vmov.f32	s1, s17
 800d486:	4604      	mov	r4, r0
 800d488:	460d      	mov	r5, r1
 800d48a:	f000 f8e9 	bl	800d660 <cos>
 800d48e:	4632      	mov	r2, r6
 800d490:	ec51 0b10 	vmov	r0, r1, d0
 800d494:	463b      	mov	r3, r7
 800d496:	f7f3 f8d7 	bl	8000648 <__aeabi_dmul>
 800d49a:	2200      	movs	r2, #0
 800d49c:	4606      	mov	r6, r0
 800d49e:	460f      	mov	r7, r1
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	f7f3 f8cf 	bl	8000648 <__aeabi_dmul>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	4639      	mov	r1, r7
 800d4b2:	f7f2 ff13 	bl	80002dc <__adddf3>
 800d4b6:	ecbd 8b06 	vpop	{d8-d10}
 800d4ba:	ec41 0b10 	vmov	d0, r0, r1
 800d4be:	ec45 4b11 	vmov	d1, r4, r5
 800d4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4c6 <cimag>:
 800d4c6:	eeb0 0a41 	vmov.f32	s0, s2
 800d4ca:	eef0 0a61 	vmov.f32	s1, s3
 800d4ce:	4770      	bx	lr

0800d4d0 <creal>:
 800d4d0:	4770      	bx	lr
 800d4d2:	0000      	movs	r0, r0
 800d4d4:	0000      	movs	r0, r0
	...

0800d4d8 <cbrt>:
 800d4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4dc:	ec51 0b10 	vmov	r0, r1, d0
 800d4e0:	4a5b      	ldr	r2, [pc, #364]	; (800d650 <cbrt+0x178>)
 800d4e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	ed2d 8b02 	vpush	{d8}
 800d4ec:	ee10 2a10 	vmov	r2, s0
 800d4f0:	468a      	mov	sl, r1
 800d4f2:	d908      	bls.n	800d506 <cbrt+0x2e>
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	f7f2 fef1 	bl	80002dc <__adddf3>
 800d4fa:	ecbd 8b02 	vpop	{d8}
 800d4fe:	ec41 0b10 	vmov	d0, r0, r1
 800d502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d506:	431a      	orrs	r2, r3
 800d508:	d0f7      	beq.n	800d4fa <cbrt+0x22>
 800d50a:	4a52      	ldr	r2, [pc, #328]	; (800d654 <cbrt+0x17c>)
 800d50c:	ea0a 0202 	and.w	r2, sl, r2
 800d510:	4619      	mov	r1, r3
 800d512:	4604      	mov	r4, r0
 800d514:	461d      	mov	r5, r3
 800d516:	2a00      	cmp	r2, #0
 800d518:	d17b      	bne.n	800d612 <cbrt+0x13a>
 800d51a:	4b4f      	ldr	r3, [pc, #316]	; (800d658 <cbrt+0x180>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	f7f3 f893 	bl	8000648 <__aeabi_dmul>
 800d522:	2203      	movs	r2, #3
 800d524:	fbb1 f3f2 	udiv	r3, r1, r2
 800d528:	f103 5725 	add.w	r7, r3, #692060160	; 0x29400000
 800d52c:	f507 177d 	add.w	r7, r7, #4145152	; 0x3f4000
 800d530:	f507 5762 	add.w	r7, r7, #14464	; 0x3880
 800d534:	4606      	mov	r6, r0
 800d536:	3713      	adds	r7, #19
 800d538:	4632      	mov	r2, r6
 800d53a:	463b      	mov	r3, r7
 800d53c:	4630      	mov	r0, r6
 800d53e:	4639      	mov	r1, r7
 800d540:	f7f3 f882 	bl	8000648 <__aeabi_dmul>
 800d544:	4622      	mov	r2, r4
 800d546:	462b      	mov	r3, r5
 800d548:	f7f3 f9a8 	bl	800089c <__aeabi_ddiv>
 800d54c:	4632      	mov	r2, r6
 800d54e:	463b      	mov	r3, r7
 800d550:	f7f3 f87a 	bl	8000648 <__aeabi_dmul>
 800d554:	a334      	add	r3, pc, #208	; (adr r3, 800d628 <cbrt+0x150>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	f7f2 febf 	bl	80002dc <__adddf3>
 800d55e:	a334      	add	r3, pc, #208	; (adr r3, 800d630 <cbrt+0x158>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	4680      	mov	r8, r0
 800d566:	4689      	mov	r9, r1
 800d568:	f7f2 feb8 	bl	80002dc <__adddf3>
 800d56c:	4642      	mov	r2, r8
 800d56e:	464b      	mov	r3, r9
 800d570:	ec41 0b18 	vmov	d8, r0, r1
 800d574:	a130      	add	r1, pc, #192	; (adr r1, 800d638 <cbrt+0x160>)
 800d576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d57a:	f7f3 f98f 	bl	800089c <__aeabi_ddiv>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	ec51 0b18 	vmov	r0, r1, d8
 800d586:	f7f2 fea9 	bl	80002dc <__adddf3>
 800d58a:	4602      	mov	r2, r0
 800d58c:	460b      	mov	r3, r1
 800d58e:	a12c      	add	r1, pc, #176	; (adr r1, 800d640 <cbrt+0x168>)
 800d590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d594:	f7f3 f982 	bl	800089c <__aeabi_ddiv>
 800d598:	a32b      	add	r3, pc, #172	; (adr r3, 800d648 <cbrt+0x170>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	f7f2 fe9d 	bl	80002dc <__adddf3>
 800d5a2:	4632      	mov	r2, r6
 800d5a4:	463b      	mov	r3, r7
 800d5a6:	f7f3 f84f 	bl	8000648 <__aeabi_dmul>
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	1c4f      	adds	r7, r1, #1
 800d5ae:	4632      	mov	r2, r6
 800d5b0:	463b      	mov	r3, r7
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	4639      	mov	r1, r7
 800d5b6:	f7f3 f847 	bl	8000648 <__aeabi_dmul>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4620      	mov	r0, r4
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	f7f3 f96b 	bl	800089c <__aeabi_ddiv>
 800d5c6:	4632      	mov	r2, r6
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	4680      	mov	r8, r0
 800d5cc:	4689      	mov	r9, r1
 800d5ce:	f7f2 fe83 	bl	80002d8 <__aeabi_dsub>
 800d5d2:	4632      	mov	r2, r6
 800d5d4:	460d      	mov	r5, r1
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	463b      	mov	r3, r7
 800d5da:	4630      	mov	r0, r6
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f2 fe7d 	bl	80002dc <__adddf3>
 800d5e2:	4642      	mov	r2, r8
 800d5e4:	464b      	mov	r3, r9
 800d5e6:	f7f2 fe79 	bl	80002dc <__adddf3>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	f7f3 f953 	bl	800089c <__aeabi_ddiv>
 800d5f6:	4632      	mov	r2, r6
 800d5f8:	463b      	mov	r3, r7
 800d5fa:	f7f3 f825 	bl	8000648 <__aeabi_dmul>
 800d5fe:	463b      	mov	r3, r7
 800d600:	4632      	mov	r2, r6
 800d602:	f7f2 fe6b 	bl	80002dc <__adddf3>
 800d606:	f00a 4300 	and.w	r3, sl, #2147483648	; 0x80000000
 800d60a:	ea43 0501 	orr.w	r5, r3, r1
 800d60e:	4629      	mov	r1, r5
 800d610:	e773      	b.n	800d4fa <cbrt+0x22>
 800d612:	2203      	movs	r2, #3
 800d614:	fbb3 f3f2 	udiv	r3, r3, r2
 800d618:	f103 572c 	add.w	r7, r3, #721420288	; 0x2b000000
 800d61c:	f5a7 07c1 	sub.w	r7, r7, #6324224	; 0x608000
 800d620:	2600      	movs	r6, #0
 800d622:	f2a7 776d 	subw	r7, r7, #1901	; 0x76d
 800d626:	e787      	b.n	800d538 <cbrt+0x60>
 800d628:	f15f15f1 	.word	0xf15f15f1
 800d62c:	3fe15f15 	.word	0x3fe15f15
 800d630:	0ea0ea0f 	.word	0x0ea0ea0f
 800d634:	3ff6a0ea 	.word	0x3ff6a0ea
 800d638:	2532c834 	.word	0x2532c834
 800d63c:	bfe691de 	.word	0xbfe691de
 800d640:	6db6db6e 	.word	0x6db6db6e
 800d644:	3ff9b6db 	.word	0x3ff9b6db
 800d648:	b6db6db7 	.word	0xb6db6db7
 800d64c:	3fd6db6d 	.word	0x3fd6db6d
 800d650:	7fefffff 	.word	0x7fefffff
 800d654:	7ff00000 	.word	0x7ff00000
 800d658:	43500000 	.word	0x43500000
 800d65c:	00000000 	.word	0x00000000

0800d660 <cos>:
 800d660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d662:	ec53 2b10 	vmov	r2, r3, d0
 800d666:	4824      	ldr	r0, [pc, #144]	; (800d6f8 <cos+0x98>)
 800d668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d66c:	4281      	cmp	r1, r0
 800d66e:	dc06      	bgt.n	800d67e <cos+0x1e>
 800d670:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d6f0 <cos+0x90>
 800d674:	f001 fc50 	bl	800ef18 <__kernel_cos>
 800d678:	ec51 0b10 	vmov	r0, r1, d0
 800d67c:	e007      	b.n	800d68e <cos+0x2e>
 800d67e:	481f      	ldr	r0, [pc, #124]	; (800d6fc <cos+0x9c>)
 800d680:	4281      	cmp	r1, r0
 800d682:	dd09      	ble.n	800d698 <cos+0x38>
 800d684:	ee10 0a10 	vmov	r0, s0
 800d688:	4619      	mov	r1, r3
 800d68a:	f7f2 fe25 	bl	80002d8 <__aeabi_dsub>
 800d68e:	ec41 0b10 	vmov	d0, r0, r1
 800d692:	b005      	add	sp, #20
 800d694:	f85d fb04 	ldr.w	pc, [sp], #4
 800d698:	4668      	mov	r0, sp
 800d69a:	f001 f97d 	bl	800e998 <__ieee754_rem_pio2>
 800d69e:	f000 0003 	and.w	r0, r0, #3
 800d6a2:	2801      	cmp	r0, #1
 800d6a4:	d007      	beq.n	800d6b6 <cos+0x56>
 800d6a6:	2802      	cmp	r0, #2
 800d6a8:	d012      	beq.n	800d6d0 <cos+0x70>
 800d6aa:	b9c0      	cbnz	r0, 800d6de <cos+0x7e>
 800d6ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6b0:	ed9d 0b00 	vldr	d0, [sp]
 800d6b4:	e7de      	b.n	800d674 <cos+0x14>
 800d6b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6ba:	ed9d 0b00 	vldr	d0, [sp]
 800d6be:	f002 f833 	bl	800f728 <__kernel_sin>
 800d6c2:	ec53 2b10 	vmov	r2, r3, d0
 800d6c6:	ee10 0a10 	vmov	r0, s0
 800d6ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d6ce:	e7de      	b.n	800d68e <cos+0x2e>
 800d6d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6d4:	ed9d 0b00 	vldr	d0, [sp]
 800d6d8:	f001 fc1e 	bl	800ef18 <__kernel_cos>
 800d6dc:	e7f1      	b.n	800d6c2 <cos+0x62>
 800d6de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e2:	ed9d 0b00 	vldr	d0, [sp]
 800d6e6:	2001      	movs	r0, #1
 800d6e8:	f002 f81e 	bl	800f728 <__kernel_sin>
 800d6ec:	e7c4      	b.n	800d678 <cos+0x18>
 800d6ee:	bf00      	nop
	...
 800d6f8:	3fe921fb 	.word	0x3fe921fb
 800d6fc:	7fefffff 	.word	0x7fefffff

0800d700 <sin>:
 800d700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d702:	ec53 2b10 	vmov	r2, r3, d0
 800d706:	4826      	ldr	r0, [pc, #152]	; (800d7a0 <sin+0xa0>)
 800d708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d70c:	4281      	cmp	r1, r0
 800d70e:	dc07      	bgt.n	800d720 <sin+0x20>
 800d710:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d798 <sin+0x98>
 800d714:	2000      	movs	r0, #0
 800d716:	f002 f807 	bl	800f728 <__kernel_sin>
 800d71a:	ec51 0b10 	vmov	r0, r1, d0
 800d71e:	e007      	b.n	800d730 <sin+0x30>
 800d720:	4820      	ldr	r0, [pc, #128]	; (800d7a4 <sin+0xa4>)
 800d722:	4281      	cmp	r1, r0
 800d724:	dd09      	ble.n	800d73a <sin+0x3a>
 800d726:	ee10 0a10 	vmov	r0, s0
 800d72a:	4619      	mov	r1, r3
 800d72c:	f7f2 fdd4 	bl	80002d8 <__aeabi_dsub>
 800d730:	ec41 0b10 	vmov	d0, r0, r1
 800d734:	b005      	add	sp, #20
 800d736:	f85d fb04 	ldr.w	pc, [sp], #4
 800d73a:	4668      	mov	r0, sp
 800d73c:	f001 f92c 	bl	800e998 <__ieee754_rem_pio2>
 800d740:	f000 0003 	and.w	r0, r0, #3
 800d744:	2801      	cmp	r0, #1
 800d746:	d008      	beq.n	800d75a <sin+0x5a>
 800d748:	2802      	cmp	r0, #2
 800d74a:	d00d      	beq.n	800d768 <sin+0x68>
 800d74c:	b9d0      	cbnz	r0, 800d784 <sin+0x84>
 800d74e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d752:	ed9d 0b00 	vldr	d0, [sp]
 800d756:	2001      	movs	r0, #1
 800d758:	e7dd      	b.n	800d716 <sin+0x16>
 800d75a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d75e:	ed9d 0b00 	vldr	d0, [sp]
 800d762:	f001 fbd9 	bl	800ef18 <__kernel_cos>
 800d766:	e7d8      	b.n	800d71a <sin+0x1a>
 800d768:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d76c:	ed9d 0b00 	vldr	d0, [sp]
 800d770:	2001      	movs	r0, #1
 800d772:	f001 ffd9 	bl	800f728 <__kernel_sin>
 800d776:	ec53 2b10 	vmov	r2, r3, d0
 800d77a:	ee10 0a10 	vmov	r0, s0
 800d77e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d782:	e7d5      	b.n	800d730 <sin+0x30>
 800d784:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d788:	ed9d 0b00 	vldr	d0, [sp]
 800d78c:	f001 fbc4 	bl	800ef18 <__kernel_cos>
 800d790:	e7f1      	b.n	800d776 <sin+0x76>
 800d792:	bf00      	nop
 800d794:	f3af 8000 	nop.w
	...
 800d7a0:	3fe921fb 	.word	0x3fe921fb
 800d7a4:	7fefffff 	.word	0x7fefffff

0800d7a8 <exp>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	ed2d 8b02 	vpush	{d8}
 800d7ae:	ec55 4b10 	vmov	r4, r5, d0
 800d7b2:	f000 f931 	bl	800da18 <__ieee754_exp>
 800d7b6:	4b22      	ldr	r3, [pc, #136]	; (800d840 <exp+0x98>)
 800d7b8:	eeb0 8a40 	vmov.f32	s16, s0
 800d7bc:	eef0 8a60 	vmov.f32	s17, s1
 800d7c0:	f993 3000 	ldrsb.w	r3, [r3]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	d012      	beq.n	800d7ee <exp+0x46>
 800d7c8:	ec45 4b10 	vmov	d0, r4, r5
 800d7cc:	f002 f873 	bl	800f8b6 <finite>
 800d7d0:	b168      	cbz	r0, 800d7ee <exp+0x46>
 800d7d2:	a313      	add	r3, pc, #76	; (adr r3, 800d820 <exp+0x78>)
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	4620      	mov	r0, r4
 800d7da:	4629      	mov	r1, r5
 800d7dc:	f7f3 f9c4 	bl	8000b68 <__aeabi_dcmpgt>
 800d7e0:	b160      	cbz	r0, 800d7fc <exp+0x54>
 800d7e2:	f7fc fff3 	bl	800a7cc <__errno>
 800d7e6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800d828 <exp+0x80>
 800d7ea:	2322      	movs	r3, #34	; 0x22
 800d7ec:	6003      	str	r3, [r0, #0]
 800d7ee:	eeb0 0a48 	vmov.f32	s0, s16
 800d7f2:	eef0 0a68 	vmov.f32	s1, s17
 800d7f6:	ecbd 8b02 	vpop	{d8}
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	a30c      	add	r3, pc, #48	; (adr r3, 800d830 <exp+0x88>)
 800d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d802:	4620      	mov	r0, r4
 800d804:	4629      	mov	r1, r5
 800d806:	f7f3 f991 	bl	8000b2c <__aeabi_dcmplt>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d0ef      	beq.n	800d7ee <exp+0x46>
 800d80e:	f7fc ffdd 	bl	800a7cc <__errno>
 800d812:	2322      	movs	r3, #34	; 0x22
 800d814:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800d838 <exp+0x90>
 800d818:	6003      	str	r3, [r0, #0]
 800d81a:	e7e8      	b.n	800d7ee <exp+0x46>
 800d81c:	f3af 8000 	nop.w
 800d820:	fefa39ef 	.word	0xfefa39ef
 800d824:	40862e42 	.word	0x40862e42
 800d828:	00000000 	.word	0x00000000
 800d82c:	7ff00000 	.word	0x7ff00000
 800d830:	d52d3051 	.word	0xd52d3051
 800d834:	c0874910 	.word	0xc0874910
	...
 800d840:	20000aa0 	.word	0x20000aa0
 800d844:	00000000 	.word	0x00000000

0800d848 <hypot>:
 800d848:	b508      	push	{r3, lr}
 800d84a:	ed2d 8b06 	vpush	{d8-d10}
 800d84e:	eeb0 aa40 	vmov.f32	s20, s0
 800d852:	eef0 aa60 	vmov.f32	s21, s1
 800d856:	eeb0 9a41 	vmov.f32	s18, s2
 800d85a:	eef0 9a61 	vmov.f32	s19, s3
 800d85e:	f000 fa55 	bl	800dd0c <__ieee754_hypot>
 800d862:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <hypot+0x70>)
 800d864:	eeb0 8a40 	vmov.f32	s16, s0
 800d868:	eef0 8a60 	vmov.f32	s17, s1
 800d86c:	f993 3000 	ldrsb.w	r3, [r3]
 800d870:	3301      	adds	r3, #1
 800d872:	d016      	beq.n	800d8a2 <hypot+0x5a>
 800d874:	f002 f81f 	bl	800f8b6 <finite>
 800d878:	b998      	cbnz	r0, 800d8a2 <hypot+0x5a>
 800d87a:	eeb0 0a4a 	vmov.f32	s0, s20
 800d87e:	eef0 0a6a 	vmov.f32	s1, s21
 800d882:	f002 f818 	bl	800f8b6 <finite>
 800d886:	b160      	cbz	r0, 800d8a2 <hypot+0x5a>
 800d888:	eeb0 0a49 	vmov.f32	s0, s18
 800d88c:	eef0 0a69 	vmov.f32	s1, s19
 800d890:	f002 f811 	bl	800f8b6 <finite>
 800d894:	b128      	cbz	r0, 800d8a2 <hypot+0x5a>
 800d896:	f7fc ff99 	bl	800a7cc <__errno>
 800d89a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d8b0 <hypot+0x68>
 800d89e:	2322      	movs	r3, #34	; 0x22
 800d8a0:	6003      	str	r3, [r0, #0]
 800d8a2:	eeb0 0a48 	vmov.f32	s0, s16
 800d8a6:	eef0 0a68 	vmov.f32	s1, s17
 800d8aa:	ecbd 8b06 	vpop	{d8-d10}
 800d8ae:	bd08      	pop	{r3, pc}
 800d8b0:	00000000 	.word	0x00000000
 800d8b4:	7ff00000 	.word	0x7ff00000
 800d8b8:	20000aa0 	.word	0x20000aa0

0800d8bc <pow>:
 800d8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8c0:	ec59 8b10 	vmov	r8, r9, d0
 800d8c4:	ec57 6b11 	vmov	r6, r7, d1
 800d8c8:	f000 fb42 	bl	800df50 <__ieee754_pow>
 800d8cc:	4b4e      	ldr	r3, [pc, #312]	; (800da08 <pow+0x14c>)
 800d8ce:	f993 3000 	ldrsb.w	r3, [r3]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	ec55 4b10 	vmov	r4, r5, d0
 800d8d8:	d015      	beq.n	800d906 <pow+0x4a>
 800d8da:	4632      	mov	r2, r6
 800d8dc:	463b      	mov	r3, r7
 800d8de:	4630      	mov	r0, r6
 800d8e0:	4639      	mov	r1, r7
 800d8e2:	f7f3 f94b 	bl	8000b7c <__aeabi_dcmpun>
 800d8e6:	b970      	cbnz	r0, 800d906 <pow+0x4a>
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	4640      	mov	r0, r8
 800d8ee:	4649      	mov	r1, r9
 800d8f0:	f7f3 f944 	bl	8000b7c <__aeabi_dcmpun>
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	b148      	cbz	r0, 800d90e <pow+0x52>
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f3 f90b 	bl	8000b18 <__aeabi_dcmpeq>
 800d902:	2800      	cmp	r0, #0
 800d904:	d17d      	bne.n	800da02 <pow+0x146>
 800d906:	ec45 4b10 	vmov	d0, r4, r5
 800d90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d90e:	4640      	mov	r0, r8
 800d910:	4649      	mov	r1, r9
 800d912:	f7f3 f901 	bl	8000b18 <__aeabi_dcmpeq>
 800d916:	b1e0      	cbz	r0, 800d952 <pow+0x96>
 800d918:	2200      	movs	r2, #0
 800d91a:	2300      	movs	r3, #0
 800d91c:	4630      	mov	r0, r6
 800d91e:	4639      	mov	r1, r7
 800d920:	f7f3 f8fa 	bl	8000b18 <__aeabi_dcmpeq>
 800d924:	2800      	cmp	r0, #0
 800d926:	d16c      	bne.n	800da02 <pow+0x146>
 800d928:	ec47 6b10 	vmov	d0, r6, r7
 800d92c:	f001 ffc3 	bl	800f8b6 <finite>
 800d930:	2800      	cmp	r0, #0
 800d932:	d0e8      	beq.n	800d906 <pow+0x4a>
 800d934:	2200      	movs	r2, #0
 800d936:	2300      	movs	r3, #0
 800d938:	4630      	mov	r0, r6
 800d93a:	4639      	mov	r1, r7
 800d93c:	f7f3 f8f6 	bl	8000b2c <__aeabi_dcmplt>
 800d940:	2800      	cmp	r0, #0
 800d942:	d0e0      	beq.n	800d906 <pow+0x4a>
 800d944:	f7fc ff42 	bl	800a7cc <__errno>
 800d948:	2321      	movs	r3, #33	; 0x21
 800d94a:	6003      	str	r3, [r0, #0]
 800d94c:	2400      	movs	r4, #0
 800d94e:	4d2f      	ldr	r5, [pc, #188]	; (800da0c <pow+0x150>)
 800d950:	e7d9      	b.n	800d906 <pow+0x4a>
 800d952:	ec45 4b10 	vmov	d0, r4, r5
 800d956:	f001 ffae 	bl	800f8b6 <finite>
 800d95a:	bbb8      	cbnz	r0, 800d9cc <pow+0x110>
 800d95c:	ec49 8b10 	vmov	d0, r8, r9
 800d960:	f001 ffa9 	bl	800f8b6 <finite>
 800d964:	b390      	cbz	r0, 800d9cc <pow+0x110>
 800d966:	ec47 6b10 	vmov	d0, r6, r7
 800d96a:	f001 ffa4 	bl	800f8b6 <finite>
 800d96e:	b368      	cbz	r0, 800d9cc <pow+0x110>
 800d970:	4622      	mov	r2, r4
 800d972:	462b      	mov	r3, r5
 800d974:	4620      	mov	r0, r4
 800d976:	4629      	mov	r1, r5
 800d978:	f7f3 f900 	bl	8000b7c <__aeabi_dcmpun>
 800d97c:	b160      	cbz	r0, 800d998 <pow+0xdc>
 800d97e:	f7fc ff25 	bl	800a7cc <__errno>
 800d982:	2321      	movs	r3, #33	; 0x21
 800d984:	6003      	str	r3, [r0, #0]
 800d986:	2200      	movs	r2, #0
 800d988:	2300      	movs	r3, #0
 800d98a:	4610      	mov	r0, r2
 800d98c:	4619      	mov	r1, r3
 800d98e:	f7f2 ff85 	bl	800089c <__aeabi_ddiv>
 800d992:	4604      	mov	r4, r0
 800d994:	460d      	mov	r5, r1
 800d996:	e7b6      	b.n	800d906 <pow+0x4a>
 800d998:	f7fc ff18 	bl	800a7cc <__errno>
 800d99c:	2322      	movs	r3, #34	; 0x22
 800d99e:	6003      	str	r3, [r0, #0]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7f3 f8c0 	bl	8000b2c <__aeabi_dcmplt>
 800d9ac:	2400      	movs	r4, #0
 800d9ae:	b158      	cbz	r0, 800d9c8 <pow+0x10c>
 800d9b0:	ec47 6b10 	vmov	d0, r6, r7
 800d9b4:	f002 f814 	bl	800f9e0 <rint>
 800d9b8:	4632      	mov	r2, r6
 800d9ba:	ec51 0b10 	vmov	r0, r1, d0
 800d9be:	463b      	mov	r3, r7
 800d9c0:	f7f3 f8aa 	bl	8000b18 <__aeabi_dcmpeq>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d0c2      	beq.n	800d94e <pow+0x92>
 800d9c8:	4d11      	ldr	r5, [pc, #68]	; (800da10 <pow+0x154>)
 800d9ca:	e79c      	b.n	800d906 <pow+0x4a>
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	f7f3 f8a0 	bl	8000b18 <__aeabi_dcmpeq>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d094      	beq.n	800d906 <pow+0x4a>
 800d9dc:	ec49 8b10 	vmov	d0, r8, r9
 800d9e0:	f001 ff69 	bl	800f8b6 <finite>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d08e      	beq.n	800d906 <pow+0x4a>
 800d9e8:	ec47 6b10 	vmov	d0, r6, r7
 800d9ec:	f001 ff63 	bl	800f8b6 <finite>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d088      	beq.n	800d906 <pow+0x4a>
 800d9f4:	f7fc feea 	bl	800a7cc <__errno>
 800d9f8:	2322      	movs	r3, #34	; 0x22
 800d9fa:	6003      	str	r3, [r0, #0]
 800d9fc:	2400      	movs	r4, #0
 800d9fe:	2500      	movs	r5, #0
 800da00:	e781      	b.n	800d906 <pow+0x4a>
 800da02:	4d04      	ldr	r5, [pc, #16]	; (800da14 <pow+0x158>)
 800da04:	2400      	movs	r4, #0
 800da06:	e77e      	b.n	800d906 <pow+0x4a>
 800da08:	20000aa0 	.word	0x20000aa0
 800da0c:	fff00000 	.word	0xfff00000
 800da10:	7ff00000 	.word	0x7ff00000
 800da14:	3ff00000 	.word	0x3ff00000

0800da18 <__ieee754_exp>:
 800da18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da1c:	ec55 4b10 	vmov	r4, r5, d0
 800da20:	49b1      	ldr	r1, [pc, #708]	; (800dce8 <__ieee754_exp+0x2d0>)
 800da22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800da26:	428b      	cmp	r3, r1
 800da28:	ed2d 8b04 	vpush	{d8-d9}
 800da2c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800da30:	d937      	bls.n	800daa2 <__ieee754_exp+0x8a>
 800da32:	49ae      	ldr	r1, [pc, #696]	; (800dcec <__ieee754_exp+0x2d4>)
 800da34:	428b      	cmp	r3, r1
 800da36:	d916      	bls.n	800da66 <__ieee754_exp+0x4e>
 800da38:	ee10 3a10 	vmov	r3, s0
 800da3c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800da40:	4313      	orrs	r3, r2
 800da42:	d009      	beq.n	800da58 <__ieee754_exp+0x40>
 800da44:	ee10 2a10 	vmov	r2, s0
 800da48:	462b      	mov	r3, r5
 800da4a:	4620      	mov	r0, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	f7f2 fc45 	bl	80002dc <__adddf3>
 800da52:	4604      	mov	r4, r0
 800da54:	460d      	mov	r5, r1
 800da56:	e000      	b.n	800da5a <__ieee754_exp+0x42>
 800da58:	bb06      	cbnz	r6, 800da9c <__ieee754_exp+0x84>
 800da5a:	ecbd 8b04 	vpop	{d8-d9}
 800da5e:	ec45 4b10 	vmov	d0, r4, r5
 800da62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da66:	a38a      	add	r3, pc, #552	; (adr r3, 800dc90 <__ieee754_exp+0x278>)
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	ee10 0a10 	vmov	r0, s0
 800da70:	4629      	mov	r1, r5
 800da72:	f7f3 f879 	bl	8000b68 <__aeabi_dcmpgt>
 800da76:	b138      	cbz	r0, 800da88 <__ieee754_exp+0x70>
 800da78:	a387      	add	r3, pc, #540	; (adr r3, 800dc98 <__ieee754_exp+0x280>)
 800da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7e:	4610      	mov	r0, r2
 800da80:	4619      	mov	r1, r3
 800da82:	f7f2 fde1 	bl	8000648 <__aeabi_dmul>
 800da86:	e7e4      	b.n	800da52 <__ieee754_exp+0x3a>
 800da88:	a385      	add	r3, pc, #532	; (adr r3, 800dca0 <__ieee754_exp+0x288>)
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	4620      	mov	r0, r4
 800da90:	4629      	mov	r1, r5
 800da92:	f7f3 f84b 	bl	8000b2c <__aeabi_dcmplt>
 800da96:	2800      	cmp	r0, #0
 800da98:	f000 8087 	beq.w	800dbaa <__ieee754_exp+0x192>
 800da9c:	2400      	movs	r4, #0
 800da9e:	2500      	movs	r5, #0
 800daa0:	e7db      	b.n	800da5a <__ieee754_exp+0x42>
 800daa2:	4a93      	ldr	r2, [pc, #588]	; (800dcf0 <__ieee754_exp+0x2d8>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	f240 80ac 	bls.w	800dc02 <__ieee754_exp+0x1ea>
 800daaa:	4a92      	ldr	r2, [pc, #584]	; (800dcf4 <__ieee754_exp+0x2dc>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d87c      	bhi.n	800dbaa <__ieee754_exp+0x192>
 800dab0:	4b91      	ldr	r3, [pc, #580]	; (800dcf8 <__ieee754_exp+0x2e0>)
 800dab2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daba:	ee10 0a10 	vmov	r0, s0
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f2 fc0a 	bl	80002d8 <__aeabi_dsub>
 800dac4:	4b8d      	ldr	r3, [pc, #564]	; (800dcfc <__ieee754_exp+0x2e4>)
 800dac6:	00f7      	lsls	r7, r6, #3
 800dac8:	443b      	add	r3, r7
 800daca:	ed93 7b00 	vldr	d7, [r3]
 800dace:	f1c6 0a01 	rsb	sl, r6, #1
 800dad2:	4680      	mov	r8, r0
 800dad4:	4689      	mov	r9, r1
 800dad6:	ebaa 0a06 	sub.w	sl, sl, r6
 800dada:	eeb0 8a47 	vmov.f32	s16, s14
 800dade:	eef0 8a67 	vmov.f32	s17, s15
 800dae2:	ec53 2b18 	vmov	r2, r3, d8
 800dae6:	4640      	mov	r0, r8
 800dae8:	4649      	mov	r1, r9
 800daea:	f7f2 fbf5 	bl	80002d8 <__aeabi_dsub>
 800daee:	4604      	mov	r4, r0
 800daf0:	460d      	mov	r5, r1
 800daf2:	4622      	mov	r2, r4
 800daf4:	462b      	mov	r3, r5
 800daf6:	4620      	mov	r0, r4
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f2 fda5 	bl	8000648 <__aeabi_dmul>
 800dafe:	a36a      	add	r3, pc, #424	; (adr r3, 800dca8 <__ieee754_exp+0x290>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	4606      	mov	r6, r0
 800db06:	460f      	mov	r7, r1
 800db08:	f7f2 fd9e 	bl	8000648 <__aeabi_dmul>
 800db0c:	a368      	add	r3, pc, #416	; (adr r3, 800dcb0 <__ieee754_exp+0x298>)
 800db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db12:	f7f2 fbe1 	bl	80002d8 <__aeabi_dsub>
 800db16:	4632      	mov	r2, r6
 800db18:	463b      	mov	r3, r7
 800db1a:	f7f2 fd95 	bl	8000648 <__aeabi_dmul>
 800db1e:	a366      	add	r3, pc, #408	; (adr r3, 800dcb8 <__ieee754_exp+0x2a0>)
 800db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db24:	f7f2 fbda 	bl	80002dc <__adddf3>
 800db28:	4632      	mov	r2, r6
 800db2a:	463b      	mov	r3, r7
 800db2c:	f7f2 fd8c 	bl	8000648 <__aeabi_dmul>
 800db30:	a363      	add	r3, pc, #396	; (adr r3, 800dcc0 <__ieee754_exp+0x2a8>)
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f7f2 fbcf 	bl	80002d8 <__aeabi_dsub>
 800db3a:	4632      	mov	r2, r6
 800db3c:	463b      	mov	r3, r7
 800db3e:	f7f2 fd83 	bl	8000648 <__aeabi_dmul>
 800db42:	a361      	add	r3, pc, #388	; (adr r3, 800dcc8 <__ieee754_exp+0x2b0>)
 800db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db48:	f7f2 fbc8 	bl	80002dc <__adddf3>
 800db4c:	4632      	mov	r2, r6
 800db4e:	463b      	mov	r3, r7
 800db50:	f7f2 fd7a 	bl	8000648 <__aeabi_dmul>
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4620      	mov	r0, r4
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7f2 fbbc 	bl	80002d8 <__aeabi_dsub>
 800db60:	4602      	mov	r2, r0
 800db62:	460b      	mov	r3, r1
 800db64:	4606      	mov	r6, r0
 800db66:	460f      	mov	r7, r1
 800db68:	4620      	mov	r0, r4
 800db6a:	4629      	mov	r1, r5
 800db6c:	f7f2 fd6c 	bl	8000648 <__aeabi_dmul>
 800db70:	ec41 0b19 	vmov	d9, r0, r1
 800db74:	f1ba 0f00 	cmp.w	sl, #0
 800db78:	d15d      	bne.n	800dc36 <__ieee754_exp+0x21e>
 800db7a:	2200      	movs	r2, #0
 800db7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db80:	4630      	mov	r0, r6
 800db82:	4639      	mov	r1, r7
 800db84:	f7f2 fba8 	bl	80002d8 <__aeabi_dsub>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	ec51 0b19 	vmov	r0, r1, d9
 800db90:	f7f2 fe84 	bl	800089c <__aeabi_ddiv>
 800db94:	4622      	mov	r2, r4
 800db96:	462b      	mov	r3, r5
 800db98:	f7f2 fb9e 	bl	80002d8 <__aeabi_dsub>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	2000      	movs	r0, #0
 800dba2:	4957      	ldr	r1, [pc, #348]	; (800dd00 <__ieee754_exp+0x2e8>)
 800dba4:	f7f2 fb98 	bl	80002d8 <__aeabi_dsub>
 800dba8:	e753      	b.n	800da52 <__ieee754_exp+0x3a>
 800dbaa:	4856      	ldr	r0, [pc, #344]	; (800dd04 <__ieee754_exp+0x2ec>)
 800dbac:	a348      	add	r3, pc, #288	; (adr r3, 800dcd0 <__ieee754_exp+0x2b8>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f7f2 fd45 	bl	8000648 <__aeabi_dmul>
 800dbbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dbc2:	f7f2 fb8b 	bl	80002dc <__adddf3>
 800dbc6:	f7f2 ffef 	bl	8000ba8 <__aeabi_d2iz>
 800dbca:	4682      	mov	sl, r0
 800dbcc:	f7f2 fcd2 	bl	8000574 <__aeabi_i2d>
 800dbd0:	a341      	add	r3, pc, #260	; (adr r3, 800dcd8 <__ieee754_exp+0x2c0>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	460f      	mov	r7, r1
 800dbda:	f7f2 fd35 	bl	8000648 <__aeabi_dmul>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	f7f2 fb77 	bl	80002d8 <__aeabi_dsub>
 800dbea:	a33d      	add	r3, pc, #244	; (adr r3, 800dce0 <__ieee754_exp+0x2c8>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	4680      	mov	r8, r0
 800dbf2:	4689      	mov	r9, r1
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	4639      	mov	r1, r7
 800dbf8:	f7f2 fd26 	bl	8000648 <__aeabi_dmul>
 800dbfc:	ec41 0b18 	vmov	d8, r0, r1
 800dc00:	e76f      	b.n	800dae2 <__ieee754_exp+0xca>
 800dc02:	4a41      	ldr	r2, [pc, #260]	; (800dd08 <__ieee754_exp+0x2f0>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d811      	bhi.n	800dc2c <__ieee754_exp+0x214>
 800dc08:	a323      	add	r3, pc, #140	; (adr r3, 800dc98 <__ieee754_exp+0x280>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	ee10 0a10 	vmov	r0, s0
 800dc12:	4629      	mov	r1, r5
 800dc14:	f7f2 fb62 	bl	80002dc <__adddf3>
 800dc18:	4b39      	ldr	r3, [pc, #228]	; (800dd00 <__ieee754_exp+0x2e8>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f7f2 ffa4 	bl	8000b68 <__aeabi_dcmpgt>
 800dc20:	b138      	cbz	r0, 800dc32 <__ieee754_exp+0x21a>
 800dc22:	4b37      	ldr	r3, [pc, #220]	; (800dd00 <__ieee754_exp+0x2e8>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	4620      	mov	r0, r4
 800dc28:	4629      	mov	r1, r5
 800dc2a:	e710      	b.n	800da4e <__ieee754_exp+0x36>
 800dc2c:	f04f 0a00 	mov.w	sl, #0
 800dc30:	e75f      	b.n	800daf2 <__ieee754_exp+0xda>
 800dc32:	4682      	mov	sl, r0
 800dc34:	e75d      	b.n	800daf2 <__ieee754_exp+0xda>
 800dc36:	4632      	mov	r2, r6
 800dc38:	463b      	mov	r3, r7
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800dc40:	f7f2 fb4a 	bl	80002d8 <__aeabi_dsub>
 800dc44:	4602      	mov	r2, r0
 800dc46:	460b      	mov	r3, r1
 800dc48:	ec51 0b19 	vmov	r0, r1, d9
 800dc4c:	f7f2 fe26 	bl	800089c <__aeabi_ddiv>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	ec51 0b18 	vmov	r0, r1, d8
 800dc58:	f7f2 fb3e 	bl	80002d8 <__aeabi_dsub>
 800dc5c:	4642      	mov	r2, r8
 800dc5e:	464b      	mov	r3, r9
 800dc60:	f7f2 fb3a 	bl	80002d8 <__aeabi_dsub>
 800dc64:	4602      	mov	r2, r0
 800dc66:	460b      	mov	r3, r1
 800dc68:	2000      	movs	r0, #0
 800dc6a:	4925      	ldr	r1, [pc, #148]	; (800dd00 <__ieee754_exp+0x2e8>)
 800dc6c:	f7f2 fb34 	bl	80002d8 <__aeabi_dsub>
 800dc70:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800dc74:	4592      	cmp	sl, r2
 800dc76:	db02      	blt.n	800dc7e <__ieee754_exp+0x266>
 800dc78:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800dc7c:	e6e9      	b.n	800da52 <__ieee754_exp+0x3a>
 800dc7e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800dc82:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800dc86:	2200      	movs	r2, #0
 800dc88:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800dc8c:	e6f9      	b.n	800da82 <__ieee754_exp+0x6a>
 800dc8e:	bf00      	nop
 800dc90:	fefa39ef 	.word	0xfefa39ef
 800dc94:	40862e42 	.word	0x40862e42
 800dc98:	8800759c 	.word	0x8800759c
 800dc9c:	7e37e43c 	.word	0x7e37e43c
 800dca0:	d52d3051 	.word	0xd52d3051
 800dca4:	c0874910 	.word	0xc0874910
 800dca8:	72bea4d0 	.word	0x72bea4d0
 800dcac:	3e663769 	.word	0x3e663769
 800dcb0:	c5d26bf1 	.word	0xc5d26bf1
 800dcb4:	3ebbbd41 	.word	0x3ebbbd41
 800dcb8:	af25de2c 	.word	0xaf25de2c
 800dcbc:	3f11566a 	.word	0x3f11566a
 800dcc0:	16bebd93 	.word	0x16bebd93
 800dcc4:	3f66c16c 	.word	0x3f66c16c
 800dcc8:	5555553e 	.word	0x5555553e
 800dccc:	3fc55555 	.word	0x3fc55555
 800dcd0:	652b82fe 	.word	0x652b82fe
 800dcd4:	3ff71547 	.word	0x3ff71547
 800dcd8:	fee00000 	.word	0xfee00000
 800dcdc:	3fe62e42 	.word	0x3fe62e42
 800dce0:	35793c76 	.word	0x35793c76
 800dce4:	3dea39ef 	.word	0x3dea39ef
 800dce8:	40862e41 	.word	0x40862e41
 800dcec:	7fefffff 	.word	0x7fefffff
 800dcf0:	3fd62e42 	.word	0x3fd62e42
 800dcf4:	3ff0a2b1 	.word	0x3ff0a2b1
 800dcf8:	080101c8 	.word	0x080101c8
 800dcfc:	080101d8 	.word	0x080101d8
 800dd00:	3ff00000 	.word	0x3ff00000
 800dd04:	080101b8 	.word	0x080101b8
 800dd08:	3e2fffff 	.word	0x3e2fffff

0800dd0c <__ieee754_hypot>:
 800dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	ec51 0b10 	vmov	r0, r1, d0
 800dd14:	ec59 8b11 	vmov	r8, r9, d1
 800dd18:	ed2d 8b06 	vpush	{d8-d10}
 800dd1c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800dd20:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800dd24:	42b7      	cmp	r7, r6
 800dd26:	b083      	sub	sp, #12
 800dd28:	da06      	bge.n	800dd38 <__ieee754_hypot+0x2c>
 800dd2a:	463b      	mov	r3, r7
 800dd2c:	ee11 0a10 	vmov	r0, s2
 800dd30:	ee10 8a10 	vmov	r8, s0
 800dd34:	4637      	mov	r7, r6
 800dd36:	461e      	mov	r6, r3
 800dd38:	1bbb      	subs	r3, r7, r6
 800dd3a:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800dd3e:	4639      	mov	r1, r7
 800dd40:	4682      	mov	sl, r0
 800dd42:	46bb      	mov	fp, r7
 800dd44:	46b1      	mov	r9, r6
 800dd46:	dd06      	ble.n	800dd56 <__ieee754_hypot+0x4a>
 800dd48:	4642      	mov	r2, r8
 800dd4a:	4633      	mov	r3, r6
 800dd4c:	f7f2 fac6 	bl	80002dc <__adddf3>
 800dd50:	4682      	mov	sl, r0
 800dd52:	468b      	mov	fp, r1
 800dd54:	e01a      	b.n	800dd8c <__ieee754_hypot+0x80>
 800dd56:	4b7a      	ldr	r3, [pc, #488]	; (800df40 <__ieee754_hypot+0x234>)
 800dd58:	429f      	cmp	r7, r3
 800dd5a:	f340 80a0 	ble.w	800de9e <__ieee754_hypot+0x192>
 800dd5e:	4b79      	ldr	r3, [pc, #484]	; (800df44 <__ieee754_hypot+0x238>)
 800dd60:	429f      	cmp	r7, r3
 800dd62:	dd1a      	ble.n	800dd9a <__ieee754_hypot+0x8e>
 800dd64:	f3c7 0713 	ubfx	r7, r7, #0, #20
 800dd68:	4603      	mov	r3, r0
 800dd6a:	433b      	orrs	r3, r7
 800dd6c:	d005      	beq.n	800dd7a <__ieee754_hypot+0x6e>
 800dd6e:	4642      	mov	r2, r8
 800dd70:	4633      	mov	r3, r6
 800dd72:	f7f2 fab3 	bl	80002dc <__adddf3>
 800dd76:	4682      	mov	sl, r0
 800dd78:	468b      	mov	fp, r1
 800dd7a:	f086 46ff 	eor.w	r6, r6, #2139095040	; 0x7f800000
 800dd7e:	f486 06e0 	eor.w	r6, r6, #7340032	; 0x700000
 800dd82:	4643      	mov	r3, r8
 800dd84:	4333      	orrs	r3, r6
 800dd86:	d101      	bne.n	800dd8c <__ieee754_hypot+0x80>
 800dd88:	46c2      	mov	sl, r8
 800dd8a:	46cb      	mov	fp, r9
 800dd8c:	ec4b ab10 	vmov	d0, sl, fp
 800dd90:	b003      	add	sp, #12
 800dd92:	ecbd 8b06 	vpop	{d8-d10}
 800dd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9a:	f1a7 5716 	sub.w	r7, r7, #629145600	; 0x25800000
 800dd9e:	f1a6 5616 	sub.w	r6, r6, #629145600	; 0x25800000
 800dda2:	46bb      	mov	fp, r7
 800dda4:	46b1      	mov	r9, r6
 800dda6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	4b66      	ldr	r3, [pc, #408]	; (800df48 <__ieee754_hypot+0x23c>)
 800ddae:	429e      	cmp	r6, r3
 800ddb0:	dc1b      	bgt.n	800ddea <__ieee754_hypot+0xde>
 800ddb2:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 800ddb6:	da74      	bge.n	800dea2 <__ieee754_hypot+0x196>
 800ddb8:	4643      	mov	r3, r8
 800ddba:	4333      	orrs	r3, r6
 800ddbc:	d0e6      	beq.n	800dd8c <__ieee754_hypot+0x80>
 800ddbe:	4d63      	ldr	r5, [pc, #396]	; (800df4c <__ieee754_hypot+0x240>)
 800ddc0:	2400      	movs	r4, #0
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	462b      	mov	r3, r5
 800ddc6:	4640      	mov	r0, r8
 800ddc8:	4649      	mov	r1, r9
 800ddca:	f7f2 fc3d 	bl	8000648 <__aeabi_dmul>
 800ddce:	462b      	mov	r3, r5
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	4689      	mov	r9, r1
 800ddd4:	4650      	mov	r0, sl
 800ddd6:	4659      	mov	r1, fp
 800ddd8:	4622      	mov	r2, r4
 800ddda:	f7f2 fc35 	bl	8000648 <__aeabi_dmul>
 800ddde:	9b01      	ldr	r3, [sp, #4]
 800dde0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dde4:	4682      	mov	sl, r0
 800dde6:	468b      	mov	fp, r1
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	4642      	mov	r2, r8
 800ddec:	464b      	mov	r3, r9
 800ddee:	4650      	mov	r0, sl
 800ddf0:	4659      	mov	r1, fp
 800ddf2:	f7f2 fa71 	bl	80002d8 <__aeabi_dsub>
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4640      	mov	r0, r8
 800de00:	4649      	mov	r1, r9
 800de02:	f7f2 fe93 	bl	8000b2c <__aeabi_dcmplt>
 800de06:	2800      	cmp	r0, #0
 800de08:	d056      	beq.n	800deb8 <__ieee754_hypot+0x1ac>
 800de0a:	2400      	movs	r4, #0
 800de0c:	463b      	mov	r3, r7
 800de0e:	4622      	mov	r2, r4
 800de10:	4639      	mov	r1, r7
 800de12:	4620      	mov	r0, r4
 800de14:	f7f2 fc18 	bl	8000648 <__aeabi_dmul>
 800de18:	4642      	mov	r2, r8
 800de1a:	ec41 0b18 	vmov	d8, r0, r1
 800de1e:	464b      	mov	r3, r9
 800de20:	4640      	mov	r0, r8
 800de22:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800de26:	f7f2 fc0f 	bl	8000648 <__aeabi_dmul>
 800de2a:	463d      	mov	r5, r7
 800de2c:	4606      	mov	r6, r0
 800de2e:	460f      	mov	r7, r1
 800de30:	4622      	mov	r2, r4
 800de32:	462b      	mov	r3, r5
 800de34:	4650      	mov	r0, sl
 800de36:	4659      	mov	r1, fp
 800de38:	f7f2 fa50 	bl	80002dc <__adddf3>
 800de3c:	4622      	mov	r2, r4
 800de3e:	4680      	mov	r8, r0
 800de40:	4689      	mov	r9, r1
 800de42:	462b      	mov	r3, r5
 800de44:	4650      	mov	r0, sl
 800de46:	4659      	mov	r1, fp
 800de48:	f7f2 fa46 	bl	80002d8 <__aeabi_dsub>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	4640      	mov	r0, r8
 800de52:	4649      	mov	r1, r9
 800de54:	f7f2 fbf8 	bl	8000648 <__aeabi_dmul>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4630      	mov	r0, r6
 800de5e:	4639      	mov	r1, r7
 800de60:	f7f2 fa3a 	bl	80002d8 <__aeabi_dsub>
 800de64:	4602      	mov	r2, r0
 800de66:	460b      	mov	r3, r1
 800de68:	ec51 0b18 	vmov	r0, r1, d8
 800de6c:	f7f2 fa34 	bl	80002d8 <__aeabi_dsub>
 800de70:	ec41 0b10 	vmov	d0, r0, r1
 800de74:	f000 ff9a 	bl	800edac <__ieee754_sqrt>
 800de78:	9b01      	ldr	r3, [sp, #4]
 800de7a:	ec5b ab10 	vmov	sl, fp, d0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d084      	beq.n	800dd8c <__ieee754_hypot+0x80>
 800de82:	051b      	lsls	r3, r3, #20
 800de84:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800de88:	2000      	movs	r0, #0
 800de8a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	ee10 0a10 	vmov	r0, s0
 800de96:	4659      	mov	r1, fp
 800de98:	f7f2 fbd6 	bl	8000648 <__aeabi_dmul>
 800de9c:	e758      	b.n	800dd50 <__ieee754_hypot+0x44>
 800de9e:	2300      	movs	r3, #0
 800dea0:	e783      	b.n	800ddaa <__ieee754_hypot+0x9e>
 800dea2:	9b01      	ldr	r3, [sp, #4]
 800dea4:	f107 5716 	add.w	r7, r7, #629145600	; 0x25800000
 800dea8:	f106 5616 	add.w	r6, r6, #629145600	; 0x25800000
 800deac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800deb0:	9301      	str	r3, [sp, #4]
 800deb2:	46bb      	mov	fp, r7
 800deb4:	46b1      	mov	r9, r6
 800deb6:	e798      	b.n	800ddea <__ieee754_hypot+0xde>
 800deb8:	4633      	mov	r3, r6
 800deba:	2200      	movs	r2, #0
 800debc:	ec43 2b18 	vmov	d8, r2, r3
 800dec0:	2200      	movs	r2, #0
 800dec2:	f507 1380 	add.w	r3, r7, #1048576	; 0x100000
 800dec6:	ec51 0b18 	vmov	r0, r1, d8
 800deca:	4616      	mov	r6, r2
 800decc:	461f      	mov	r7, r3
 800dece:	f7f2 fbbb 	bl	8000648 <__aeabi_dmul>
 800ded2:	4622      	mov	r2, r4
 800ded4:	ec41 0b19 	vmov	d9, r0, r1
 800ded8:	462b      	mov	r3, r5
 800deda:	4620      	mov	r0, r4
 800dedc:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800dee0:	f7f2 fbb2 	bl	8000648 <__aeabi_dmul>
 800dee4:	4652      	mov	r2, sl
 800dee6:	ec41 0b1a 	vmov	d10, r0, r1
 800deea:	465b      	mov	r3, fp
 800deec:	4650      	mov	r0, sl
 800deee:	4659      	mov	r1, fp
 800def0:	f7f2 f9f4 	bl	80002dc <__adddf3>
 800def4:	4632      	mov	r2, r6
 800def6:	463b      	mov	r3, r7
 800def8:	f7f2 f9ee 	bl	80002d8 <__aeabi_dsub>
 800defc:	4642      	mov	r2, r8
 800defe:	464b      	mov	r3, r9
 800df00:	f7f2 fba2 	bl	8000648 <__aeabi_dmul>
 800df04:	ec53 2b18 	vmov	r2, r3, d8
 800df08:	4604      	mov	r4, r0
 800df0a:	460d      	mov	r5, r1
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 f9e2 	bl	80002d8 <__aeabi_dsub>
 800df14:	4632      	mov	r2, r6
 800df16:	463b      	mov	r3, r7
 800df18:	f7f2 fb96 	bl	8000648 <__aeabi_dmul>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4620      	mov	r0, r4
 800df22:	4629      	mov	r1, r5
 800df24:	f7f2 f9da 	bl	80002dc <__adddf3>
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	ec51 0b1a 	vmov	r0, r1, d10
 800df30:	f7f2 f9d2 	bl	80002d8 <__aeabi_dsub>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	ec51 0b19 	vmov	r0, r1, d9
 800df3c:	e796      	b.n	800de6c <__ieee754_hypot+0x160>
 800df3e:	bf00      	nop
 800df40:	5f300000 	.word	0x5f300000
 800df44:	7fefffff 	.word	0x7fefffff
 800df48:	20afffff 	.word	0x20afffff
 800df4c:	7fd00000 	.word	0x7fd00000

0800df50 <__ieee754_pow>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	ed2d 8b06 	vpush	{d8-d10}
 800df58:	b08d      	sub	sp, #52	; 0x34
 800df5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800df5e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800df62:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800df66:	ea56 0100 	orrs.w	r1, r6, r0
 800df6a:	ec53 2b10 	vmov	r2, r3, d0
 800df6e:	f000 84d1 	beq.w	800e914 <__ieee754_pow+0x9c4>
 800df72:	497f      	ldr	r1, [pc, #508]	; (800e170 <__ieee754_pow+0x220>)
 800df74:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800df78:	428c      	cmp	r4, r1
 800df7a:	ee10 8a10 	vmov	r8, s0
 800df7e:	4699      	mov	r9, r3
 800df80:	dc09      	bgt.n	800df96 <__ieee754_pow+0x46>
 800df82:	d103      	bne.n	800df8c <__ieee754_pow+0x3c>
 800df84:	b97a      	cbnz	r2, 800dfa6 <__ieee754_pow+0x56>
 800df86:	42a6      	cmp	r6, r4
 800df88:	dd02      	ble.n	800df90 <__ieee754_pow+0x40>
 800df8a:	e00c      	b.n	800dfa6 <__ieee754_pow+0x56>
 800df8c:	428e      	cmp	r6, r1
 800df8e:	dc02      	bgt.n	800df96 <__ieee754_pow+0x46>
 800df90:	428e      	cmp	r6, r1
 800df92:	d110      	bne.n	800dfb6 <__ieee754_pow+0x66>
 800df94:	b178      	cbz	r0, 800dfb6 <__ieee754_pow+0x66>
 800df96:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800df9a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df9e:	ea54 0308 	orrs.w	r3, r4, r8
 800dfa2:	f000 84b7 	beq.w	800e914 <__ieee754_pow+0x9c4>
 800dfa6:	4873      	ldr	r0, [pc, #460]	; (800e174 <__ieee754_pow+0x224>)
 800dfa8:	b00d      	add	sp, #52	; 0x34
 800dfaa:	ecbd 8b06 	vpop	{d8-d10}
 800dfae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb2:	f001 bd0d 	b.w	800f9d0 <nan>
 800dfb6:	f1b9 0f00 	cmp.w	r9, #0
 800dfba:	da36      	bge.n	800e02a <__ieee754_pow+0xda>
 800dfbc:	496e      	ldr	r1, [pc, #440]	; (800e178 <__ieee754_pow+0x228>)
 800dfbe:	428e      	cmp	r6, r1
 800dfc0:	dc51      	bgt.n	800e066 <__ieee754_pow+0x116>
 800dfc2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800dfc6:	428e      	cmp	r6, r1
 800dfc8:	f340 84af 	ble.w	800e92a <__ieee754_pow+0x9da>
 800dfcc:	1531      	asrs	r1, r6, #20
 800dfce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dfd2:	2914      	cmp	r1, #20
 800dfd4:	dd0f      	ble.n	800dff6 <__ieee754_pow+0xa6>
 800dfd6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800dfda:	fa20 fc01 	lsr.w	ip, r0, r1
 800dfde:	fa0c f101 	lsl.w	r1, ip, r1
 800dfe2:	4281      	cmp	r1, r0
 800dfe4:	f040 84a1 	bne.w	800e92a <__ieee754_pow+0x9da>
 800dfe8:	f00c 0c01 	and.w	ip, ip, #1
 800dfec:	f1cc 0102 	rsb	r1, ip, #2
 800dff0:	9100      	str	r1, [sp, #0]
 800dff2:	b180      	cbz	r0, 800e016 <__ieee754_pow+0xc6>
 800dff4:	e059      	b.n	800e0aa <__ieee754_pow+0x15a>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d155      	bne.n	800e0a6 <__ieee754_pow+0x156>
 800dffa:	f1c1 0114 	rsb	r1, r1, #20
 800dffe:	fa46 fc01 	asr.w	ip, r6, r1
 800e002:	fa0c f101 	lsl.w	r1, ip, r1
 800e006:	42b1      	cmp	r1, r6
 800e008:	f040 848c 	bne.w	800e924 <__ieee754_pow+0x9d4>
 800e00c:	f00c 0c01 	and.w	ip, ip, #1
 800e010:	f1cc 0102 	rsb	r1, ip, #2
 800e014:	9100      	str	r1, [sp, #0]
 800e016:	4959      	ldr	r1, [pc, #356]	; (800e17c <__ieee754_pow+0x22c>)
 800e018:	428e      	cmp	r6, r1
 800e01a:	d12d      	bne.n	800e078 <__ieee754_pow+0x128>
 800e01c:	2f00      	cmp	r7, #0
 800e01e:	da79      	bge.n	800e114 <__ieee754_pow+0x1c4>
 800e020:	4956      	ldr	r1, [pc, #344]	; (800e17c <__ieee754_pow+0x22c>)
 800e022:	2000      	movs	r0, #0
 800e024:	f7f2 fc3a 	bl	800089c <__aeabi_ddiv>
 800e028:	e016      	b.n	800e058 <__ieee754_pow+0x108>
 800e02a:	2100      	movs	r1, #0
 800e02c:	9100      	str	r1, [sp, #0]
 800e02e:	2800      	cmp	r0, #0
 800e030:	d13b      	bne.n	800e0aa <__ieee754_pow+0x15a>
 800e032:	494f      	ldr	r1, [pc, #316]	; (800e170 <__ieee754_pow+0x220>)
 800e034:	428e      	cmp	r6, r1
 800e036:	d1ee      	bne.n	800e016 <__ieee754_pow+0xc6>
 800e038:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e03c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e040:	ea53 0308 	orrs.w	r3, r3, r8
 800e044:	f000 8466 	beq.w	800e914 <__ieee754_pow+0x9c4>
 800e048:	4b4d      	ldr	r3, [pc, #308]	; (800e180 <__ieee754_pow+0x230>)
 800e04a:	429c      	cmp	r4, r3
 800e04c:	dd0d      	ble.n	800e06a <__ieee754_pow+0x11a>
 800e04e:	2f00      	cmp	r7, #0
 800e050:	f280 8464 	bge.w	800e91c <__ieee754_pow+0x9cc>
 800e054:	2000      	movs	r0, #0
 800e056:	2100      	movs	r1, #0
 800e058:	ec41 0b10 	vmov	d0, r0, r1
 800e05c:	b00d      	add	sp, #52	; 0x34
 800e05e:	ecbd 8b06 	vpop	{d8-d10}
 800e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e066:	2102      	movs	r1, #2
 800e068:	e7e0      	b.n	800e02c <__ieee754_pow+0xdc>
 800e06a:	2f00      	cmp	r7, #0
 800e06c:	daf2      	bge.n	800e054 <__ieee754_pow+0x104>
 800e06e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e072:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e076:	e7ef      	b.n	800e058 <__ieee754_pow+0x108>
 800e078:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e07c:	d104      	bne.n	800e088 <__ieee754_pow+0x138>
 800e07e:	4610      	mov	r0, r2
 800e080:	4619      	mov	r1, r3
 800e082:	f7f2 fae1 	bl	8000648 <__aeabi_dmul>
 800e086:	e7e7      	b.n	800e058 <__ieee754_pow+0x108>
 800e088:	493e      	ldr	r1, [pc, #248]	; (800e184 <__ieee754_pow+0x234>)
 800e08a:	428f      	cmp	r7, r1
 800e08c:	d10d      	bne.n	800e0aa <__ieee754_pow+0x15a>
 800e08e:	f1b9 0f00 	cmp.w	r9, #0
 800e092:	db0a      	blt.n	800e0aa <__ieee754_pow+0x15a>
 800e094:	ec43 2b10 	vmov	d0, r2, r3
 800e098:	b00d      	add	sp, #52	; 0x34
 800e09a:	ecbd 8b06 	vpop	{d8-d10}
 800e09e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a2:	f000 be83 	b.w	800edac <__ieee754_sqrt>
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	9100      	str	r1, [sp, #0]
 800e0aa:	ec43 2b10 	vmov	d0, r2, r3
 800e0ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e0b2:	f001 fbf7 	bl	800f8a4 <fabs>
 800e0b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0ba:	ec51 0b10 	vmov	r0, r1, d0
 800e0be:	f1b8 0f00 	cmp.w	r8, #0
 800e0c2:	d12a      	bne.n	800e11a <__ieee754_pow+0x1ca>
 800e0c4:	b12c      	cbz	r4, 800e0d2 <__ieee754_pow+0x182>
 800e0c6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e17c <__ieee754_pow+0x22c>
 800e0ca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e0ce:	45e6      	cmp	lr, ip
 800e0d0:	d123      	bne.n	800e11a <__ieee754_pow+0x1ca>
 800e0d2:	2f00      	cmp	r7, #0
 800e0d4:	da05      	bge.n	800e0e2 <__ieee754_pow+0x192>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	460b      	mov	r3, r1
 800e0da:	2000      	movs	r0, #0
 800e0dc:	4927      	ldr	r1, [pc, #156]	; (800e17c <__ieee754_pow+0x22c>)
 800e0de:	f7f2 fbdd 	bl	800089c <__aeabi_ddiv>
 800e0e2:	f1b9 0f00 	cmp.w	r9, #0
 800e0e6:	dab7      	bge.n	800e058 <__ieee754_pow+0x108>
 800e0e8:	9b00      	ldr	r3, [sp, #0]
 800e0ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e0ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e0f2:	4323      	orrs	r3, r4
 800e0f4:	d108      	bne.n	800e108 <__ieee754_pow+0x1b8>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	f7f2 f8eb 	bl	80002d8 <__aeabi_dsub>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	e78d      	b.n	800e024 <__ieee754_pow+0xd4>
 800e108:	9b00      	ldr	r3, [sp, #0]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d1a4      	bne.n	800e058 <__ieee754_pow+0x108>
 800e10e:	4602      	mov	r2, r0
 800e110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e114:	4610      	mov	r0, r2
 800e116:	4619      	mov	r1, r3
 800e118:	e79e      	b.n	800e058 <__ieee754_pow+0x108>
 800e11a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e11e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e122:	950a      	str	r5, [sp, #40]	; 0x28
 800e124:	9d00      	ldr	r5, [sp, #0]
 800e126:	46ac      	mov	ip, r5
 800e128:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e12a:	ea5c 0505 	orrs.w	r5, ip, r5
 800e12e:	d0e4      	beq.n	800e0fa <__ieee754_pow+0x1aa>
 800e130:	4b15      	ldr	r3, [pc, #84]	; (800e188 <__ieee754_pow+0x238>)
 800e132:	429e      	cmp	r6, r3
 800e134:	f340 80fc 	ble.w	800e330 <__ieee754_pow+0x3e0>
 800e138:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e13c:	429e      	cmp	r6, r3
 800e13e:	4b10      	ldr	r3, [pc, #64]	; (800e180 <__ieee754_pow+0x230>)
 800e140:	dd07      	ble.n	800e152 <__ieee754_pow+0x202>
 800e142:	429c      	cmp	r4, r3
 800e144:	dc0a      	bgt.n	800e15c <__ieee754_pow+0x20c>
 800e146:	2f00      	cmp	r7, #0
 800e148:	da84      	bge.n	800e054 <__ieee754_pow+0x104>
 800e14a:	a307      	add	r3, pc, #28	; (adr r3, 800e168 <__ieee754_pow+0x218>)
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	e795      	b.n	800e07e <__ieee754_pow+0x12e>
 800e152:	429c      	cmp	r4, r3
 800e154:	dbf7      	blt.n	800e146 <__ieee754_pow+0x1f6>
 800e156:	4b09      	ldr	r3, [pc, #36]	; (800e17c <__ieee754_pow+0x22c>)
 800e158:	429c      	cmp	r4, r3
 800e15a:	dd17      	ble.n	800e18c <__ieee754_pow+0x23c>
 800e15c:	2f00      	cmp	r7, #0
 800e15e:	dcf4      	bgt.n	800e14a <__ieee754_pow+0x1fa>
 800e160:	e778      	b.n	800e054 <__ieee754_pow+0x104>
 800e162:	bf00      	nop
 800e164:	f3af 8000 	nop.w
 800e168:	8800759c 	.word	0x8800759c
 800e16c:	7e37e43c 	.word	0x7e37e43c
 800e170:	7ff00000 	.word	0x7ff00000
 800e174:	080100a8 	.word	0x080100a8
 800e178:	433fffff 	.word	0x433fffff
 800e17c:	3ff00000 	.word	0x3ff00000
 800e180:	3fefffff 	.word	0x3fefffff
 800e184:	3fe00000 	.word	0x3fe00000
 800e188:	41e00000 	.word	0x41e00000
 800e18c:	4b64      	ldr	r3, [pc, #400]	; (800e320 <__ieee754_pow+0x3d0>)
 800e18e:	2200      	movs	r2, #0
 800e190:	f7f2 f8a2 	bl	80002d8 <__aeabi_dsub>
 800e194:	a356      	add	r3, pc, #344	; (adr r3, 800e2f0 <__ieee754_pow+0x3a0>)
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	4604      	mov	r4, r0
 800e19c:	460d      	mov	r5, r1
 800e19e:	f7f2 fa53 	bl	8000648 <__aeabi_dmul>
 800e1a2:	a355      	add	r3, pc, #340	; (adr r3, 800e2f8 <__ieee754_pow+0x3a8>)
 800e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	460f      	mov	r7, r1
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	f7f2 fa4a 	bl	8000648 <__aeabi_dmul>
 800e1b4:	4b5b      	ldr	r3, [pc, #364]	; (800e324 <__ieee754_pow+0x3d4>)
 800e1b6:	4682      	mov	sl, r0
 800e1b8:	468b      	mov	fp, r1
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	4620      	mov	r0, r4
 800e1be:	4629      	mov	r1, r5
 800e1c0:	f7f2 fa42 	bl	8000648 <__aeabi_dmul>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	a14d      	add	r1, pc, #308	; (adr r1, 800e300 <__ieee754_pow+0x3b0>)
 800e1ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ce:	f7f2 f883 	bl	80002d8 <__aeabi_dsub>
 800e1d2:	4622      	mov	r2, r4
 800e1d4:	462b      	mov	r3, r5
 800e1d6:	f7f2 fa37 	bl	8000648 <__aeabi_dmul>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	2000      	movs	r0, #0
 800e1e0:	4951      	ldr	r1, [pc, #324]	; (800e328 <__ieee754_pow+0x3d8>)
 800e1e2:	f7f2 f879 	bl	80002d8 <__aeabi_dsub>
 800e1e6:	4622      	mov	r2, r4
 800e1e8:	4680      	mov	r8, r0
 800e1ea:	4689      	mov	r9, r1
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	f7f2 fa29 	bl	8000648 <__aeabi_dmul>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	4640      	mov	r0, r8
 800e1fc:	4649      	mov	r1, r9
 800e1fe:	f7f2 fa23 	bl	8000648 <__aeabi_dmul>
 800e202:	a341      	add	r3, pc, #260	; (adr r3, 800e308 <__ieee754_pow+0x3b8>)
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	f7f2 fa1e 	bl	8000648 <__aeabi_dmul>
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	4650      	mov	r0, sl
 800e212:	4659      	mov	r1, fp
 800e214:	f7f2 f860 	bl	80002d8 <__aeabi_dsub>
 800e218:	4602      	mov	r2, r0
 800e21a:	460b      	mov	r3, r1
 800e21c:	4680      	mov	r8, r0
 800e21e:	4689      	mov	r9, r1
 800e220:	4630      	mov	r0, r6
 800e222:	4639      	mov	r1, r7
 800e224:	f7f2 f85a 	bl	80002dc <__adddf3>
 800e228:	2400      	movs	r4, #0
 800e22a:	4632      	mov	r2, r6
 800e22c:	463b      	mov	r3, r7
 800e22e:	4620      	mov	r0, r4
 800e230:	460d      	mov	r5, r1
 800e232:	f7f2 f851 	bl	80002d8 <__aeabi_dsub>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4640      	mov	r0, r8
 800e23c:	4649      	mov	r1, r9
 800e23e:	f7f2 f84b 	bl	80002d8 <__aeabi_dsub>
 800e242:	9b00      	ldr	r3, [sp, #0]
 800e244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e246:	3b01      	subs	r3, #1
 800e248:	4313      	orrs	r3, r2
 800e24a:	4682      	mov	sl, r0
 800e24c:	468b      	mov	fp, r1
 800e24e:	f040 81f1 	bne.w	800e634 <__ieee754_pow+0x6e4>
 800e252:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e310 <__ieee754_pow+0x3c0>
 800e256:	eeb0 8a47 	vmov.f32	s16, s14
 800e25a:	eef0 8a67 	vmov.f32	s17, s15
 800e25e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e262:	2600      	movs	r6, #0
 800e264:	4632      	mov	r2, r6
 800e266:	463b      	mov	r3, r7
 800e268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e26c:	f7f2 f834 	bl	80002d8 <__aeabi_dsub>
 800e270:	4622      	mov	r2, r4
 800e272:	462b      	mov	r3, r5
 800e274:	f7f2 f9e8 	bl	8000648 <__aeabi_dmul>
 800e278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e27c:	4680      	mov	r8, r0
 800e27e:	4689      	mov	r9, r1
 800e280:	4650      	mov	r0, sl
 800e282:	4659      	mov	r1, fp
 800e284:	f7f2 f9e0 	bl	8000648 <__aeabi_dmul>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	4640      	mov	r0, r8
 800e28e:	4649      	mov	r1, r9
 800e290:	f7f2 f824 	bl	80002dc <__adddf3>
 800e294:	4632      	mov	r2, r6
 800e296:	463b      	mov	r3, r7
 800e298:	4680      	mov	r8, r0
 800e29a:	4689      	mov	r9, r1
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 f9d2 	bl	8000648 <__aeabi_dmul>
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	f7f2 f814 	bl	80002dc <__adddf3>
 800e2b4:	4b1d      	ldr	r3, [pc, #116]	; (800e32c <__ieee754_pow+0x3dc>)
 800e2b6:	4299      	cmp	r1, r3
 800e2b8:	ec45 4b19 	vmov	d9, r4, r5
 800e2bc:	4606      	mov	r6, r0
 800e2be:	460f      	mov	r7, r1
 800e2c0:	468b      	mov	fp, r1
 800e2c2:	f340 82fe 	ble.w	800e8c2 <__ieee754_pow+0x972>
 800e2c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e2ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e2ce:	4303      	orrs	r3, r0
 800e2d0:	f000 81f0 	beq.w	800e6b4 <__ieee754_pow+0x764>
 800e2d4:	a310      	add	r3, pc, #64	; (adr r3, 800e318 <__ieee754_pow+0x3c8>)
 800e2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2da:	ec51 0b18 	vmov	r0, r1, d8
 800e2de:	f7f2 f9b3 	bl	8000648 <__aeabi_dmul>
 800e2e2:	a30d      	add	r3, pc, #52	; (adr r3, 800e318 <__ieee754_pow+0x3c8>)
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	e6cb      	b.n	800e082 <__ieee754_pow+0x132>
 800e2ea:	bf00      	nop
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	60000000 	.word	0x60000000
 800e2f4:	3ff71547 	.word	0x3ff71547
 800e2f8:	f85ddf44 	.word	0xf85ddf44
 800e2fc:	3e54ae0b 	.word	0x3e54ae0b
 800e300:	55555555 	.word	0x55555555
 800e304:	3fd55555 	.word	0x3fd55555
 800e308:	652b82fe 	.word	0x652b82fe
 800e30c:	3ff71547 	.word	0x3ff71547
 800e310:	00000000 	.word	0x00000000
 800e314:	bff00000 	.word	0xbff00000
 800e318:	8800759c 	.word	0x8800759c
 800e31c:	7e37e43c 	.word	0x7e37e43c
 800e320:	3ff00000 	.word	0x3ff00000
 800e324:	3fd00000 	.word	0x3fd00000
 800e328:	3fe00000 	.word	0x3fe00000
 800e32c:	408fffff 	.word	0x408fffff
 800e330:	4bd7      	ldr	r3, [pc, #860]	; (800e690 <__ieee754_pow+0x740>)
 800e332:	ea03 0309 	and.w	r3, r3, r9
 800e336:	2200      	movs	r2, #0
 800e338:	b92b      	cbnz	r3, 800e346 <__ieee754_pow+0x3f6>
 800e33a:	4bd6      	ldr	r3, [pc, #856]	; (800e694 <__ieee754_pow+0x744>)
 800e33c:	f7f2 f984 	bl	8000648 <__aeabi_dmul>
 800e340:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e344:	460c      	mov	r4, r1
 800e346:	1523      	asrs	r3, r4, #20
 800e348:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e34c:	4413      	add	r3, r2
 800e34e:	9309      	str	r3, [sp, #36]	; 0x24
 800e350:	4bd1      	ldr	r3, [pc, #836]	; (800e698 <__ieee754_pow+0x748>)
 800e352:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e356:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e35a:	429c      	cmp	r4, r3
 800e35c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e360:	dd08      	ble.n	800e374 <__ieee754_pow+0x424>
 800e362:	4bce      	ldr	r3, [pc, #824]	; (800e69c <__ieee754_pow+0x74c>)
 800e364:	429c      	cmp	r4, r3
 800e366:	f340 8163 	ble.w	800e630 <__ieee754_pow+0x6e0>
 800e36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e36c:	3301      	adds	r3, #1
 800e36e:	9309      	str	r3, [sp, #36]	; 0x24
 800e370:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e374:	2400      	movs	r4, #0
 800e376:	00e3      	lsls	r3, r4, #3
 800e378:	930b      	str	r3, [sp, #44]	; 0x2c
 800e37a:	4bc9      	ldr	r3, [pc, #804]	; (800e6a0 <__ieee754_pow+0x750>)
 800e37c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e380:	ed93 7b00 	vldr	d7, [r3]
 800e384:	4629      	mov	r1, r5
 800e386:	ec53 2b17 	vmov	r2, r3, d7
 800e38a:	eeb0 8a47 	vmov.f32	s16, s14
 800e38e:	eef0 8a67 	vmov.f32	s17, s15
 800e392:	4682      	mov	sl, r0
 800e394:	f7f1 ffa0 	bl	80002d8 <__aeabi_dsub>
 800e398:	4652      	mov	r2, sl
 800e39a:	4606      	mov	r6, r0
 800e39c:	460f      	mov	r7, r1
 800e39e:	462b      	mov	r3, r5
 800e3a0:	ec51 0b18 	vmov	r0, r1, d8
 800e3a4:	f7f1 ff9a 	bl	80002dc <__adddf3>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	49bd      	ldr	r1, [pc, #756]	; (800e6a4 <__ieee754_pow+0x754>)
 800e3b0:	f7f2 fa74 	bl	800089c <__aeabi_ddiv>
 800e3b4:	ec41 0b19 	vmov	d9, r0, r1
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	4630      	mov	r0, r6
 800e3be:	4639      	mov	r1, r7
 800e3c0:	f7f2 f942 	bl	8000648 <__aeabi_dmul>
 800e3c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e3c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	9304      	str	r3, [sp, #16]
 800e3d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e3d8:	46ab      	mov	fp, r5
 800e3da:	106d      	asrs	r5, r5, #1
 800e3dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e3e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e3e4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	4640      	mov	r0, r8
 800e3ec:	4649      	mov	r1, r9
 800e3ee:	4614      	mov	r4, r2
 800e3f0:	461d      	mov	r5, r3
 800e3f2:	f7f2 f929 	bl	8000648 <__aeabi_dmul>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	f7f1 ff6b 	bl	80002d8 <__aeabi_dsub>
 800e402:	ec53 2b18 	vmov	r2, r3, d8
 800e406:	4606      	mov	r6, r0
 800e408:	460f      	mov	r7, r1
 800e40a:	4620      	mov	r0, r4
 800e40c:	4629      	mov	r1, r5
 800e40e:	f7f1 ff63 	bl	80002d8 <__aeabi_dsub>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4650      	mov	r0, sl
 800e418:	4659      	mov	r1, fp
 800e41a:	f7f1 ff5d 	bl	80002d8 <__aeabi_dsub>
 800e41e:	4642      	mov	r2, r8
 800e420:	464b      	mov	r3, r9
 800e422:	f7f2 f911 	bl	8000648 <__aeabi_dmul>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	4630      	mov	r0, r6
 800e42c:	4639      	mov	r1, r7
 800e42e:	f7f1 ff53 	bl	80002d8 <__aeabi_dsub>
 800e432:	ec53 2b19 	vmov	r2, r3, d9
 800e436:	f7f2 f907 	bl	8000648 <__aeabi_dmul>
 800e43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e43e:	ec41 0b18 	vmov	d8, r0, r1
 800e442:	4610      	mov	r0, r2
 800e444:	4619      	mov	r1, r3
 800e446:	f7f2 f8ff 	bl	8000648 <__aeabi_dmul>
 800e44a:	a37d      	add	r3, pc, #500	; (adr r3, 800e640 <__ieee754_pow+0x6f0>)
 800e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e450:	4604      	mov	r4, r0
 800e452:	460d      	mov	r5, r1
 800e454:	f7f2 f8f8 	bl	8000648 <__aeabi_dmul>
 800e458:	a37b      	add	r3, pc, #492	; (adr r3, 800e648 <__ieee754_pow+0x6f8>)
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	f7f1 ff3d 	bl	80002dc <__adddf3>
 800e462:	4622      	mov	r2, r4
 800e464:	462b      	mov	r3, r5
 800e466:	f7f2 f8ef 	bl	8000648 <__aeabi_dmul>
 800e46a:	a379      	add	r3, pc, #484	; (adr r3, 800e650 <__ieee754_pow+0x700>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	f7f1 ff34 	bl	80002dc <__adddf3>
 800e474:	4622      	mov	r2, r4
 800e476:	462b      	mov	r3, r5
 800e478:	f7f2 f8e6 	bl	8000648 <__aeabi_dmul>
 800e47c:	a376      	add	r3, pc, #472	; (adr r3, 800e658 <__ieee754_pow+0x708>)
 800e47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e482:	f7f1 ff2b 	bl	80002dc <__adddf3>
 800e486:	4622      	mov	r2, r4
 800e488:	462b      	mov	r3, r5
 800e48a:	f7f2 f8dd 	bl	8000648 <__aeabi_dmul>
 800e48e:	a374      	add	r3, pc, #464	; (adr r3, 800e660 <__ieee754_pow+0x710>)
 800e490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e494:	f7f1 ff22 	bl	80002dc <__adddf3>
 800e498:	4622      	mov	r2, r4
 800e49a:	462b      	mov	r3, r5
 800e49c:	f7f2 f8d4 	bl	8000648 <__aeabi_dmul>
 800e4a0:	a371      	add	r3, pc, #452	; (adr r3, 800e668 <__ieee754_pow+0x718>)
 800e4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a6:	f7f1 ff19 	bl	80002dc <__adddf3>
 800e4aa:	4622      	mov	r2, r4
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	460f      	mov	r7, r1
 800e4b0:	462b      	mov	r3, r5
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7f2 f8c7 	bl	8000648 <__aeabi_dmul>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	460b      	mov	r3, r1
 800e4be:	4630      	mov	r0, r6
 800e4c0:	4639      	mov	r1, r7
 800e4c2:	f7f2 f8c1 	bl	8000648 <__aeabi_dmul>
 800e4c6:	4642      	mov	r2, r8
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	460d      	mov	r5, r1
 800e4cc:	464b      	mov	r3, r9
 800e4ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4d2:	f7f1 ff03 	bl	80002dc <__adddf3>
 800e4d6:	ec53 2b18 	vmov	r2, r3, d8
 800e4da:	f7f2 f8b5 	bl	8000648 <__aeabi_dmul>
 800e4de:	4622      	mov	r2, r4
 800e4e0:	462b      	mov	r3, r5
 800e4e2:	f7f1 fefb 	bl	80002dc <__adddf3>
 800e4e6:	4642      	mov	r2, r8
 800e4e8:	4682      	mov	sl, r0
 800e4ea:	468b      	mov	fp, r1
 800e4ec:	464b      	mov	r3, r9
 800e4ee:	4640      	mov	r0, r8
 800e4f0:	4649      	mov	r1, r9
 800e4f2:	f7f2 f8a9 	bl	8000648 <__aeabi_dmul>
 800e4f6:	4b6c      	ldr	r3, [pc, #432]	; (800e6a8 <__ieee754_pow+0x758>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	f7f1 feed 	bl	80002dc <__adddf3>
 800e502:	4652      	mov	r2, sl
 800e504:	465b      	mov	r3, fp
 800e506:	f7f1 fee9 	bl	80002dc <__adddf3>
 800e50a:	9c04      	ldr	r4, [sp, #16]
 800e50c:	460d      	mov	r5, r1
 800e50e:	4622      	mov	r2, r4
 800e510:	460b      	mov	r3, r1
 800e512:	4640      	mov	r0, r8
 800e514:	4649      	mov	r1, r9
 800e516:	f7f2 f897 	bl	8000648 <__aeabi_dmul>
 800e51a:	4b63      	ldr	r3, [pc, #396]	; (800e6a8 <__ieee754_pow+0x758>)
 800e51c:	4680      	mov	r8, r0
 800e51e:	4689      	mov	r9, r1
 800e520:	2200      	movs	r2, #0
 800e522:	4620      	mov	r0, r4
 800e524:	4629      	mov	r1, r5
 800e526:	f7f1 fed7 	bl	80002d8 <__aeabi_dsub>
 800e52a:	4632      	mov	r2, r6
 800e52c:	463b      	mov	r3, r7
 800e52e:	f7f1 fed3 	bl	80002d8 <__aeabi_dsub>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	4650      	mov	r0, sl
 800e538:	4659      	mov	r1, fp
 800e53a:	f7f1 fecd 	bl	80002d8 <__aeabi_dsub>
 800e53e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e542:	f7f2 f881 	bl	8000648 <__aeabi_dmul>
 800e546:	4622      	mov	r2, r4
 800e548:	4606      	mov	r6, r0
 800e54a:	460f      	mov	r7, r1
 800e54c:	462b      	mov	r3, r5
 800e54e:	ec51 0b18 	vmov	r0, r1, d8
 800e552:	f7f2 f879 	bl	8000648 <__aeabi_dmul>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	4630      	mov	r0, r6
 800e55c:	4639      	mov	r1, r7
 800e55e:	f7f1 febd 	bl	80002dc <__adddf3>
 800e562:	4606      	mov	r6, r0
 800e564:	460f      	mov	r7, r1
 800e566:	4602      	mov	r2, r0
 800e568:	460b      	mov	r3, r1
 800e56a:	4640      	mov	r0, r8
 800e56c:	4649      	mov	r1, r9
 800e56e:	f7f1 feb5 	bl	80002dc <__adddf3>
 800e572:	9c04      	ldr	r4, [sp, #16]
 800e574:	a33e      	add	r3, pc, #248	; (adr r3, 800e670 <__ieee754_pow+0x720>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	4620      	mov	r0, r4
 800e57c:	460d      	mov	r5, r1
 800e57e:	f7f2 f863 	bl	8000648 <__aeabi_dmul>
 800e582:	4642      	mov	r2, r8
 800e584:	ec41 0b18 	vmov	d8, r0, r1
 800e588:	464b      	mov	r3, r9
 800e58a:	4620      	mov	r0, r4
 800e58c:	4629      	mov	r1, r5
 800e58e:	f7f1 fea3 	bl	80002d8 <__aeabi_dsub>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4630      	mov	r0, r6
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f1 fe9d 	bl	80002d8 <__aeabi_dsub>
 800e59e:	a336      	add	r3, pc, #216	; (adr r3, 800e678 <__ieee754_pow+0x728>)
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	f7f2 f850 	bl	8000648 <__aeabi_dmul>
 800e5a8:	a335      	add	r3, pc, #212	; (adr r3, 800e680 <__ieee754_pow+0x730>)
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	460f      	mov	r7, r1
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	f7f2 f847 	bl	8000648 <__aeabi_dmul>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4630      	mov	r0, r6
 800e5c0:	4639      	mov	r1, r7
 800e5c2:	f7f1 fe8b 	bl	80002dc <__adddf3>
 800e5c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5c8:	4b38      	ldr	r3, [pc, #224]	; (800e6ac <__ieee754_pow+0x75c>)
 800e5ca:	4413      	add	r3, r2
 800e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d0:	f7f1 fe84 	bl	80002dc <__adddf3>
 800e5d4:	4682      	mov	sl, r0
 800e5d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5d8:	468b      	mov	fp, r1
 800e5da:	f7f1 ffcb 	bl	8000574 <__aeabi_i2d>
 800e5de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5e0:	4b33      	ldr	r3, [pc, #204]	; (800e6b0 <__ieee754_pow+0x760>)
 800e5e2:	4413      	add	r3, r2
 800e5e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5e8:	4606      	mov	r6, r0
 800e5ea:	460f      	mov	r7, r1
 800e5ec:	4652      	mov	r2, sl
 800e5ee:	465b      	mov	r3, fp
 800e5f0:	ec51 0b18 	vmov	r0, r1, d8
 800e5f4:	f7f1 fe72 	bl	80002dc <__adddf3>
 800e5f8:	4642      	mov	r2, r8
 800e5fa:	464b      	mov	r3, r9
 800e5fc:	f7f1 fe6e 	bl	80002dc <__adddf3>
 800e600:	4632      	mov	r2, r6
 800e602:	463b      	mov	r3, r7
 800e604:	f7f1 fe6a 	bl	80002dc <__adddf3>
 800e608:	9c04      	ldr	r4, [sp, #16]
 800e60a:	4632      	mov	r2, r6
 800e60c:	463b      	mov	r3, r7
 800e60e:	4620      	mov	r0, r4
 800e610:	460d      	mov	r5, r1
 800e612:	f7f1 fe61 	bl	80002d8 <__aeabi_dsub>
 800e616:	4642      	mov	r2, r8
 800e618:	464b      	mov	r3, r9
 800e61a:	f7f1 fe5d 	bl	80002d8 <__aeabi_dsub>
 800e61e:	ec53 2b18 	vmov	r2, r3, d8
 800e622:	f7f1 fe59 	bl	80002d8 <__aeabi_dsub>
 800e626:	4602      	mov	r2, r0
 800e628:	460b      	mov	r3, r1
 800e62a:	4650      	mov	r0, sl
 800e62c:	4659      	mov	r1, fp
 800e62e:	e606      	b.n	800e23e <__ieee754_pow+0x2ee>
 800e630:	2401      	movs	r4, #1
 800e632:	e6a0      	b.n	800e376 <__ieee754_pow+0x426>
 800e634:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e688 <__ieee754_pow+0x738>
 800e638:	e60d      	b.n	800e256 <__ieee754_pow+0x306>
 800e63a:	bf00      	nop
 800e63c:	f3af 8000 	nop.w
 800e640:	4a454eef 	.word	0x4a454eef
 800e644:	3fca7e28 	.word	0x3fca7e28
 800e648:	93c9db65 	.word	0x93c9db65
 800e64c:	3fcd864a 	.word	0x3fcd864a
 800e650:	a91d4101 	.word	0xa91d4101
 800e654:	3fd17460 	.word	0x3fd17460
 800e658:	518f264d 	.word	0x518f264d
 800e65c:	3fd55555 	.word	0x3fd55555
 800e660:	db6fabff 	.word	0xdb6fabff
 800e664:	3fdb6db6 	.word	0x3fdb6db6
 800e668:	33333303 	.word	0x33333303
 800e66c:	3fe33333 	.word	0x3fe33333
 800e670:	e0000000 	.word	0xe0000000
 800e674:	3feec709 	.word	0x3feec709
 800e678:	dc3a03fd 	.word	0xdc3a03fd
 800e67c:	3feec709 	.word	0x3feec709
 800e680:	145b01f5 	.word	0x145b01f5
 800e684:	be3e2fe0 	.word	0xbe3e2fe0
 800e688:	00000000 	.word	0x00000000
 800e68c:	3ff00000 	.word	0x3ff00000
 800e690:	7ff00000 	.word	0x7ff00000
 800e694:	43400000 	.word	0x43400000
 800e698:	0003988e 	.word	0x0003988e
 800e69c:	000bb679 	.word	0x000bb679
 800e6a0:	080101e8 	.word	0x080101e8
 800e6a4:	3ff00000 	.word	0x3ff00000
 800e6a8:	40080000 	.word	0x40080000
 800e6ac:	08010208 	.word	0x08010208
 800e6b0:	080101f8 	.word	0x080101f8
 800e6b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e98c <__ieee754_pow+0xa3c>)
 800e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ba:	4640      	mov	r0, r8
 800e6bc:	4649      	mov	r1, r9
 800e6be:	f7f1 fe0d 	bl	80002dc <__adddf3>
 800e6c2:	4622      	mov	r2, r4
 800e6c4:	ec41 0b1a 	vmov	d10, r0, r1
 800e6c8:	462b      	mov	r3, r5
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	4639      	mov	r1, r7
 800e6ce:	f7f1 fe03 	bl	80002d8 <__aeabi_dsub>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	ec51 0b1a 	vmov	r0, r1, d10
 800e6da:	f7f2 fa45 	bl	8000b68 <__aeabi_dcmpgt>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f47f adf8 	bne.w	800e2d4 <__ieee754_pow+0x384>
 800e6e4:	4aa4      	ldr	r2, [pc, #656]	; (800e978 <__ieee754_pow+0xa28>)
 800e6e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	f340 810b 	ble.w	800e906 <__ieee754_pow+0x9b6>
 800e6f0:	151b      	asrs	r3, r3, #20
 800e6f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e6f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e6fa:	fa4a f303 	asr.w	r3, sl, r3
 800e6fe:	445b      	add	r3, fp
 800e700:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e704:	4e9d      	ldr	r6, [pc, #628]	; (800e97c <__ieee754_pow+0xa2c>)
 800e706:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e70a:	4116      	asrs	r6, r2
 800e70c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e710:	2000      	movs	r0, #0
 800e712:	ea23 0106 	bic.w	r1, r3, r6
 800e716:	f1c2 0214 	rsb	r2, r2, #20
 800e71a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e71e:	fa4a fa02 	asr.w	sl, sl, r2
 800e722:	f1bb 0f00 	cmp.w	fp, #0
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	4620      	mov	r0, r4
 800e72c:	4629      	mov	r1, r5
 800e72e:	bfb8      	it	lt
 800e730:	f1ca 0a00 	rsblt	sl, sl, #0
 800e734:	f7f1 fdd0 	bl	80002d8 <__aeabi_dsub>
 800e738:	ec41 0b19 	vmov	d9, r0, r1
 800e73c:	4642      	mov	r2, r8
 800e73e:	464b      	mov	r3, r9
 800e740:	ec51 0b19 	vmov	r0, r1, d9
 800e744:	f7f1 fdca 	bl	80002dc <__adddf3>
 800e748:	2400      	movs	r4, #0
 800e74a:	a379      	add	r3, pc, #484	; (adr r3, 800e930 <__ieee754_pow+0x9e0>)
 800e74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e750:	4620      	mov	r0, r4
 800e752:	460d      	mov	r5, r1
 800e754:	f7f1 ff78 	bl	8000648 <__aeabi_dmul>
 800e758:	ec53 2b19 	vmov	r2, r3, d9
 800e75c:	4606      	mov	r6, r0
 800e75e:	460f      	mov	r7, r1
 800e760:	4620      	mov	r0, r4
 800e762:	4629      	mov	r1, r5
 800e764:	f7f1 fdb8 	bl	80002d8 <__aeabi_dsub>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4640      	mov	r0, r8
 800e76e:	4649      	mov	r1, r9
 800e770:	f7f1 fdb2 	bl	80002d8 <__aeabi_dsub>
 800e774:	a370      	add	r3, pc, #448	; (adr r3, 800e938 <__ieee754_pow+0x9e8>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f1 ff65 	bl	8000648 <__aeabi_dmul>
 800e77e:	a370      	add	r3, pc, #448	; (adr r3, 800e940 <__ieee754_pow+0x9f0>)
 800e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e784:	4680      	mov	r8, r0
 800e786:	4689      	mov	r9, r1
 800e788:	4620      	mov	r0, r4
 800e78a:	4629      	mov	r1, r5
 800e78c:	f7f1 ff5c 	bl	8000648 <__aeabi_dmul>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	4640      	mov	r0, r8
 800e796:	4649      	mov	r1, r9
 800e798:	f7f1 fda0 	bl	80002dc <__adddf3>
 800e79c:	4604      	mov	r4, r0
 800e79e:	460d      	mov	r5, r1
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	f7f1 fd98 	bl	80002dc <__adddf3>
 800e7ac:	4632      	mov	r2, r6
 800e7ae:	463b      	mov	r3, r7
 800e7b0:	4680      	mov	r8, r0
 800e7b2:	4689      	mov	r9, r1
 800e7b4:	f7f1 fd90 	bl	80002d8 <__aeabi_dsub>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4620      	mov	r0, r4
 800e7be:	4629      	mov	r1, r5
 800e7c0:	f7f1 fd8a 	bl	80002d8 <__aeabi_dsub>
 800e7c4:	4642      	mov	r2, r8
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	460f      	mov	r7, r1
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f1 ff3a 	bl	8000648 <__aeabi_dmul>
 800e7d4:	a35c      	add	r3, pc, #368	; (adr r3, 800e948 <__ieee754_pow+0x9f8>)
 800e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7da:	4604      	mov	r4, r0
 800e7dc:	460d      	mov	r5, r1
 800e7de:	f7f1 ff33 	bl	8000648 <__aeabi_dmul>
 800e7e2:	a35b      	add	r3, pc, #364	; (adr r3, 800e950 <__ieee754_pow+0xa00>)
 800e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e8:	f7f1 fd76 	bl	80002d8 <__aeabi_dsub>
 800e7ec:	4622      	mov	r2, r4
 800e7ee:	462b      	mov	r3, r5
 800e7f0:	f7f1 ff2a 	bl	8000648 <__aeabi_dmul>
 800e7f4:	a358      	add	r3, pc, #352	; (adr r3, 800e958 <__ieee754_pow+0xa08>)
 800e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fa:	f7f1 fd6f 	bl	80002dc <__adddf3>
 800e7fe:	4622      	mov	r2, r4
 800e800:	462b      	mov	r3, r5
 800e802:	f7f1 ff21 	bl	8000648 <__aeabi_dmul>
 800e806:	a356      	add	r3, pc, #344	; (adr r3, 800e960 <__ieee754_pow+0xa10>)
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	f7f1 fd64 	bl	80002d8 <__aeabi_dsub>
 800e810:	4622      	mov	r2, r4
 800e812:	462b      	mov	r3, r5
 800e814:	f7f1 ff18 	bl	8000648 <__aeabi_dmul>
 800e818:	a353      	add	r3, pc, #332	; (adr r3, 800e968 <__ieee754_pow+0xa18>)
 800e81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81e:	f7f1 fd5d 	bl	80002dc <__adddf3>
 800e822:	4622      	mov	r2, r4
 800e824:	462b      	mov	r3, r5
 800e826:	f7f1 ff0f 	bl	8000648 <__aeabi_dmul>
 800e82a:	4602      	mov	r2, r0
 800e82c:	460b      	mov	r3, r1
 800e82e:	4640      	mov	r0, r8
 800e830:	4649      	mov	r1, r9
 800e832:	f7f1 fd51 	bl	80002d8 <__aeabi_dsub>
 800e836:	4604      	mov	r4, r0
 800e838:	460d      	mov	r5, r1
 800e83a:	4602      	mov	r2, r0
 800e83c:	460b      	mov	r3, r1
 800e83e:	4640      	mov	r0, r8
 800e840:	4649      	mov	r1, r9
 800e842:	f7f1 ff01 	bl	8000648 <__aeabi_dmul>
 800e846:	2200      	movs	r2, #0
 800e848:	ec41 0b19 	vmov	d9, r0, r1
 800e84c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e850:	4620      	mov	r0, r4
 800e852:	4629      	mov	r1, r5
 800e854:	f7f1 fd40 	bl	80002d8 <__aeabi_dsub>
 800e858:	4602      	mov	r2, r0
 800e85a:	460b      	mov	r3, r1
 800e85c:	ec51 0b19 	vmov	r0, r1, d9
 800e860:	f7f2 f81c 	bl	800089c <__aeabi_ddiv>
 800e864:	4632      	mov	r2, r6
 800e866:	4604      	mov	r4, r0
 800e868:	460d      	mov	r5, r1
 800e86a:	463b      	mov	r3, r7
 800e86c:	4640      	mov	r0, r8
 800e86e:	4649      	mov	r1, r9
 800e870:	f7f1 feea 	bl	8000648 <__aeabi_dmul>
 800e874:	4632      	mov	r2, r6
 800e876:	463b      	mov	r3, r7
 800e878:	f7f1 fd30 	bl	80002dc <__adddf3>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4620      	mov	r0, r4
 800e882:	4629      	mov	r1, r5
 800e884:	f7f1 fd28 	bl	80002d8 <__aeabi_dsub>
 800e888:	4642      	mov	r2, r8
 800e88a:	464b      	mov	r3, r9
 800e88c:	f7f1 fd24 	bl	80002d8 <__aeabi_dsub>
 800e890:	460b      	mov	r3, r1
 800e892:	4602      	mov	r2, r0
 800e894:	493a      	ldr	r1, [pc, #232]	; (800e980 <__ieee754_pow+0xa30>)
 800e896:	2000      	movs	r0, #0
 800e898:	f7f1 fd1e 	bl	80002d8 <__aeabi_dsub>
 800e89c:	e9cd 0100 	strd	r0, r1, [sp]
 800e8a0:	9b01      	ldr	r3, [sp, #4]
 800e8a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e8a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8aa:	da2f      	bge.n	800e90c <__ieee754_pow+0x9bc>
 800e8ac:	4650      	mov	r0, sl
 800e8ae:	ed9d 0b00 	vldr	d0, [sp]
 800e8b2:	f001 f921 	bl	800faf8 <scalbn>
 800e8b6:	ec51 0b10 	vmov	r0, r1, d0
 800e8ba:	ec53 2b18 	vmov	r2, r3, d8
 800e8be:	f7ff bbe0 	b.w	800e082 <__ieee754_pow+0x132>
 800e8c2:	4b30      	ldr	r3, [pc, #192]	; (800e984 <__ieee754_pow+0xa34>)
 800e8c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e8c8:	429e      	cmp	r6, r3
 800e8ca:	f77f af0b 	ble.w	800e6e4 <__ieee754_pow+0x794>
 800e8ce:	4b2e      	ldr	r3, [pc, #184]	; (800e988 <__ieee754_pow+0xa38>)
 800e8d0:	440b      	add	r3, r1
 800e8d2:	4303      	orrs	r3, r0
 800e8d4:	d00b      	beq.n	800e8ee <__ieee754_pow+0x99e>
 800e8d6:	a326      	add	r3, pc, #152	; (adr r3, 800e970 <__ieee754_pow+0xa20>)
 800e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8dc:	ec51 0b18 	vmov	r0, r1, d8
 800e8e0:	f7f1 feb2 	bl	8000648 <__aeabi_dmul>
 800e8e4:	a322      	add	r3, pc, #136	; (adr r3, 800e970 <__ieee754_pow+0xa20>)
 800e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ea:	f7ff bbca 	b.w	800e082 <__ieee754_pow+0x132>
 800e8ee:	4622      	mov	r2, r4
 800e8f0:	462b      	mov	r3, r5
 800e8f2:	f7f1 fcf1 	bl	80002d8 <__aeabi_dsub>
 800e8f6:	4642      	mov	r2, r8
 800e8f8:	464b      	mov	r3, r9
 800e8fa:	f7f2 f92b 	bl	8000b54 <__aeabi_dcmpge>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f43f aef0 	beq.w	800e6e4 <__ieee754_pow+0x794>
 800e904:	e7e7      	b.n	800e8d6 <__ieee754_pow+0x986>
 800e906:	f04f 0a00 	mov.w	sl, #0
 800e90a:	e717      	b.n	800e73c <__ieee754_pow+0x7ec>
 800e90c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e910:	4619      	mov	r1, r3
 800e912:	e7d2      	b.n	800e8ba <__ieee754_pow+0x96a>
 800e914:	491a      	ldr	r1, [pc, #104]	; (800e980 <__ieee754_pow+0xa30>)
 800e916:	2000      	movs	r0, #0
 800e918:	f7ff bb9e 	b.w	800e058 <__ieee754_pow+0x108>
 800e91c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e920:	f7ff bb9a 	b.w	800e058 <__ieee754_pow+0x108>
 800e924:	9000      	str	r0, [sp, #0]
 800e926:	f7ff bb76 	b.w	800e016 <__ieee754_pow+0xc6>
 800e92a:	2100      	movs	r1, #0
 800e92c:	f7ff bb60 	b.w	800dff0 <__ieee754_pow+0xa0>
 800e930:	00000000 	.word	0x00000000
 800e934:	3fe62e43 	.word	0x3fe62e43
 800e938:	fefa39ef 	.word	0xfefa39ef
 800e93c:	3fe62e42 	.word	0x3fe62e42
 800e940:	0ca86c39 	.word	0x0ca86c39
 800e944:	be205c61 	.word	0xbe205c61
 800e948:	72bea4d0 	.word	0x72bea4d0
 800e94c:	3e663769 	.word	0x3e663769
 800e950:	c5d26bf1 	.word	0xc5d26bf1
 800e954:	3ebbbd41 	.word	0x3ebbbd41
 800e958:	af25de2c 	.word	0xaf25de2c
 800e95c:	3f11566a 	.word	0x3f11566a
 800e960:	16bebd93 	.word	0x16bebd93
 800e964:	3f66c16c 	.word	0x3f66c16c
 800e968:	5555553e 	.word	0x5555553e
 800e96c:	3fc55555 	.word	0x3fc55555
 800e970:	c2f8f359 	.word	0xc2f8f359
 800e974:	01a56e1f 	.word	0x01a56e1f
 800e978:	3fe00000 	.word	0x3fe00000
 800e97c:	000fffff 	.word	0x000fffff
 800e980:	3ff00000 	.word	0x3ff00000
 800e984:	4090cbff 	.word	0x4090cbff
 800e988:	3f6f3400 	.word	0x3f6f3400
 800e98c:	652b82fe 	.word	0x652b82fe
 800e990:	3c971547 	.word	0x3c971547
 800e994:	00000000 	.word	0x00000000

0800e998 <__ieee754_rem_pio2>:
 800e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	ed2d 8b02 	vpush	{d8}
 800e9a0:	ec55 4b10 	vmov	r4, r5, d0
 800e9a4:	4bca      	ldr	r3, [pc, #808]	; (800ecd0 <__ieee754_rem_pio2+0x338>)
 800e9a6:	b08b      	sub	sp, #44	; 0x2c
 800e9a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e9ac:	4598      	cmp	r8, r3
 800e9ae:	4682      	mov	sl, r0
 800e9b0:	9502      	str	r5, [sp, #8]
 800e9b2:	dc08      	bgt.n	800e9c6 <__ieee754_rem_pio2+0x2e>
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	ed80 0b00 	vstr	d0, [r0]
 800e9bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e9c0:	f04f 0b00 	mov.w	fp, #0
 800e9c4:	e028      	b.n	800ea18 <__ieee754_rem_pio2+0x80>
 800e9c6:	4bc3      	ldr	r3, [pc, #780]	; (800ecd4 <__ieee754_rem_pio2+0x33c>)
 800e9c8:	4598      	cmp	r8, r3
 800e9ca:	dc78      	bgt.n	800eabe <__ieee754_rem_pio2+0x126>
 800e9cc:	9b02      	ldr	r3, [sp, #8]
 800e9ce:	4ec2      	ldr	r6, [pc, #776]	; (800ecd8 <__ieee754_rem_pio2+0x340>)
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	ee10 0a10 	vmov	r0, s0
 800e9d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ec98 <__ieee754_rem_pio2+0x300>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	4629      	mov	r1, r5
 800e9de:	dd39      	ble.n	800ea54 <__ieee754_rem_pio2+0xbc>
 800e9e0:	f7f1 fc7a 	bl	80002d8 <__aeabi_dsub>
 800e9e4:	45b0      	cmp	r8, r6
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	460d      	mov	r5, r1
 800e9ea:	d01b      	beq.n	800ea24 <__ieee754_rem_pio2+0x8c>
 800e9ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800eca0 <__ieee754_rem_pio2+0x308>)
 800e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f2:	f7f1 fc71 	bl	80002d8 <__aeabi_dsub>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	e9ca 2300 	strd	r2, r3, [sl]
 800e9fe:	4620      	mov	r0, r4
 800ea00:	4629      	mov	r1, r5
 800ea02:	f7f1 fc69 	bl	80002d8 <__aeabi_dsub>
 800ea06:	a3a6      	add	r3, pc, #664	; (adr r3, 800eca0 <__ieee754_rem_pio2+0x308>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f7f1 fc64 	bl	80002d8 <__aeabi_dsub>
 800ea10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea14:	f04f 0b01 	mov.w	fp, #1
 800ea18:	4658      	mov	r0, fp
 800ea1a:	b00b      	add	sp, #44	; 0x2c
 800ea1c:	ecbd 8b02 	vpop	{d8}
 800ea20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea24:	a3a0      	add	r3, pc, #640	; (adr r3, 800eca8 <__ieee754_rem_pio2+0x310>)
 800ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2a:	f7f1 fc55 	bl	80002d8 <__aeabi_dsub>
 800ea2e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ecb0 <__ieee754_rem_pio2+0x318>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	4604      	mov	r4, r0
 800ea36:	460d      	mov	r5, r1
 800ea38:	f7f1 fc4e 	bl	80002d8 <__aeabi_dsub>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	e9ca 2300 	strd	r2, r3, [sl]
 800ea44:	4620      	mov	r0, r4
 800ea46:	4629      	mov	r1, r5
 800ea48:	f7f1 fc46 	bl	80002d8 <__aeabi_dsub>
 800ea4c:	a398      	add	r3, pc, #608	; (adr r3, 800ecb0 <__ieee754_rem_pio2+0x318>)
 800ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea52:	e7db      	b.n	800ea0c <__ieee754_rem_pio2+0x74>
 800ea54:	f7f1 fc42 	bl	80002dc <__adddf3>
 800ea58:	45b0      	cmp	r8, r6
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	460d      	mov	r5, r1
 800ea5e:	d016      	beq.n	800ea8e <__ieee754_rem_pio2+0xf6>
 800ea60:	a38f      	add	r3, pc, #572	; (adr r3, 800eca0 <__ieee754_rem_pio2+0x308>)
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	f7f1 fc39 	bl	80002dc <__adddf3>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	e9ca 2300 	strd	r2, r3, [sl]
 800ea72:	4620      	mov	r0, r4
 800ea74:	4629      	mov	r1, r5
 800ea76:	f7f1 fc2f 	bl	80002d8 <__aeabi_dsub>
 800ea7a:	a389      	add	r3, pc, #548	; (adr r3, 800eca0 <__ieee754_rem_pio2+0x308>)
 800ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea80:	f7f1 fc2c 	bl	80002dc <__adddf3>
 800ea84:	f04f 3bff 	mov.w	fp, #4294967295
 800ea88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea8c:	e7c4      	b.n	800ea18 <__ieee754_rem_pio2+0x80>
 800ea8e:	a386      	add	r3, pc, #536	; (adr r3, 800eca8 <__ieee754_rem_pio2+0x310>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f7f1 fc22 	bl	80002dc <__adddf3>
 800ea98:	a385      	add	r3, pc, #532	; (adr r3, 800ecb0 <__ieee754_rem_pio2+0x318>)
 800ea9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	f7f1 fc1b 	bl	80002dc <__adddf3>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	e9ca 2300 	strd	r2, r3, [sl]
 800eaae:	4620      	mov	r0, r4
 800eab0:	4629      	mov	r1, r5
 800eab2:	f7f1 fc11 	bl	80002d8 <__aeabi_dsub>
 800eab6:	a37e      	add	r3, pc, #504	; (adr r3, 800ecb0 <__ieee754_rem_pio2+0x318>)
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	e7e0      	b.n	800ea80 <__ieee754_rem_pio2+0xe8>
 800eabe:	4b87      	ldr	r3, [pc, #540]	; (800ecdc <__ieee754_rem_pio2+0x344>)
 800eac0:	4598      	cmp	r8, r3
 800eac2:	f300 80d9 	bgt.w	800ec78 <__ieee754_rem_pio2+0x2e0>
 800eac6:	f000 feed 	bl	800f8a4 <fabs>
 800eaca:	ec55 4b10 	vmov	r4, r5, d0
 800eace:	ee10 0a10 	vmov	r0, s0
 800ead2:	a379      	add	r3, pc, #484	; (adr r3, 800ecb8 <__ieee754_rem_pio2+0x320>)
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	4629      	mov	r1, r5
 800eada:	f7f1 fdb5 	bl	8000648 <__aeabi_dmul>
 800eade:	4b80      	ldr	r3, [pc, #512]	; (800ece0 <__ieee754_rem_pio2+0x348>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	f7f1 fbfb 	bl	80002dc <__adddf3>
 800eae6:	f7f2 f85f 	bl	8000ba8 <__aeabi_d2iz>
 800eaea:	4683      	mov	fp, r0
 800eaec:	f7f1 fd42 	bl	8000574 <__aeabi_i2d>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	ec43 2b18 	vmov	d8, r2, r3
 800eaf8:	a367      	add	r3, pc, #412	; (adr r3, 800ec98 <__ieee754_rem_pio2+0x300>)
 800eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafe:	f7f1 fda3 	bl	8000648 <__aeabi_dmul>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	4620      	mov	r0, r4
 800eb08:	4629      	mov	r1, r5
 800eb0a:	f7f1 fbe5 	bl	80002d8 <__aeabi_dsub>
 800eb0e:	a364      	add	r3, pc, #400	; (adr r3, 800eca0 <__ieee754_rem_pio2+0x308>)
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	ec51 0b18 	vmov	r0, r1, d8
 800eb1c:	f7f1 fd94 	bl	8000648 <__aeabi_dmul>
 800eb20:	f1bb 0f1f 	cmp.w	fp, #31
 800eb24:	4604      	mov	r4, r0
 800eb26:	460d      	mov	r5, r1
 800eb28:	dc0d      	bgt.n	800eb46 <__ieee754_rem_pio2+0x1ae>
 800eb2a:	4b6e      	ldr	r3, [pc, #440]	; (800ece4 <__ieee754_rem_pio2+0x34c>)
 800eb2c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800eb30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb34:	4543      	cmp	r3, r8
 800eb36:	d006      	beq.n	800eb46 <__ieee754_rem_pio2+0x1ae>
 800eb38:	4622      	mov	r2, r4
 800eb3a:	462b      	mov	r3, r5
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	4639      	mov	r1, r7
 800eb40:	f7f1 fbca 	bl	80002d8 <__aeabi_dsub>
 800eb44:	e00f      	b.n	800eb66 <__ieee754_rem_pio2+0x1ce>
 800eb46:	462b      	mov	r3, r5
 800eb48:	4622      	mov	r2, r4
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	f7f1 fbc3 	bl	80002d8 <__aeabi_dsub>
 800eb52:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eb56:	9303      	str	r3, [sp, #12]
 800eb58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb5c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800eb60:	f1b8 0f10 	cmp.w	r8, #16
 800eb64:	dc02      	bgt.n	800eb6c <__ieee754_rem_pio2+0x1d4>
 800eb66:	e9ca 0100 	strd	r0, r1, [sl]
 800eb6a:	e039      	b.n	800ebe0 <__ieee754_rem_pio2+0x248>
 800eb6c:	a34e      	add	r3, pc, #312	; (adr r3, 800eca8 <__ieee754_rem_pio2+0x310>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	ec51 0b18 	vmov	r0, r1, d8
 800eb76:	f7f1 fd67 	bl	8000648 <__aeabi_dmul>
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7f1 fba7 	bl	80002d8 <__aeabi_dsub>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4680      	mov	r8, r0
 800eb90:	4689      	mov	r9, r1
 800eb92:	4630      	mov	r0, r6
 800eb94:	4639      	mov	r1, r7
 800eb96:	f7f1 fb9f 	bl	80002d8 <__aeabi_dsub>
 800eb9a:	4622      	mov	r2, r4
 800eb9c:	462b      	mov	r3, r5
 800eb9e:	f7f1 fb9b 	bl	80002d8 <__aeabi_dsub>
 800eba2:	a343      	add	r3, pc, #268	; (adr r3, 800ecb0 <__ieee754_rem_pio2+0x318>)
 800eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba8:	4604      	mov	r4, r0
 800ebaa:	460d      	mov	r5, r1
 800ebac:	ec51 0b18 	vmov	r0, r1, d8
 800ebb0:	f7f1 fd4a 	bl	8000648 <__aeabi_dmul>
 800ebb4:	4622      	mov	r2, r4
 800ebb6:	462b      	mov	r3, r5
 800ebb8:	f7f1 fb8e 	bl	80002d8 <__aeabi_dsub>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	460d      	mov	r5, r1
 800ebc4:	4640      	mov	r0, r8
 800ebc6:	4649      	mov	r1, r9
 800ebc8:	f7f1 fb86 	bl	80002d8 <__aeabi_dsub>
 800ebcc:	9a03      	ldr	r2, [sp, #12]
 800ebce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	2b31      	cmp	r3, #49	; 0x31
 800ebd6:	dc24      	bgt.n	800ec22 <__ieee754_rem_pio2+0x28a>
 800ebd8:	e9ca 0100 	strd	r0, r1, [sl]
 800ebdc:	4646      	mov	r6, r8
 800ebde:	464f      	mov	r7, r9
 800ebe0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	4642      	mov	r2, r8
 800ebe8:	464b      	mov	r3, r9
 800ebea:	4639      	mov	r1, r7
 800ebec:	f7f1 fb74 	bl	80002d8 <__aeabi_dsub>
 800ebf0:	462b      	mov	r3, r5
 800ebf2:	4622      	mov	r2, r4
 800ebf4:	f7f1 fb70 	bl	80002d8 <__aeabi_dsub>
 800ebf8:	9b02      	ldr	r3, [sp, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec00:	f6bf af0a 	bge.w	800ea18 <__ieee754_rem_pio2+0x80>
 800ec04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec08:	f8ca 3004 	str.w	r3, [sl, #4]
 800ec0c:	f8ca 8000 	str.w	r8, [sl]
 800ec10:	f8ca 0008 	str.w	r0, [sl, #8]
 800ec14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec18:	f8ca 300c 	str.w	r3, [sl, #12]
 800ec1c:	f1cb 0b00 	rsb	fp, fp, #0
 800ec20:	e6fa      	b.n	800ea18 <__ieee754_rem_pio2+0x80>
 800ec22:	a327      	add	r3, pc, #156	; (adr r3, 800ecc0 <__ieee754_rem_pio2+0x328>)
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	ec51 0b18 	vmov	r0, r1, d8
 800ec2c:	f7f1 fd0c 	bl	8000648 <__aeabi_dmul>
 800ec30:	4604      	mov	r4, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4640      	mov	r0, r8
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	f7f1 fb4c 	bl	80002d8 <__aeabi_dsub>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	4606      	mov	r6, r0
 800ec46:	460f      	mov	r7, r1
 800ec48:	4640      	mov	r0, r8
 800ec4a:	4649      	mov	r1, r9
 800ec4c:	f7f1 fb44 	bl	80002d8 <__aeabi_dsub>
 800ec50:	4622      	mov	r2, r4
 800ec52:	462b      	mov	r3, r5
 800ec54:	f7f1 fb40 	bl	80002d8 <__aeabi_dsub>
 800ec58:	a31b      	add	r3, pc, #108	; (adr r3, 800ecc8 <__ieee754_rem_pio2+0x330>)
 800ec5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5e:	4604      	mov	r4, r0
 800ec60:	460d      	mov	r5, r1
 800ec62:	ec51 0b18 	vmov	r0, r1, d8
 800ec66:	f7f1 fcef 	bl	8000648 <__aeabi_dmul>
 800ec6a:	4622      	mov	r2, r4
 800ec6c:	462b      	mov	r3, r5
 800ec6e:	f7f1 fb33 	bl	80002d8 <__aeabi_dsub>
 800ec72:	4604      	mov	r4, r0
 800ec74:	460d      	mov	r5, r1
 800ec76:	e75f      	b.n	800eb38 <__ieee754_rem_pio2+0x1a0>
 800ec78:	4b1b      	ldr	r3, [pc, #108]	; (800ece8 <__ieee754_rem_pio2+0x350>)
 800ec7a:	4598      	cmp	r8, r3
 800ec7c:	dd36      	ble.n	800ecec <__ieee754_rem_pio2+0x354>
 800ec7e:	ee10 2a10 	vmov	r2, s0
 800ec82:	462b      	mov	r3, r5
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 fb26 	bl	80002d8 <__aeabi_dsub>
 800ec8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec90:	e9ca 0100 	strd	r0, r1, [sl]
 800ec94:	e694      	b.n	800e9c0 <__ieee754_rem_pio2+0x28>
 800ec96:	bf00      	nop
 800ec98:	54400000 	.word	0x54400000
 800ec9c:	3ff921fb 	.word	0x3ff921fb
 800eca0:	1a626331 	.word	0x1a626331
 800eca4:	3dd0b461 	.word	0x3dd0b461
 800eca8:	1a600000 	.word	0x1a600000
 800ecac:	3dd0b461 	.word	0x3dd0b461
 800ecb0:	2e037073 	.word	0x2e037073
 800ecb4:	3ba3198a 	.word	0x3ba3198a
 800ecb8:	6dc9c883 	.word	0x6dc9c883
 800ecbc:	3fe45f30 	.word	0x3fe45f30
 800ecc0:	2e000000 	.word	0x2e000000
 800ecc4:	3ba3198a 	.word	0x3ba3198a
 800ecc8:	252049c1 	.word	0x252049c1
 800eccc:	397b839a 	.word	0x397b839a
 800ecd0:	3fe921fb 	.word	0x3fe921fb
 800ecd4:	4002d97b 	.word	0x4002d97b
 800ecd8:	3ff921fb 	.word	0x3ff921fb
 800ecdc:	413921fb 	.word	0x413921fb
 800ece0:	3fe00000 	.word	0x3fe00000
 800ece4:	08010218 	.word	0x08010218
 800ece8:	7fefffff 	.word	0x7fefffff
 800ecec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ecf0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ecf4:	ee10 0a10 	vmov	r0, s0
 800ecf8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ecfc:	ee10 6a10 	vmov	r6, s0
 800ed00:	460f      	mov	r7, r1
 800ed02:	f7f1 ff51 	bl	8000ba8 <__aeabi_d2iz>
 800ed06:	f7f1 fc35 	bl	8000574 <__aeabi_i2d>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4630      	mov	r0, r6
 800ed10:	4639      	mov	r1, r7
 800ed12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed16:	f7f1 fadf 	bl	80002d8 <__aeabi_dsub>
 800ed1a:	4b22      	ldr	r3, [pc, #136]	; (800eda4 <__ieee754_rem_pio2+0x40c>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f7f1 fc93 	bl	8000648 <__aeabi_dmul>
 800ed22:	460f      	mov	r7, r1
 800ed24:	4606      	mov	r6, r0
 800ed26:	f7f1 ff3f 	bl	8000ba8 <__aeabi_d2iz>
 800ed2a:	f7f1 fc23 	bl	8000574 <__aeabi_i2d>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4630      	mov	r0, r6
 800ed34:	4639      	mov	r1, r7
 800ed36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed3a:	f7f1 facd 	bl	80002d8 <__aeabi_dsub>
 800ed3e:	4b19      	ldr	r3, [pc, #100]	; (800eda4 <__ieee754_rem_pio2+0x40c>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	f7f1 fc81 	bl	8000648 <__aeabi_dmul>
 800ed46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ed4a:	ad04      	add	r5, sp, #16
 800ed4c:	f04f 0803 	mov.w	r8, #3
 800ed50:	46a9      	mov	r9, r5
 800ed52:	2600      	movs	r6, #0
 800ed54:	2700      	movs	r7, #0
 800ed56:	4632      	mov	r2, r6
 800ed58:	463b      	mov	r3, r7
 800ed5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ed5e:	46c3      	mov	fp, r8
 800ed60:	3d08      	subs	r5, #8
 800ed62:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed66:	f7f1 fed7 	bl	8000b18 <__aeabi_dcmpeq>
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	d1f3      	bne.n	800ed56 <__ieee754_rem_pio2+0x3be>
 800ed6e:	4b0e      	ldr	r3, [pc, #56]	; (800eda8 <__ieee754_rem_pio2+0x410>)
 800ed70:	9301      	str	r3, [sp, #4]
 800ed72:	2302      	movs	r3, #2
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	4622      	mov	r2, r4
 800ed78:	465b      	mov	r3, fp
 800ed7a:	4651      	mov	r1, sl
 800ed7c:	4648      	mov	r0, r9
 800ed7e:	f000 f993 	bl	800f0a8 <__kernel_rem_pio2>
 800ed82:	9b02      	ldr	r3, [sp, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	4683      	mov	fp, r0
 800ed88:	f6bf ae46 	bge.w	800ea18 <__ieee754_rem_pio2+0x80>
 800ed8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ed90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ed94:	f8ca 3004 	str.w	r3, [sl, #4]
 800ed98:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ed9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eda0:	e73a      	b.n	800ec18 <__ieee754_rem_pio2+0x280>
 800eda2:	bf00      	nop
 800eda4:	41700000 	.word	0x41700000
 800eda8:	08010298 	.word	0x08010298

0800edac <__ieee754_sqrt>:
 800edac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb0:	ec55 4b10 	vmov	r4, r5, d0
 800edb4:	4e56      	ldr	r6, [pc, #344]	; (800ef10 <__ieee754_sqrt+0x164>)
 800edb6:	43ae      	bics	r6, r5
 800edb8:	ee10 0a10 	vmov	r0, s0
 800edbc:	ee10 3a10 	vmov	r3, s0
 800edc0:	4629      	mov	r1, r5
 800edc2:	462a      	mov	r2, r5
 800edc4:	d110      	bne.n	800ede8 <__ieee754_sqrt+0x3c>
 800edc6:	ee10 2a10 	vmov	r2, s0
 800edca:	462b      	mov	r3, r5
 800edcc:	f7f1 fc3c 	bl	8000648 <__aeabi_dmul>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	4620      	mov	r0, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	f7f1 fa80 	bl	80002dc <__adddf3>
 800eddc:	4604      	mov	r4, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	ec45 4b10 	vmov	d0, r4, r5
 800ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede8:	2d00      	cmp	r5, #0
 800edea:	dc10      	bgt.n	800ee0e <__ieee754_sqrt+0x62>
 800edec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800edf0:	4330      	orrs	r0, r6
 800edf2:	d0f5      	beq.n	800ede0 <__ieee754_sqrt+0x34>
 800edf4:	b15d      	cbz	r5, 800ee0e <__ieee754_sqrt+0x62>
 800edf6:	ee10 2a10 	vmov	r2, s0
 800edfa:	462b      	mov	r3, r5
 800edfc:	ee10 0a10 	vmov	r0, s0
 800ee00:	f7f1 fa6a 	bl	80002d8 <__aeabi_dsub>
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	f7f1 fd48 	bl	800089c <__aeabi_ddiv>
 800ee0c:	e7e6      	b.n	800eddc <__ieee754_sqrt+0x30>
 800ee0e:	1509      	asrs	r1, r1, #20
 800ee10:	d076      	beq.n	800ef00 <__ieee754_sqrt+0x154>
 800ee12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ee16:	07ce      	lsls	r6, r1, #31
 800ee18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ee1c:	bf5e      	ittt	pl
 800ee1e:	0fda      	lsrpl	r2, r3, #31
 800ee20:	005b      	lslpl	r3, r3, #1
 800ee22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ee26:	0fda      	lsrs	r2, r3, #31
 800ee28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ee2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ee30:	2000      	movs	r0, #0
 800ee32:	106d      	asrs	r5, r5, #1
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	f04f 0e16 	mov.w	lr, #22
 800ee3a:	4684      	mov	ip, r0
 800ee3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee40:	eb0c 0401 	add.w	r4, ip, r1
 800ee44:	4294      	cmp	r4, r2
 800ee46:	bfde      	ittt	le
 800ee48:	1b12      	suble	r2, r2, r4
 800ee4a:	eb04 0c01 	addle.w	ip, r4, r1
 800ee4e:	1840      	addle	r0, r0, r1
 800ee50:	0052      	lsls	r2, r2, #1
 800ee52:	f1be 0e01 	subs.w	lr, lr, #1
 800ee56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ee5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ee5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee62:	d1ed      	bne.n	800ee40 <__ieee754_sqrt+0x94>
 800ee64:	4671      	mov	r1, lr
 800ee66:	2720      	movs	r7, #32
 800ee68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ee6c:	4562      	cmp	r2, ip
 800ee6e:	eb04 060e 	add.w	r6, r4, lr
 800ee72:	dc02      	bgt.n	800ee7a <__ieee754_sqrt+0xce>
 800ee74:	d113      	bne.n	800ee9e <__ieee754_sqrt+0xf2>
 800ee76:	429e      	cmp	r6, r3
 800ee78:	d811      	bhi.n	800ee9e <__ieee754_sqrt+0xf2>
 800ee7a:	2e00      	cmp	r6, #0
 800ee7c:	eb06 0e04 	add.w	lr, r6, r4
 800ee80:	da43      	bge.n	800ef0a <__ieee754_sqrt+0x15e>
 800ee82:	f1be 0f00 	cmp.w	lr, #0
 800ee86:	db40      	blt.n	800ef0a <__ieee754_sqrt+0x15e>
 800ee88:	f10c 0801 	add.w	r8, ip, #1
 800ee8c:	eba2 020c 	sub.w	r2, r2, ip
 800ee90:	429e      	cmp	r6, r3
 800ee92:	bf88      	it	hi
 800ee94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ee98:	1b9b      	subs	r3, r3, r6
 800ee9a:	4421      	add	r1, r4
 800ee9c:	46c4      	mov	ip, r8
 800ee9e:	0052      	lsls	r2, r2, #1
 800eea0:	3f01      	subs	r7, #1
 800eea2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eea6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eeaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eeae:	d1dd      	bne.n	800ee6c <__ieee754_sqrt+0xc0>
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	d006      	beq.n	800eec2 <__ieee754_sqrt+0x116>
 800eeb4:	1c4c      	adds	r4, r1, #1
 800eeb6:	bf13      	iteet	ne
 800eeb8:	3101      	addne	r1, #1
 800eeba:	3001      	addeq	r0, #1
 800eebc:	4639      	moveq	r1, r7
 800eebe:	f021 0101 	bicne.w	r1, r1, #1
 800eec2:	1043      	asrs	r3, r0, #1
 800eec4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800eec8:	0849      	lsrs	r1, r1, #1
 800eeca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800eece:	07c2      	lsls	r2, r0, #31
 800eed0:	bf48      	it	mi
 800eed2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800eed6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800eeda:	460c      	mov	r4, r1
 800eedc:	463d      	mov	r5, r7
 800eede:	e77f      	b.n	800ede0 <__ieee754_sqrt+0x34>
 800eee0:	0ada      	lsrs	r2, r3, #11
 800eee2:	3815      	subs	r0, #21
 800eee4:	055b      	lsls	r3, r3, #21
 800eee6:	2a00      	cmp	r2, #0
 800eee8:	d0fa      	beq.n	800eee0 <__ieee754_sqrt+0x134>
 800eeea:	02d7      	lsls	r7, r2, #11
 800eeec:	d50a      	bpl.n	800ef04 <__ieee754_sqrt+0x158>
 800eeee:	f1c1 0420 	rsb	r4, r1, #32
 800eef2:	fa23 f404 	lsr.w	r4, r3, r4
 800eef6:	1e4d      	subs	r5, r1, #1
 800eef8:	408b      	lsls	r3, r1
 800eefa:	4322      	orrs	r2, r4
 800eefc:	1b41      	subs	r1, r0, r5
 800eefe:	e788      	b.n	800ee12 <__ieee754_sqrt+0x66>
 800ef00:	4608      	mov	r0, r1
 800ef02:	e7f0      	b.n	800eee6 <__ieee754_sqrt+0x13a>
 800ef04:	0052      	lsls	r2, r2, #1
 800ef06:	3101      	adds	r1, #1
 800ef08:	e7ef      	b.n	800eeea <__ieee754_sqrt+0x13e>
 800ef0a:	46e0      	mov	r8, ip
 800ef0c:	e7be      	b.n	800ee8c <__ieee754_sqrt+0xe0>
 800ef0e:	bf00      	nop
 800ef10:	7ff00000 	.word	0x7ff00000
 800ef14:	00000000 	.word	0x00000000

0800ef18 <__kernel_cos>:
 800ef18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1c:	ec57 6b10 	vmov	r6, r7, d0
 800ef20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ef24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ef28:	ed8d 1b00 	vstr	d1, [sp]
 800ef2c:	da07      	bge.n	800ef3e <__kernel_cos+0x26>
 800ef2e:	ee10 0a10 	vmov	r0, s0
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 fe38 	bl	8000ba8 <__aeabi_d2iz>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	f000 8088 	beq.w	800f04e <__kernel_cos+0x136>
 800ef3e:	4632      	mov	r2, r6
 800ef40:	463b      	mov	r3, r7
 800ef42:	4630      	mov	r0, r6
 800ef44:	4639      	mov	r1, r7
 800ef46:	f7f1 fb7f 	bl	8000648 <__aeabi_dmul>
 800ef4a:	4b51      	ldr	r3, [pc, #324]	; (800f090 <__kernel_cos+0x178>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4604      	mov	r4, r0
 800ef50:	460d      	mov	r5, r1
 800ef52:	f7f1 fb79 	bl	8000648 <__aeabi_dmul>
 800ef56:	a340      	add	r3, pc, #256	; (adr r3, 800f058 <__kernel_cos+0x140>)
 800ef58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5c:	4682      	mov	sl, r0
 800ef5e:	468b      	mov	fp, r1
 800ef60:	4620      	mov	r0, r4
 800ef62:	4629      	mov	r1, r5
 800ef64:	f7f1 fb70 	bl	8000648 <__aeabi_dmul>
 800ef68:	a33d      	add	r3, pc, #244	; (adr r3, 800f060 <__kernel_cos+0x148>)
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	f7f1 f9b5 	bl	80002dc <__adddf3>
 800ef72:	4622      	mov	r2, r4
 800ef74:	462b      	mov	r3, r5
 800ef76:	f7f1 fb67 	bl	8000648 <__aeabi_dmul>
 800ef7a:	a33b      	add	r3, pc, #236	; (adr r3, 800f068 <__kernel_cos+0x150>)
 800ef7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef80:	f7f1 f9aa 	bl	80002d8 <__aeabi_dsub>
 800ef84:	4622      	mov	r2, r4
 800ef86:	462b      	mov	r3, r5
 800ef88:	f7f1 fb5e 	bl	8000648 <__aeabi_dmul>
 800ef8c:	a338      	add	r3, pc, #224	; (adr r3, 800f070 <__kernel_cos+0x158>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f7f1 f9a3 	bl	80002dc <__adddf3>
 800ef96:	4622      	mov	r2, r4
 800ef98:	462b      	mov	r3, r5
 800ef9a:	f7f1 fb55 	bl	8000648 <__aeabi_dmul>
 800ef9e:	a336      	add	r3, pc, #216	; (adr r3, 800f078 <__kernel_cos+0x160>)
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	f7f1 f998 	bl	80002d8 <__aeabi_dsub>
 800efa8:	4622      	mov	r2, r4
 800efaa:	462b      	mov	r3, r5
 800efac:	f7f1 fb4c 	bl	8000648 <__aeabi_dmul>
 800efb0:	a333      	add	r3, pc, #204	; (adr r3, 800f080 <__kernel_cos+0x168>)
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	f7f1 f991 	bl	80002dc <__adddf3>
 800efba:	4622      	mov	r2, r4
 800efbc:	462b      	mov	r3, r5
 800efbe:	f7f1 fb43 	bl	8000648 <__aeabi_dmul>
 800efc2:	4622      	mov	r2, r4
 800efc4:	462b      	mov	r3, r5
 800efc6:	f7f1 fb3f 	bl	8000648 <__aeabi_dmul>
 800efca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efce:	4604      	mov	r4, r0
 800efd0:	460d      	mov	r5, r1
 800efd2:	4630      	mov	r0, r6
 800efd4:	4639      	mov	r1, r7
 800efd6:	f7f1 fb37 	bl	8000648 <__aeabi_dmul>
 800efda:	460b      	mov	r3, r1
 800efdc:	4602      	mov	r2, r0
 800efde:	4629      	mov	r1, r5
 800efe0:	4620      	mov	r0, r4
 800efe2:	f7f1 f979 	bl	80002d8 <__aeabi_dsub>
 800efe6:	4b2b      	ldr	r3, [pc, #172]	; (800f094 <__kernel_cos+0x17c>)
 800efe8:	4598      	cmp	r8, r3
 800efea:	4606      	mov	r6, r0
 800efec:	460f      	mov	r7, r1
 800efee:	dc10      	bgt.n	800f012 <__kernel_cos+0xfa>
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	4650      	mov	r0, sl
 800eff6:	4659      	mov	r1, fp
 800eff8:	f7f1 f96e 	bl	80002d8 <__aeabi_dsub>
 800effc:	460b      	mov	r3, r1
 800effe:	4926      	ldr	r1, [pc, #152]	; (800f098 <__kernel_cos+0x180>)
 800f000:	4602      	mov	r2, r0
 800f002:	2000      	movs	r0, #0
 800f004:	f7f1 f968 	bl	80002d8 <__aeabi_dsub>
 800f008:	ec41 0b10 	vmov	d0, r0, r1
 800f00c:	b003      	add	sp, #12
 800f00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f012:	4b22      	ldr	r3, [pc, #136]	; (800f09c <__kernel_cos+0x184>)
 800f014:	4920      	ldr	r1, [pc, #128]	; (800f098 <__kernel_cos+0x180>)
 800f016:	4598      	cmp	r8, r3
 800f018:	bfcc      	ite	gt
 800f01a:	4d21      	ldrgt	r5, [pc, #132]	; (800f0a0 <__kernel_cos+0x188>)
 800f01c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f020:	2400      	movs	r4, #0
 800f022:	4622      	mov	r2, r4
 800f024:	462b      	mov	r3, r5
 800f026:	2000      	movs	r0, #0
 800f028:	f7f1 f956 	bl	80002d8 <__aeabi_dsub>
 800f02c:	4622      	mov	r2, r4
 800f02e:	4680      	mov	r8, r0
 800f030:	4689      	mov	r9, r1
 800f032:	462b      	mov	r3, r5
 800f034:	4650      	mov	r0, sl
 800f036:	4659      	mov	r1, fp
 800f038:	f7f1 f94e 	bl	80002d8 <__aeabi_dsub>
 800f03c:	4632      	mov	r2, r6
 800f03e:	463b      	mov	r3, r7
 800f040:	f7f1 f94a 	bl	80002d8 <__aeabi_dsub>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	4640      	mov	r0, r8
 800f04a:	4649      	mov	r1, r9
 800f04c:	e7da      	b.n	800f004 <__kernel_cos+0xec>
 800f04e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f088 <__kernel_cos+0x170>
 800f052:	e7db      	b.n	800f00c <__kernel_cos+0xf4>
 800f054:	f3af 8000 	nop.w
 800f058:	be8838d4 	.word	0xbe8838d4
 800f05c:	bda8fae9 	.word	0xbda8fae9
 800f060:	bdb4b1c4 	.word	0xbdb4b1c4
 800f064:	3e21ee9e 	.word	0x3e21ee9e
 800f068:	809c52ad 	.word	0x809c52ad
 800f06c:	3e927e4f 	.word	0x3e927e4f
 800f070:	19cb1590 	.word	0x19cb1590
 800f074:	3efa01a0 	.word	0x3efa01a0
 800f078:	16c15177 	.word	0x16c15177
 800f07c:	3f56c16c 	.word	0x3f56c16c
 800f080:	5555554c 	.word	0x5555554c
 800f084:	3fa55555 	.word	0x3fa55555
 800f088:	00000000 	.word	0x00000000
 800f08c:	3ff00000 	.word	0x3ff00000
 800f090:	3fe00000 	.word	0x3fe00000
 800f094:	3fd33332 	.word	0x3fd33332
 800f098:	3ff00000 	.word	0x3ff00000
 800f09c:	3fe90000 	.word	0x3fe90000
 800f0a0:	3fd20000 	.word	0x3fd20000
 800f0a4:	00000000 	.word	0x00000000

0800f0a8 <__kernel_rem_pio2>:
 800f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ac:	ed2d 8b02 	vpush	{d8}
 800f0b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f0b4:	f112 0f14 	cmn.w	r2, #20
 800f0b8:	9308      	str	r3, [sp, #32]
 800f0ba:	9101      	str	r1, [sp, #4]
 800f0bc:	4bc6      	ldr	r3, [pc, #792]	; (800f3d8 <__kernel_rem_pio2+0x330>)
 800f0be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f0c0:	9009      	str	r0, [sp, #36]	; 0x24
 800f0c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0c6:	9304      	str	r3, [sp, #16]
 800f0c8:	9b08      	ldr	r3, [sp, #32]
 800f0ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0ce:	bfa8      	it	ge
 800f0d0:	1ed4      	subge	r4, r2, #3
 800f0d2:	9306      	str	r3, [sp, #24]
 800f0d4:	bfb2      	itee	lt
 800f0d6:	2400      	movlt	r4, #0
 800f0d8:	2318      	movge	r3, #24
 800f0da:	fb94 f4f3 	sdivge	r4, r4, r3
 800f0de:	f06f 0317 	mvn.w	r3, #23
 800f0e2:	fb04 3303 	mla	r3, r4, r3, r3
 800f0e6:	eb03 0a02 	add.w	sl, r3, r2
 800f0ea:	9b04      	ldr	r3, [sp, #16]
 800f0ec:	9a06      	ldr	r2, [sp, #24]
 800f0ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f3c8 <__kernel_rem_pio2+0x320>
 800f0f2:	eb03 0802 	add.w	r8, r3, r2
 800f0f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f0f8:	1aa7      	subs	r7, r4, r2
 800f0fa:	ae20      	add	r6, sp, #128	; 0x80
 800f0fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f100:	2500      	movs	r5, #0
 800f102:	4545      	cmp	r5, r8
 800f104:	dd18      	ble.n	800f138 <__kernel_rem_pio2+0x90>
 800f106:	9b08      	ldr	r3, [sp, #32]
 800f108:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f10c:	aa20      	add	r2, sp, #128	; 0x80
 800f10e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f3c8 <__kernel_rem_pio2+0x320>
 800f112:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f116:	f1c3 0301 	rsb	r3, r3, #1
 800f11a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f11e:	9307      	str	r3, [sp, #28]
 800f120:	9b07      	ldr	r3, [sp, #28]
 800f122:	9a04      	ldr	r2, [sp, #16]
 800f124:	4443      	add	r3, r8
 800f126:	429a      	cmp	r2, r3
 800f128:	db2f      	blt.n	800f18a <__kernel_rem_pio2+0xe2>
 800f12a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f12e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f132:	462f      	mov	r7, r5
 800f134:	2600      	movs	r6, #0
 800f136:	e01b      	b.n	800f170 <__kernel_rem_pio2+0xc8>
 800f138:	42ef      	cmn	r7, r5
 800f13a:	d407      	bmi.n	800f14c <__kernel_rem_pio2+0xa4>
 800f13c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f140:	f7f1 fa18 	bl	8000574 <__aeabi_i2d>
 800f144:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f148:	3501      	adds	r5, #1
 800f14a:	e7da      	b.n	800f102 <__kernel_rem_pio2+0x5a>
 800f14c:	ec51 0b18 	vmov	r0, r1, d8
 800f150:	e7f8      	b.n	800f144 <__kernel_rem_pio2+0x9c>
 800f152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f156:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f15a:	f7f1 fa75 	bl	8000648 <__aeabi_dmul>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f166:	f7f1 f8b9 	bl	80002dc <__adddf3>
 800f16a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f16e:	3601      	adds	r6, #1
 800f170:	9b06      	ldr	r3, [sp, #24]
 800f172:	429e      	cmp	r6, r3
 800f174:	f1a7 0708 	sub.w	r7, r7, #8
 800f178:	ddeb      	ble.n	800f152 <__kernel_rem_pio2+0xaa>
 800f17a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f17e:	3508      	adds	r5, #8
 800f180:	ecab 7b02 	vstmia	fp!, {d7}
 800f184:	f108 0801 	add.w	r8, r8, #1
 800f188:	e7ca      	b.n	800f120 <__kernel_rem_pio2+0x78>
 800f18a:	9b04      	ldr	r3, [sp, #16]
 800f18c:	aa0c      	add	r2, sp, #48	; 0x30
 800f18e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f192:	930b      	str	r3, [sp, #44]	; 0x2c
 800f194:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f196:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f19a:	9c04      	ldr	r4, [sp, #16]
 800f19c:	930a      	str	r3, [sp, #40]	; 0x28
 800f19e:	ab98      	add	r3, sp, #608	; 0x260
 800f1a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1a4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f1a8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f1ac:	f8cd b008 	str.w	fp, [sp, #8]
 800f1b0:	4625      	mov	r5, r4
 800f1b2:	2d00      	cmp	r5, #0
 800f1b4:	dc78      	bgt.n	800f2a8 <__kernel_rem_pio2+0x200>
 800f1b6:	ec47 6b10 	vmov	d0, r6, r7
 800f1ba:	4650      	mov	r0, sl
 800f1bc:	f000 fc9c 	bl	800faf8 <scalbn>
 800f1c0:	ec57 6b10 	vmov	r6, r7, d0
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f1ca:	ee10 0a10 	vmov	r0, s0
 800f1ce:	4639      	mov	r1, r7
 800f1d0:	f7f1 fa3a 	bl	8000648 <__aeabi_dmul>
 800f1d4:	ec41 0b10 	vmov	d0, r0, r1
 800f1d8:	f000 fb7a 	bl	800f8d0 <floor>
 800f1dc:	4b7f      	ldr	r3, [pc, #508]	; (800f3dc <__kernel_rem_pio2+0x334>)
 800f1de:	ec51 0b10 	vmov	r0, r1, d0
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f7f1 fa30 	bl	8000648 <__aeabi_dmul>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	4639      	mov	r1, r7
 800f1f0:	f7f1 f872 	bl	80002d8 <__aeabi_dsub>
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	f7f1 fcd6 	bl	8000ba8 <__aeabi_d2iz>
 800f1fc:	9007      	str	r0, [sp, #28]
 800f1fe:	f7f1 f9b9 	bl	8000574 <__aeabi_i2d>
 800f202:	4602      	mov	r2, r0
 800f204:	460b      	mov	r3, r1
 800f206:	4630      	mov	r0, r6
 800f208:	4639      	mov	r1, r7
 800f20a:	f7f1 f865 	bl	80002d8 <__aeabi_dsub>
 800f20e:	f1ba 0f00 	cmp.w	sl, #0
 800f212:	4606      	mov	r6, r0
 800f214:	460f      	mov	r7, r1
 800f216:	dd70      	ble.n	800f2fa <__kernel_rem_pio2+0x252>
 800f218:	1e62      	subs	r2, r4, #1
 800f21a:	ab0c      	add	r3, sp, #48	; 0x30
 800f21c:	9d07      	ldr	r5, [sp, #28]
 800f21e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f222:	f1ca 0118 	rsb	r1, sl, #24
 800f226:	fa40 f301 	asr.w	r3, r0, r1
 800f22a:	441d      	add	r5, r3
 800f22c:	408b      	lsls	r3, r1
 800f22e:	1ac0      	subs	r0, r0, r3
 800f230:	ab0c      	add	r3, sp, #48	; 0x30
 800f232:	9507      	str	r5, [sp, #28]
 800f234:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f238:	f1ca 0317 	rsb	r3, sl, #23
 800f23c:	fa40 f303 	asr.w	r3, r0, r3
 800f240:	9302      	str	r3, [sp, #8]
 800f242:	9b02      	ldr	r3, [sp, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	dd66      	ble.n	800f316 <__kernel_rem_pio2+0x26e>
 800f248:	9b07      	ldr	r3, [sp, #28]
 800f24a:	2200      	movs	r2, #0
 800f24c:	3301      	adds	r3, #1
 800f24e:	9307      	str	r3, [sp, #28]
 800f250:	4615      	mov	r5, r2
 800f252:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f256:	4294      	cmp	r4, r2
 800f258:	f300 8099 	bgt.w	800f38e <__kernel_rem_pio2+0x2e6>
 800f25c:	f1ba 0f00 	cmp.w	sl, #0
 800f260:	dd07      	ble.n	800f272 <__kernel_rem_pio2+0x1ca>
 800f262:	f1ba 0f01 	cmp.w	sl, #1
 800f266:	f000 80a5 	beq.w	800f3b4 <__kernel_rem_pio2+0x30c>
 800f26a:	f1ba 0f02 	cmp.w	sl, #2
 800f26e:	f000 80c1 	beq.w	800f3f4 <__kernel_rem_pio2+0x34c>
 800f272:	9b02      	ldr	r3, [sp, #8]
 800f274:	2b02      	cmp	r3, #2
 800f276:	d14e      	bne.n	800f316 <__kernel_rem_pio2+0x26e>
 800f278:	4632      	mov	r2, r6
 800f27a:	463b      	mov	r3, r7
 800f27c:	4958      	ldr	r1, [pc, #352]	; (800f3e0 <__kernel_rem_pio2+0x338>)
 800f27e:	2000      	movs	r0, #0
 800f280:	f7f1 f82a 	bl	80002d8 <__aeabi_dsub>
 800f284:	4606      	mov	r6, r0
 800f286:	460f      	mov	r7, r1
 800f288:	2d00      	cmp	r5, #0
 800f28a:	d044      	beq.n	800f316 <__kernel_rem_pio2+0x26e>
 800f28c:	4650      	mov	r0, sl
 800f28e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f3d0 <__kernel_rem_pio2+0x328>
 800f292:	f000 fc31 	bl	800faf8 <scalbn>
 800f296:	4630      	mov	r0, r6
 800f298:	4639      	mov	r1, r7
 800f29a:	ec53 2b10 	vmov	r2, r3, d0
 800f29e:	f7f1 f81b 	bl	80002d8 <__aeabi_dsub>
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	460f      	mov	r7, r1
 800f2a6:	e036      	b.n	800f316 <__kernel_rem_pio2+0x26e>
 800f2a8:	4b4e      	ldr	r3, [pc, #312]	; (800f3e4 <__kernel_rem_pio2+0x33c>)
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	4639      	mov	r1, r7
 800f2b0:	f7f1 f9ca 	bl	8000648 <__aeabi_dmul>
 800f2b4:	f7f1 fc78 	bl	8000ba8 <__aeabi_d2iz>
 800f2b8:	f7f1 f95c 	bl	8000574 <__aeabi_i2d>
 800f2bc:	4b4a      	ldr	r3, [pc, #296]	; (800f3e8 <__kernel_rem_pio2+0x340>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	4680      	mov	r8, r0
 800f2c2:	4689      	mov	r9, r1
 800f2c4:	f7f1 f9c0 	bl	8000648 <__aeabi_dmul>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	f7f1 f802 	bl	80002d8 <__aeabi_dsub>
 800f2d4:	f7f1 fc68 	bl	8000ba8 <__aeabi_d2iz>
 800f2d8:	9b02      	ldr	r3, [sp, #8]
 800f2da:	f843 0b04 	str.w	r0, [r3], #4
 800f2de:	3d01      	subs	r5, #1
 800f2e0:	9302      	str	r3, [sp, #8]
 800f2e2:	ab70      	add	r3, sp, #448	; 0x1c0
 800f2e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	4649      	mov	r1, r9
 800f2f0:	f7f0 fff4 	bl	80002dc <__adddf3>
 800f2f4:	4606      	mov	r6, r0
 800f2f6:	460f      	mov	r7, r1
 800f2f8:	e75b      	b.n	800f1b2 <__kernel_rem_pio2+0x10a>
 800f2fa:	d105      	bne.n	800f308 <__kernel_rem_pio2+0x260>
 800f2fc:	1e63      	subs	r3, r4, #1
 800f2fe:	aa0c      	add	r2, sp, #48	; 0x30
 800f300:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f304:	15c3      	asrs	r3, r0, #23
 800f306:	e79b      	b.n	800f240 <__kernel_rem_pio2+0x198>
 800f308:	4b38      	ldr	r3, [pc, #224]	; (800f3ec <__kernel_rem_pio2+0x344>)
 800f30a:	2200      	movs	r2, #0
 800f30c:	f7f1 fc22 	bl	8000b54 <__aeabi_dcmpge>
 800f310:	2800      	cmp	r0, #0
 800f312:	d139      	bne.n	800f388 <__kernel_rem_pio2+0x2e0>
 800f314:	9002      	str	r0, [sp, #8]
 800f316:	2200      	movs	r2, #0
 800f318:	2300      	movs	r3, #0
 800f31a:	4630      	mov	r0, r6
 800f31c:	4639      	mov	r1, r7
 800f31e:	f7f1 fbfb 	bl	8000b18 <__aeabi_dcmpeq>
 800f322:	2800      	cmp	r0, #0
 800f324:	f000 80b4 	beq.w	800f490 <__kernel_rem_pio2+0x3e8>
 800f328:	f104 3bff 	add.w	fp, r4, #4294967295
 800f32c:	465b      	mov	r3, fp
 800f32e:	2200      	movs	r2, #0
 800f330:	9904      	ldr	r1, [sp, #16]
 800f332:	428b      	cmp	r3, r1
 800f334:	da65      	bge.n	800f402 <__kernel_rem_pio2+0x35a>
 800f336:	2a00      	cmp	r2, #0
 800f338:	d07b      	beq.n	800f432 <__kernel_rem_pio2+0x38a>
 800f33a:	ab0c      	add	r3, sp, #48	; 0x30
 800f33c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f340:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f344:	2b00      	cmp	r3, #0
 800f346:	f000 80a0 	beq.w	800f48a <__kernel_rem_pio2+0x3e2>
 800f34a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f3d0 <__kernel_rem_pio2+0x328>
 800f34e:	4650      	mov	r0, sl
 800f350:	f000 fbd2 	bl	800faf8 <scalbn>
 800f354:	4f23      	ldr	r7, [pc, #140]	; (800f3e4 <__kernel_rem_pio2+0x33c>)
 800f356:	ec55 4b10 	vmov	r4, r5, d0
 800f35a:	46d8      	mov	r8, fp
 800f35c:	2600      	movs	r6, #0
 800f35e:	f1b8 0f00 	cmp.w	r8, #0
 800f362:	f280 80cf 	bge.w	800f504 <__kernel_rem_pio2+0x45c>
 800f366:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f3c8 <__kernel_rem_pio2+0x320>
 800f36a:	465f      	mov	r7, fp
 800f36c:	f04f 0800 	mov.w	r8, #0
 800f370:	2f00      	cmp	r7, #0
 800f372:	f2c0 80fd 	blt.w	800f570 <__kernel_rem_pio2+0x4c8>
 800f376:	ab70      	add	r3, sp, #448	; 0x1c0
 800f378:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f3f0 <__kernel_rem_pio2+0x348>
 800f37c:	ec55 4b18 	vmov	r4, r5, d8
 800f380:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f384:	2600      	movs	r6, #0
 800f386:	e0e5      	b.n	800f554 <__kernel_rem_pio2+0x4ac>
 800f388:	2302      	movs	r3, #2
 800f38a:	9302      	str	r3, [sp, #8]
 800f38c:	e75c      	b.n	800f248 <__kernel_rem_pio2+0x1a0>
 800f38e:	f8db 3000 	ldr.w	r3, [fp]
 800f392:	b955      	cbnz	r5, 800f3aa <__kernel_rem_pio2+0x302>
 800f394:	b123      	cbz	r3, 800f3a0 <__kernel_rem_pio2+0x2f8>
 800f396:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f39a:	f8cb 3000 	str.w	r3, [fp]
 800f39e:	2301      	movs	r3, #1
 800f3a0:	3201      	adds	r2, #1
 800f3a2:	f10b 0b04 	add.w	fp, fp, #4
 800f3a6:	461d      	mov	r5, r3
 800f3a8:	e755      	b.n	800f256 <__kernel_rem_pio2+0x1ae>
 800f3aa:	1acb      	subs	r3, r1, r3
 800f3ac:	f8cb 3000 	str.w	r3, [fp]
 800f3b0:	462b      	mov	r3, r5
 800f3b2:	e7f5      	b.n	800f3a0 <__kernel_rem_pio2+0x2f8>
 800f3b4:	1e62      	subs	r2, r4, #1
 800f3b6:	ab0c      	add	r3, sp, #48	; 0x30
 800f3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f3c0:	a90c      	add	r1, sp, #48	; 0x30
 800f3c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f3c6:	e754      	b.n	800f272 <__kernel_rem_pio2+0x1ca>
	...
 800f3d4:	3ff00000 	.word	0x3ff00000
 800f3d8:	080103e0 	.word	0x080103e0
 800f3dc:	40200000 	.word	0x40200000
 800f3e0:	3ff00000 	.word	0x3ff00000
 800f3e4:	3e700000 	.word	0x3e700000
 800f3e8:	41700000 	.word	0x41700000
 800f3ec:	3fe00000 	.word	0x3fe00000
 800f3f0:	080103a0 	.word	0x080103a0
 800f3f4:	1e62      	subs	r2, r4, #1
 800f3f6:	ab0c      	add	r3, sp, #48	; 0x30
 800f3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f400:	e7de      	b.n	800f3c0 <__kernel_rem_pio2+0x318>
 800f402:	a90c      	add	r1, sp, #48	; 0x30
 800f404:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f408:	3b01      	subs	r3, #1
 800f40a:	430a      	orrs	r2, r1
 800f40c:	e790      	b.n	800f330 <__kernel_rem_pio2+0x288>
 800f40e:	3301      	adds	r3, #1
 800f410:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f414:	2900      	cmp	r1, #0
 800f416:	d0fa      	beq.n	800f40e <__kernel_rem_pio2+0x366>
 800f418:	9a08      	ldr	r2, [sp, #32]
 800f41a:	18e3      	adds	r3, r4, r3
 800f41c:	18a6      	adds	r6, r4, r2
 800f41e:	aa20      	add	r2, sp, #128	; 0x80
 800f420:	1c65      	adds	r5, r4, #1
 800f422:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f426:	9302      	str	r3, [sp, #8]
 800f428:	9b02      	ldr	r3, [sp, #8]
 800f42a:	42ab      	cmp	r3, r5
 800f42c:	da04      	bge.n	800f438 <__kernel_rem_pio2+0x390>
 800f42e:	461c      	mov	r4, r3
 800f430:	e6b5      	b.n	800f19e <__kernel_rem_pio2+0xf6>
 800f432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f434:	2301      	movs	r3, #1
 800f436:	e7eb      	b.n	800f410 <__kernel_rem_pio2+0x368>
 800f438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f43a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f43e:	f7f1 f899 	bl	8000574 <__aeabi_i2d>
 800f442:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f448:	46b3      	mov	fp, r6
 800f44a:	461c      	mov	r4, r3
 800f44c:	2700      	movs	r7, #0
 800f44e:	f04f 0800 	mov.w	r8, #0
 800f452:	f04f 0900 	mov.w	r9, #0
 800f456:	9b06      	ldr	r3, [sp, #24]
 800f458:	429f      	cmp	r7, r3
 800f45a:	dd06      	ble.n	800f46a <__kernel_rem_pio2+0x3c2>
 800f45c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f45e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f462:	e9c3 8900 	strd	r8, r9, [r3]
 800f466:	3501      	adds	r5, #1
 800f468:	e7de      	b.n	800f428 <__kernel_rem_pio2+0x380>
 800f46a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f46e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f472:	f7f1 f8e9 	bl	8000648 <__aeabi_dmul>
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	4640      	mov	r0, r8
 800f47c:	4649      	mov	r1, r9
 800f47e:	f7f0 ff2d 	bl	80002dc <__adddf3>
 800f482:	3701      	adds	r7, #1
 800f484:	4680      	mov	r8, r0
 800f486:	4689      	mov	r9, r1
 800f488:	e7e5      	b.n	800f456 <__kernel_rem_pio2+0x3ae>
 800f48a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f48e:	e754      	b.n	800f33a <__kernel_rem_pio2+0x292>
 800f490:	ec47 6b10 	vmov	d0, r6, r7
 800f494:	f1ca 0000 	rsb	r0, sl, #0
 800f498:	f000 fb2e 	bl	800faf8 <scalbn>
 800f49c:	ec57 6b10 	vmov	r6, r7, d0
 800f4a0:	4b9f      	ldr	r3, [pc, #636]	; (800f720 <__kernel_rem_pio2+0x678>)
 800f4a2:	ee10 0a10 	vmov	r0, s0
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	4639      	mov	r1, r7
 800f4aa:	f7f1 fb53 	bl	8000b54 <__aeabi_dcmpge>
 800f4ae:	b300      	cbz	r0, 800f4f2 <__kernel_rem_pio2+0x44a>
 800f4b0:	4b9c      	ldr	r3, [pc, #624]	; (800f724 <__kernel_rem_pio2+0x67c>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	f7f1 f8c6 	bl	8000648 <__aeabi_dmul>
 800f4bc:	f7f1 fb74 	bl	8000ba8 <__aeabi_d2iz>
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	f7f1 f857 	bl	8000574 <__aeabi_i2d>
 800f4c6:	4b96      	ldr	r3, [pc, #600]	; (800f720 <__kernel_rem_pio2+0x678>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f7f1 f8bd 	bl	8000648 <__aeabi_dmul>
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	4630      	mov	r0, r6
 800f4d6:	f7f0 feff 	bl	80002d8 <__aeabi_dsub>
 800f4da:	f7f1 fb65 	bl	8000ba8 <__aeabi_d2iz>
 800f4de:	f104 0b01 	add.w	fp, r4, #1
 800f4e2:	ab0c      	add	r3, sp, #48	; 0x30
 800f4e4:	f10a 0a18 	add.w	sl, sl, #24
 800f4e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f4ec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f4f0:	e72b      	b.n	800f34a <__kernel_rem_pio2+0x2a2>
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	4639      	mov	r1, r7
 800f4f6:	f7f1 fb57 	bl	8000ba8 <__aeabi_d2iz>
 800f4fa:	ab0c      	add	r3, sp, #48	; 0x30
 800f4fc:	46a3      	mov	fp, r4
 800f4fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f502:	e722      	b.n	800f34a <__kernel_rem_pio2+0x2a2>
 800f504:	ab70      	add	r3, sp, #448	; 0x1c0
 800f506:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f50a:	ab0c      	add	r3, sp, #48	; 0x30
 800f50c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f510:	f7f1 f830 	bl	8000574 <__aeabi_i2d>
 800f514:	4622      	mov	r2, r4
 800f516:	462b      	mov	r3, r5
 800f518:	f7f1 f896 	bl	8000648 <__aeabi_dmul>
 800f51c:	4632      	mov	r2, r6
 800f51e:	e9c9 0100 	strd	r0, r1, [r9]
 800f522:	463b      	mov	r3, r7
 800f524:	4620      	mov	r0, r4
 800f526:	4629      	mov	r1, r5
 800f528:	f7f1 f88e 	bl	8000648 <__aeabi_dmul>
 800f52c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f530:	4604      	mov	r4, r0
 800f532:	460d      	mov	r5, r1
 800f534:	e713      	b.n	800f35e <__kernel_rem_pio2+0x2b6>
 800f536:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f53a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f53e:	f7f1 f883 	bl	8000648 <__aeabi_dmul>
 800f542:	4602      	mov	r2, r0
 800f544:	460b      	mov	r3, r1
 800f546:	4620      	mov	r0, r4
 800f548:	4629      	mov	r1, r5
 800f54a:	f7f0 fec7 	bl	80002dc <__adddf3>
 800f54e:	3601      	adds	r6, #1
 800f550:	4604      	mov	r4, r0
 800f552:	460d      	mov	r5, r1
 800f554:	9b04      	ldr	r3, [sp, #16]
 800f556:	429e      	cmp	r6, r3
 800f558:	dc01      	bgt.n	800f55e <__kernel_rem_pio2+0x4b6>
 800f55a:	45b0      	cmp	r8, r6
 800f55c:	daeb      	bge.n	800f536 <__kernel_rem_pio2+0x48e>
 800f55e:	ab48      	add	r3, sp, #288	; 0x120
 800f560:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f564:	e9c3 4500 	strd	r4, r5, [r3]
 800f568:	3f01      	subs	r7, #1
 800f56a:	f108 0801 	add.w	r8, r8, #1
 800f56e:	e6ff      	b.n	800f370 <__kernel_rem_pio2+0x2c8>
 800f570:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f572:	2b02      	cmp	r3, #2
 800f574:	dc0b      	bgt.n	800f58e <__kernel_rem_pio2+0x4e6>
 800f576:	2b00      	cmp	r3, #0
 800f578:	dc6e      	bgt.n	800f658 <__kernel_rem_pio2+0x5b0>
 800f57a:	d045      	beq.n	800f608 <__kernel_rem_pio2+0x560>
 800f57c:	9b07      	ldr	r3, [sp, #28]
 800f57e:	f003 0007 	and.w	r0, r3, #7
 800f582:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f586:	ecbd 8b02 	vpop	{d8}
 800f58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f590:	2b03      	cmp	r3, #3
 800f592:	d1f3      	bne.n	800f57c <__kernel_rem_pio2+0x4d4>
 800f594:	ab48      	add	r3, sp, #288	; 0x120
 800f596:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f59a:	46d0      	mov	r8, sl
 800f59c:	46d9      	mov	r9, fp
 800f59e:	f1b9 0f00 	cmp.w	r9, #0
 800f5a2:	f1a8 0808 	sub.w	r8, r8, #8
 800f5a6:	dc64      	bgt.n	800f672 <__kernel_rem_pio2+0x5ca>
 800f5a8:	465c      	mov	r4, fp
 800f5aa:	2c01      	cmp	r4, #1
 800f5ac:	f1aa 0a08 	sub.w	sl, sl, #8
 800f5b0:	dc7e      	bgt.n	800f6b0 <__kernel_rem_pio2+0x608>
 800f5b2:	2000      	movs	r0, #0
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	f1bb 0f01 	cmp.w	fp, #1
 800f5ba:	f300 8097 	bgt.w	800f6ec <__kernel_rem_pio2+0x644>
 800f5be:	9b02      	ldr	r3, [sp, #8]
 800f5c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f5c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f040 8099 	bne.w	800f700 <__kernel_rem_pio2+0x658>
 800f5ce:	9b01      	ldr	r3, [sp, #4]
 800f5d0:	e9c3 5600 	strd	r5, r6, [r3]
 800f5d4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f5d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f5dc:	e7ce      	b.n	800f57c <__kernel_rem_pio2+0x4d4>
 800f5de:	ab48      	add	r3, sp, #288	; 0x120
 800f5e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e8:	f7f0 fe78 	bl	80002dc <__adddf3>
 800f5ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f5f0:	f1bb 0f00 	cmp.w	fp, #0
 800f5f4:	daf3      	bge.n	800f5de <__kernel_rem_pio2+0x536>
 800f5f6:	9b02      	ldr	r3, [sp, #8]
 800f5f8:	b113      	cbz	r3, 800f600 <__kernel_rem_pio2+0x558>
 800f5fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5fe:	4619      	mov	r1, r3
 800f600:	9b01      	ldr	r3, [sp, #4]
 800f602:	e9c3 0100 	strd	r0, r1, [r3]
 800f606:	e7b9      	b.n	800f57c <__kernel_rem_pio2+0x4d4>
 800f608:	2000      	movs	r0, #0
 800f60a:	2100      	movs	r1, #0
 800f60c:	e7f0      	b.n	800f5f0 <__kernel_rem_pio2+0x548>
 800f60e:	ab48      	add	r3, sp, #288	; 0x120
 800f610:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f618:	f7f0 fe60 	bl	80002dc <__adddf3>
 800f61c:	3c01      	subs	r4, #1
 800f61e:	2c00      	cmp	r4, #0
 800f620:	daf5      	bge.n	800f60e <__kernel_rem_pio2+0x566>
 800f622:	9b02      	ldr	r3, [sp, #8]
 800f624:	b1e3      	cbz	r3, 800f660 <__kernel_rem_pio2+0x5b8>
 800f626:	4602      	mov	r2, r0
 800f628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f62c:	9c01      	ldr	r4, [sp, #4]
 800f62e:	e9c4 2300 	strd	r2, r3, [r4]
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f63a:	f7f0 fe4d 	bl	80002d8 <__aeabi_dsub>
 800f63e:	ad4a      	add	r5, sp, #296	; 0x128
 800f640:	2401      	movs	r4, #1
 800f642:	45a3      	cmp	fp, r4
 800f644:	da0f      	bge.n	800f666 <__kernel_rem_pio2+0x5be>
 800f646:	9b02      	ldr	r3, [sp, #8]
 800f648:	b113      	cbz	r3, 800f650 <__kernel_rem_pio2+0x5a8>
 800f64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f64e:	4619      	mov	r1, r3
 800f650:	9b01      	ldr	r3, [sp, #4]
 800f652:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f656:	e791      	b.n	800f57c <__kernel_rem_pio2+0x4d4>
 800f658:	465c      	mov	r4, fp
 800f65a:	2000      	movs	r0, #0
 800f65c:	2100      	movs	r1, #0
 800f65e:	e7de      	b.n	800f61e <__kernel_rem_pio2+0x576>
 800f660:	4602      	mov	r2, r0
 800f662:	460b      	mov	r3, r1
 800f664:	e7e2      	b.n	800f62c <__kernel_rem_pio2+0x584>
 800f666:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f66a:	f7f0 fe37 	bl	80002dc <__adddf3>
 800f66e:	3401      	adds	r4, #1
 800f670:	e7e7      	b.n	800f642 <__kernel_rem_pio2+0x59a>
 800f672:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f676:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f67a:	4620      	mov	r0, r4
 800f67c:	4632      	mov	r2, r6
 800f67e:	463b      	mov	r3, r7
 800f680:	4629      	mov	r1, r5
 800f682:	f7f0 fe2b 	bl	80002dc <__adddf3>
 800f686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4620      	mov	r0, r4
 800f690:	4629      	mov	r1, r5
 800f692:	f7f0 fe21 	bl	80002d8 <__aeabi_dsub>
 800f696:	4632      	mov	r2, r6
 800f698:	463b      	mov	r3, r7
 800f69a:	f7f0 fe1f 	bl	80002dc <__adddf3>
 800f69e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f6a2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f6a6:	ed88 7b00 	vstr	d7, [r8]
 800f6aa:	f109 39ff 	add.w	r9, r9, #4294967295
 800f6ae:	e776      	b.n	800f59e <__kernel_rem_pio2+0x4f6>
 800f6b0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6b4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	4632      	mov	r2, r6
 800f6bc:	463b      	mov	r3, r7
 800f6be:	4649      	mov	r1, r9
 800f6c0:	f7f0 fe0c 	bl	80002dc <__adddf3>
 800f6c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	4640      	mov	r0, r8
 800f6ce:	4649      	mov	r1, r9
 800f6d0:	f7f0 fe02 	bl	80002d8 <__aeabi_dsub>
 800f6d4:	4632      	mov	r2, r6
 800f6d6:	463b      	mov	r3, r7
 800f6d8:	f7f0 fe00 	bl	80002dc <__adddf3>
 800f6dc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f6e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f6e4:	ed8a 7b00 	vstr	d7, [sl]
 800f6e8:	3c01      	subs	r4, #1
 800f6ea:	e75e      	b.n	800f5aa <__kernel_rem_pio2+0x502>
 800f6ec:	ab48      	add	r3, sp, #288	; 0x120
 800f6ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 fdf1 	bl	80002dc <__adddf3>
 800f6fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6fe:	e75a      	b.n	800f5b6 <__kernel_rem_pio2+0x50e>
 800f700:	9b01      	ldr	r3, [sp, #4]
 800f702:	9a01      	ldr	r2, [sp, #4]
 800f704:	601d      	str	r5, [r3, #0]
 800f706:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f70a:	605c      	str	r4, [r3, #4]
 800f70c:	609f      	str	r7, [r3, #8]
 800f70e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f712:	60d3      	str	r3, [r2, #12]
 800f714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f718:	6110      	str	r0, [r2, #16]
 800f71a:	6153      	str	r3, [r2, #20]
 800f71c:	e72e      	b.n	800f57c <__kernel_rem_pio2+0x4d4>
 800f71e:	bf00      	nop
 800f720:	41700000 	.word	0x41700000
 800f724:	3e700000 	.word	0x3e700000

0800f728 <__kernel_sin>:
 800f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72c:	ed2d 8b04 	vpush	{d8-d9}
 800f730:	eeb0 8a41 	vmov.f32	s16, s2
 800f734:	eef0 8a61 	vmov.f32	s17, s3
 800f738:	ec55 4b10 	vmov	r4, r5, d0
 800f73c:	b083      	sub	sp, #12
 800f73e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f742:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f746:	9001      	str	r0, [sp, #4]
 800f748:	da06      	bge.n	800f758 <__kernel_sin+0x30>
 800f74a:	ee10 0a10 	vmov	r0, s0
 800f74e:	4629      	mov	r1, r5
 800f750:	f7f1 fa2a 	bl	8000ba8 <__aeabi_d2iz>
 800f754:	2800      	cmp	r0, #0
 800f756:	d051      	beq.n	800f7fc <__kernel_sin+0xd4>
 800f758:	4622      	mov	r2, r4
 800f75a:	462b      	mov	r3, r5
 800f75c:	4620      	mov	r0, r4
 800f75e:	4629      	mov	r1, r5
 800f760:	f7f0 ff72 	bl	8000648 <__aeabi_dmul>
 800f764:	4682      	mov	sl, r0
 800f766:	468b      	mov	fp, r1
 800f768:	4602      	mov	r2, r0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4620      	mov	r0, r4
 800f76e:	4629      	mov	r1, r5
 800f770:	f7f0 ff6a 	bl	8000648 <__aeabi_dmul>
 800f774:	a341      	add	r3, pc, #260	; (adr r3, 800f87c <__kernel_sin+0x154>)
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	4680      	mov	r8, r0
 800f77c:	4689      	mov	r9, r1
 800f77e:	4650      	mov	r0, sl
 800f780:	4659      	mov	r1, fp
 800f782:	f7f0 ff61 	bl	8000648 <__aeabi_dmul>
 800f786:	a33f      	add	r3, pc, #252	; (adr r3, 800f884 <__kernel_sin+0x15c>)
 800f788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78c:	f7f0 fda4 	bl	80002d8 <__aeabi_dsub>
 800f790:	4652      	mov	r2, sl
 800f792:	465b      	mov	r3, fp
 800f794:	f7f0 ff58 	bl	8000648 <__aeabi_dmul>
 800f798:	a33c      	add	r3, pc, #240	; (adr r3, 800f88c <__kernel_sin+0x164>)
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	f7f0 fd9d 	bl	80002dc <__adddf3>
 800f7a2:	4652      	mov	r2, sl
 800f7a4:	465b      	mov	r3, fp
 800f7a6:	f7f0 ff4f 	bl	8000648 <__aeabi_dmul>
 800f7aa:	a33a      	add	r3, pc, #232	; (adr r3, 800f894 <__kernel_sin+0x16c>)
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	f7f0 fd92 	bl	80002d8 <__aeabi_dsub>
 800f7b4:	4652      	mov	r2, sl
 800f7b6:	465b      	mov	r3, fp
 800f7b8:	f7f0 ff46 	bl	8000648 <__aeabi_dmul>
 800f7bc:	a337      	add	r3, pc, #220	; (adr r3, 800f89c <__kernel_sin+0x174>)
 800f7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c2:	f7f0 fd8b 	bl	80002dc <__adddf3>
 800f7c6:	9b01      	ldr	r3, [sp, #4]
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	460f      	mov	r7, r1
 800f7cc:	b9eb      	cbnz	r3, 800f80a <__kernel_sin+0xe2>
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	4650      	mov	r0, sl
 800f7d4:	4659      	mov	r1, fp
 800f7d6:	f7f0 ff37 	bl	8000648 <__aeabi_dmul>
 800f7da:	a325      	add	r3, pc, #148	; (adr r3, 800f870 <__kernel_sin+0x148>)
 800f7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e0:	f7f0 fd7a 	bl	80002d8 <__aeabi_dsub>
 800f7e4:	4642      	mov	r2, r8
 800f7e6:	464b      	mov	r3, r9
 800f7e8:	f7f0 ff2e 	bl	8000648 <__aeabi_dmul>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	f7f0 fd72 	bl	80002dc <__adddf3>
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	460d      	mov	r5, r1
 800f7fc:	ec45 4b10 	vmov	d0, r4, r5
 800f800:	b003      	add	sp, #12
 800f802:	ecbd 8b04 	vpop	{d8-d9}
 800f806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80a:	4b1b      	ldr	r3, [pc, #108]	; (800f878 <__kernel_sin+0x150>)
 800f80c:	ec51 0b18 	vmov	r0, r1, d8
 800f810:	2200      	movs	r2, #0
 800f812:	f7f0 ff19 	bl	8000648 <__aeabi_dmul>
 800f816:	4632      	mov	r2, r6
 800f818:	ec41 0b19 	vmov	d9, r0, r1
 800f81c:	463b      	mov	r3, r7
 800f81e:	4640      	mov	r0, r8
 800f820:	4649      	mov	r1, r9
 800f822:	f7f0 ff11 	bl	8000648 <__aeabi_dmul>
 800f826:	4602      	mov	r2, r0
 800f828:	460b      	mov	r3, r1
 800f82a:	ec51 0b19 	vmov	r0, r1, d9
 800f82e:	f7f0 fd53 	bl	80002d8 <__aeabi_dsub>
 800f832:	4652      	mov	r2, sl
 800f834:	465b      	mov	r3, fp
 800f836:	f7f0 ff07 	bl	8000648 <__aeabi_dmul>
 800f83a:	ec53 2b18 	vmov	r2, r3, d8
 800f83e:	f7f0 fd4b 	bl	80002d8 <__aeabi_dsub>
 800f842:	a30b      	add	r3, pc, #44	; (adr r3, 800f870 <__kernel_sin+0x148>)
 800f844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f848:	4606      	mov	r6, r0
 800f84a:	460f      	mov	r7, r1
 800f84c:	4640      	mov	r0, r8
 800f84e:	4649      	mov	r1, r9
 800f850:	f7f0 fefa 	bl	8000648 <__aeabi_dmul>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	4630      	mov	r0, r6
 800f85a:	4639      	mov	r1, r7
 800f85c:	f7f0 fd3e 	bl	80002dc <__adddf3>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	4620      	mov	r0, r4
 800f866:	4629      	mov	r1, r5
 800f868:	f7f0 fd36 	bl	80002d8 <__aeabi_dsub>
 800f86c:	e7c4      	b.n	800f7f8 <__kernel_sin+0xd0>
 800f86e:	bf00      	nop
 800f870:	55555549 	.word	0x55555549
 800f874:	3fc55555 	.word	0x3fc55555
 800f878:	3fe00000 	.word	0x3fe00000
 800f87c:	5acfd57c 	.word	0x5acfd57c
 800f880:	3de5d93a 	.word	0x3de5d93a
 800f884:	8a2b9ceb 	.word	0x8a2b9ceb
 800f888:	3e5ae5e6 	.word	0x3e5ae5e6
 800f88c:	57b1fe7d 	.word	0x57b1fe7d
 800f890:	3ec71de3 	.word	0x3ec71de3
 800f894:	19c161d5 	.word	0x19c161d5
 800f898:	3f2a01a0 	.word	0x3f2a01a0
 800f89c:	1110f8a6 	.word	0x1110f8a6
 800f8a0:	3f811111 	.word	0x3f811111

0800f8a4 <fabs>:
 800f8a4:	ec51 0b10 	vmov	r0, r1, d0
 800f8a8:	ee10 2a10 	vmov	r2, s0
 800f8ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f8b0:	ec43 2b10 	vmov	d0, r2, r3
 800f8b4:	4770      	bx	lr

0800f8b6 <finite>:
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	ed8d 0b00 	vstr	d0, [sp]
 800f8bc:	9801      	ldr	r0, [sp, #4]
 800f8be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f8c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f8c6:	0fc0      	lsrs	r0, r0, #31
 800f8c8:	b002      	add	sp, #8
 800f8ca:	4770      	bx	lr
 800f8cc:	0000      	movs	r0, r0
	...

0800f8d0 <floor>:
 800f8d0:	ec51 0b10 	vmov	r0, r1, d0
 800f8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f8dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f8e0:	2e13      	cmp	r6, #19
 800f8e2:	ee10 5a10 	vmov	r5, s0
 800f8e6:	ee10 8a10 	vmov	r8, s0
 800f8ea:	460c      	mov	r4, r1
 800f8ec:	dc32      	bgt.n	800f954 <floor+0x84>
 800f8ee:	2e00      	cmp	r6, #0
 800f8f0:	da14      	bge.n	800f91c <floor+0x4c>
 800f8f2:	a333      	add	r3, pc, #204	; (adr r3, 800f9c0 <floor+0xf0>)
 800f8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f8:	f7f0 fcf0 	bl	80002dc <__adddf3>
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	2300      	movs	r3, #0
 800f900:	f7f1 f932 	bl	8000b68 <__aeabi_dcmpgt>
 800f904:	b138      	cbz	r0, 800f916 <floor+0x46>
 800f906:	2c00      	cmp	r4, #0
 800f908:	da57      	bge.n	800f9ba <floor+0xea>
 800f90a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f90e:	431d      	orrs	r5, r3
 800f910:	d001      	beq.n	800f916 <floor+0x46>
 800f912:	4c2d      	ldr	r4, [pc, #180]	; (800f9c8 <floor+0xf8>)
 800f914:	2500      	movs	r5, #0
 800f916:	4621      	mov	r1, r4
 800f918:	4628      	mov	r0, r5
 800f91a:	e025      	b.n	800f968 <floor+0x98>
 800f91c:	4f2b      	ldr	r7, [pc, #172]	; (800f9cc <floor+0xfc>)
 800f91e:	4137      	asrs	r7, r6
 800f920:	ea01 0307 	and.w	r3, r1, r7
 800f924:	4303      	orrs	r3, r0
 800f926:	d01f      	beq.n	800f968 <floor+0x98>
 800f928:	a325      	add	r3, pc, #148	; (adr r3, 800f9c0 <floor+0xf0>)
 800f92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92e:	f7f0 fcd5 	bl	80002dc <__adddf3>
 800f932:	2200      	movs	r2, #0
 800f934:	2300      	movs	r3, #0
 800f936:	f7f1 f917 	bl	8000b68 <__aeabi_dcmpgt>
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d0eb      	beq.n	800f916 <floor+0x46>
 800f93e:	2c00      	cmp	r4, #0
 800f940:	bfbe      	ittt	lt
 800f942:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f946:	fa43 f606 	asrlt.w	r6, r3, r6
 800f94a:	19a4      	addlt	r4, r4, r6
 800f94c:	ea24 0407 	bic.w	r4, r4, r7
 800f950:	2500      	movs	r5, #0
 800f952:	e7e0      	b.n	800f916 <floor+0x46>
 800f954:	2e33      	cmp	r6, #51	; 0x33
 800f956:	dd0b      	ble.n	800f970 <floor+0xa0>
 800f958:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f95c:	d104      	bne.n	800f968 <floor+0x98>
 800f95e:	ee10 2a10 	vmov	r2, s0
 800f962:	460b      	mov	r3, r1
 800f964:	f7f0 fcba 	bl	80002dc <__adddf3>
 800f968:	ec41 0b10 	vmov	d0, r0, r1
 800f96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f970:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f974:	f04f 33ff 	mov.w	r3, #4294967295
 800f978:	fa23 f707 	lsr.w	r7, r3, r7
 800f97c:	4207      	tst	r7, r0
 800f97e:	d0f3      	beq.n	800f968 <floor+0x98>
 800f980:	a30f      	add	r3, pc, #60	; (adr r3, 800f9c0 <floor+0xf0>)
 800f982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f986:	f7f0 fca9 	bl	80002dc <__adddf3>
 800f98a:	2200      	movs	r2, #0
 800f98c:	2300      	movs	r3, #0
 800f98e:	f7f1 f8eb 	bl	8000b68 <__aeabi_dcmpgt>
 800f992:	2800      	cmp	r0, #0
 800f994:	d0bf      	beq.n	800f916 <floor+0x46>
 800f996:	2c00      	cmp	r4, #0
 800f998:	da02      	bge.n	800f9a0 <floor+0xd0>
 800f99a:	2e14      	cmp	r6, #20
 800f99c:	d103      	bne.n	800f9a6 <floor+0xd6>
 800f99e:	3401      	adds	r4, #1
 800f9a0:	ea25 0507 	bic.w	r5, r5, r7
 800f9a4:	e7b7      	b.n	800f916 <floor+0x46>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f9ac:	fa03 f606 	lsl.w	r6, r3, r6
 800f9b0:	4435      	add	r5, r6
 800f9b2:	4545      	cmp	r5, r8
 800f9b4:	bf38      	it	cc
 800f9b6:	18e4      	addcc	r4, r4, r3
 800f9b8:	e7f2      	b.n	800f9a0 <floor+0xd0>
 800f9ba:	2500      	movs	r5, #0
 800f9bc:	462c      	mov	r4, r5
 800f9be:	e7aa      	b.n	800f916 <floor+0x46>
 800f9c0:	8800759c 	.word	0x8800759c
 800f9c4:	7e37e43c 	.word	0x7e37e43c
 800f9c8:	bff00000 	.word	0xbff00000
 800f9cc:	000fffff 	.word	0x000fffff

0800f9d0 <nan>:
 800f9d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f9d8 <nan+0x8>
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	00000000 	.word	0x00000000
 800f9dc:	7ff80000 	.word	0x7ff80000

0800f9e0 <rint>:
 800f9e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9e2:	ec51 0b10 	vmov	r0, r1, d0
 800f9e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f9ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f9ee:	2e13      	cmp	r6, #19
 800f9f0:	ee10 4a10 	vmov	r4, s0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f9fa:	dc58      	bgt.n	800faae <rint+0xce>
 800f9fc:	2e00      	cmp	r6, #0
 800f9fe:	da2b      	bge.n	800fa58 <rint+0x78>
 800fa00:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fa04:	4302      	orrs	r2, r0
 800fa06:	d023      	beq.n	800fa50 <rint+0x70>
 800fa08:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fa0c:	4302      	orrs	r2, r0
 800fa0e:	4254      	negs	r4, r2
 800fa10:	4314      	orrs	r4, r2
 800fa12:	0c4b      	lsrs	r3, r1, #17
 800fa14:	0b24      	lsrs	r4, r4, #12
 800fa16:	045b      	lsls	r3, r3, #17
 800fa18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fa1c:	ea44 0103 	orr.w	r1, r4, r3
 800fa20:	4b32      	ldr	r3, [pc, #200]	; (800faec <rint+0x10c>)
 800fa22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fa26:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	4630      	mov	r0, r6
 800fa30:	4639      	mov	r1, r7
 800fa32:	f7f0 fc53 	bl	80002dc <__adddf3>
 800fa36:	e9cd 0100 	strd	r0, r1, [sp]
 800fa3a:	463b      	mov	r3, r7
 800fa3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa40:	4632      	mov	r2, r6
 800fa42:	f7f0 fc49 	bl	80002d8 <__aeabi_dsub>
 800fa46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa4a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fa4e:	4639      	mov	r1, r7
 800fa50:	ec41 0b10 	vmov	d0, r0, r1
 800fa54:	b003      	add	sp, #12
 800fa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa58:	4a25      	ldr	r2, [pc, #148]	; (800faf0 <rint+0x110>)
 800fa5a:	4132      	asrs	r2, r6
 800fa5c:	ea01 0702 	and.w	r7, r1, r2
 800fa60:	4307      	orrs	r7, r0
 800fa62:	d0f5      	beq.n	800fa50 <rint+0x70>
 800fa64:	0851      	lsrs	r1, r2, #1
 800fa66:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800fa6a:	4314      	orrs	r4, r2
 800fa6c:	d00c      	beq.n	800fa88 <rint+0xa8>
 800fa6e:	ea23 0201 	bic.w	r2, r3, r1
 800fa72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fa76:	2e13      	cmp	r6, #19
 800fa78:	fa43 f606 	asr.w	r6, r3, r6
 800fa7c:	bf0c      	ite	eq
 800fa7e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fa82:	2400      	movne	r4, #0
 800fa84:	ea42 0306 	orr.w	r3, r2, r6
 800fa88:	4918      	ldr	r1, [pc, #96]	; (800faec <rint+0x10c>)
 800fa8a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fa8e:	4622      	mov	r2, r4
 800fa90:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fa94:	4620      	mov	r0, r4
 800fa96:	4629      	mov	r1, r5
 800fa98:	f7f0 fc20 	bl	80002dc <__adddf3>
 800fa9c:	e9cd 0100 	strd	r0, r1, [sp]
 800faa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faa4:	4622      	mov	r2, r4
 800faa6:	462b      	mov	r3, r5
 800faa8:	f7f0 fc16 	bl	80002d8 <__aeabi_dsub>
 800faac:	e7d0      	b.n	800fa50 <rint+0x70>
 800faae:	2e33      	cmp	r6, #51	; 0x33
 800fab0:	dd07      	ble.n	800fac2 <rint+0xe2>
 800fab2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fab6:	d1cb      	bne.n	800fa50 <rint+0x70>
 800fab8:	ee10 2a10 	vmov	r2, s0
 800fabc:	f7f0 fc0e 	bl	80002dc <__adddf3>
 800fac0:	e7c6      	b.n	800fa50 <rint+0x70>
 800fac2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fac6:	f04f 36ff 	mov.w	r6, #4294967295
 800faca:	40d6      	lsrs	r6, r2
 800facc:	4230      	tst	r0, r6
 800face:	d0bf      	beq.n	800fa50 <rint+0x70>
 800fad0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800fad4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800fad8:	bf1f      	itttt	ne
 800fada:	ea24 0101 	bicne.w	r1, r4, r1
 800fade:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fae2:	fa44 f202 	asrne.w	r2, r4, r2
 800fae6:	ea41 0402 	orrne.w	r4, r1, r2
 800faea:	e7cd      	b.n	800fa88 <rint+0xa8>
 800faec:	080103f0 	.word	0x080103f0
 800faf0:	000fffff 	.word	0x000fffff
 800faf4:	00000000 	.word	0x00000000

0800faf8 <scalbn>:
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	ec55 4b10 	vmov	r4, r5, d0
 800fafe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fb02:	4606      	mov	r6, r0
 800fb04:	462b      	mov	r3, r5
 800fb06:	b99a      	cbnz	r2, 800fb30 <scalbn+0x38>
 800fb08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fb0c:	4323      	orrs	r3, r4
 800fb0e:	d036      	beq.n	800fb7e <scalbn+0x86>
 800fb10:	4b39      	ldr	r3, [pc, #228]	; (800fbf8 <scalbn+0x100>)
 800fb12:	4629      	mov	r1, r5
 800fb14:	ee10 0a10 	vmov	r0, s0
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f7f0 fd95 	bl	8000648 <__aeabi_dmul>
 800fb1e:	4b37      	ldr	r3, [pc, #220]	; (800fbfc <scalbn+0x104>)
 800fb20:	429e      	cmp	r6, r3
 800fb22:	4604      	mov	r4, r0
 800fb24:	460d      	mov	r5, r1
 800fb26:	da10      	bge.n	800fb4a <scalbn+0x52>
 800fb28:	a32b      	add	r3, pc, #172	; (adr r3, 800fbd8 <scalbn+0xe0>)
 800fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2e:	e03a      	b.n	800fba6 <scalbn+0xae>
 800fb30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fb34:	428a      	cmp	r2, r1
 800fb36:	d10c      	bne.n	800fb52 <scalbn+0x5a>
 800fb38:	ee10 2a10 	vmov	r2, s0
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	f7f0 fbcc 	bl	80002dc <__adddf3>
 800fb44:	4604      	mov	r4, r0
 800fb46:	460d      	mov	r5, r1
 800fb48:	e019      	b.n	800fb7e <scalbn+0x86>
 800fb4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fb4e:	460b      	mov	r3, r1
 800fb50:	3a36      	subs	r2, #54	; 0x36
 800fb52:	4432      	add	r2, r6
 800fb54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fb58:	428a      	cmp	r2, r1
 800fb5a:	dd08      	ble.n	800fb6e <scalbn+0x76>
 800fb5c:	2d00      	cmp	r5, #0
 800fb5e:	a120      	add	r1, pc, #128	; (adr r1, 800fbe0 <scalbn+0xe8>)
 800fb60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb64:	da1c      	bge.n	800fba0 <scalbn+0xa8>
 800fb66:	a120      	add	r1, pc, #128	; (adr r1, 800fbe8 <scalbn+0xf0>)
 800fb68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb6c:	e018      	b.n	800fba0 <scalbn+0xa8>
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	dd08      	ble.n	800fb84 <scalbn+0x8c>
 800fb72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb7e:	ec45 4b10 	vmov	d0, r4, r5
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fb88:	da19      	bge.n	800fbbe <scalbn+0xc6>
 800fb8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fb8e:	429e      	cmp	r6, r3
 800fb90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fb94:	dd0a      	ble.n	800fbac <scalbn+0xb4>
 800fb96:	a112      	add	r1, pc, #72	; (adr r1, 800fbe0 <scalbn+0xe8>)
 800fb98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d1e2      	bne.n	800fb66 <scalbn+0x6e>
 800fba0:	a30f      	add	r3, pc, #60	; (adr r3, 800fbe0 <scalbn+0xe8>)
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	f7f0 fd4f 	bl	8000648 <__aeabi_dmul>
 800fbaa:	e7cb      	b.n	800fb44 <scalbn+0x4c>
 800fbac:	a10a      	add	r1, pc, #40	; (adr r1, 800fbd8 <scalbn+0xe0>)
 800fbae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d0b8      	beq.n	800fb28 <scalbn+0x30>
 800fbb6:	a10e      	add	r1, pc, #56	; (adr r1, 800fbf0 <scalbn+0xf8>)
 800fbb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbbc:	e7b4      	b.n	800fb28 <scalbn+0x30>
 800fbbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbc2:	3236      	adds	r2, #54	; 0x36
 800fbc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fbc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fbcc:	4620      	mov	r0, r4
 800fbce:	4b0c      	ldr	r3, [pc, #48]	; (800fc00 <scalbn+0x108>)
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	e7e8      	b.n	800fba6 <scalbn+0xae>
 800fbd4:	f3af 8000 	nop.w
 800fbd8:	c2f8f359 	.word	0xc2f8f359
 800fbdc:	01a56e1f 	.word	0x01a56e1f
 800fbe0:	8800759c 	.word	0x8800759c
 800fbe4:	7e37e43c 	.word	0x7e37e43c
 800fbe8:	8800759c 	.word	0x8800759c
 800fbec:	fe37e43c 	.word	0xfe37e43c
 800fbf0:	c2f8f359 	.word	0xc2f8f359
 800fbf4:	81a56e1f 	.word	0x81a56e1f
 800fbf8:	43500000 	.word	0x43500000
 800fbfc:	ffff3cb0 	.word	0xffff3cb0
 800fc00:	3c900000 	.word	0x3c900000

0800fc04 <_init>:
 800fc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc06:	bf00      	nop
 800fc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc0a:	bc08      	pop	{r3}
 800fc0c:	469e      	mov	lr, r3
 800fc0e:	4770      	bx	lr

0800fc10 <_fini>:
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	bf00      	nop
 800fc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc16:	bc08      	pop	{r3}
 800fc18:	469e      	mov	lr, r3
 800fc1a:	4770      	bx	lr
