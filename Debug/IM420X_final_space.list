
IM420X_final_space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800b070  0800b070  0001b070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b57c  0800b57c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b57c  0800b57c  0001b57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b584  0800b584  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b584  0800b584  0001b584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b588  0800b588  0001b588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd0  200001e0  0800b76c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  0800b76c  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a68a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f66  00000000  00000000  0004a89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0004f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b10  00000000  00000000  00051508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0bc  00000000  00000000  00053018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a74  00000000  00000000  0007e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001089fb  00000000  00000000  0009fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a8543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008954  00000000  00000000  001a8598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b058 	.word	0x0800b058

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800b058 	.word	0x0800b058

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of magneticFieldIntensitySampleQueue */
  magneticFieldIntensitySampleQueueHandle = osMessageQueueNew (128, sizeof(MagneticField), &magneticFieldIntensitySampleQueue_attributes);
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <MX_FREERTOS_Init+0x48>)
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	2080      	movs	r0, #128	; 0x80
 8000efa:	f004 fdac 	bl	8005a56 <osMessageQueueNew>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <MX_FREERTOS_Init+0x4c>)
 8000f02:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of identifyMagneti */
  identifyMagnetiHandle = osThreadNew(startidentifyMagneticFieldTask, NULL, &identifyMagneti_attributes);
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <MX_FREERTOS_Init+0x50>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	480e      	ldr	r0, [pc, #56]	; (8000f44 <MX_FREERTOS_Init+0x54>)
 8000f0a:	f004 fcf7 	bl	80058fc <osThreadNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <MX_FREERTOS_Init+0x58>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* creation of estimatePositio */
  estimatePositioHandle = osThreadNew(startEstimatePosition, NULL, &estimatePositio_attributes);
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <MX_FREERTOS_Init+0x5c>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_FREERTOS_Init+0x60>)
 8000f1a:	f004 fcef 	bl	80058fc <osThreadNew>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <MX_FREERTOS_Init+0x64>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(startSendData, NULL, &sendData_attributes);
 8000f24:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <MX_FREERTOS_Init+0x68>)
 8000f26:	2100      	movs	r1, #0
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <MX_FREERTOS_Init+0x6c>)
 8000f2a:	f004 fce7 	bl	80058fc <osThreadNew>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <MX_FREERTOS_Init+0x70>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	0800b144 	.word	0x0800b144
 8000f3c:	20001be0 	.word	0x20001be0
 8000f40:	0800b0d8 	.word	0x0800b0d8
 8000f44:	08000f65 	.word	0x08000f65
 8000f48:	20001bdc 	.word	0x20001bdc
 8000f4c:	0800b0fc 	.word	0x0800b0fc
 8000f50:	08000f75 	.word	0x08000f75
 8000f54:	20001bd8 	.word	0x20001bd8
 8000f58:	0800b120 	.word	0x0800b120
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	20001be4 	.word	0x20001be4

08000f64 <startidentifyMagneticFieldTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startidentifyMagneticFieldTask */
void startidentifyMagneticFieldTask(void *argument)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startidentifyMagneticFieldTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f004 fd57 	bl	8005a20 <osDelay>
 8000f72:	e7fb      	b.n	8000f6c <startidentifyMagneticFieldTask+0x8>

08000f74 <startEstimatePosition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEstimatePosition */
void startEstimatePosition(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEstimatePosition */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f004 fd4f 	bl	8005a20 <osDelay>
 8000f82:	e7fb      	b.n	8000f7c <startEstimatePosition+0x8>

08000f84 <startSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSendData */
void startSendData(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSendData */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f90:	f004 fd46 	bl	8005a20 <osDelay>
 8000f94:	e7fa      	b.n	8000f8c <startSendData+0x8>
	...

08000f98 <getMagneticFieldQueue>:
  /* USER CODE END startSendData */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
osMessageQueueId_t getMagneticFieldQueue(void){
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	return magneticFieldIntensitySampleQueueHandle;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <getMagneticFieldQueue+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20001be0 	.word	0x20001be0

08000fb0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a36      	ldr	r2, [pc, #216]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a30      	ldr	r2, [pc, #192]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000fe4:	f043 0320 	orr.w	r3, r3, #32
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0320 	and.w	r3, r3, #32
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <MX_GPIO_Init+0xf4>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_GPIO_Init+0xf4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2120      	movs	r1, #32
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f001 f84f 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_GPIO_Init+0xf8>)
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4819      	ldr	r0, [pc, #100]	; (80010ac <MX_GPIO_Init+0xfc>)
 8001048:	f000 fec0 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800104c:	230c      	movs	r3, #12
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800105c:	230c      	movs	r3, #12
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f000 feaf 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800106e:	2320      	movs	r3, #32
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f000 fea0 	bl	8001dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2105      	movs	r1, #5
 8001090:	2028      	movs	r0, #40	; 0x28
 8001092:	f000 fdb3 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f000 fdca 	bl	8001c30 <HAL_NVIC_EnableIRQ>

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	10110000 	.word	0x10110000
 80010ac:	48000800 	.word	0x48000800

080010b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_I2C1_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <MX_I2C1_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_I2C1_Init+0x74>)
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <MX_I2C1_Init+0x7c>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ec:	f001 f82b 	bl	8002146 <HAL_I2C_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f6:	f000 f943 	bl	8001380 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <MX_I2C1_Init+0x74>)
 80010fe:	f001 fc7b 	bl	80029f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001108:	f000 f93a 	bl	8001380 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800110c:	2100      	movs	r1, #0
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_I2C1_Init+0x74>)
 8001110:	f001 fcbd 	bl	8002a8e <HAL_I2CEx_ConfigDigitalFilter>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 f931 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001be8 	.word	0x20001be8
 8001128:	40005400 	.word	0x40005400
 800112c:	30a0a7fb 	.word	0x30a0a7fb

08001130 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_I2C_MspInit+0x7c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d128      	bne.n	80011a4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_I2C_MspInit+0x80>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <HAL_I2C_MspInit+0x80>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_I2C_MspInit+0x80>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800116a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117c:	2304      	movs	r3, #4
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <HAL_I2C_MspInit+0x84>)
 8001188:	f000 fe20 	bl	8001dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_I2C_MspInit+0x80>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_I2C_MspInit+0x80>)
 8001192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_I2C_MspInit+0x80>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40005400 	.word	0x40005400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400

080011b8 <sampleMagneticField>:
						.z_intensity=0.9986645113145853 * MICRO
				}
			}
		};

void sampleMagneticField(HAL_StatusTypeDef (*readMagneticSensor)(I2C_HandleTypeDef*, float*), I2C_HandleTypeDef *i2c, osMessageQueueId_t queueId){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	MagneticField magneticField;

	float response[3];

	if(HAL_OK == readMagneticSensor(i2c, response)){
 80011c4:	f107 0210 	add.w	r2, r7, #16
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4611      	mov	r1, r2
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	4798      	blx	r3
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <sampleMagneticField+0x38>

		magneticField.x_intensity = response[0];
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	61fb      	str	r3, [r7, #28]
		magneticField.y_intensity = response[1];
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	623b      	str	r3, [r7, #32]
		magneticField.z_intensity = response[2];
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24

		// ADD TO QUEUE
		osMessageQueuePut(queueId, &magneticField, 0, 0);
 80011e2:	f107 011c 	add.w	r1, r7, #28
 80011e6:	2300      	movs	r3, #0
 80011e8:	2200      	movs	r2, #0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f004 fca6 	bl	8005b3c <osMessageQueuePut>
	}
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) ptr, len) != HAL_OK) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	b29b      	uxth	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <_write+0x30>)
 800120e:	f003 f93d 	bl	800448c <HAL_UART_Transmit_IT>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <_write+0x24>
		Error_Handler();
 8001218:	f000 f8b2 	bl	8001380 <Error_Handler>
	}

	return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20001ccc 	.word	0x20001ccc

0800122c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001232:	f000 fbf4 	bl	8001a1e <HAL_Init>
	float f_response[3];

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001236:	f000 f815 	bl	8001264 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800123a:	f7ff feb9 	bl	8000fb0 <MX_GPIO_Init>
	MX_I2C1_Init();
 800123e:	f7ff ff37 	bl	80010b0 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001242:	f000 fb2b 	bl	800189c <MX_USART1_UART_Init>
	MX_TIM6_Init();
 8001246:	f000 facb 	bl	80017e0 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim6);
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <main+0x34>)
 800124c:	f002 fd2a 	bl	8003ca4 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8001250:	f004 fb0a 	bl	8005868 <osKernelInitialize>
	MX_FREERTOS_Init();
 8001254:	f7ff fe4c 	bl	8000ef0 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8001258:	f004 fb2a 	bl	80058b0 <osKernelStart>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// Start timer

	while (1) {
 800125c:	e7fe      	b.n	800125c <main+0x30>
 800125e:	bf00      	nop
 8001260:	20001c80 	.word	0x20001c80

08001264 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b0a8      	sub	sp, #160	; 0xa0
 8001268:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800126a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800126e:	2238      	movs	r2, #56	; 0x38
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fab3 	bl	80087de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001278:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001288:	463b      	mov	r3, r7
 800128a:	2254      	movs	r2, #84	; 0x54
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f007 faa5 	bl	80087de <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001294:	2000      	movs	r0, #0
 8001296:	f001 fc47 	bl	8002b28 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129a:	2302      	movs	r3, #2
 800129c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a2:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a4:	2340      	movs	r3, #64	; 0x40
 80012a6:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012b4:	2304      	movs	r3, #4
 80012b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80012ba:	2355      	movs	r3, #85	; 0x55
 80012bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fcda 	bl	8002c90 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x82>
		Error_Handler();
 80012e2:	f000 f84d 	bl	8001380 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	657b      	str	r3, [r7, #84]	; 0x54
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2303      	movs	r3, #3
 80012ec:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80012fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012fe:	2104      	movs	r1, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f001 ffdd 	bl	80032c0 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xac>
		Error_Handler();
 800130c:	f000 f838 	bl	8001380 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8001310:	2341      	movs	r3, #65	; 0x41
 8001312:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800131c:	463b      	mov	r3, r7
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fa1c 	bl	800375c <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0xca>
		Error_Handler();
 800132a:	f000 f829 	bl	8001380 <Error_Handler>
	}
}
 800132e:	bf00      	nop
 8001330:	37a0      	adds	r7, #160	; 0xa0
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800134a:	f000 fb81 	bl	8001a50 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM6) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d107      	bne.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x30>
		sampleMagneticField(readMagnetometerData, &hi2c1,
 8001358:	f7ff fe1e 	bl	8000f98 <getMagneticFieldQueue>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4905      	ldr	r1, [pc, #20]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001364:	f7ff ff28 	bl	80011b8 <sampleMagneticField>
				getMagneticFieldQueue());
	}

	/* USER CODE END Callback 1 */
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40001400 	.word	0x40001400
 8001374:	40001000 	.word	0x40001000
 8001378:	20001be8 	.word	0x20001be8
 800137c:	08001419 	.word	0x08001419

08001380 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>

0800138a <readRawMagnetometerData>:

	return ret;
}

HAL_StatusTypeDef readRawMagnetometerData(I2C_HandleTypeDef *i2c,
		int16_t *i16_raw_response, uint8_t *ui8_buf_response) {
 800138a:	b580      	push	{r7, lr}
 800138c:	b08a      	sub	sp, #40	; 0x28
 800138e:	af02      	add	r7, sp, #8
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;

	uint8_t reg = OUT_X_H_M;
 8001396:	2303      	movs	r3, #3
 8001398:	77bb      	strb	r3, [r7, #30]
	uint8_t ui_lsm_response[6];
	union_ui8_ui16 ui8_16_aux;

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, &reg, 1,
 800139a:	f107 021e 	add.w	r2, r7, #30
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	213c      	movs	r1, #60	; 0x3c
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 ff5b 	bl	8002264 <HAL_I2C_Master_Transmit>
 80013ae:	4603      	mov	r3, r0
 80013b0:	77fb      	strb	r3, [r7, #31]
	HAL_MAX_DELAY);
	if (ret == HAL_OK) {
 80013b2:	7ffb      	ldrb	r3, [r7, #31]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d129      	bne.n	800140c <readRawMagnetometerData+0x82>
		ret = HAL_I2C_Master_Receive(i2c, MY_LSM303DLHC_MAG_ADD,
 80013b8:	f107 0218 	add.w	r2, r7, #24
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2306      	movs	r3, #6
 80013c4:	213c      	movs	r1, #60	; 0x3c
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f001 f840 	bl	800244c <HAL_I2C_Master_Receive>
 80013cc:	4603      	mov	r3, r0
 80013ce:	77fb      	strb	r3, [r7, #31]
				ui_lsm_response, 6, HAL_MAX_DELAY);

		if (ret == HAL_OK) {
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11a      	bne.n	800140c <readRawMagnetometerData+0x82>
			ui8_16_aux.ui8[0] = ui_lsm_response[1];
 80013d6:	7e7b      	ldrb	r3, [r7, #25]
 80013d8:	743b      	strb	r3, [r7, #16]
			ui8_16_aux.ui8[1] = ui_lsm_response[0];
 80013da:	7e3b      	ldrb	r3, [r7, #24]
 80013dc:	747b      	strb	r3, [r7, #17]

			ui8_16_aux.ui8[2] = ui_lsm_response[3];
 80013de:	7efb      	ldrb	r3, [r7, #27]
 80013e0:	74bb      	strb	r3, [r7, #18]
			ui8_16_aux.ui8[3] = ui_lsm_response[2];
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	74fb      	strb	r3, [r7, #19]

			ui8_16_aux.ui8[4] = ui_lsm_response[5];
 80013e6:	7f7b      	ldrb	r3, [r7, #29]
 80013e8:	753b      	strb	r3, [r7, #20]
			ui8_16_aux.ui8[5] = ui_lsm_response[4];
 80013ea:	7f3b      	ldrb	r3, [r7, #28]
 80013ec:	757b      	strb	r3, [r7, #21]

			memcpy(i16_raw_response, ui8_16_aux.i16, 3);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2203      	movs	r2, #3
 80013f4:	4619      	mov	r1, r3
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f007 f9e3 	bl	80087c2 <memcpy>
			memcpy(ui8_buf_response, ui8_16_aux.ui8, 6);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	6010      	str	r0, [r2, #0]
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	8093      	strh	r3, [r2, #4]
		}
	}

	return ret;
 800140c:	7ffb      	ldrb	r3, [r7, #31]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <readMagnetometerData>:

HAL_StatusTypeDef readMagnetometerData(I2C_HandleTypeDef *i2c,
		float *f_response) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	int16_t i16_raw_response[3];
	uint8_t ui8_raw_response[6];

	ret = readRawMagnetometerData(i2c, i16_raw_response, ui8_raw_response);
 8001422:	f107 0208 	add.w	r2, r7, #8
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ffac 	bl	800138a <readRawMagnetometerData>
 8001432:	4603      	mov	r3, r0
 8001434:	75fb      	strb	r3, [r7, #23]
	if (ret == HAL_OK) {
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d134      	bne.n	80014a6 <readMagnetometerData+0x8e>
		// X conversion
		f_response[0] = i16_raw_response[0] / (float) X_Y_GAIN;
 800143c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	eddf 6a19 	vldr	s13, [pc, #100]	; 80014b0 <readMagnetometerData+0x98>
 800144c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001450:	eddf 6a18 	vldr	s13, [pc, #96]	; 80014b4 <readMagnetometerData+0x9c>
 8001454:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	edc3 7a00 	vstr	s15, [r3]
		// Z conversion
		f_response[1] = i16_raw_response[1] / (float) Z_GAIN;
 800145e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80014b8 <readMagnetometerData+0xa0>
 800146e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3304      	adds	r3, #4
 8001476:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80014b4 <readMagnetometerData+0x9c>
 800147a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147e:	edc3 7a00 	vstr	s15, [r3]

		// Y conversion
		f_response[2] = i16_raw_response[2] / (float) X_Y_GAIN;
 8001482:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148e:	eddf 6a08 	vldr	s13, [pc, #32]	; 80014b0 <readMagnetometerData+0x98>
 8001492:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	3308      	adds	r3, #8
 800149a:	eddf 6a06 	vldr	s13, [pc, #24]	; 80014b4 <readMagnetometerData+0x9c>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	edc3 7a00 	vstr	s15, [r3]

	}

	return ret;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	43660000 	.word	0x43660000
 80014b4:	42c80000 	.word	0x42c80000
 80014b8:	434d0000 	.word	0x434d0000

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_MspInit+0x50>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_MspInit+0x50>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6613      	str	r3, [r2, #96]	; 0x60
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_MspInit+0x50>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_MspInit+0x50>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_MspInit+0x50>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6593      	str	r3, [r2, #88]	; 0x58
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x50>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	210f      	movs	r1, #15
 80014f6:	f06f 0001 	mvn.w	r0, #1
 80014fa:	f000 fb7f 	bl	8001bfc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014fe:	f001 fbb7 	bl	8002c70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_InitTick+0xcc>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <HAL_InitTick+0xcc>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_InitTick+0xcc>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f002 f88f 	bl	800366c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800154e:	f002 f861 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8001552:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <HAL_InitTick+0xd0>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	3b01      	subs	r3, #1
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_InitTick+0xd4>)
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <HAL_InitTick+0xd8>)
 8001566:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_InitTick+0xd4>)
 800156a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <HAL_InitTick+0xd4>)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_InitTick+0xd4>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_InitTick+0xd4>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <HAL_InitTick+0xd4>)
 8001584:	f002 fb36 	bl	8003bf4 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800158e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001592:	2b00      	cmp	r3, #0
 8001594:	d11b      	bne.n	80015ce <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <HAL_InitTick+0xd4>)
 8001598:	f002 fb84 	bl	8003ca4 <HAL_TIM_Base_Start_IT>
 800159c:	4603      	mov	r3, r0
 800159e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80015a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d111      	bne.n	80015ce <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80015aa:	2037      	movs	r0, #55	; 0x37
 80015ac:	f000 fb40 	bl	8001c30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	d808      	bhi.n	80015c8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 80015b6:	2200      	movs	r2, #0
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	2037      	movs	r0, #55	; 0x37
 80015bc:	f000 fb1e 	bl	8001bfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_InitTick+0xdc>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e002      	b.n	80015ce <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80015ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	20001c34 	.word	0x20001c34
 80015e8:	40001400 	.word	0x40001400
 80015ec:	20000004 	.word	0x20000004

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART1_IRQHandler+0x10>)
 8001622:	f002 ffb7 	bl	8004594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20001ccc 	.word	0x20001ccc

08001630 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001634:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001638:	f000 fd62 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM6_DAC_IRQHandler+0x10>)
 8001646:	f002 fba5 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20001c80 	.word	0x20001c80

08001654 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM7_DAC_IRQHandler+0x10>)
 800165a:	f002 fb9b 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20001c34 	.word	0x20001c34

08001668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_kill>:

int _kill(int pid, int sig)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001682:	f006 ff7b 	bl	800857c <__errno>
 8001686:	4603      	mov	r3, r0
 8001688:	2216      	movs	r2, #22
 800168a:	601a      	str	r2, [r3, #0]
	return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_exit>:

void _exit (int status)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffe7 	bl	8001678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016aa:	e7fe      	b.n	80016aa <_exit+0x12>

080016ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00a      	b.n	80016d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016be:	f3af 8000 	nop.w
 80016c2:	4601      	mov	r1, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf0      	blt.n	80016be <_read+0x12>
	}

return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170e:	605a      	str	r2, [r3, #4]
	return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f006 fefc 	bl	800857c <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20020000 	.word	0x20020000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	200001fc 	.word	0x200001fc
 80017b8:	20001db0 	.word	0x20001db0

080017bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_TIM6_Init+0x68>)
 80017f2:	4a16      	ldr	r2, [pc, #88]	; (800184c <MX_TIM6_Init+0x6c>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000 - 1;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_TIM6_Init+0x68>)
 80017f8:	f244 2267 	movw	r2, #16999	; 0x4267
 80017fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_TIM6_Init+0x68>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_TIM6_Init+0x68>)
 8001806:	f242 720f 	movw	r2, #9999	; 0x270f
 800180a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_TIM6_Init+0x68>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_TIM6_Init+0x68>)
 8001814:	f002 f9ee 	bl	8003bf4 <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800181e:	f7ff fdaf 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_TIM6_Init+0x68>)
 8001830:	f002 fd00 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800183a:	f7ff fda1 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20001c80 	.word	0x20001c80
 800184c:	40001000 	.word	0x40001000

08001850 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_TIM_Base_MspInit+0x44>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d113      	bne.n	800188a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_TIM_Base_MspInit+0x48>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <HAL_TIM_Base_MspInit+0x48>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_TIM_Base_MspInit+0x48>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2105      	movs	r1, #5
 800187e:	2036      	movs	r0, #54	; 0x36
 8001880:	f000 f9bc 	bl	8001bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001884:	2036      	movs	r0, #54	; 0x36
 8001886:	f000 f9d3 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40001000 	.word	0x40001000
 8001898:	40021000 	.word	0x40021000

0800189c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e4:	4811      	ldr	r0, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018e6:	f002 fd81 	bl	80043ec <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018f0:	f7ff fd46 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018f8:	f003 fea8 	bl	800564c <HAL_UARTEx_SetTxFifoThreshold>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001902:	f7ff fd3d 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <MX_USART1_UART_Init+0x90>)
 800190a:	f003 fedd 	bl	80056c8 <HAL_UARTEx_SetRxFifoThreshold>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001914:	f7ff fd34 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_USART1_UART_Init+0x90>)
 800191a:	f003 fe5e 	bl	80055da <HAL_UARTEx_DisableFifoMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001924:	f7ff fd2c 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20001ccc 	.word	0x20001ccc
 8001930:	40013800 	.word	0x40013800

08001934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <HAL_UART_MspInit+0x8c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d12f      	bne.n	80019b6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_UART_MspInit+0x90>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6613      	str	r3, [r2, #96]	; 0x60
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_UART_MspInit+0x90>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_UART_MspInit+0x90>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001986:	2330      	movs	r3, #48	; 0x30
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001996:	2307      	movs	r3, #7
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <HAL_UART_MspInit+0x94>)
 80019a2:	f000 fa13 	bl	8001dcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	2025      	movs	r0, #37	; 0x25
 80019ac:	f000 f926 	bl	8001bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b0:	2025      	movs	r0, #37	; 0x25
 80019b2:	f000 f93d 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000800 	.word	0x48000800

080019cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d2:	490e      	ldr	r1, [pc, #56]	; (8001a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <LoopForever+0xe>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e8:	4c0b      	ldr	r4, [pc, #44]	; (8001a18 <LoopForever+0x16>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019f6:	f7ff fee1 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f006 febb 	bl	8008774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fe:	f7ff fc15 	bl	800122c <main>

08001a02 <LoopForever>:

LoopForever:
    b LoopForever
 8001a02:	e7fe      	b.n	8001a02 <LoopForever>
  ldr   r0, =_estack
 8001a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a10:	0800b58c 	.word	0x0800b58c
  ldr r2, =_sbss
 8001a14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a18:	20001db0 	.word	0x20001db0

08001a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC1_2_IRQHandler>

08001a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f8dc 	bl	8001be6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f7ff fd6e 	bl	8001510 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e001      	b.n	8001a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a40:	f7ff fd3c 	bl	80014bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a44:	79fb      	ldrb	r3, [r7, #7]

}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x1c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x20>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_IncTick+0x1c>)
 8001a60:	6013      	str	r3, [r2, #0]
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	20001d5c 	.word	0x20001d5c
 8001a70:	20000008 	.word	0x20000008

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20001d5c 	.word	0x20001d5c

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff4c 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0a:	f7ff ff63 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	6978      	ldr	r0, [r7, #20]
 8001c16:	f7ff ffb3 	bl	8001b80 <NVIC_EncodePriority>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff82 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff56 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d005      	beq.n	8001c70 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2204      	movs	r2, #4
 8001c68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e037      	b.n	8001ce0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020e 	bic.w	r2, r2, #14
 8001c7e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cbc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cde:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d00d      	beq.n	8001d32 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e047      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 020e 	bic.w	r2, r2, #14
 8001d40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 021f 	and.w	r2, r3, #31
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f202 	lsl.w	r2, r1, r2
 8001d74:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00c      	beq.n	8001da2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001da0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
    }
  }
  return status;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dda:	e15a      	b.n	8002092 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 814c 	beq.w	800208c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d00b      	beq.n	8001e14 <HAL_GPIO_Init+0x48>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d007      	beq.n	8001e14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e08:	2b11      	cmp	r3, #17
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d130      	bne.n	8001e76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 0201 	and.w	r2, r3, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0xea>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d123      	bne.n	8001efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	6939      	ldr	r1, [r7, #16]
 8001efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0203 	and.w	r2, r3, #3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80a6 	beq.w	800208c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f40:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <HAL_GPIO_Init+0x2e4>)
 8001f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f44:	4a5a      	ldr	r2, [pc, #360]	; (80020b0 <HAL_GPIO_Init+0x2e4>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_GPIO_Init+0x2e4>)
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f58:	4a56      	ldr	r2, [pc, #344]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f82:	d01f      	beq.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a4c      	ldr	r2, [pc, #304]	; (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d019      	beq.n	8001fc0 <HAL_GPIO_Init+0x1f4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a4b      	ldr	r2, [pc, #300]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_GPIO_Init+0x1f0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <HAL_GPIO_Init+0x2f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a49      	ldr	r2, [pc, #292]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_GPIO_Init+0x2fc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001fac:	2305      	movs	r3, #5
 8001fae:	e00a      	b.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001fb0:	2306      	movs	r3, #6
 8001fb2:	e008      	b.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e006      	b.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e004      	b.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd6:	4937      	ldr	r1, [pc, #220]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_GPIO_Init+0x300>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002008:	4a30      	ldr	r2, [pc, #192]	; (80020cc <HAL_GPIO_Init+0x300>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800200e:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_GPIO_Init+0x300>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002032:	4a26      	ldr	r2, [pc, #152]	; (80020cc <HAL_GPIO_Init+0x300>)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_GPIO_Init+0x300>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800205c:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <HAL_GPIO_Init+0x300>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_GPIO_Init+0x300>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_GPIO_Init+0x300>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f ae9d 	bne.w	8001ddc <HAL_GPIO_Init+0x10>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000
 80020b8:	48000400 	.word	0x48000400
 80020bc:	48000800 	.word	0x48000800
 80020c0:	48000c00 	.word	0x48000c00
 80020c4:	48001000 	.word	0x48001000
 80020c8:	48001400 	.word	0x48001400
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f806 	bl	8002130 <HAL_GPIO_EXTI_Callback>
  }
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e081      	b.n	800225c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7fe ffdf 	bl	8001130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2224      	movs	r2, #36	; 0x24
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002196:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	e006      	b.n	80021ce <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d104      	bne.n	80021e0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002202:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	ea42 0103 	orr.w	r1, r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	021a      	lsls	r2, r3, #8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69d9      	ldr	r1, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	461a      	mov	r2, r3
 8002270:	460b      	mov	r3, r1
 8002272:	817b      	strh	r3, [r7, #10]
 8002274:	4613      	mov	r3, r2
 8002276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b20      	cmp	r3, #32
 8002282:	f040 80da 	bne.w	800243a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_I2C_Master_Transmit+0x30>
 8002290:	2302      	movs	r3, #2
 8002292:	e0d3      	b.n	800243c <HAL_I2C_Master_Transmit+0x1d8>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800229c:	f7ff fbea 	bl	8001a74 <HAL_GetTick>
 80022a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2319      	movs	r3, #25
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f9e6 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0be      	b.n	800243c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	; 0x21
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2210      	movs	r2, #16
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	893a      	ldrh	r2, [r7, #8]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2bff      	cmp	r3, #255	; 0xff
 80022ee:	d90e      	bls.n	800230e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	22ff      	movs	r2, #255	; 0xff
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	4b51      	ldr	r3, [pc, #324]	; (8002444 <HAL_I2C_Master_Transmit+0x1e0>)
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fb48 	bl	800299c <I2C_TransferConfig>
 800230c:	e06c      	b.n	80023e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	b2da      	uxtb	r2, r3
 800231e:	8979      	ldrh	r1, [r7, #10]
 8002320:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_I2C_Master_Transmit+0x1e0>)
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fb37 	bl	800299c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800232e:	e05b      	b.n	80023e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	6a39      	ldr	r1, [r7, #32]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f9e3 	bl	8002700 <I2C_WaitOnTXISFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e07b      	b.n	800243c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d034      	beq.n	80023e8 <HAL_I2C_Master_Transmit+0x184>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	d130      	bne.n	80023e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	2200      	movs	r2, #0
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f975 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e04d      	b.n	800243c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2bff      	cmp	r3, #255	; 0xff
 80023a8:	d90e      	bls.n	80023c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	22ff      	movs	r2, #255	; 0xff
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	8979      	ldrh	r1, [r7, #10]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 faeb 	bl	800299c <I2C_TransferConfig>
 80023c6:	e00f      	b.n	80023e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	8979      	ldrh	r1, [r7, #10]
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fada 	bl	800299c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d19e      	bne.n	8002330 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f9c2 	bl	8002780 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e01a      	b.n	800243c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2220      	movs	r2, #32
 800240c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_I2C_Master_Transmit+0x1e4>)
 800241a:	400b      	ands	r3, r1
 800241c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	80002000 	.word	0x80002000
 8002448:	fe00e800 	.word	0xfe00e800

0800244c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	460b      	mov	r3, r1
 800245a:	817b      	strh	r3, [r7, #10]
 800245c:	4613      	mov	r3, r2
 800245e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	f040 80db 	bne.w	8002624 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_I2C_Master_Receive+0x30>
 8002478:	2302      	movs	r3, #2
 800247a:	e0d4      	b.n	8002626 <HAL_I2C_Master_Receive+0x1da>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002484:	f7ff faf6 	bl	8001a74 <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2319      	movs	r3, #25
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f8f2 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0bf      	b.n	8002626 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2222      	movs	r2, #34	; 0x22
 80024aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2210      	movs	r2, #16
 80024b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	893a      	ldrh	r2, [r7, #8]
 80024c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2bff      	cmp	r3, #255	; 0xff
 80024d6:	d90e      	bls.n	80024f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	22ff      	movs	r2, #255	; 0xff
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	8979      	ldrh	r1, [r7, #10]
 80024e6:	4b52      	ldr	r3, [pc, #328]	; (8002630 <HAL_I2C_Master_Receive+0x1e4>)
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fa54 	bl	800299c <I2C_TransferConfig>
 80024f4:	e06d      	b.n	80025d2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	b2da      	uxtb	r2, r3
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_I2C_Master_Receive+0x1e4>)
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fa43 	bl	800299c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002516:	e05c      	b.n	80025d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	6a39      	ldr	r1, [r7, #32]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f96b 	bl	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e07c      	b.n	8002626 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d034      	beq.n	80025d2 <HAL_I2C_Master_Receive+0x186>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d130      	bne.n	80025d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	2200      	movs	r2, #0
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f880 	bl	8002680 <I2C_WaitOnFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e04d      	b.n	8002626 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2bff      	cmp	r3, #255	; 0xff
 8002592:	d90e      	bls.n	80025b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	22ff      	movs	r2, #255	; 0xff
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f9f6 	bl	800299c <I2C_TransferConfig>
 80025b0:	e00f      	b.n	80025d2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f9e5 	bl	800299c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d19d      	bne.n	8002518 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	6a39      	ldr	r1, [r7, #32]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f8cd 	bl	8002780 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e01a      	b.n	8002626 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2220      	movs	r2, #32
 80025f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_I2C_Master_Receive+0x1e8>)
 8002604:	400b      	ands	r3, r1
 8002606:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	80002400 	.word	0x80002400
 8002634:	fe00e800 	.word	0xfe00e800

08002638 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d103      	bne.n	8002656 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d007      	beq.n	8002674 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	619a      	str	r2, [r3, #24]
  }
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002690:	e022      	b.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d01e      	beq.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7ff f9eb 	bl	8001a74 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d113      	bne.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e00f      	b.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4013      	ands	r3, r2
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d0cd      	beq.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800270c:	e02c      	b.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8dc 	bl	80028d0 <I2C_IsAcknowledgeFailed>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e02a      	b.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d01e      	beq.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7ff f9a3 	bl	8001a74 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d113      	bne.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e007      	b.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d1cb      	bne.n	800270e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278c:	e028      	b.n	80027e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f89c 	bl	80028d0 <I2C_IsAcknowledgeFailed>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e026      	b.n	80027f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7ff f967 	bl	8001a74 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d113      	bne.n	80027e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e007      	b.n	80027f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d1cf      	bne.n	800278e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002804:	e055      	b.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f860 	bl	80028d0 <I2C_IsAcknowledgeFailed>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e053      	b.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d129      	bne.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b04      	cmp	r3, #4
 8002834:	d105      	bne.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e03f      	b.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002856:	400b      	ands	r3, r1
 8002858:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e022      	b.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287c:	f7ff f8fa 	bl	8001a74 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d302      	bcc.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e007      	b.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d1a2      	bne.n	8002806 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	fe00e800 	.word	0xfe00e800

080028d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d151      	bne.n	800298e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ea:	e022      	b.n	8002932 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d01e      	beq.n	8002932 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7ff f8be 	bl	8001a74 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <I2C_IsAcknowledgeFailed+0x3a>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02e      	b.n	8002990 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b20      	cmp	r3, #32
 800293e:	d1d5      	bne.n	80028ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2210      	movs	r2, #16
 8002946:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2220      	movs	r2, #32
 800294e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff fe71 	bl	8002638 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <I2C_IsAcknowledgeFailed+0xc8>)
 8002962:	400b      	ands	r3, r1
 8002964:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	fe00e800 	.word	0xfe00e800

0800299c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	4613      	mov	r3, r2
 80029ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	0d5b      	lsrs	r3, r3, #21
 80029b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80029bc:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <I2C_TransferConfig+0x58>)
 80029be:	430b      	orrs	r3, r1
 80029c0:	43db      	mvns	r3, r3
 80029c2:	ea02 0103 	and.w	r1, r2, r3
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029cc:	7a7b      	ldrb	r3, [r7, #9]
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	431a      	orrs	r2, r3
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	03ff63ff 	.word	0x03ff63ff

080029f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d138      	bne.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e032      	b.n	8002a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	; 0x24
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d139      	bne.n	8002b18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e033      	b.n	8002b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2224      	movs	r2, #36	; 0x24
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d141      	bne.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b36:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d131      	bne.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b44:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4a:	4a46      	ldr	r2, [pc, #280]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b5c:	4a41      	ldr	r2, [pc, #260]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2232      	movs	r2, #50	; 0x32
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4a3f      	ldr	r2, [pc, #252]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	3301      	adds	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7a:	e002      	b.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b82:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8e:	d102      	bne.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f2      	bne.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b96:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d158      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e057      	b.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bae:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bb8:	e04d      	b.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc0:	d141      	bne.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	d131      	bne.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd6:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be8:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2232      	movs	r2, #50	; 0x32
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	3301      	adds	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c06:	e002      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d102      	bne.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f2      	bne.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2e:	d112      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e011      	b.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c44:	e007      	b.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40007000 	.word	0x40007000
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	431bde83 	.word	0x431bde83

08002c70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7e:	6093      	str	r3, [r2, #8]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e308      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d075      	beq.n	8002d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cae:	4ba3      	ldr	r3, [pc, #652]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb8:	4ba0      	ldr	r3, [pc, #640]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_OscConfig+0x3e>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x44>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d10b      	bne.n	8002cec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	4b99      	ldr	r3, [pc, #612]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d05b      	beq.n	8002d98 <HAL_RCC_OscConfig+0x108>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d157      	bne.n	8002d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e2e3      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCC_OscConfig+0x74>
 8002cf6:	4b91      	ldr	r3, [pc, #580]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a90      	ldr	r2, [pc, #576]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e01d      	b.n	8002d40 <HAL_RCC_OscConfig+0xb0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x98>
 8002d0e:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a8a      	ldr	r2, [pc, #552]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a87      	ldr	r2, [pc, #540]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0xb0>
 8002d28:	4b84      	ldr	r3, [pc, #528]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a83      	ldr	r2, [pc, #524]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b81      	ldr	r3, [pc, #516]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a80      	ldr	r2, [pc, #512]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fe94 	bl	8001a74 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fe90 	bl	8001a74 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e2a8      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0xc0>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fe80 	bl	8001a74 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7fe fe7c 	bl	8001a74 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e294      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0xe8>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d075      	beq.n	8002e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db0:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x136>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_OscConfig+0x13c>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d11f      	bne.n	8002e0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_OscConfig+0x154>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e267      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de4:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	4952      	ldr	r1, [pc, #328]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002df8:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCC_OscConfig+0x2b0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe fb87 	bl	8001510 <HAL_InitTick>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d043      	beq.n	8002e90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e253      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d023      	beq.n	8002e5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a48      	ldr	r2, [pc, #288]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fe28 	bl	8001a74 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fe fe24 	bl	8001a74 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e23c      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3a:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	4939      	ldr	r1, [pc, #228]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
 8002e5a:	e01a      	b.n	8002e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5c:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a36      	ldr	r2, [pc, #216]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fe04 	bl	8001a74 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7fe fe00 	bl	8001a74 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e218      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1e0>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fddd 	bl	8001a74 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fdd9 	bl	8001a74 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1f1      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ef      	beq.n	8002ebe <HAL_RCC_OscConfig+0x22e>
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fdc0 	bl	8001a74 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fdbc 	bl	8001a74 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1d4      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ef      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80ab 	beq.w	800307c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2b4>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e005      	b.n	8002f46 <HAL_RCC_OscConfig+0x2b6>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	20000004 	.word	0x20000004
 8002f44:	2300      	movs	r3, #0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	4baf      	ldr	r3, [pc, #700]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	4aae      	ldr	r2, [pc, #696]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6593      	str	r3, [r2, #88]	; 0x58
 8002f56:	4bac      	ldr	r3, [pc, #688]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f66:	4ba9      	ldr	r3, [pc, #676]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f72:	4ba6      	ldr	r3, [pc, #664]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4aa5      	ldr	r2, [pc, #660]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fd79 	bl	8001a74 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fe fd75 	bl	8001a74 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e18d      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f98:	4b9c      	ldr	r3, [pc, #624]	; (800320c <HAL_RCC_OscConfig+0x57c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d108      	bne.n	8002fbe <HAL_RCC_OscConfig+0x32e>
 8002fac:	4b96      	ldr	r3, [pc, #600]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	4a95      	ldr	r2, [pc, #596]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fbc:	e024      	b.n	8003008 <HAL_RCC_OscConfig+0x378>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d110      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x358>
 8002fc6:	4b90      	ldr	r3, [pc, #576]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	4a8e      	ldr	r2, [pc, #568]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd6:	4b8c      	ldr	r3, [pc, #560]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	4a8a      	ldr	r2, [pc, #552]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe6:	e00f      	b.n	8003008 <HAL_RCC_OscConfig+0x378>
 8002fe8:	4b87      	ldr	r3, [pc, #540]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	4a86      	ldr	r2, [pc, #536]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff8:	4b83      	ldr	r3, [pc, #524]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	4a82      	ldr	r2, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d016      	beq.n	800303e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe fd30 	bl	8001a74 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fe fd2c 	bl	8001a74 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e142      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ed      	beq.n	8003018 <HAL_RCC_OscConfig+0x388>
 800303c:	e015      	b.n	800306a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe fd19 	bl	8001a74 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe fd15 	bl	8001a74 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e12b      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800305c:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ed      	bne.n	8003046 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003070:	4b65      	ldr	r3, [pc, #404]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	4a64      	ldr	r2, [pc, #400]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03c      	beq.n	8003102 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003090:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003096:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe fce8 	bl	8001a74 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030a8:	f7fe fce4 	bl	8001a74 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0fc      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ba:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x418>
 80030c8:	e01b      	b.n	8003102 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d0:	4a4d      	ldr	r2, [pc, #308]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fccb 	bl	8001a74 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e2:	f7fe fcc7 	bl	8001a74 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0df      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030f4:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80d3 	beq.w	80032b2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310c:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b0c      	cmp	r3, #12
 8003116:	f000 808d 	beq.w	8003234 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d15a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a38      	ldr	r2, [pc, #224]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe fca1 	bl	8001a74 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7fe fc9d 	bl	8001a74 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0b5      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0x580>)
 800315a:	4013      	ands	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6a11      	ldr	r1, [r2, #32]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003164:	3a01      	subs	r2, #1
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800316e:	0212      	lsls	r2, r2, #8
 8003170:	4311      	orrs	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003176:	0852      	lsrs	r2, r2, #1
 8003178:	3a01      	subs	r2, #1
 800317a:	0552      	lsls	r2, r2, #21
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003182:	0852      	lsrs	r2, r2, #1
 8003184:	3a01      	subs	r2, #1
 8003186:	0652      	lsls	r2, r2, #25
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800318e:	06d2      	lsls	r2, r2, #27
 8003190:	430a      	orrs	r2, r1
 8003192:	491d      	ldr	r1, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 8003194:	4313      	orrs	r3, r2
 8003196:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a4:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fc60 	bl	8001a74 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fc5c 	bl	8001a74 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e074      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x528>
 80031d6:	e06c      	b.n	80032b2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_RCC_OscConfig+0x578>)
 80031f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fc38 	bl	8001a74 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003206:	e00e      	b.n	8003226 <HAL_RCC_OscConfig+0x596>
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
 8003210:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fc2e 	bl	8001a74 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e046      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_OscConfig+0x62c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x584>
 8003232:	e03e      	b.n	80032b2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e039      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003240:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_OscConfig+0x62c>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	429a      	cmp	r2, r3
 8003252:	d12c      	bne.n	80032ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	3b01      	subs	r3, #1
 8003260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d123      	bne.n	80032ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d11b      	bne.n	80032ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d113      	bne.n	80032ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	3b01      	subs	r3, #1
 8003294:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d109      	bne.n	80032ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	3b01      	subs	r3, #1
 80032a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e11e      	b.n	8003516 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b91      	ldr	r3, [pc, #580]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b8e      	ldr	r3, [pc, #568]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	498c      	ldr	r1, [pc, #560]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b8a      	ldr	r3, [pc, #552]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e106      	b.n	8003516 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d073      	beq.n	80033fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d129      	bne.n	8003370 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331c:	4b81      	ldr	r3, [pc, #516]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0f4      	b.n	8003516 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800332c:	f000 f9d0 	bl	80036d0 <RCC_GetSysClockFreqFromPLLSource>
 8003330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4a7c      	ldr	r2, [pc, #496]	; (8003528 <HAL_RCC_ClockConfig+0x268>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d93f      	bls.n	80033ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800334e:	2b00      	cmp	r3, #0
 8003350:	d033      	beq.n	80033ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003356:	2b00      	cmp	r3, #0
 8003358:	d12f      	bne.n	80033ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800335a:	4b72      	ldr	r3, [pc, #456]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003362:	4a70      	ldr	r2, [pc, #448]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 8003364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003368:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e024      	b.n	80033ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d107      	bne.n	8003388 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0c6      	b.n	8003516 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0be      	b.n	8003516 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003398:	f000 f8ce 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 800339c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4a61      	ldr	r2, [pc, #388]	; (8003528 <HAL_RCC_ClockConfig+0x268>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d909      	bls.n	80033ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033a6:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ae:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80033b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4957      	ldr	r1, [pc, #348]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fe fb52 	bl	8001a74 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fe fb4e 	bl	8001a74 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e095      	b.n	8003516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 020c 	and.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1eb      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800341a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800341e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800342c:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003434:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 8003436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800343a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4936      	ldr	r1, [pc, #216]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
 800344e:	e008      	b.n	8003462 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d105      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003456:	4b33      	ldr	r3, [pc, #204]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4a32      	ldr	r2, [pc, #200]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 800345c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003460:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d21d      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 020f 	bic.w	r2, r3, #15
 8003478:	4929      	ldr	r1, [pc, #164]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003480:	f7fe faf8 	bl	8001a74 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fe faf4 	bl	8001a74 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e03b      	b.n	8003516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_RCC_ClockConfig+0x260>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1ed      	bne.n	8003488 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4917      	ldr	r1, [pc, #92]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	490f      	ldr	r1, [pc, #60]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ea:	f000 f825 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <HAL_RCC_ClockConfig+0x264>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	490c      	ldr	r1, [pc, #48]	; (800352c <HAL_RCC_ClockConfig+0x26c>)
 80034fc:	5ccb      	ldrb	r3, [r1, r3]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x270>)
 8003508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd fffe 	bl	8001510 <HAL_InitTick>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40022000 	.word	0x40022000
 8003524:	40021000 	.word	0x40021000
 8003528:	04c4b400 	.word	0x04c4b400
 800352c:	0800b15c 	.word	0x0800b15c
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d102      	bne.n	8003550 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e047      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d102      	bne.n	8003562 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e03e      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d136      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800358c:	4a1a      	ldr	r2, [pc, #104]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003596:	68d2      	ldr	r2, [r2, #12]
 8003598:	0a12      	lsrs	r2, r2, #8
 800359a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	617b      	str	r3, [r7, #20]
      break;
 80035a4:	e00c      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b0:	68d2      	ldr	r2, [r2, #12]
 80035b2:	0a12      	lsrs	r2, r2, #8
 80035b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
      break;
 80035be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0e5b      	lsrs	r3, r3, #25
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	e001      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035e0:	693b      	ldr	r3, [r7, #16]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	016e3600 	.word	0x016e3600

080035fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <HAL_RCC_GetHCLKFreq+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000000 	.word	0x20000000

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003618:	f7ff fff0 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCC_GetPCLK1Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	0800b16c 	.word	0x0800b16c

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003644:	f7ff ffda 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0adb      	lsrs	r3, r3, #11
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	0800b16c 	.word	0x0800b16c

0800366c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	220f      	movs	r2, #15
 800367a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_RCC_GetClockConfig+0x60>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40022000 	.word	0x40022000

080036d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d10c      	bne.n	800370e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036fe:	68d2      	ldr	r2, [r2, #12]
 8003700:	0a12      	lsrs	r2, r2, #8
 8003702:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	617b      	str	r3, [r7, #20]
    break;
 800370c:	e00c      	b.n	8003728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	0a12      	lsrs	r2, r2, #8
 800371c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    break;
 8003726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0e5b      	lsrs	r3, r3, #25
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003742:	687b      	ldr	r3, [r7, #4]
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40021000 	.word	0x40021000
 8003754:	016e3600 	.word	0x016e3600
 8003758:	00f42400 	.word	0x00f42400

0800375c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003764:	2300      	movs	r3, #0
 8003766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003768:	2300      	movs	r3, #0
 800376a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8098 	beq.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b40      	ldr	r3, [pc, #256]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	4a3f      	ldr	r2, [pc, #252]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6593      	str	r3, [r2, #88]	; 0x58
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a39      	ldr	r2, [pc, #228]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b2:	f7fe f95f 	bl	8001a74 <HAL_GetTick>
 80037b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037b8:	e009      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe f95b 	bl	8001a74 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	74fb      	strb	r3, [r7, #19]
        break;
 80037cc:	e005      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d159      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01e      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d019      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fc:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003828:	4a18      	ldr	r2, [pc, #96]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe f91b 	bl	8001a74 <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003840:	e00b      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe f917 	bl	8001a74 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d902      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	74fb      	strb	r3, [r7, #19]
            break;
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ec      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	74bb      	strb	r3, [r7, #18]
 800388a:	e005      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003898:	7c7b      	ldrb	r3, [r7, #17]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4baf      	ldr	r3, [pc, #700]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	4aae      	ldr	r2, [pc, #696]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b6:	4ba9      	ldr	r3, [pc, #676]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f023 0203 	bic.w	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	49a5      	ldr	r1, [pc, #660]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d8:	4ba0      	ldr	r3, [pc, #640]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f023 020c 	bic.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	499d      	ldr	r1, [pc, #628]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fa:	4b98      	ldr	r3, [pc, #608]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4994      	ldr	r1, [pc, #592]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800391c:	4b8f      	ldr	r3, [pc, #572]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	498c      	ldr	r1, [pc, #560]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800393e:	4b87      	ldr	r3, [pc, #540]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	4983      	ldr	r1, [pc, #524]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003960:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	497b      	ldr	r1, [pc, #492]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4972      	ldr	r1, [pc, #456]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a4:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	496a      	ldr	r1, [pc, #424]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c6:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	4961      	ldr	r1, [pc, #388]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039e8:	4b5c      	ldr	r3, [pc, #368]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	4959      	ldr	r1, [pc, #356]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0a:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	4950      	ldr	r1, [pc, #320]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4948      	ldr	r1, [pc, #288]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a42      	ldr	r2, [pc, #264]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a64:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	493a      	ldr	r1, [pc, #232]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a82:	d105      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a84:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a34      	ldr	r2, [pc, #208]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	492c      	ldr	r1, [pc, #176]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	491e      	ldr	r1, [pc, #120]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4910      	ldr	r1, [pc, #64]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d018      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	4902      	ldr	r1, [pc, #8]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b5a:	e001      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003b5c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b68:	d105      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d015      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	4917      	ldr	r1, [pc, #92]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d105      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d015      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc8:	4909      	ldr	r1, [pc, #36]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003be6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e049      	b.n	8003c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fe18 	bl	8001850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fa56 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d001      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e054      	b.n	8003d66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x80>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d01d      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x80>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x80>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x80>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x80>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x80>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x80>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d115      	bne.n	8003d50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_TIM_Base_Start_IT+0xec>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d015      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0xbe>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d011      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4e:	e008      	b.n	8003d62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e000      	b.n	8003d64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40013400 	.word	0x40013400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40015000 	.word	0x40015000
 8003d90:	00010007 	.word	0x00010007

08003d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0202 	mvn.w	r2, #2
 8003dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f965 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f957 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f968 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0204 	mvn.w	r2, #4
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f93b 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f92d 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f93e 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0208 	mvn.w	r2, #8
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f911 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f903 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f914 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0210 	mvn.w	r2, #16
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8e7 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8d9 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f8ea 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0201 	mvn.w	r2, #1
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd fa10 	bl	8001338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fa18 	bl	8004374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa0b 	bl	8004388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f898 	bl	80040ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0220 	mvn.w	r2, #32
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f9cb 	bl	8004360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd8:	d10f      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe8:	d107      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f9d1 	bl	800439c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004008:	d10f      	bne.n	800402a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004018:	d107      	bne.n	800402a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9c3 	bl	80043b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004038:	d10f      	bne.n	800405a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004048:	d107      	bne.n	800405a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f9b5 	bl	80043c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004068:	d10f      	bne.n	800408a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004078:	d107      	bne.n	800408a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f9a7 	bl	80043d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a46      	ldr	r2, [pc, #280]	; (8004210 <TIM_Base_SetConfig+0x12c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d017      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d013      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a43      	ldr	r2, [pc, #268]	; (8004214 <TIM_Base_SetConfig+0x130>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a42      	ldr	r2, [pc, #264]	; (8004218 <TIM_Base_SetConfig+0x134>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a41      	ldr	r2, [pc, #260]	; (800421c <TIM_Base_SetConfig+0x138>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a40      	ldr	r2, [pc, #256]	; (8004220 <TIM_Base_SetConfig+0x13c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x48>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <TIM_Base_SetConfig+0x140>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a33      	ldr	r2, [pc, #204]	; (8004210 <TIM_Base_SetConfig+0x12c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d023      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d01f      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a30      	ldr	r2, [pc, #192]	; (8004214 <TIM_Base_SetConfig+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01b      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <TIM_Base_SetConfig+0x134>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d017      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2e      	ldr	r2, [pc, #184]	; (800421c <TIM_Base_SetConfig+0x138>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2d      	ldr	r2, [pc, #180]	; (8004220 <TIM_Base_SetConfig+0x13c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00f      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <TIM_Base_SetConfig+0x144>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00b      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2c      	ldr	r2, [pc, #176]	; (800422c <TIM_Base_SetConfig+0x148>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2b      	ldr	r2, [pc, #172]	; (8004230 <TIM_Base_SetConfig+0x14c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0xaa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <TIM_Base_SetConfig+0x140>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <TIM_Base_SetConfig+0x12c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <TIM_Base_SetConfig+0x110>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a14      	ldr	r2, [pc, #80]	; (8004220 <TIM_Base_SetConfig+0x13c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x110>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <TIM_Base_SetConfig+0x144>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x110>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a13      	ldr	r2, [pc, #76]	; (800422c <TIM_Base_SetConfig+0x148>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x110>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <TIM_Base_SetConfig+0x14c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x110>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <TIM_Base_SetConfig+0x140>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d103      	bne.n	80041fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	615a      	str	r2, [r3, #20]
}
 8004202:	bf00      	nop
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40015000 	.word	0x40015000
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004248:	2302      	movs	r3, #2
 800424a:	e074      	b.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a34      	ldr	r2, [pc, #208]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a33      	ldr	r2, [pc, #204]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a31      	ldr	r2, [pc, #196]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004290:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a21      	ldr	r2, [pc, #132]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d022      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d01d      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d018      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a15      	ldr	r2, [pc, #84]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a18      	ldr	r2, [pc, #96]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a11      	ldr	r2, [pc, #68]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10c      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4313      	orrs	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40013400 	.word	0x40013400
 800434c:	40015000 	.word	0x40015000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40014000 	.word	0x40014000

08004360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e042      	b.n	8004484 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fd fa8f 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2224      	movs	r2, #36	; 0x24
 800441a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fb04 	bl	8004a3c <UART_SetConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e022      	b.n	8004484 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fdc2 	bl	8004fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fe49 	bl	8005114 <UART_CheckIdleState>
 8004482:	4603      	mov	r3, r0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d168      	bne.n	8004576 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_UART_Transmit_IT+0x24>
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e061      	b.n	8004578 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Transmit_IT+0x36>
 80044be:	2302      	movs	r3, #2
 80044c0:	e05a      	b.n	8004578 <HAL_UART_Transmit_IT+0xec>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2221      	movs	r2, #33	; 0x21
 80044f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fe:	d11c      	bne.n	800453a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d107      	bne.n	800451a <HAL_UART_Transmit_IT+0x8e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <HAL_UART_Transmit_IT+0xf8>)
 8004516:	675a      	str	r2, [r3, #116]	; 0x74
 8004518:	e002      	b.n	8004520 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <HAL_UART_Transmit_IT+0xfc>)
 800451e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	e01b      	b.n	8004572 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004542:	d107      	bne.n	8004554 <HAL_UART_Transmit_IT+0xc8>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d103      	bne.n	8004554 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a0f      	ldr	r2, [pc, #60]	; (800458c <HAL_UART_Transmit_IT+0x100>)
 8004550:	675a      	str	r2, [r3, #116]	; 0x74
 8004552:	e002      	b.n	800455a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <HAL_UART_Transmit_IT+0x104>)
 8004558:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004570:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	080054c7 	.word	0x080054c7
 8004588:	0800542d 	.word	0x0800542d
 800458c:	080053af 	.word	0x080053af
 8004590:	0800533b 	.word	0x0800533b

08004594 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d118      	bne.n	80045f6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d013      	beq.n	80045f6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 81fb 	beq.w	80049e2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      }
      return;
 80045f4:	e1f5      	b.n	80049e2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80ef 	beq.w	80047dc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_UART_IRQHandler+0x23c>)
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4b72      	ldr	r3, [pc, #456]	; (80047d4 <HAL_UART_IRQHandler+0x240>)
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80e4 	beq.w	80047dc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d010      	beq.n	8004640 <HAL_UART_IRQHandler+0xac>
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004636:	f043 0201 	orr.w	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_UART_IRQHandler+0xd8>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2202      	movs	r2, #2
 800465a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004662:	f043 0204 	orr.w	r2, r3, #4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_UART_IRQHandler+0x104>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2204      	movs	r2, #4
 8004686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468e:	f043 0202 	orr.w	r2, r3, #2
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d015      	beq.n	80046ce <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <HAL_UART_IRQHandler+0x23c>)
 80046b0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2208      	movs	r2, #8
 80046bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f043 0208 	orr.w	r2, r3, #8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d011      	beq.n	80046fc <HAL_UART_IRQHandler+0x168>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 816f 	beq.w	80049e6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d004      	beq.n	8004756 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	d031      	beq.n	80047ba <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fda7 	bl	80052aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d123      	bne.n	80047b2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004778:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d013      	beq.n	80047aa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004786:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <HAL_UART_IRQHandler+0x244>)
 8004788:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478e:	4618      	mov	r0, r3
 8004790:	f7fd fab5 	bl	8001cfe <HAL_DMA_Abort_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d017      	beq.n	80047ca <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80047a4:	4610      	mov	r0, r2
 80047a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e00f      	b.n	80047ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f930 	bl	8004a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	e00b      	b.n	80047ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f92c 	bl	8004a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e007      	b.n	80047ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f928 	bl	8004a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80047c8:	e10d      	b.n	80049e6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ca:	bf00      	nop
    return;
 80047cc:	e10b      	b.n	80049e6 <HAL_UART_IRQHandler+0x452>
 80047ce:	bf00      	nop
 80047d0:	10000001 	.word	0x10000001
 80047d4:	04000120 	.word	0x04000120
 80047d8:	0800530f 	.word	0x0800530f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	f040 80ab 	bne.w	800493c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a5 	beq.w	800493c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 809f 	beq.w	800493c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d155      	bne.n	80048c0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800481e:	893b      	ldrh	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80e2 	beq.w	80049ea <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800482c:	893a      	ldrh	r2, [r7, #8]
 800482e:	429a      	cmp	r2, r3
 8004830:	f080 80db 	bcs.w	80049ea <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	893a      	ldrh	r2, [r7, #8]
 8004838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d12b      	bne.n	80048a4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800485a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0210 	bic.w	r2, r2, #16
 8004898:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd f9d4 	bl	8001c4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8b3 	bl	8004a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048be:	e094      	b.n	80049ea <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8087 	beq.w	80049ee <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8083 	beq.w	80049ee <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0210 	bic.w	r2, r2, #16
 800492e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004930:	897b      	ldrh	r3, [r7, #10]
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f875 	bl	8004a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800493a:	e058      	b.n	80049ee <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <HAL_UART_IRQHandler+0x3ce>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fe1f 	bl	800559e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004960:	e048      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004984:	2b00      	cmp	r3, #0
 8004986:	d034      	beq.n	80049f2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
    }
    return;
 8004990:	e02f      	b.n	80049f2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_UART_IRQHandler+0x41a>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fddf 	bl	800556a <UART_EndTransmit_IT>
    return;
 80049ac:	e022      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_UART_IRQHandler+0x436>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fdff 	bl	80055c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049c8:	e014      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00f      	beq.n	80049f4 <HAL_UART_IRQHandler+0x460>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da0c      	bge.n	80049f4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fde9 	bl	80055b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049e0:	e008      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
      return;
 80049e2:	bf00      	nop
 80049e4:	e006      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
    return;
 80049e6:	bf00      	nop
 80049e8:	e004      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
      return;
 80049ea:	bf00      	nop
 80049ec:	e002      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
      return;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <HAL_UART_IRQHandler+0x460>
    return;
 80049f2:	bf00      	nop
  }
}
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop

080049fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b5b0      	push	{r4, r5, r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4bb1      	ldr	r3, [pc, #708]	; (8004d2c <UART_SetConfig+0x2f0>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	69f9      	ldr	r1, [r7, #28]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4aa6      	ldr	r2, [pc, #664]	; (8004d30 <UART_SetConfig+0x2f4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004aae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	69f9      	ldr	r1, [r7, #28]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	f023 010f 	bic.w	r1, r3, #15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a97      	ldr	r2, [pc, #604]	; (8004d34 <UART_SetConfig+0x2f8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d120      	bne.n	8004b1e <UART_SetConfig+0xe2>
 8004adc:	4b96      	ldr	r3, [pc, #600]	; (8004d38 <UART_SetConfig+0x2fc>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d816      	bhi.n	8004b18 <UART_SetConfig+0xdc>
 8004aea:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <UART_SetConfig+0xb4>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b01 	.word	0x08004b01
 8004af4:	08004b0d 	.word	0x08004b0d
 8004af8:	08004b07 	.word	0x08004b07
 8004afc:	08004b13 	.word	0x08004b13
 8004b00:	2301      	movs	r3, #1
 8004b02:	76fb      	strb	r3, [r7, #27]
 8004b04:	e0e7      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b06:	2302      	movs	r3, #2
 8004b08:	76fb      	strb	r3, [r7, #27]
 8004b0a:	e0e4      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	76fb      	strb	r3, [r7, #27]
 8004b10:	e0e1      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b12:	2308      	movs	r3, #8
 8004b14:	76fb      	strb	r3, [r7, #27]
 8004b16:	e0de      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	76fb      	strb	r3, [r7, #27]
 8004b1c:	e0db      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a86      	ldr	r2, [pc, #536]	; (8004d3c <UART_SetConfig+0x300>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d132      	bne.n	8004b8e <UART_SetConfig+0x152>
 8004b28:	4b83      	ldr	r3, [pc, #524]	; (8004d38 <UART_SetConfig+0x2fc>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d828      	bhi.n	8004b88 <UART_SetConfig+0x14c>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0x100>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004b89 	.word	0x08004b89
 8004b44:	08004b89 	.word	0x08004b89
 8004b48:	08004b89 	.word	0x08004b89
 8004b4c:	08004b7d 	.word	0x08004b7d
 8004b50:	08004b89 	.word	0x08004b89
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004b89 	.word	0x08004b89
 8004b5c:	08004b77 	.word	0x08004b77
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b89 	.word	0x08004b89
 8004b6c:	08004b83 	.word	0x08004b83
 8004b70:	2300      	movs	r3, #0
 8004b72:	76fb      	strb	r3, [r7, #27]
 8004b74:	e0af      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b76:	2302      	movs	r3, #2
 8004b78:	76fb      	strb	r3, [r7, #27]
 8004b7a:	e0ac      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	76fb      	strb	r3, [r7, #27]
 8004b80:	e0a9      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b82:	2308      	movs	r3, #8
 8004b84:	76fb      	strb	r3, [r7, #27]
 8004b86:	e0a6      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	76fb      	strb	r3, [r7, #27]
 8004b8c:	e0a3      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6b      	ldr	r2, [pc, #428]	; (8004d40 <UART_SetConfig+0x304>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d120      	bne.n	8004bda <UART_SetConfig+0x19e>
 8004b98:	4b67      	ldr	r3, [pc, #412]	; (8004d38 <UART_SetConfig+0x2fc>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ba2:	2b30      	cmp	r3, #48	; 0x30
 8004ba4:	d013      	beq.n	8004bce <UART_SetConfig+0x192>
 8004ba6:	2b30      	cmp	r3, #48	; 0x30
 8004ba8:	d814      	bhi.n	8004bd4 <UART_SetConfig+0x198>
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d009      	beq.n	8004bc2 <UART_SetConfig+0x186>
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d810      	bhi.n	8004bd4 <UART_SetConfig+0x198>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <UART_SetConfig+0x180>
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d006      	beq.n	8004bc8 <UART_SetConfig+0x18c>
 8004bba:	e00b      	b.n	8004bd4 <UART_SetConfig+0x198>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	76fb      	strb	r3, [r7, #27]
 8004bc0:	e089      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	76fb      	strb	r3, [r7, #27]
 8004bc6:	e086      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	76fb      	strb	r3, [r7, #27]
 8004bcc:	e083      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004bce:	2308      	movs	r3, #8
 8004bd0:	76fb      	strb	r3, [r7, #27]
 8004bd2:	e080      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	76fb      	strb	r3, [r7, #27]
 8004bd8:	e07d      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a59      	ldr	r2, [pc, #356]	; (8004d44 <UART_SetConfig+0x308>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d120      	bne.n	8004c26 <UART_SetConfig+0x1ea>
 8004be4:	4b54      	ldr	r3, [pc, #336]	; (8004d38 <UART_SetConfig+0x2fc>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bee:	2bc0      	cmp	r3, #192	; 0xc0
 8004bf0:	d013      	beq.n	8004c1a <UART_SetConfig+0x1de>
 8004bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bf4:	d814      	bhi.n	8004c20 <UART_SetConfig+0x1e4>
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d009      	beq.n	8004c0e <UART_SetConfig+0x1d2>
 8004bfa:	2b80      	cmp	r3, #128	; 0x80
 8004bfc:	d810      	bhi.n	8004c20 <UART_SetConfig+0x1e4>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <UART_SetConfig+0x1cc>
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d006      	beq.n	8004c14 <UART_SetConfig+0x1d8>
 8004c06:	e00b      	b.n	8004c20 <UART_SetConfig+0x1e4>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	76fb      	strb	r3, [r7, #27]
 8004c0c:	e063      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	76fb      	strb	r3, [r7, #27]
 8004c12:	e060      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c14:	2304      	movs	r3, #4
 8004c16:	76fb      	strb	r3, [r7, #27]
 8004c18:	e05d      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	76fb      	strb	r3, [r7, #27]
 8004c1e:	e05a      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c20:	2310      	movs	r3, #16
 8004c22:	76fb      	strb	r3, [r7, #27]
 8004c24:	e057      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a47      	ldr	r2, [pc, #284]	; (8004d48 <UART_SetConfig+0x30c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d125      	bne.n	8004c7c <UART_SetConfig+0x240>
 8004c30:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <UART_SetConfig+0x2fc>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c3e:	d017      	beq.n	8004c70 <UART_SetConfig+0x234>
 8004c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c44:	d817      	bhi.n	8004c76 <UART_SetConfig+0x23a>
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4a:	d00b      	beq.n	8004c64 <UART_SetConfig+0x228>
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c50:	d811      	bhi.n	8004c76 <UART_SetConfig+0x23a>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <UART_SetConfig+0x222>
 8004c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5a:	d006      	beq.n	8004c6a <UART_SetConfig+0x22e>
 8004c5c:	e00b      	b.n	8004c76 <UART_SetConfig+0x23a>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	76fb      	strb	r3, [r7, #27]
 8004c62:	e038      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c64:	2302      	movs	r3, #2
 8004c66:	76fb      	strb	r3, [r7, #27]
 8004c68:	e035      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e032      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c70:	2308      	movs	r3, #8
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e02f      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c76:	2310      	movs	r3, #16
 8004c78:	76fb      	strb	r3, [r7, #27]
 8004c7a:	e02c      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2b      	ldr	r2, [pc, #172]	; (8004d30 <UART_SetConfig+0x2f4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d125      	bne.n	8004cd2 <UART_SetConfig+0x296>
 8004c86:	4b2c      	ldr	r3, [pc, #176]	; (8004d38 <UART_SetConfig+0x2fc>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c94:	d017      	beq.n	8004cc6 <UART_SetConfig+0x28a>
 8004c96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c9a:	d817      	bhi.n	8004ccc <UART_SetConfig+0x290>
 8004c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca0:	d00b      	beq.n	8004cba <UART_SetConfig+0x27e>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca6:	d811      	bhi.n	8004ccc <UART_SetConfig+0x290>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <UART_SetConfig+0x278>
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb0:	d006      	beq.n	8004cc0 <UART_SetConfig+0x284>
 8004cb2:	e00b      	b.n	8004ccc <UART_SetConfig+0x290>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	e00d      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	76fb      	strb	r3, [r7, #27]
 8004cbe:	e00a      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	e007      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	76fb      	strb	r3, [r7, #27]
 8004cca:	e004      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	76fb      	strb	r3, [r7, #27]
 8004cd0:	e001      	b.n	8004cd6 <UART_SetConfig+0x29a>
 8004cd2:	2310      	movs	r3, #16
 8004cd4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <UART_SetConfig+0x2f4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	f040 809f 	bne.w	8004e20 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ce2:	7efb      	ldrb	r3, [r7, #27]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d837      	bhi.n	8004d58 <UART_SetConfig+0x31c>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x2b4>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d59 	.word	0x08004d59
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d59 	.word	0x08004d59
 8004d00:	08004d23 	.word	0x08004d23
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004d59 	.word	0x08004d59
 8004d0c:	08004d59 	.word	0x08004d59
 8004d10:	08004d51 	.word	0x08004d51
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe fc7e 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8004d18:	6178      	str	r0, [r7, #20]
        break;
 8004d1a:	e022      	b.n	8004d62 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <UART_SetConfig+0x310>)
 8004d1e:	617b      	str	r3, [r7, #20]
        break;
 8004d20:	e01f      	b.n	8004d62 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fe fc09 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8004d26:	6178      	str	r0, [r7, #20]
        break;
 8004d28:	e01b      	b.n	8004d62 <UART_SetConfig+0x326>
 8004d2a:	bf00      	nop
 8004d2c:	cfff69f3 	.word	0xcfff69f3
 8004d30:	40008000 	.word	0x40008000
 8004d34:	40013800 	.word	0x40013800
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40004400 	.word	0x40004400
 8004d40:	40004800 	.word	0x40004800
 8004d44:	40004c00 	.word	0x40004c00
 8004d48:	40005000 	.word	0x40005000
 8004d4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d54:	617b      	str	r3, [r7, #20]
        break;
 8004d56:	e004      	b.n	8004d62 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	76bb      	strb	r3, [r7, #26]
        break;
 8004d60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 811b 	beq.w	8004fa0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	4a96      	ldr	r2, [pc, #600]	; (8004fc8 <UART_SetConfig+0x58c>)
 8004d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d74:	461a      	mov	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d305      	bcc.n	8004d9a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d902      	bls.n	8004da0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	76bb      	strb	r3, [r7, #26]
 8004d9e:	e0ff      	b.n	8004fa0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	4a86      	ldr	r2, [pc, #536]	; (8004fc8 <UART_SetConfig+0x58c>)
 8004dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	f7fb ff1e 	bl	8000bf8 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	020b      	lsls	r3, r1, #8
 8004dce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dd2:	0202      	lsls	r2, r0, #8
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	6849      	ldr	r1, [r1, #4]
 8004dd8:	0849      	lsrs	r1, r1, #1
 8004dda:	4608      	mov	r0, r1
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	1814      	adds	r4, r2, r0
 8004de2:	eb43 0501 	adc.w	r5, r3, r1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb ff00 	bl	8000bf8 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e06:	d308      	bcc.n	8004e1a <UART_SetConfig+0x3de>
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0e:	d204      	bcs.n	8004e1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e0c2      	b.n	8004fa0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	76bb      	strb	r3, [r7, #26]
 8004e1e:	e0bf      	b.n	8004fa0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e28:	d165      	bne.n	8004ef6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8004e2a:	7efb      	ldrb	r3, [r7, #27]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d828      	bhi.n	8004e82 <UART_SetConfig+0x446>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x3fc>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fe fbda 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8004e60:	6178      	str	r0, [r7, #20]
        break;
 8004e62:	e013      	b.n	8004e8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fe fbec 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8004e68:	6178      	str	r0, [r7, #20]
        break;
 8004e6a:	e00f      	b.n	8004e8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <UART_SetConfig+0x590>)
 8004e6e:	617b      	str	r3, [r7, #20]
        break;
 8004e70:	e00c      	b.n	8004e8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fe fb61 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8004e76:	6178      	str	r0, [r7, #20]
        break;
 8004e78:	e008      	b.n	8004e8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7e:	617b      	str	r3, [r7, #20]
        break;
 8004e80:	e004      	b.n	8004e8c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	76bb      	strb	r3, [r7, #26]
        break;
 8004e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8086 	beq.w	8004fa0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <UART_SetConfig+0x58c>)
 8004e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea6:	005a      	lsls	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	d916      	bls.n	8004ef0 <UART_SetConfig+0x4b4>
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec8:	d212      	bcs.n	8004ef0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f023 030f 	bic.w	r3, r3, #15
 8004ed2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	89fa      	ldrh	r2, [r7, #14]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e057      	b.n	8004fa0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	76bb      	strb	r3, [r7, #26]
 8004ef4:	e054      	b.n	8004fa0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef6:	7efb      	ldrb	r3, [r7, #27]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d828      	bhi.n	8004f4e <UART_SetConfig+0x512>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0x4c8>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f39 	.word	0x08004f39
 8004f10:	08004f4f 	.word	0x08004f4f
 8004f14:	08004f3f 	.word	0x08004f3f
 8004f18:	08004f4f 	.word	0x08004f4f
 8004f1c:	08004f4f 	.word	0x08004f4f
 8004f20:	08004f4f 	.word	0x08004f4f
 8004f24:	08004f47 	.word	0x08004f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7fe fb74 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	6178      	str	r0, [r7, #20]
        break;
 8004f2e:	e013      	b.n	8004f58 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f30:	f7fe fb86 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8004f34:	6178      	str	r0, [r7, #20]
        break;
 8004f36:	e00f      	b.n	8004f58 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f38:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <UART_SetConfig+0x590>)
 8004f3a:	617b      	str	r3, [r7, #20]
        break;
 8004f3c:	e00c      	b.n	8004f58 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3e:	f7fe fafb 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8004f42:	6178      	str	r0, [r7, #20]
        break;
 8004f44:	e008      	b.n	8004f58 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4a:	617b      	str	r3, [r7, #20]
        break;
 8004f4c:	e004      	b.n	8004f58 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	76bb      	strb	r3, [r7, #26]
        break;
 8004f56:	bf00      	nop
    }

    if (pclk != 0U)
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d020      	beq.n	8004fa0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <UART_SetConfig+0x58c>)
 8004f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d908      	bls.n	8004f9c <UART_SetConfig+0x560>
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f90:	d204      	bcs.n	8004f9c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	60da      	str	r2, [r3, #12]
 8004f9a:	e001      	b.n	8004fa0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004fbc:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	0800b174 	.word	0x0800b174
 8004fcc:	00f42400 	.word	0x00f42400

08004fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ce:	d10a      	bne.n	80050e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af02      	add	r7, sp, #8
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005124:	f7fc fca6 	bl	8001a74 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b08      	cmp	r3, #8
 8005136:	d10e      	bne.n	8005156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f82f 	bl	80051aa <UART_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e025      	b.n	80051a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b04      	cmp	r3, #4
 8005162:	d10e      	bne.n	8005182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f819 	bl	80051aa <UART_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00f      	b.n	80051a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ba:	e062      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d05e      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c4:	f7fc fc56 	bl	8001a74 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d302      	bcc.n	80051da <UART_WaitOnFlagUntilTimeout+0x30>
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11d      	bne.n	8005216 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e045      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02e      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005232:	d126      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800523c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800524c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e00f      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	429a      	cmp	r2, r3
 800529e:	d08d      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d107      	bne.n	80052ee <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0210 	bic.w	r2, r2, #16
 80052ec:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff fb6f 	bl	8004a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005348:	2b21      	cmp	r3, #33	; 0x21
 800534a:	d12a      	bne.n	80053a2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d110      	bne.n	800537a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005366:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005376:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005378:	e013      	b.n	80053a2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537e:	781a      	ldrb	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	2b21      	cmp	r3, #33	; 0x21
 80053be:	d12f      	bne.n	8005420 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d110      	bne.n	80053ee <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053da:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ea:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80053ec:	e018      	b.n	8005420 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005402:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543a:	2b21      	cmp	r3, #33	; 0x21
 800543c:	d13d      	bne.n	80054ba <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005444:	81fb      	strh	r3, [r7, #14]
 8005446:	e035      	b.n	80054b4 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d111      	bne.n	8005478 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005462:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005472:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8005474:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8005476:	e020      	b.n	80054ba <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	81fb      	strh	r3, [r7, #14]
 80054b4:	89fb      	ldrh	r3, [r7, #14]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1c6      	bne.n	8005448 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d4:	2b21      	cmp	r3, #33	; 0x21
 80054d6:	d142      	bne.n	800555e <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054de:	81fb      	strh	r3, [r7, #14]
 80054e0:	e03a      	b.n	8005558 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d111      	bne.n	8005512 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80054fc:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800550e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8005510:	e025      	b.n	800555e <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	2b00      	cmp	r3, #0
 800551e:	d018      	beq.n	8005552 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005534:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	1c9a      	adds	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005552:	89fb      	ldrh	r3, [r7, #14]
 8005554:	3b01      	subs	r3, #1
 8005556:	81fb      	strh	r3, [r7, #14]
 8005558:	89fb      	ldrh	r3, [r7, #14]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1c1      	bne.n	80054e2 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005580:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fa33 	bl	80049fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e027      	b.n	8005640 <HAL_UARTEx_DisableFifoMode+0x66>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800561e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005660:	2302      	movs	r3, #2
 8005662:	e02d      	b.n	80056c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f84f 	bl	8005744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056dc:	2302      	movs	r3, #2
 80056de:	e02d      	b.n	800573c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	; 0x24
 80056ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f811 	bl	8005744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005750:	2b00      	cmp	r3, #0
 8005752:	d108      	bne.n	8005766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005764:	e031      	b.n	80057ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005766:	2308      	movs	r3, #8
 8005768:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800576a:	2308      	movs	r3, #8
 800576c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	0e5b      	lsrs	r3, r3, #25
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	0f5b      	lsrs	r3, r3, #29
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	7b3a      	ldrb	r2, [r7, #12]
 8005792:	4911      	ldr	r1, [pc, #68]	; (80057d8 <UARTEx_SetNbDataToProcess+0x94>)
 8005794:	5c8a      	ldrb	r2, [r1, r2]
 8005796:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800579a:	7b3a      	ldrb	r2, [r7, #12]
 800579c:	490f      	ldr	r1, [pc, #60]	; (80057dc <UARTEx_SetNbDataToProcess+0x98>)
 800579e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	7b7a      	ldrb	r2, [r7, #13]
 80057b0:	4909      	ldr	r1, [pc, #36]	; (80057d8 <UARTEx_SetNbDataToProcess+0x94>)
 80057b2:	5c8a      	ldrb	r2, [r1, r2]
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057b8:	7b7a      	ldrb	r2, [r7, #13]
 80057ba:	4908      	ldr	r1, [pc, #32]	; (80057dc <UARTEx_SetNbDataToProcess+0x98>)
 80057bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057be:	fb93 f3f2 	sdiv	r3, r3, r2
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	0800b18c 	.word	0x0800b18c
 80057dc:	0800b194 	.word	0x0800b194

080057e0 <__NVIC_SetPriority>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	6039      	str	r1, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	db0a      	blt.n	800580a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	490c      	ldr	r1, [pc, #48]	; (800582c <__NVIC_SetPriority+0x4c>)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	0112      	lsls	r2, r2, #4
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	440b      	add	r3, r1
 8005804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005808:	e00a      	b.n	8005820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	4908      	ldr	r1, [pc, #32]	; (8005830 <__NVIC_SetPriority+0x50>)
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	3b04      	subs	r3, #4
 8005818:	0112      	lsls	r2, r2, #4
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	440b      	add	r3, r1
 800581e:	761a      	strb	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	e000e100 	.word	0xe000e100
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <SysTick_Handler+0x1c>)
 800583a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800583c:	f001 fe34 	bl	80074a8 <xTaskGetSchedulerState>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d001      	beq.n	800584a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005846:	f002 fc1f 	bl	8008088 <xPortSysTickHandler>
  }
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	e000e010 	.word	0xe000e010

08005854 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005858:	2100      	movs	r1, #0
 800585a:	f06f 0004 	mvn.w	r0, #4
 800585e:	f7ff ffbf 	bl	80057e0 <__NVIC_SetPriority>
#endif
}
 8005862:	bf00      	nop
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586e:	f3ef 8305 	mrs	r3, IPSR
 8005872:	603b      	str	r3, [r7, #0]
  return(result);
 8005874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800587a:	f06f 0305 	mvn.w	r3, #5
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e00c      	b.n	800589c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <osKernelInitialize+0x44>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d105      	bne.n	8005896 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <osKernelInitialize+0x44>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005890:	2300      	movs	r3, #0
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	e002      	b.n	800589c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800589c:	687b      	ldr	r3, [r7, #4]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000200 	.word	0x20000200

080058b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b6:	f3ef 8305 	mrs	r3, IPSR
 80058ba:	603b      	str	r3, [r7, #0]
  return(result);
 80058bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80058c2:	f06f 0305 	mvn.w	r3, #5
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e010      	b.n	80058ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <osKernelStart+0x48>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d109      	bne.n	80058e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058d2:	f7ff ffbf 	bl	8005854 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <osKernelStart+0x48>)
 80058d8:	2202      	movs	r2, #2
 80058da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058dc:	f001 f988 	bl	8006bf0 <vTaskStartScheduler>
      stat = osOK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e002      	b.n	80058ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058ec:	687b      	ldr	r3, [r7, #4]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000200 	.word	0x20000200

080058fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	; 0x38
 8005900:	af04      	add	r7, sp, #16
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590c:	f3ef 8305 	mrs	r3, IPSR
 8005910:	617b      	str	r3, [r7, #20]
  return(result);
 8005912:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005914:	2b00      	cmp	r3, #0
 8005916:	d17e      	bne.n	8005a16 <osThreadNew+0x11a>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d07b      	beq.n	8005a16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005922:	2318      	movs	r3, #24
 8005924:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295
 800592e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d045      	beq.n	80059c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <osThreadNew+0x48>
        name = attr->name;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <osThreadNew+0x6e>
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b38      	cmp	r3, #56	; 0x38
 800595c:	d805      	bhi.n	800596a <osThreadNew+0x6e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <osThreadNew+0x72>
        return (NULL);
 800596a:	2300      	movs	r3, #0
 800596c:	e054      	b.n	8005a18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	089b      	lsrs	r3, r3, #2
 800597c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <osThreadNew+0xa8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2bbb      	cmp	r3, #187	; 0xbb
 800598c:	d90a      	bls.n	80059a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005992:	2b00      	cmp	r3, #0
 8005994:	d006      	beq.n	80059a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <osThreadNew+0xa8>
        mem = 1;
 800599e:	2301      	movs	r3, #1
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	e010      	b.n	80059c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10c      	bne.n	80059c6 <osThreadNew+0xca>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d108      	bne.n	80059c6 <osThreadNew+0xca>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <osThreadNew+0xca>
          mem = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e001      	b.n	80059c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d110      	bne.n	80059ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059d4:	9202      	str	r2, [sp, #8]
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6a3a      	ldr	r2, [r7, #32]
 80059e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 ff18 	bl	8006818 <xTaskCreateStatic>
 80059e8:	4603      	mov	r3, r0
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	e013      	b.n	8005a16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d110      	bne.n	8005a16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	f107 0310 	add.w	r3, r7, #16
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 ff63 	bl	80068d2 <xTaskCreate>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d001      	beq.n	8005a16 <osThreadNew+0x11a>
            hTask = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a16:	693b      	ldr	r3, [r7, #16]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3728      	adds	r7, #40	; 0x28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a28:	f3ef 8305 	mrs	r3, IPSR
 8005a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <osDelay+0x1c>
    stat = osErrorISR;
 8005a34:	f06f 0305 	mvn.w	r3, #5
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e007      	b.n	8005a4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 f89e 	bl	8006b88 <vTaskDelay>
    }
  }

  return (stat);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b08a      	sub	sp, #40	; 0x28
 8005a5a:	af02      	add	r7, sp, #8
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a66:	f3ef 8305 	mrs	r3, IPSR
 8005a6a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d15f      	bne.n	8005b32 <osMessageQueueNew+0xdc>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d05c      	beq.n	8005b32 <osMessageQueueNew+0xdc>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d059      	beq.n	8005b32 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d029      	beq.n	8005ade <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d012      	beq.n	8005ab8 <osMessageQueueNew+0x62>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b4f      	cmp	r3, #79	; 0x4f
 8005a98:	d90e      	bls.n	8005ab8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	fb01 f303 	mul.w	r3, r1, r3
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <osMessageQueueNew+0x62>
        mem = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e014      	b.n	8005ae2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d110      	bne.n	8005ae2 <osMessageQueueNew+0x8c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10c      	bne.n	8005ae2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <osMessageQueueNew+0x8c>
          mem = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e001      	b.n	8005ae2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d10b      	bne.n	8005b00 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2100      	movs	r1, #0
 8005af2:	9100      	str	r1, [sp, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f9d0 	bl	8005e9c <xQueueGenericCreateStatic>
 8005afc:	61f8      	str	r0, [r7, #28]
 8005afe:	e008      	b.n	8005b12 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b06:	2200      	movs	r2, #0
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fa3e 	bl	8005f8c <xQueueGenericCreate>
 8005b10:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e001      	b.n	8005b2a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b2a:	6979      	ldr	r1, [r7, #20]
 8005b2c:	69f8      	ldr	r0, [r7, #28]
 8005b2e:	f000 fe15 	bl	800675c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b32:	69fb      	ldr	r3, [r7, #28]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b54:	f3ef 8305 	mrs	r3, IPSR
 8005b58:	617b      	str	r3, [r7, #20]
  return(result);
 8005b5a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d028      	beq.n	8005bb2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <osMessageQueuePut+0x36>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <osMessageQueuePut+0x36>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b72:	f06f 0303 	mvn.w	r3, #3
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	e038      	b.n	8005bec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b7e:	f107 0210 	add.w	r2, r7, #16
 8005b82:	2300      	movs	r3, #0
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	69b8      	ldr	r0, [r7, #24]
 8005b88:	f000 fb5c 	bl	8006244 <xQueueGenericSendFromISR>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d003      	beq.n	8005b9a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b92:	f06f 0302 	mvn.w	r3, #2
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e028      	b.n	8005bec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d025      	beq.n	8005bec <osMessageQueuePut+0xb0>
 8005ba0:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <osMessageQueuePut+0xbc>)
 8005ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	e01c      	b.n	8005bec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <osMessageQueuePut+0x82>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005bbe:	f06f 0303 	mvn.w	r3, #3
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e012      	b.n	8005bec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	69b8      	ldr	r0, [r7, #24]
 8005bce:	f000 fa3b 	bl	8006048 <xQueueGenericSend>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d009      	beq.n	8005bec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005bde:	f06f 0301 	mvn.w	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e002      	b.n	8005bec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005be6:	f06f 0302 	mvn.w	r3, #2
 8005bea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005bec:	69fb      	ldr	r3, [r7, #28]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a07      	ldr	r2, [pc, #28]	; (8005c28 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <vApplicationGetIdleTaskMemory+0x30>)
 8005c12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	601a      	str	r2, [r3, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000204 	.word	0x20000204
 8005c2c:	200002c0 	.word	0x200002c0

08005c30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <vApplicationGetTimerTaskMemory+0x2c>)
 8005c40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a06      	ldr	r2, [pc, #24]	; (8005c60 <vApplicationGetTimerTaskMemory+0x30>)
 8005c46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c4e:	601a      	str	r2, [r3, #0]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	200004c0 	.word	0x200004c0
 8005c60:	2000057c 	.word	0x2000057c

08005c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f103 0208 	add.w	r2, r3, #8
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f103 0208 	add.w	r2, r3, #8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f103 0208 	add.w	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d103      	bne.n	8005d26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e00c      	b.n	8005d40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e002      	b.n	8005d34 <vListInsert+0x2e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d2f6      	bcs.n	8005d2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6852      	ldr	r2, [r2, #4]
 8005d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d103      	bne.n	8005dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005df6:	f002 f8b5 	bl	8007f64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	68f9      	ldr	r1, [r7, #12]
 8005e04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	441a      	add	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	3b01      	subs	r3, #1
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	22ff      	movs	r2, #255	; 0xff
 8005e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	22ff      	movs	r2, #255	; 0xff
 8005e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d114      	bne.n	8005e76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3310      	adds	r3, #16
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 f963 	bl	8007124 <xTaskRemoveFromEventList>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d012      	beq.n	8005e8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <xQueueGenericReset+0xcc>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	e009      	b.n	8005e8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3310      	adds	r3, #16
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fef2 	bl	8005c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3324      	adds	r3, #36	; 0x24
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff feed 	bl	8005c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e8a:	f002 f89b 	bl	8007fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e8e:	2301      	movs	r3, #1
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <xQueueGenericCreateStatic+0x52>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <xQueueGenericCreateStatic+0x56>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueGenericCreateStatic+0x58>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	623b      	str	r3, [r7, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <xQueueGenericCreateStatic+0x7e>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <xQueueGenericCreateStatic+0x82>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <xQueueGenericCreateStatic+0x84>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61fb      	str	r3, [r7, #28]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f3a:	2350      	movs	r3, #80	; 0x50
 8005f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b50      	cmp	r3, #80	; 0x50
 8005f42:	d00a      	beq.n	8005f5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61bb      	str	r3, [r7, #24]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00d      	beq.n	8005f82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4613      	mov	r3, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f83f 	bl	8006000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3730      	adds	r7, #48	; 0x30
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	; 0x28
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	613b      	str	r3, [r7, #16]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3350      	adds	r3, #80	; 0x50
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f002 f8ef 	bl	80081a8 <pvPortMalloc>
 8005fca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	3350      	adds	r3, #80	; 0x50
 8005fda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fe4:	79fa      	ldrb	r2, [r7, #7]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f805 	bl	8006000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3720      	adds	r7, #32
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e002      	b.n	8006022 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800602e:	2101      	movs	r1, #1
 8006030:	69b8      	ldr	r0, [r7, #24]
 8006032:	f7ff fecb 	bl	8005dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	78fa      	ldrb	r2, [r7, #3]
 800603a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	; 0x38
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006056:	2300      	movs	r3, #0
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xQueueGenericSend+0x32>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <xQueueGenericSend+0x40>
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <xQueueGenericSend+0x44>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <xQueueGenericSend+0x46>
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <xQueueGenericSend+0x60>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d103      	bne.n	80060b6 <xQueueGenericSend+0x6e>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <xQueueGenericSend+0x72>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericSend+0x74>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	623b      	str	r3, [r7, #32]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060d6:	f001 f9e7 	bl	80074a8 <xTaskGetSchedulerState>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <xQueueGenericSend+0x9e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <xQueueGenericSend+0xa2>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <xQueueGenericSend+0xa4>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xQueueGenericSend+0xbe>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	61fb      	str	r3, [r7, #28]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006106:	f001 ff2d 	bl	8007f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <xQueueGenericSend+0xd4>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d129      	bne.n	8006170 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006122:	f000 fa0b 	bl	800653c <prvCopyDataToQueue>
 8006126:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b00      	cmp	r3, #0
 800612e:	d010      	beq.n	8006152 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	3324      	adds	r3, #36	; 0x24
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fff5 	bl	8007124 <xTaskRemoveFromEventList>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d013      	beq.n	8006168 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006140:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <xQueueGenericSend+0x1f8>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	e00a      	b.n	8006168 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006158:	4b39      	ldr	r3, [pc, #228]	; (8006240 <xQueueGenericSend+0x1f8>)
 800615a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006168:	f001 ff2c 	bl	8007fc4 <vPortExitCritical>
				return pdPASS;
 800616c:	2301      	movs	r3, #1
 800616e:	e063      	b.n	8006238 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d103      	bne.n	800617e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006176:	f001 ff25 	bl	8007fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800617a:	2300      	movs	r3, #0
 800617c:	e05c      	b.n	8006238 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006184:	f107 0314 	add.w	r3, r7, #20
 8006188:	4618      	mov	r0, r3
 800618a:	f001 f82f 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800618e:	2301      	movs	r3, #1
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006192:	f001 ff17 	bl	8007fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006196:	f000 fd9b 	bl	8006cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800619a:	f001 fee3 	bl	8007f64 <vPortEnterCritical>
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d103      	bne.n	80061b4 <xQueueGenericSend+0x16c>
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d103      	bne.n	80061ca <xQueueGenericSend+0x182>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ca:	f001 fefb 	bl	8007fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ce:	1d3a      	adds	r2, r7, #4
 80061d0:	f107 0314 	add.w	r3, r7, #20
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f81e 	bl	8007218 <xTaskCheckForTimeOut>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d124      	bne.n	800622c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e4:	f000 faa2 	bl	800672c <prvIsQueueFull>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d018      	beq.n	8006220 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	3310      	adds	r3, #16
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 ff44 	bl	8007084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061fe:	f000 fa2d 	bl	800665c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006202:	f000 fd73 	bl	8006cec <xTaskResumeAll>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f af7c 	bne.w	8006106 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <xQueueGenericSend+0x1f8>)
 8006210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	e772      	b.n	8006106 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006222:	f000 fa1b 	bl	800665c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006226:	f000 fd61 	bl	8006cec <xTaskResumeAll>
 800622a:	e76c      	b.n	8006106 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800622c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622e:	f000 fa15 	bl	800665c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006232:	f000 fd5b 	bl	8006cec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006236:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006238:	4618      	mov	r0, r3
 800623a:	3738      	adds	r7, #56	; 0x38
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b090      	sub	sp, #64	; 0x40
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <xQueueGenericSendFromISR+0x3c>
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <xQueueGenericSendFromISR+0x40>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <xQueueGenericSendFromISR+0x42>
 8006284:	2300      	movs	r3, #0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d103      	bne.n	80062ae <xQueueGenericSendFromISR+0x6a>
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <xQueueGenericSendFromISR+0x6e>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <xQueueGenericSendFromISR+0x70>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	623b      	str	r3, [r7, #32]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ce:	f001 ff2b 	bl	8008128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062d2:	f3ef 8211 	mrs	r2, BASEPRI
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	61fa      	str	r2, [r7, #28]
 80062e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <xQueueGenericSendFromISR+0xbc>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d12f      	bne.n	8006360 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006316:	f000 f911 	bl	800653c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800631a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d112      	bne.n	800634a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	d016      	beq.n	800635a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	3324      	adds	r3, #36	; 0x24
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fef7 	bl	8007124 <xTaskRemoveFromEventList>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00e      	beq.n	800635a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e007      	b.n	800635a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800634a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800634e:	3301      	adds	r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	b25a      	sxtb	r2, r3
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800635a:	2301      	movs	r3, #1
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800635e:	e001      	b.n	8006364 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006360:	2300      	movs	r3, #0
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800636e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006372:	4618      	mov	r0, r3
 8006374:	3740      	adds	r7, #64	; 0x40
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08c      	sub	sp, #48	; 0x30
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006388:	2300      	movs	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <xQueueReceive+0x30>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	623b      	str	r3, [r7, #32]
}
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <xQueueReceive+0x3e>
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <xQueueReceive+0x42>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <xQueueReceive+0x44>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <xQueueReceive+0x5e>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	61fb      	str	r3, [r7, #28]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063da:	f001 f865 	bl	80074a8 <xTaskGetSchedulerState>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <xQueueReceive+0x6e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <xQueueReceive+0x72>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xQueueReceive+0x74>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xQueueReceive+0x8e>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	61bb      	str	r3, [r7, #24]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800640a:	f001 fdab 	bl	8007f64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01f      	beq.n	800645a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641e:	f000 f8f7 	bl	8006610 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	1e5a      	subs	r2, r3, #1
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00f      	beq.n	8006452 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	3310      	adds	r3, #16
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fe74 	bl	8007124 <xTaskRemoveFromEventList>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006442:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <xQueueReceive+0x1bc>)
 8006444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006452:	f001 fdb7 	bl	8007fc4 <vPortExitCritical>
				return pdPASS;
 8006456:	2301      	movs	r3, #1
 8006458:	e069      	b.n	800652e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006460:	f001 fdb0 	bl	8007fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006464:	2300      	movs	r3, #0
 8006466:	e062      	b.n	800652e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646e:	f107 0310 	add.w	r3, r7, #16
 8006472:	4618      	mov	r0, r3
 8006474:	f000 feba 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800647c:	f001 fda2 	bl	8007fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006480:	f000 fc26 	bl	8006cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006484:	f001 fd6e 	bl	8007f64 <vPortEnterCritical>
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800648e:	b25b      	sxtb	r3, r3
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d103      	bne.n	800649e <xQueueReceive+0x122>
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064aa:	d103      	bne.n	80064b4 <xQueueReceive+0x138>
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b4:	f001 fd86 	bl	8007fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b8:	1d3a      	adds	r2, r7, #4
 80064ba:	f107 0310 	add.w	r3, r7, #16
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fea9 	bl	8007218 <xTaskCheckForTimeOut>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d123      	bne.n	8006514 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ce:	f000 f917 	bl	8006700 <prvIsQueueEmpty>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d017      	beq.n	8006508 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	3324      	adds	r3, #36	; 0x24
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fdcf 	bl	8007084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e8:	f000 f8b8 	bl	800665c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064ec:	f000 fbfe 	bl	8006cec <xTaskResumeAll>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d189      	bne.n	800640a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80064f6:	4b10      	ldr	r3, [pc, #64]	; (8006538 <xQueueReceive+0x1bc>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	e780      	b.n	800640a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650a:	f000 f8a7 	bl	800665c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800650e:	f000 fbed 	bl	8006cec <xTaskResumeAll>
 8006512:	e77a      	b.n	800640a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006516:	f000 f8a1 	bl	800665c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800651a:	f000 fbe7 	bl	8006cec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800651e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006520:	f000 f8ee 	bl	8006700 <prvIsQueueEmpty>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	f43f af6f 	beq.w	800640a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800652c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800652e:	4618      	mov	r0, r3
 8006530:	3730      	adds	r7, #48	; 0x30
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10d      	bne.n	8006576 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d14d      	bne.n	80065fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 ffbc 	bl	80074e4 <xTaskPriorityDisinherit>
 800656c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	e043      	b.n	80065fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d119      	bne.n	80065b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6858      	ldr	r0, [r3, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	461a      	mov	r2, r3
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	f002 f91b 	bl	80087c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	441a      	add	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d32b      	bcc.n	80065fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	605a      	str	r2, [r3, #4]
 80065ae:	e026      	b.n	80065fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68d8      	ldr	r0, [r3, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	461a      	mov	r2, r3
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	f002 f901 	bl	80087c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	425b      	negs	r3, r3
 80065ca:	441a      	add	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d207      	bcs.n	80065ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	425b      	negs	r3, r3
 80065e6:	441a      	add	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d105      	bne.n	80065fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006606:	697b      	ldr	r3, [r7, #20]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d018      	beq.n	8006654 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	441a      	add	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d303      	bcc.n	8006644 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68d9      	ldr	r1, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	461a      	mov	r2, r3
 800664e:	6838      	ldr	r0, [r7, #0]
 8006650:	f002 f8b7 	bl	80087c2 <memcpy>
	}
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006664:	f001 fc7e 	bl	8007f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800666e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006670:	e011      	b.n	8006696 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d012      	beq.n	80066a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3324      	adds	r3, #36	; 0x24
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fd50 	bl	8007124 <xTaskRemoveFromEventList>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800668a:	f000 fe27 	bl	80072dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	3b01      	subs	r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	dce9      	bgt.n	8006672 <prvUnlockQueue+0x16>
 800669e:	e000      	b.n	80066a2 <prvUnlockQueue+0x46>
					break;
 80066a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	22ff      	movs	r2, #255	; 0xff
 80066a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066aa:	f001 fc8b 	bl	8007fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066ae:	f001 fc59 	bl	8007f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066ba:	e011      	b.n	80066e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d012      	beq.n	80066ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3310      	adds	r3, #16
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fd2b 	bl	8007124 <xTaskRemoveFromEventList>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066d4:	f000 fe02 	bl	80072dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	3b01      	subs	r3, #1
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dce9      	bgt.n	80066bc <prvUnlockQueue+0x60>
 80066e8:	e000      	b.n	80066ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	22ff      	movs	r2, #255	; 0xff
 80066f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066f4:	f001 fc66 	bl	8007fc4 <vPortExitCritical>
}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006708:	f001 fc2c 	bl	8007f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006714:	2301      	movs	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e001      	b.n	800671e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800671e:	f001 fc51 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 8006722:	68fb      	ldr	r3, [r7, #12]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006734:	f001 fc16 	bl	8007f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006740:	429a      	cmp	r2, r3
 8006742:	d102      	bne.n	800674a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006744:	2301      	movs	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e001      	b.n	800674e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800674e:	f001 fc39 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e014      	b.n	8006796 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800676c:	4a0f      	ldr	r2, [pc, #60]	; (80067ac <vQueueAddToRegistry+0x50>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006778:	490c      	ldr	r1, [pc, #48]	; (80067ac <vQueueAddToRegistry+0x50>)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006782:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <vQueueAddToRegistry+0x50>)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	4413      	add	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800678e:	e006      	b.n	800679e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b07      	cmp	r3, #7
 800679a:	d9e7      	bls.n	800676c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	20001d60 	.word	0x20001d60

080067b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067c0:	f001 fbd0 	bl	8007f64 <vPortEnterCritical>
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d103      	bne.n	80067da <vQueueWaitForMessageRestricted+0x2a>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e0:	b25b      	sxtb	r3, r3
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d103      	bne.n	80067f0 <vQueueWaitForMessageRestricted+0x40>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f0:	f001 fbe8 	bl	8007fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	3324      	adds	r3, #36	; 0x24
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fc61 	bl	80070cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800680a:	6978      	ldr	r0, [r7, #20]
 800680c:	f7ff ff26 	bl	800665c <prvUnlockQueue>
	}
 8006810:	bf00      	nop
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af04      	add	r7, sp, #16
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xTaskCreateStatic+0x2a>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	623b      	str	r3, [r7, #32]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xTaskCreateStatic+0x46>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	61fb      	str	r3, [r7, #28]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800685e:	23bc      	movs	r3, #188	; 0xbc
 8006860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2bbc      	cmp	r3, #188	; 0xbc
 8006866:	d00a      	beq.n	800687e <xTaskCreateStatic+0x66>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	61bb      	str	r3, [r7, #24]
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800687e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01e      	beq.n	80068c4 <xTaskCreateStatic+0xac>
 8006886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006894:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	2202      	movs	r2, #2
 800689a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800689e:	2300      	movs	r3, #0
 80068a0:	9303      	str	r3, [sp, #12]
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	9302      	str	r3, [sp, #8]
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f850 	bl	800695c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068be:	f000 f8f3 	bl	8006aa8 <prvAddNewTaskToReadyList>
 80068c2:	e001      	b.n	80068c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068c8:	697b      	ldr	r3, [r7, #20]
	}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3728      	adds	r7, #40	; 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b08c      	sub	sp, #48	; 0x30
 80068d6:	af04      	add	r7, sp, #16
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	603b      	str	r3, [r7, #0]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fc5e 	bl	80081a8 <pvPortMalloc>
 80068ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068f4:	20bc      	movs	r0, #188	; 0xbc
 80068f6:	f001 fc57 	bl	80081a8 <pvPortMalloc>
 80068fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
 8006908:	e005      	b.n	8006916 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800690a:	6978      	ldr	r0, [r7, #20]
 800690c:	f001 fd18 	bl	8008340 <vPortFree>
 8006910:	e001      	b.n	8006916 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d017      	beq.n	800694c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	2300      	movs	r3, #0
 8006928:	9303      	str	r3, [sp, #12]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	9302      	str	r3, [sp, #8]
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f80e 	bl	800695c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006940:	69f8      	ldr	r0, [r7, #28]
 8006942:	f000 f8b1 	bl	8006aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006946:	2301      	movs	r3, #1
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	e002      	b.n	8006952 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800694c:	f04f 33ff 	mov.w	r3, #4294967295
 8006950:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006952:	69bb      	ldr	r3, [r7, #24]
	}
 8006954:	4618      	mov	r0, r3
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	461a      	mov	r2, r3
 8006974:	21a5      	movs	r1, #165	; 0xa5
 8006976:	f001 ff32 	bl	80087de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006984:	3b01      	subs	r3, #1
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f023 0307 	bic.w	r3, r3, #7
 8006992:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	617b      	str	r3, [r7, #20]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d01f      	beq.n	80069fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ba:	2300      	movs	r3, #0
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	e012      	b.n	80069e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	7819      	ldrb	r1, [r3, #0]
 80069c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	3334      	adds	r3, #52	; 0x34
 80069d0:	460a      	mov	r2, r1
 80069d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d006      	beq.n	80069ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b0f      	cmp	r3, #15
 80069ea:	d9e9      	bls.n	80069c0 <prvInitialiseNewTask+0x64>
 80069ec:	e000      	b.n	80069f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80069ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069f8:	e003      	b.n	8006a02 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	2b37      	cmp	r3, #55	; 0x37
 8006a06:	d901      	bls.n	8006a0c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a08:	2337      	movs	r3, #55	; 0x37
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff f93e 	bl	8005ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff f939 	bl	8005ca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	3354      	adds	r3, #84	; 0x54
 8006a5c:	2260      	movs	r2, #96	; 0x60
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 febc 	bl	80087de <memset>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	4a0c      	ldr	r2, [pc, #48]	; (8006a9c <prvInitialiseNewTask+0x140>)
 8006a6a:	659a      	str	r2, [r3, #88]	; 0x58
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <prvInitialiseNewTask+0x144>)
 8006a70:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <prvInitialiseNewTask+0x148>)
 8006a76:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	69b8      	ldr	r0, [r7, #24]
 8006a7e:	f001 f941 	bl	8007d04 <pxPortInitialiseStack>
 8006a82:	4602      	mov	r2, r0
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a94:	bf00      	nop
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	0800b1bc 	.word	0x0800b1bc
 8006aa0:	0800b1dc 	.word	0x0800b1dc
 8006aa4:	0800b19c 	.word	0x0800b19c

08006aa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ab0:	f001 fa58 	bl	8007f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ab4:	4b2d      	ldr	r3, [pc, #180]	; (8006b6c <prvAddNewTaskToReadyList+0xc4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <prvAddNewTaskToReadyList+0xc4>)
 8006abc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006abe:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <prvAddNewTaskToReadyList+0xc8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ac6:	4a2a      	ldr	r2, [pc, #168]	; (8006b70 <prvAddNewTaskToReadyList+0xc8>)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006acc:	4b27      	ldr	r3, [pc, #156]	; (8006b6c <prvAddNewTaskToReadyList+0xc4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d110      	bne.n	8006af6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ad4:	f000 fc26 	bl	8007324 <prvInitialiseTaskLists>
 8006ad8:	e00d      	b.n	8006af6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ada:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <prvAddNewTaskToReadyList+0xcc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ae2:	4b23      	ldr	r3, [pc, #140]	; (8006b70 <prvAddNewTaskToReadyList+0xc8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d802      	bhi.n	8006af6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006af0:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <prvAddNewTaskToReadyList+0xc8>)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006af6:	4b20      	ldr	r3, [pc, #128]	; (8006b78 <prvAddNewTaskToReadyList+0xd0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <prvAddNewTaskToReadyList+0xd0>)
 8006afe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b00:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <prvAddNewTaskToReadyList+0xd0>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <prvAddNewTaskToReadyList+0xd4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d903      	bls.n	8006b1c <prvAddNewTaskToReadyList+0x74>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <prvAddNewTaskToReadyList+0xd4>)
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <prvAddNewTaskToReadyList+0xd8>)
 8006b2a:	441a      	add	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7ff f8c3 	bl	8005cbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b38:	f001 fa44 	bl	8007fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <prvAddNewTaskToReadyList+0xcc>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00e      	beq.n	8006b62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <prvAddNewTaskToReadyList+0xc8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d207      	bcs.n	8006b62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b52:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <prvAddNewTaskToReadyList+0xdc>)
 8006b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000e50 	.word	0x20000e50
 8006b70:	2000097c 	.word	0x2000097c
 8006b74:	20000e5c 	.word	0x20000e5c
 8006b78:	20000e6c 	.word	0x20000e6c
 8006b7c:	20000e58 	.word	0x20000e58
 8006b80:	20000980 	.word	0x20000980
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d017      	beq.n	8006bca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b9a:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <vTaskDelay+0x60>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <vTaskDelay+0x30>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60bb      	str	r3, [r7, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bb8:	f000 f88a 	bl	8006cd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fcfe 	bl	80075c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bc4:	f000 f892 	bl	8006cec <xTaskResumeAll>
 8006bc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d107      	bne.n	8006be0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006bd0:	4b06      	ldr	r3, [pc, #24]	; (8006bec <vTaskDelay+0x64>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000e78 	.word	0x20000e78
 8006bec:	e000ed04 	.word	0xe000ed04

08006bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	; 0x28
 8006bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bfe:	463a      	mov	r2, r7
 8006c00:	1d39      	adds	r1, r7, #4
 8006c02:	f107 0308 	add.w	r3, r7, #8
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe fff8 	bl	8005bfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	9202      	str	r2, [sp, #8]
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	460a      	mov	r2, r1
 8006c1e:	4924      	ldr	r1, [pc, #144]	; (8006cb0 <vTaskStartScheduler+0xc0>)
 8006c20:	4824      	ldr	r0, [pc, #144]	; (8006cb4 <vTaskStartScheduler+0xc4>)
 8006c22:	f7ff fdf9 	bl	8006818 <xTaskCreateStatic>
 8006c26:	4603      	mov	r3, r0
 8006c28:	4a23      	ldr	r2, [pc, #140]	; (8006cb8 <vTaskStartScheduler+0xc8>)
 8006c2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c2c:	4b22      	ldr	r3, [pc, #136]	; (8006cb8 <vTaskStartScheduler+0xc8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c34:	2301      	movs	r3, #1
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e001      	b.n	8006c3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d102      	bne.n	8006c4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c44:	f000 fd10 	bl	8007668 <xTimerCreateTimerTask>
 8006c48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d11b      	bne.n	8006c88 <vTaskStartScheduler+0x98>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	613b      	str	r3, [r7, #16]
}
 8006c62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c64:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <vTaskStartScheduler+0xcc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3354      	adds	r3, #84	; 0x54
 8006c6a:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <vTaskStartScheduler+0xd0>)
 8006c6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c6e:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <vTaskStartScheduler+0xd4>)
 8006c70:	f04f 32ff 	mov.w	r2, #4294967295
 8006c74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <vTaskStartScheduler+0xd8>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c7c:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <vTaskStartScheduler+0xdc>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c82:	f001 f8cd 	bl	8007e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c86:	e00e      	b.n	8006ca6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d10a      	bne.n	8006ca6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <vTaskStartScheduler+0xb4>
}
 8006ca6:	bf00      	nop
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	0800b0c0 	.word	0x0800b0c0
 8006cb4:	080072f5 	.word	0x080072f5
 8006cb8:	20000e74 	.word	0x20000e74
 8006cbc:	2000097c 	.word	0x2000097c
 8006cc0:	20000010 	.word	0x20000010
 8006cc4:	20000e70 	.word	0x20000e70
 8006cc8:	20000e5c 	.word	0x20000e5c
 8006ccc:	20000e54 	.word	0x20000e54

08006cd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cd4:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <vTaskSuspendAll+0x18>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	4a03      	ldr	r2, [pc, #12]	; (8006ce8 <vTaskSuspendAll+0x18>)
 8006cdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cde:	bf00      	nop
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000e78 	.word	0x20000e78

08006cec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cfa:	4b42      	ldr	r3, [pc, #264]	; (8006e04 <xTaskResumeAll+0x118>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	603b      	str	r3, [r7, #0]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d18:	f001 f924 	bl	8007f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d1c:	4b39      	ldr	r3, [pc, #228]	; (8006e04 <xTaskResumeAll+0x118>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	4a38      	ldr	r2, [pc, #224]	; (8006e04 <xTaskResumeAll+0x118>)
 8006d24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d26:	4b37      	ldr	r3, [pc, #220]	; (8006e04 <xTaskResumeAll+0x118>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d162      	bne.n	8006df4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d2e:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <xTaskResumeAll+0x11c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d05e      	beq.n	8006df4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d36:	e02f      	b.n	8006d98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d38:	4b34      	ldr	r3, [pc, #208]	; (8006e0c <xTaskResumeAll+0x120>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3318      	adds	r3, #24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff f817 	bl	8005d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff f812 	bl	8005d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d58:	4b2d      	ldr	r3, [pc, #180]	; (8006e10 <xTaskResumeAll+0x124>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d903      	bls.n	8006d68 <xTaskResumeAll+0x7c>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	4a2a      	ldr	r2, [pc, #168]	; (8006e10 <xTaskResumeAll+0x124>)
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4a27      	ldr	r2, [pc, #156]	; (8006e14 <xTaskResumeAll+0x128>)
 8006d76:	441a      	add	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f7fe ff9d 	bl	8005cbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d88:	4b23      	ldr	r3, [pc, #140]	; (8006e18 <xTaskResumeAll+0x12c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d302      	bcc.n	8006d98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d92:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <xTaskResumeAll+0x130>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d98:	4b1c      	ldr	r3, [pc, #112]	; (8006e0c <xTaskResumeAll+0x120>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1cb      	bne.n	8006d38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006da6:	f000 fb5f 	bl	8007468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006daa:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <xTaskResumeAll+0x134>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d010      	beq.n	8006dd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006db6:	f000 f847 	bl	8006e48 <xTaskIncrementTick>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006dc0:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <xTaskResumeAll+0x130>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f1      	bne.n	8006db6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <xTaskResumeAll+0x134>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dd8:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <xTaskResumeAll+0x130>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006de0:	2301      	movs	r3, #1
 8006de2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <xTaskResumeAll+0x138>)
 8006de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006df4:	f001 f8e6 	bl	8007fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006df8:	68bb      	ldr	r3, [r7, #8]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000e78 	.word	0x20000e78
 8006e08:	20000e50 	.word	0x20000e50
 8006e0c:	20000e10 	.word	0x20000e10
 8006e10:	20000e58 	.word	0x20000e58
 8006e14:	20000980 	.word	0x20000980
 8006e18:	2000097c 	.word	0x2000097c
 8006e1c:	20000e64 	.word	0x20000e64
 8006e20:	20000e60 	.word	0x20000e60
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e2e:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <xTaskGetTickCount+0x1c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e34:	687b      	ldr	r3, [r7, #4]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20000e54 	.word	0x20000e54

08006e48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e52:	4b4f      	ldr	r3, [pc, #316]	; (8006f90 <xTaskIncrementTick+0x148>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 808f 	bne.w	8006f7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e5c:	4b4d      	ldr	r3, [pc, #308]	; (8006f94 <xTaskIncrementTick+0x14c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e64:	4a4b      	ldr	r2, [pc, #300]	; (8006f94 <xTaskIncrementTick+0x14c>)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d120      	bne.n	8006eb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e70:	4b49      	ldr	r3, [pc, #292]	; (8006f98 <xTaskIncrementTick+0x150>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	603b      	str	r3, [r7, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <xTaskIncrementTick+0x46>
 8006e90:	4b41      	ldr	r3, [pc, #260]	; (8006f98 <xTaskIncrementTick+0x150>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	4b41      	ldr	r3, [pc, #260]	; (8006f9c <xTaskIncrementTick+0x154>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a3f      	ldr	r2, [pc, #252]	; (8006f98 <xTaskIncrementTick+0x150>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	4a3f      	ldr	r2, [pc, #252]	; (8006f9c <xTaskIncrementTick+0x154>)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	4b3e      	ldr	r3, [pc, #248]	; (8006fa0 <xTaskIncrementTick+0x158>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	4a3d      	ldr	r2, [pc, #244]	; (8006fa0 <xTaskIncrementTick+0x158>)
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	f000 fadb 	bl	8007468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eb2:	4b3c      	ldr	r3, [pc, #240]	; (8006fa4 <xTaskIncrementTick+0x15c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d349      	bcc.n	8006f50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ebc:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <xTaskIncrementTick+0x150>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d104      	bne.n	8006ed0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec6:	4b37      	ldr	r3, [pc, #220]	; (8006fa4 <xTaskIncrementTick+0x15c>)
 8006ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ecc:	601a      	str	r2, [r3, #0]
					break;
 8006ece:	e03f      	b.n	8006f50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed0:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <xTaskIncrementTick+0x150>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d203      	bcs.n	8006ef0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ee8:	4a2e      	ldr	r2, [pc, #184]	; (8006fa4 <xTaskIncrementTick+0x15c>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006eee:	e02f      	b.n	8006f50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe ff3f 	bl	8005d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	3318      	adds	r3, #24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe ff36 	bl	8005d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b25      	ldr	r3, [pc, #148]	; (8006fa8 <xTaskIncrementTick+0x160>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d903      	bls.n	8006f20 <xTaskIncrementTick+0xd8>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	4a22      	ldr	r2, [pc, #136]	; (8006fa8 <xTaskIncrementTick+0x160>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <xTaskIncrementTick+0x164>)
 8006f2e:	441a      	add	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe fec1 	bl	8005cbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <xTaskIncrementTick+0x168>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d3b8      	bcc.n	8006ebc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f4e:	e7b5      	b.n	8006ebc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f50:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <xTaskIncrementTick+0x168>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f56:	4915      	ldr	r1, [pc, #84]	; (8006fac <xTaskIncrementTick+0x164>)
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d901      	bls.n	8006f6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f6c:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <xTaskIncrementTick+0x16c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f74:	2301      	movs	r3, #1
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e004      	b.n	8006f84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <xTaskIncrementTick+0x170>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	4a0d      	ldr	r2, [pc, #52]	; (8006fb8 <xTaskIncrementTick+0x170>)
 8006f82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f84:	697b      	ldr	r3, [r7, #20]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000e78 	.word	0x20000e78
 8006f94:	20000e54 	.word	0x20000e54
 8006f98:	20000e08 	.word	0x20000e08
 8006f9c:	20000e0c 	.word	0x20000e0c
 8006fa0:	20000e68 	.word	0x20000e68
 8006fa4:	20000e70 	.word	0x20000e70
 8006fa8:	20000e58 	.word	0x20000e58
 8006fac:	20000980 	.word	0x20000980
 8006fb0:	2000097c 	.word	0x2000097c
 8006fb4:	20000e64 	.word	0x20000e64
 8006fb8:	20000e60 	.word	0x20000e60

08006fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fc2:	4b2a      	ldr	r3, [pc, #168]	; (800706c <vTaskSwitchContext+0xb0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fca:	4b29      	ldr	r3, [pc, #164]	; (8007070 <vTaskSwitchContext+0xb4>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fd0:	e046      	b.n	8007060 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006fd2:	4b27      	ldr	r3, [pc, #156]	; (8007070 <vTaskSwitchContext+0xb4>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd8:	4b26      	ldr	r3, [pc, #152]	; (8007074 <vTaskSwitchContext+0xb8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	e010      	b.n	8007002 <vTaskSwitchContext+0x46>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <vTaskSwitchContext+0x40>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	607b      	str	r3, [r7, #4]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <vTaskSwitchContext+0x3e>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	491d      	ldr	r1, [pc, #116]	; (8007078 <vTaskSwitchContext+0xbc>)
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	440b      	add	r3, r1
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0e4      	beq.n	8006fe0 <vTaskSwitchContext+0x24>
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4a15      	ldr	r2, [pc, #84]	; (8007078 <vTaskSwitchContext+0xbc>)
 8007022:	4413      	add	r3, r2
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	605a      	str	r2, [r3, #4]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3308      	adds	r3, #8
 8007038:	429a      	cmp	r2, r3
 800703a:	d104      	bne.n	8007046 <vTaskSwitchContext+0x8a>
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4a0b      	ldr	r2, [pc, #44]	; (800707c <vTaskSwitchContext+0xc0>)
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	4a08      	ldr	r2, [pc, #32]	; (8007074 <vTaskSwitchContext+0xb8>)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007056:	4b09      	ldr	r3, [pc, #36]	; (800707c <vTaskSwitchContext+0xc0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3354      	adds	r3, #84	; 0x54
 800705c:	4a08      	ldr	r2, [pc, #32]	; (8007080 <vTaskSwitchContext+0xc4>)
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	20000e78 	.word	0x20000e78
 8007070:	20000e64 	.word	0x20000e64
 8007074:	20000e58 	.word	0x20000e58
 8007078:	20000980 	.word	0x20000980
 800707c:	2000097c 	.word	0x2000097c
 8007080:	20000010 	.word	0x20000010

08007084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <vTaskPlaceOnEventList+0x44>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3318      	adds	r3, #24
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fe fe27 	bl	8005d06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070b8:	2101      	movs	r1, #1
 80070ba:	6838      	ldr	r0, [r7, #0]
 80070bc:	f000 fa80 	bl	80075c0 <prvAddCurrentTaskToDelayedList>
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	2000097c 	.word	0x2000097c

080070cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	617b      	str	r3, [r7, #20]
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070f4:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <vTaskPlaceOnEventListRestricted+0x54>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3318      	adds	r3, #24
 80070fa:	4619      	mov	r1, r3
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7fe fdde 	bl	8005cbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007108:	f04f 33ff 	mov.w	r3, #4294967295
 800710c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	68b8      	ldr	r0, [r7, #8]
 8007112:	f000 fa55 	bl	80075c0 <prvAddCurrentTaskToDelayedList>
	}
 8007116:	bf00      	nop
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	2000097c 	.word	0x2000097c

08007124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	60fb      	str	r3, [r7, #12]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	3318      	adds	r3, #24
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe fe0f 	bl	8005d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715a:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <xTaskRemoveFromEventList+0xb0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d11d      	bne.n	800719e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3304      	adds	r3, #4
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fe06 	bl	8005d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	4b19      	ldr	r3, [pc, #100]	; (80071d8 <xTaskRemoveFromEventList+0xb4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d903      	bls.n	8007180 <xTaskRemoveFromEventList+0x5c>
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <xTaskRemoveFromEventList+0xb4>)
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4a13      	ldr	r2, [pc, #76]	; (80071dc <xTaskRemoveFromEventList+0xb8>)
 800718e:	441a      	add	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	3304      	adds	r3, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f7fe fd91 	bl	8005cbe <vListInsertEnd>
 800719c:	e005      	b.n	80071aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3318      	adds	r3, #24
 80071a2:	4619      	mov	r1, r3
 80071a4:	480e      	ldr	r0, [pc, #56]	; (80071e0 <xTaskRemoveFromEventList+0xbc>)
 80071a6:	f7fe fd8a 	bl	8005cbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <xTaskRemoveFromEventList+0xc0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d905      	bls.n	80071c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <xTaskRemoveFromEventList+0xc4>)
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e001      	b.n	80071c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071c8:	697b      	ldr	r3, [r7, #20]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000e78 	.word	0x20000e78
 80071d8:	20000e58 	.word	0x20000e58
 80071dc:	20000980 	.word	0x20000980
 80071e0:	20000e10 	.word	0x20000e10
 80071e4:	2000097c 	.word	0x2000097c
 80071e8:	20000e64 	.word	0x20000e64

080071ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <vTaskInternalSetTimeOutState+0x24>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <vTaskInternalSetTimeOutState+0x28>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20000e68 	.word	0x20000e68
 8007214:	20000e54 	.word	0x20000e54

08007218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	613b      	str	r3, [r7, #16]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800725a:	f000 fe83 	bl	8007f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <xTaskCheckForTimeOut+0xbc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d102      	bne.n	800727e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007278:	2300      	movs	r3, #0
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	e023      	b.n	80072c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <xTaskCheckForTimeOut+0xc0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d007      	beq.n	800729a <xTaskCheckForTimeOut+0x82>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	429a      	cmp	r2, r3
 8007292:	d302      	bcc.n	800729a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e015      	b.n	80072c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d20b      	bcs.n	80072bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1ad2      	subs	r2, r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ff9b 	bl	80071ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	e004      	b.n	80072c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072c2:	2301      	movs	r3, #1
 80072c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072c6:	f000 fe7d 	bl	8007fc4 <vPortExitCritical>

	return xReturn;
 80072ca:	69fb      	ldr	r3, [r7, #28]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000e54 	.word	0x20000e54
 80072d8:	20000e68 	.word	0x20000e68

080072dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072e0:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <vTaskMissedYield+0x14>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
}
 80072e6:	bf00      	nop
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	20000e64 	.word	0x20000e64

080072f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072fc:	f000 f852 	bl	80073a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <prvIdleTask+0x28>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d9f9      	bls.n	80072fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <prvIdleTask+0x2c>)
 800730a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007318:	e7f0      	b.n	80072fc <prvIdleTask+0x8>
 800731a:	bf00      	nop
 800731c:	20000980 	.word	0x20000980
 8007320:	e000ed04 	.word	0xe000ed04

08007324 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800732a:	2300      	movs	r3, #0
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	e00c      	b.n	800734a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <prvInitialiseTaskLists+0x60>)
 800733c:	4413      	add	r3, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe fc90 	bl	8005c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3301      	adds	r3, #1
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b37      	cmp	r3, #55	; 0x37
 800734e:	d9ef      	bls.n	8007330 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007350:	480d      	ldr	r0, [pc, #52]	; (8007388 <prvInitialiseTaskLists+0x64>)
 8007352:	f7fe fc87 	bl	8005c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007356:	480d      	ldr	r0, [pc, #52]	; (800738c <prvInitialiseTaskLists+0x68>)
 8007358:	f7fe fc84 	bl	8005c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800735c:	480c      	ldr	r0, [pc, #48]	; (8007390 <prvInitialiseTaskLists+0x6c>)
 800735e:	f7fe fc81 	bl	8005c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007362:	480c      	ldr	r0, [pc, #48]	; (8007394 <prvInitialiseTaskLists+0x70>)
 8007364:	f7fe fc7e 	bl	8005c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007368:	480b      	ldr	r0, [pc, #44]	; (8007398 <prvInitialiseTaskLists+0x74>)
 800736a:	f7fe fc7b 	bl	8005c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <prvInitialiseTaskLists+0x78>)
 8007370:	4a05      	ldr	r2, [pc, #20]	; (8007388 <prvInitialiseTaskLists+0x64>)
 8007372:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <prvInitialiseTaskLists+0x7c>)
 8007376:	4a05      	ldr	r2, [pc, #20]	; (800738c <prvInitialiseTaskLists+0x68>)
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000980 	.word	0x20000980
 8007388:	20000de0 	.word	0x20000de0
 800738c:	20000df4 	.word	0x20000df4
 8007390:	20000e10 	.word	0x20000e10
 8007394:	20000e24 	.word	0x20000e24
 8007398:	20000e3c 	.word	0x20000e3c
 800739c:	20000e08 	.word	0x20000e08
 80073a0:	20000e0c 	.word	0x20000e0c

080073a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073aa:	e019      	b.n	80073e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073ac:	f000 fdda 	bl	8007f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b0:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <prvCheckTasksWaitingTermination+0x50>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fcdb 	bl	8005d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073c2:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <prvCheckTasksWaitingTermination+0x54>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4a0b      	ldr	r2, [pc, #44]	; (80073f8 <prvCheckTasksWaitingTermination+0x54>)
 80073ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <prvCheckTasksWaitingTermination+0x58>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <prvCheckTasksWaitingTermination+0x58>)
 80073d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073d6:	f000 fdf5 	bl	8007fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f810 	bl	8007400 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <prvCheckTasksWaitingTermination+0x58>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e1      	bne.n	80073ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20000e24 	.word	0x20000e24
 80073f8:	20000e50 	.word	0x20000e50
 80073fc:	20000e38 	.word	0x20000e38

08007400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3354      	adds	r3, #84	; 0x54
 800740c:	4618      	mov	r0, r3
 800740e:	f001 fec1 	bl	8009194 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007418:	2b00      	cmp	r3, #0
 800741a:	d108      	bne.n	800742e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	4618      	mov	r0, r3
 8007422:	f000 ff8d 	bl	8008340 <vPortFree>
				vPortFree( pxTCB );
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 ff8a 	bl	8008340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800742c:	e018      	b.n	8007460 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007434:	2b01      	cmp	r3, #1
 8007436:	d103      	bne.n	8007440 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 ff81 	bl	8008340 <vPortFree>
	}
 800743e:	e00f      	b.n	8007460 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007446:	2b02      	cmp	r3, #2
 8007448:	d00a      	beq.n	8007460 <prvDeleteTCB+0x60>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60fb      	str	r3, [r7, #12]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <prvDeleteTCB+0x5e>
	}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <prvResetNextTaskUnblockTime+0x38>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <prvResetNextTaskUnblockTime+0x3c>)
 800747a:	f04f 32ff 	mov.w	r2, #4294967295
 800747e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007480:	e008      	b.n	8007494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007482:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <prvResetNextTaskUnblockTime+0x38>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a04      	ldr	r2, [pc, #16]	; (80074a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007492:	6013      	str	r3, [r2, #0]
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000e08 	.word	0x20000e08
 80074a4:	20000e70 	.word	0x20000e70

080074a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <xTaskGetSchedulerState+0x34>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074b6:	2301      	movs	r3, #1
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	e008      	b.n	80074ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074bc:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <xTaskGetSchedulerState+0x38>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074c4:	2302      	movs	r3, #2
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	e001      	b.n	80074ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074ca:	2300      	movs	r3, #0
 80074cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ce:	687b      	ldr	r3, [r7, #4]
	}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000e5c 	.word	0x20000e5c
 80074e0:	20000e78 	.word	0x20000e78

080074e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d056      	beq.n	80075a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074fa:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <xTaskPriorityDisinherit+0xd0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	429a      	cmp	r2, r3
 8007502:	d00a      	beq.n	800751a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60bb      	str	r3, [r7, #8]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753c:	1e5a      	subs	r2, r3, #1
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	429a      	cmp	r2, r3
 800754c:	d02c      	beq.n	80075a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	2b00      	cmp	r3, #0
 8007554:	d128      	bne.n	80075a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	3304      	adds	r3, #4
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fc0c 	bl	8005d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <xTaskPriorityDisinherit+0xd4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <xTaskPriorityDisinherit+0xa4>
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <xTaskPriorityDisinherit+0xd4>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a09      	ldr	r2, [pc, #36]	; (80075bc <xTaskPriorityDisinherit+0xd8>)
 8007596:	441a      	add	r2, r3
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe fb8d 	bl	8005cbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075a4:	2301      	movs	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075a8:	697b      	ldr	r3, [r7, #20]
	}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	2000097c 	.word	0x2000097c
 80075b8:	20000e58 	.word	0x20000e58
 80075bc:	20000980 	.word	0x20000980

080075c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ca:	4b21      	ldr	r3, [pc, #132]	; (8007650 <prvAddCurrentTaskToDelayedList+0x90>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075d0:	4b20      	ldr	r3, [pc, #128]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fbce 	bl	8005d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e2:	d10a      	bne.n	80075fa <prvAddCurrentTaskToDelayedList+0x3a>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ea:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4819      	ldr	r0, [pc, #100]	; (8007658 <prvAddCurrentTaskToDelayedList+0x98>)
 80075f4:	f7fe fb63 	bl	8005cbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075f8:	e026      	b.n	8007648 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	429a      	cmp	r2, r3
 8007610:	d209      	bcs.n	8007626 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fe fb71 	bl	8005d06 <vListInsert>
}
 8007624:	e010      	b.n	8007648 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007626:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3304      	adds	r3, #4
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f7fe fb67 	bl	8005d06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <prvAddCurrentTaskToDelayedList+0xa4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	d202      	bcs.n	8007648 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007642:	4a08      	ldr	r2, [pc, #32]	; (8007664 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6013      	str	r3, [r2, #0]
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000e54 	.word	0x20000e54
 8007654:	2000097c 	.word	0x2000097c
 8007658:	20000e3c 	.word	0x20000e3c
 800765c:	20000e0c 	.word	0x20000e0c
 8007660:	20000e08 	.word	0x20000e08
 8007664:	20000e70 	.word	0x20000e70

08007668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	; 0x28
 800766c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007672:	f000 fb07 	bl	8007c84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007676:	4b1c      	ldr	r3, [pc, #112]	; (80076e8 <xTimerCreateTimerTask+0x80>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d021      	beq.n	80076c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007686:	1d3a      	adds	r2, r7, #4
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe facd 	bl	8005c30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	2302      	movs	r3, #2
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	460a      	mov	r2, r1
 80076a8:	4910      	ldr	r1, [pc, #64]	; (80076ec <xTimerCreateTimerTask+0x84>)
 80076aa:	4811      	ldr	r0, [pc, #68]	; (80076f0 <xTimerCreateTimerTask+0x88>)
 80076ac:	f7ff f8b4 	bl	8006818 <xTaskCreateStatic>
 80076b0:	4603      	mov	r3, r0
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <xTimerCreateTimerTask+0x8c>)
 80076b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <xTimerCreateTimerTask+0x8c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076be:	2301      	movs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	613b      	str	r3, [r7, #16]
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076de:	697b      	ldr	r3, [r7, #20]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000eac 	.word	0x20000eac
 80076ec:	0800b0c8 	.word	0x0800b0c8
 80076f0:	0800782d 	.word	0x0800782d
 80076f4:	20000eb0 	.word	0x20000eb0

080076f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007706:	2300      	movs	r3, #0
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	623b      	str	r3, [r7, #32]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <xTimerGenericCommand+0x98>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d02a      	beq.n	8007784 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b05      	cmp	r3, #5
 800773e:	dc18      	bgt.n	8007772 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007740:	f7ff feb2 	bl	80074a8 <xTaskGetSchedulerState>
 8007744:	4603      	mov	r3, r0
 8007746:	2b02      	cmp	r3, #2
 8007748:	d109      	bne.n	800775e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800774a:	4b11      	ldr	r3, [pc, #68]	; (8007790 <xTimerGenericCommand+0x98>)
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	f107 0110 	add.w	r1, r7, #16
 8007752:	2300      	movs	r3, #0
 8007754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007756:	f7fe fc77 	bl	8006048 <xQueueGenericSend>
 800775a:	6278      	str	r0, [r7, #36]	; 0x24
 800775c:	e012      	b.n	8007784 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <xTimerGenericCommand+0x98>)
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f107 0110 	add.w	r1, r7, #16
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	f7fe fc6d 	bl	8006048 <xQueueGenericSend>
 800776e:	6278      	str	r0, [r7, #36]	; 0x24
 8007770:	e008      	b.n	8007784 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <xTimerGenericCommand+0x98>)
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	f107 0110 	add.w	r1, r7, #16
 800777a:	2300      	movs	r3, #0
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	f7fe fd61 	bl	8006244 <xQueueGenericSendFromISR>
 8007782:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007786:	4618      	mov	r0, r3
 8007788:	3728      	adds	r7, #40	; 0x28
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000eac 	.word	0x20000eac

08007794 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af02      	add	r7, sp, #8
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779e:	4b22      	ldr	r3, [pc, #136]	; (8007828 <prvProcessExpiredTimer+0x94>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fae3 	bl	8005d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d022      	beq.n	8007806 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	699a      	ldr	r2, [r3, #24]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	18d1      	adds	r1, r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	6978      	ldr	r0, [r7, #20]
 80077ce:	f000 f8d1 	bl	8007974 <prvInsertTimerInActiveList>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01f      	beq.n	8007818 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077d8:	2300      	movs	r3, #0
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	2300      	movs	r3, #0
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	2100      	movs	r1, #0
 80077e2:	6978      	ldr	r0, [r7, #20]
 80077e4:	f7ff ff88 	bl	80076f8 <xTimerGenericCommand>
 80077e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d113      	bne.n	8007818 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	b2da      	uxtb	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	6978      	ldr	r0, [r7, #20]
 800781e:	4798      	blx	r3
}
 8007820:	bf00      	nop
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000ea4 	.word	0x20000ea4

0800782c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007834:	f107 0308 	add.w	r3, r7, #8
 8007838:	4618      	mov	r0, r3
 800783a:	f000 f857 	bl	80078ec <prvGetNextExpireTime>
 800783e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4619      	mov	r1, r3
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f803 	bl	8007850 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800784a:	f000 f8d5 	bl	80079f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800784e:	e7f1      	b.n	8007834 <prvTimerTask+0x8>

08007850 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800785a:	f7ff fa39 	bl	8006cd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800785e:	f107 0308 	add.w	r3, r7, #8
 8007862:	4618      	mov	r0, r3
 8007864:	f000 f866 	bl	8007934 <prvSampleTimeNow>
 8007868:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d130      	bne.n	80078d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <prvProcessTimerOrBlockTask+0x3c>
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	429a      	cmp	r2, r3
 800787c:	d806      	bhi.n	800788c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800787e:	f7ff fa35 	bl	8006cec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ff85 	bl	8007794 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800788a:	e024      	b.n	80078d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d008      	beq.n	80078a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007892:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <prvProcessTimerOrBlockTask+0x90>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <prvProcessTimerOrBlockTask+0x50>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <prvProcessTimerOrBlockTask+0x52>
 80078a0:	2300      	movs	r3, #0
 80078a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <prvProcessTimerOrBlockTask+0x94>)
 80078a6:	6818      	ldr	r0, [r3, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	4619      	mov	r1, r3
 80078b2:	f7fe ff7d 	bl	80067b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078b6:	f7ff fa19 	bl	8006cec <xTaskResumeAll>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078c0:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <prvProcessTimerOrBlockTask+0x98>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
}
 80078d0:	e001      	b.n	80078d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078d2:	f7ff fa0b 	bl	8006cec <xTaskResumeAll>
}
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000ea8 	.word	0x20000ea8
 80078e4:	20000eac 	.word	0x20000eac
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <prvGetNextExpireTime+0x44>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <prvGetNextExpireTime+0x16>
 80078fe:	2201      	movs	r2, #1
 8007900:	e000      	b.n	8007904 <prvGetNextExpireTime+0x18>
 8007902:	2200      	movs	r2, #0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <prvGetNextExpireTime+0x44>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	e001      	b.n	8007920 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007920:	68fb      	ldr	r3, [r7, #12]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000ea4 	.word	0x20000ea4

08007934 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800793c:	f7ff fa74 	bl	8006e28 <xTaskGetTickCount>
 8007940:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <prvSampleTimeNow+0x3c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	429a      	cmp	r2, r3
 800794a:	d205      	bcs.n	8007958 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800794c:	f000 f936 	bl	8007bbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e002      	b.n	800795e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800795e:	4a04      	ldr	r2, [pc, #16]	; (8007970 <prvSampleTimeNow+0x3c>)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007964:	68fb      	ldr	r3, [r7, #12]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000eb4 	.word	0x20000eb4

08007974 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	429a      	cmp	r2, r3
 8007998:	d812      	bhi.n	80079c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	e01b      	b.n	80079e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079ae:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <prvInsertTimerInActiveList+0x7c>)
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fe f9a4 	bl	8005d06 <vListInsert>
 80079be:	e012      	b.n	80079e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d206      	bcs.n	80079d6 <prvInsertTimerInActiveList+0x62>
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d302      	bcc.n	80079d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	e007      	b.n	80079e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <prvInsertTimerInActiveList+0x80>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3304      	adds	r3, #4
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f7fe f990 	bl	8005d06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079e6:	697b      	ldr	r3, [r7, #20]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20000ea8 	.word	0x20000ea8
 80079f4:	20000ea4 	.word	0x20000ea4

080079f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08e      	sub	sp, #56	; 0x38
 80079fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079fe:	e0ca      	b.n	8007b96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da18      	bge.n	8007a38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a06:	1d3b      	adds	r3, r7, #4
 8007a08:	3304      	adds	r3, #4
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	61fb      	str	r3, [r7, #28]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a2e:	6850      	ldr	r0, [r2, #4]
 8007a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a32:	6892      	ldr	r2, [r2, #8]
 8007a34:	4611      	mov	r1, r2
 8007a36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f2c0 80aa 	blt.w	8007b94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe f991 	bl	8005d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a56:	463b      	mov	r3, r7
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff ff6b 	bl	8007934 <prvSampleTimeNow>
 8007a5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	f200 8097 	bhi.w	8007b96 <prvProcessReceivedCommands+0x19e>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <prvProcessReceivedCommands+0x78>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a99 	.word	0x08007a99
 8007a74:	08007a99 	.word	0x08007a99
 8007a78:	08007a99 	.word	0x08007a99
 8007a7c:	08007b0d 	.word	0x08007b0d
 8007a80:	08007b21 	.word	0x08007b21
 8007a84:	08007b6b 	.word	0x08007b6b
 8007a88:	08007a99 	.word	0x08007a99
 8007a8c:	08007a99 	.word	0x08007a99
 8007a90:	08007b0d 	.word	0x08007b0d
 8007a94:	08007b21 	.word	0x08007b21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	18d1      	adds	r1, r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab8:	f7ff ff5c 	bl	8007974 <prvInsertTimerInActiveList>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d069      	beq.n	8007b96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ac8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d05e      	beq.n	8007b96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	441a      	add	r2, r3
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aea:	f7ff fe05 	bl	80076f8 <xTimerGenericCommand>
 8007aee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d14f      	bne.n	8007b96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	61bb      	str	r3, [r7, #24]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b1e:	e03a      	b.n	8007b96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b26:	f043 0301 	orr.w	r3, r3, #1
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	617b      	str	r3, [r7, #20]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	18d1      	adds	r1, r2, r3
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b64:	f7ff ff06 	bl	8007974 <prvInsertTimerInActiveList>
					break;
 8007b68:	e015      	b.n	8007b96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b7a:	f000 fbe1 	bl	8008340 <vPortFree>
 8007b7e:	e00a      	b.n	8007b96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b86:	f023 0301 	bic.w	r3, r3, #1
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b92:	e000      	b.n	8007b96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <prvProcessReceivedCommands+0x1c0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	1d39      	adds	r1, r7, #4
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fbec 	bl	800637c <xQueueReceive>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f47f af2a 	bne.w	8007a00 <prvProcessReceivedCommands+0x8>
	}
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	3730      	adds	r7, #48	; 0x30
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000eac 	.word	0x20000eac

08007bbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bc2:	e048      	b.n	8007c56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bc4:	4b2d      	ldr	r3, [pc, #180]	; (8007c7c <prvSwitchTimerLists+0xc0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bce:	4b2b      	ldr	r3, [pc, #172]	; (8007c7c <prvSwitchTimerLists+0xc0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe f8cb 	bl	8005d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d02e      	beq.n	8007c56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4413      	add	r3, r2
 8007c00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d90e      	bls.n	8007c28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c16:	4b19      	ldr	r3, [pc, #100]	; (8007c7c <prvSwitchTimerLists+0xc0>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f7fe f870 	bl	8005d06 <vListInsert>
 8007c26:	e016      	b.n	8007c56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	2100      	movs	r1, #0
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f7ff fd60 	bl	80076f8 <xTimerGenericCommand>
 8007c38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	603b      	str	r3, [r7, #0]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <prvSwitchTimerLists+0xc0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1b1      	bne.n	8007bc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c60:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <prvSwitchTimerLists+0xc0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c66:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <prvSwitchTimerLists+0xc4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a04      	ldr	r2, [pc, #16]	; (8007c7c <prvSwitchTimerLists+0xc0>)
 8007c6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c6e:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <prvSwitchTimerLists+0xc4>)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	6013      	str	r3, [r2, #0]
}
 8007c74:	bf00      	nop
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000ea4 	.word	0x20000ea4
 8007c80:	20000ea8 	.word	0x20000ea8

08007c84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c8a:	f000 f96b 	bl	8007f64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c8e:	4b15      	ldr	r3, [pc, #84]	; (8007ce4 <prvCheckForValidListAndQueue+0x60>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d120      	bne.n	8007cd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c96:	4814      	ldr	r0, [pc, #80]	; (8007ce8 <prvCheckForValidListAndQueue+0x64>)
 8007c98:	f7fd ffe4 	bl	8005c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c9c:	4813      	ldr	r0, [pc, #76]	; (8007cec <prvCheckForValidListAndQueue+0x68>)
 8007c9e:	f7fd ffe1 	bl	8005c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ca2:	4b13      	ldr	r3, [pc, #76]	; (8007cf0 <prvCheckForValidListAndQueue+0x6c>)
 8007ca4:	4a10      	ldr	r2, [pc, #64]	; (8007ce8 <prvCheckForValidListAndQueue+0x64>)
 8007ca6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ca8:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <prvCheckForValidListAndQueue+0x70>)
 8007caa:	4a10      	ldr	r2, [pc, #64]	; (8007cec <prvCheckForValidListAndQueue+0x68>)
 8007cac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <prvCheckForValidListAndQueue+0x74>)
 8007cb4:	4a11      	ldr	r2, [pc, #68]	; (8007cfc <prvCheckForValidListAndQueue+0x78>)
 8007cb6:	2110      	movs	r1, #16
 8007cb8:	200a      	movs	r0, #10
 8007cba:	f7fe f8ef 	bl	8005e9c <xQueueGenericCreateStatic>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4a08      	ldr	r2, [pc, #32]	; (8007ce4 <prvCheckForValidListAndQueue+0x60>)
 8007cc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cc4:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <prvCheckForValidListAndQueue+0x60>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <prvCheckForValidListAndQueue+0x60>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	490b      	ldr	r1, [pc, #44]	; (8007d00 <prvCheckForValidListAndQueue+0x7c>)
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fd42 	bl	800675c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cd8:	f000 f974 	bl	8007fc4 <vPortExitCritical>
}
 8007cdc:	bf00      	nop
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000eac 	.word	0x20000eac
 8007ce8:	20000e7c 	.word	0x20000e7c
 8007cec:	20000e90 	.word	0x20000e90
 8007cf0:	20000ea4 	.word	0x20000ea4
 8007cf4:	20000ea8 	.word	0x20000ea8
 8007cf8:	20000f58 	.word	0x20000f58
 8007cfc:	20000eb8 	.word	0x20000eb8
 8007d00:	0800b0d0 	.word	0x0800b0d0

08007d04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3b04      	subs	r3, #4
 8007d14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3b04      	subs	r3, #4
 8007d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3b04      	subs	r3, #4
 8007d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d34:	4a0c      	ldr	r2, [pc, #48]	; (8007d68 <pxPortInitialiseStack+0x64>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b14      	subs	r3, #20
 8007d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3b04      	subs	r3, #4
 8007d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f06f 0202 	mvn.w	r2, #2
 8007d52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3b20      	subs	r3, #32
 8007d58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	08007d6d 	.word	0x08007d6d

08007d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <prvTaskExitError+0x54>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d00a      	beq.n	8007d96 <prvTaskExitError+0x2a>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	60fb      	str	r3, [r7, #12]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <prvTaskExitError+0x28>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60bb      	str	r3, [r7, #8]
}
 8007da8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007daa:	bf00      	nop
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0fc      	beq.n	8007dac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	2000000c 	.word	0x2000000c
	...

08007dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <pxCurrentTCBConst2>)
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	6808      	ldr	r0, [r1, #0]
 8007dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	f380 8809 	msr	PSP, r0
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f380 8811 	msr	BASEPRI, r0
 8007dea:	4770      	bx	lr
 8007dec:	f3af 8000 	nop.w

08007df0 <pxCurrentTCBConst2>:
 8007df0:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007df8:	4808      	ldr	r0, [pc, #32]	; (8007e1c <prvPortStartFirstTask+0x24>)
 8007dfa:	6800      	ldr	r0, [r0, #0]
 8007dfc:	6800      	ldr	r0, [r0, #0]
 8007dfe:	f380 8808 	msr	MSP, r0
 8007e02:	f04f 0000 	mov.w	r0, #0
 8007e06:	f380 8814 	msr	CONTROL, r0
 8007e0a:	b662      	cpsie	i
 8007e0c:	b661      	cpsie	f
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	df00      	svc	0
 8007e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e1a:	bf00      	nop
 8007e1c:	e000ed08 	.word	0xe000ed08

08007e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e26:	4b46      	ldr	r3, [pc, #280]	; (8007f40 <xPortStartScheduler+0x120>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a46      	ldr	r2, [pc, #280]	; (8007f44 <xPortStartScheduler+0x124>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d10a      	bne.n	8007e46 <xPortStartScheduler+0x26>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	613b      	str	r3, [r7, #16]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e46:	4b3e      	ldr	r3, [pc, #248]	; (8007f40 <xPortStartScheduler+0x120>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a3f      	ldr	r2, [pc, #252]	; (8007f48 <xPortStartScheduler+0x128>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d10a      	bne.n	8007e66 <xPortStartScheduler+0x46>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e66:	4b39      	ldr	r3, [pc, #228]	; (8007f4c <xPortStartScheduler+0x12c>)
 8007e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	4b31      	ldr	r3, [pc, #196]	; (8007f50 <xPortStartScheduler+0x130>)
 8007e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e8e:	4b31      	ldr	r3, [pc, #196]	; (8007f54 <xPortStartScheduler+0x134>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e94:	e009      	b.n	8007eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e96:	4b2f      	ldr	r3, [pc, #188]	; (8007f54 <xPortStartScheduler+0x134>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	4a2d      	ldr	r2, [pc, #180]	; (8007f54 <xPortStartScheduler+0x134>)
 8007e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	d0ef      	beq.n	8007e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007eb6:	4b27      	ldr	r3, [pc, #156]	; (8007f54 <xPortStartScheduler+0x134>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f1c3 0307 	rsb	r3, r3, #7
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d00a      	beq.n	8007ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	60bb      	str	r3, [r7, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ed8:	4b1e      	ldr	r3, [pc, #120]	; (8007f54 <xPortStartScheduler+0x134>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	4a1d      	ldr	r2, [pc, #116]	; (8007f54 <xPortStartScheduler+0x134>)
 8007ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ee2:	4b1c      	ldr	r3, [pc, #112]	; (8007f54 <xPortStartScheduler+0x134>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eea:	4a1a      	ldr	r2, [pc, #104]	; (8007f54 <xPortStartScheduler+0x134>)
 8007eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ef6:	4b18      	ldr	r3, [pc, #96]	; (8007f58 <xPortStartScheduler+0x138>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a17      	ldr	r2, [pc, #92]	; (8007f58 <xPortStartScheduler+0x138>)
 8007efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <xPortStartScheduler+0x138>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <xPortStartScheduler+0x138>)
 8007f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f0e:	f000 f8dd 	bl	80080cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f12:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <xPortStartScheduler+0x13c>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f18:	f000 f8fc 	bl	8008114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f1c:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <xPortStartScheduler+0x140>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a0f      	ldr	r2, [pc, #60]	; (8007f60 <xPortStartScheduler+0x140>)
 8007f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f28:	f7ff ff66 	bl	8007df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f2c:	f7ff f846 	bl	8006fbc <vTaskSwitchContext>
	prvTaskExitError();
 8007f30:	f7ff ff1c 	bl	8007d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	e000ed00 	.word	0xe000ed00
 8007f44:	410fc271 	.word	0x410fc271
 8007f48:	410fc270 	.word	0x410fc270
 8007f4c:	e000e400 	.word	0xe000e400
 8007f50:	20000fa8 	.word	0x20000fa8
 8007f54:	20000fac 	.word	0x20000fac
 8007f58:	e000ed20 	.word	0xe000ed20
 8007f5c:	2000000c 	.word	0x2000000c
 8007f60:	e000ef34 	.word	0xe000ef34

08007f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	607b      	str	r3, [r7, #4]
}
 8007f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <vPortEnterCritical+0x58>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <vPortEnterCritical+0x58>)
 8007f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f88:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <vPortEnterCritical+0x58>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10f      	bne.n	8007fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <vPortEnterCritical+0x5c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <vPortEnterCritical+0x4a>
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	2000000c 	.word	0x2000000c
 8007fc0:	e000ed04 	.word	0xe000ed04

08007fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fca:	4b12      	ldr	r3, [pc, #72]	; (8008014 <vPortExitCritical+0x50>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <vPortExitCritical+0x24>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	607b      	str	r3, [r7, #4]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <vPortExitCritical+0x50>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	4a09      	ldr	r2, [pc, #36]	; (8008014 <vPortExitCritical+0x50>)
 8007ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ff2:	4b08      	ldr	r3, [pc, #32]	; (8008014 <vPortExitCritical+0x50>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <vPortExitCritical+0x42>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	f383 8811 	msr	BASEPRI, r3
}
 8008004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	2000000c 	.word	0x2000000c
	...

08008020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008020:	f3ef 8009 	mrs	r0, PSP
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <pxCurrentTCBConst>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	f01e 0f10 	tst.w	lr, #16
 8008030:	bf08      	it	eq
 8008032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	6010      	str	r0, [r2, #0]
 800803c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008044:	f380 8811 	msr	BASEPRI, r0
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f7fe ffb4 	bl	8006fbc <vTaskSwitchContext>
 8008054:	f04f 0000 	mov.w	r0, #0
 8008058:	f380 8811 	msr	BASEPRI, r0
 800805c:	bc09      	pop	{r0, r3}
 800805e:	6819      	ldr	r1, [r3, #0]
 8008060:	6808      	ldr	r0, [r1, #0]
 8008062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008066:	f01e 0f10 	tst.w	lr, #16
 800806a:	bf08      	it	eq
 800806c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008070:	f380 8809 	msr	PSP, r0
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	f3af 8000 	nop.w

08008080 <pxCurrentTCBConst>:
 8008080:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	607b      	str	r3, [r7, #4]
}
 80080a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080a2:	f7fe fed1 	bl	8006e48 <xTaskIncrementTick>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ac:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <xPortSysTickHandler+0x40>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f383 8811 	msr	BASEPRI, r3
}
 80080be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <vPortSetupTimerInterrupt+0x34>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <vPortSetupTimerInterrupt+0x38>)
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <vPortSetupTimerInterrupt+0x3c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <vPortSetupTimerInterrupt+0x40>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <vPortSetupTimerInterrupt+0x44>)
 80080ea:	3b01      	subs	r3, #1
 80080ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ee:	4b04      	ldr	r3, [pc, #16]	; (8008100 <vPortSetupTimerInterrupt+0x34>)
 80080f0:	2207      	movs	r2, #7
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	e000e010 	.word	0xe000e010
 8008104:	e000e018 	.word	0xe000e018
 8008108:	20000000 	.word	0x20000000
 800810c:	10624dd3 	.word	0x10624dd3
 8008110:	e000e014 	.word	0xe000e014

08008114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008124 <vPortEnableVFP+0x10>
 8008118:	6801      	ldr	r1, [r0, #0]
 800811a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800811e:	6001      	str	r1, [r0, #0]
 8008120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008122:	bf00      	nop
 8008124:	e000ed88 	.word	0xe000ed88

08008128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800812e:	f3ef 8305 	mrs	r3, IPSR
 8008132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b0f      	cmp	r3, #15
 8008138:	d914      	bls.n	8008164 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800813a:	4a17      	ldr	r2, [pc, #92]	; (8008198 <vPortValidateInterruptPriority+0x70>)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008144:	4b15      	ldr	r3, [pc, #84]	; (800819c <vPortValidateInterruptPriority+0x74>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	7afa      	ldrb	r2, [r7, #11]
 800814a:	429a      	cmp	r2, r3
 800814c:	d20a      	bcs.n	8008164 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	607b      	str	r3, [r7, #4]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008164:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <vPortValidateInterruptPriority+0x78>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <vPortValidateInterruptPriority+0x7c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d90a      	bls.n	800818a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	603b      	str	r3, [r7, #0]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <vPortValidateInterruptPriority+0x60>
	}
 800818a:	bf00      	nop
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	e000e3f0 	.word	0xe000e3f0
 800819c:	20000fa8 	.word	0x20000fa8
 80081a0:	e000ed0c 	.word	0xe000ed0c
 80081a4:	20000fac 	.word	0x20000fac

080081a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081b4:	f7fe fd8c 	bl	8006cd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081b8:	4b5b      	ldr	r3, [pc, #364]	; (8008328 <pvPortMalloc+0x180>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081c0:	f000 f920 	bl	8008404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081c4:	4b59      	ldr	r3, [pc, #356]	; (800832c <pvPortMalloc+0x184>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 8093 	bne.w	80082f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01d      	beq.n	8008214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081d8:	2208      	movs	r2, #8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d014      	beq.n	8008214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f023 0307 	bic.w	r3, r3, #7
 80081f0:	3308      	adds	r3, #8
 80081f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <pvPortMalloc+0x6c>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	617b      	str	r3, [r7, #20]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d06e      	beq.n	80082f8 <pvPortMalloc+0x150>
 800821a:	4b45      	ldr	r3, [pc, #276]	; (8008330 <pvPortMalloc+0x188>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	d869      	bhi.n	80082f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008224:	4b43      	ldr	r3, [pc, #268]	; (8008334 <pvPortMalloc+0x18c>)
 8008226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008228:	4b42      	ldr	r3, [pc, #264]	; (8008334 <pvPortMalloc+0x18c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800822e:	e004      	b.n	800823a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d903      	bls.n	800824c <pvPortMalloc+0xa4>
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f1      	bne.n	8008230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800824c:	4b36      	ldr	r3, [pc, #216]	; (8008328 <pvPortMalloc+0x180>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008252:	429a      	cmp	r2, r3
 8008254:	d050      	beq.n	80082f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2208      	movs	r2, #8
 800825c:	4413      	add	r3, r2
 800825e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	2308      	movs	r3, #8
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	429a      	cmp	r2, r3
 8008276:	d91f      	bls.n	80082b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <pvPortMalloc+0xf8>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	613b      	str	r3, [r7, #16]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	1ad2      	subs	r2, r2, r3
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082b2:	69b8      	ldr	r0, [r7, #24]
 80082b4:	f000 f908 	bl	80084c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082b8:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <pvPortMalloc+0x188>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <pvPortMalloc+0x188>)
 80082c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082c6:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <pvPortMalloc+0x188>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <pvPortMalloc+0x190>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d203      	bcs.n	80082da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082d2:	4b17      	ldr	r3, [pc, #92]	; (8008330 <pvPortMalloc+0x188>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a18      	ldr	r2, [pc, #96]	; (8008338 <pvPortMalloc+0x190>)
 80082d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <pvPortMalloc+0x184>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <pvPortMalloc+0x194>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3301      	adds	r3, #1
 80082f4:	4a11      	ldr	r2, [pc, #68]	; (800833c <pvPortMalloc+0x194>)
 80082f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082f8:	f7fe fcf8 	bl	8006cec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <pvPortMalloc+0x174>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60fb      	str	r3, [r7, #12]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <pvPortMalloc+0x172>
	return pvReturn;
 800831c:	69fb      	ldr	r3, [r7, #28]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3728      	adds	r7, #40	; 0x28
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20001bb8 	.word	0x20001bb8
 800832c:	20001bcc 	.word	0x20001bcc
 8008330:	20001bbc 	.word	0x20001bbc
 8008334:	20001bb0 	.word	0x20001bb0
 8008338:	20001bc0 	.word	0x20001bc0
 800833c:	20001bc4 	.word	0x20001bc4

08008340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d04d      	beq.n	80083ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008352:	2308      	movs	r3, #8
 8008354:	425b      	negs	r3, r3
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <vPortFree+0xb8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <vPortFree+0x44>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <vPortFree+0x62>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60bb      	str	r3, [r7, #8]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <vPortFree+0xb8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01e      	beq.n	80083ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11a      	bne.n	80083ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <vPortFree+0xb8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	401a      	ands	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083c8:	f7fe fc82 	bl	8006cd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <vPortFree+0xbc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	4a09      	ldr	r2, [pc, #36]	; (80083fc <vPortFree+0xbc>)
 80083d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083da:	6938      	ldr	r0, [r7, #16]
 80083dc:	f000 f874 	bl	80084c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <vPortFree+0xc0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3301      	adds	r3, #1
 80083e6:	4a06      	ldr	r2, [pc, #24]	; (8008400 <vPortFree+0xc0>)
 80083e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083ea:	f7fe fc7f 	bl	8006cec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20001bcc 	.word	0x20001bcc
 80083fc:	20001bbc 	.word	0x20001bbc
 8008400:	20001bc8 	.word	0x20001bc8

08008404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800840a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800840e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008410:	4b27      	ldr	r3, [pc, #156]	; (80084b0 <prvHeapInit+0xac>)
 8008412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00c      	beq.n	8008438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3307      	adds	r3, #7
 8008422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0307 	bic.w	r3, r3, #7
 800842a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	4a1f      	ldr	r2, [pc, #124]	; (80084b0 <prvHeapInit+0xac>)
 8008434:	4413      	add	r3, r2
 8008436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <prvHeapInit+0xb0>)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008442:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <prvHeapInit+0xb0>)
 8008444:	2200      	movs	r2, #0
 8008446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	4413      	add	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008450:	2208      	movs	r2, #8
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0307 	bic.w	r3, r3, #7
 800845e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <prvHeapInit+0xb4>)
 8008464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <prvHeapInit+0xb4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800846e:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <prvHeapInit+0xb4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008484:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <prvHeapInit+0xb4>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <prvHeapInit+0xb8>)
 8008492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <prvHeapInit+0xbc>)
 800849a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <prvHeapInit+0xc0>)
 800849e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084a2:	601a      	str	r2, [r3, #0]
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20000fb0 	.word	0x20000fb0
 80084b4:	20001bb0 	.word	0x20001bb0
 80084b8:	20001bb8 	.word	0x20001bb8
 80084bc:	20001bc0 	.word	0x20001bc0
 80084c0:	20001bbc 	.word	0x20001bbc
 80084c4:	20001bcc 	.word	0x20001bcc

080084c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <prvInsertBlockIntoFreeList+0xac>)
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e002      	b.n	80084dc <prvInsertBlockIntoFreeList+0x14>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d8f7      	bhi.n	80084d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	4413      	add	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d108      	bne.n	800850a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	441a      	add	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	441a      	add	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d118      	bne.n	8008550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <prvInsertBlockIntoFreeList+0xb0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d00d      	beq.n	8008546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	441a      	add	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e008      	b.n	8008558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvInsertBlockIntoFreeList+0xb0>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e003      	b.n	8008558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	d002      	beq.n	8008566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20001bb0 	.word	0x20001bb0
 8008578:	20001bb8 	.word	0x20001bb8

0800857c <__errno>:
 800857c:	4b01      	ldr	r3, [pc, #4]	; (8008584 <__errno+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000010 	.word	0x20000010

08008588 <std>:
 8008588:	2300      	movs	r3, #0
 800858a:	b510      	push	{r4, lr}
 800858c:	4604      	mov	r4, r0
 800858e:	e9c0 3300 	strd	r3, r3, [r0]
 8008592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008596:	6083      	str	r3, [r0, #8]
 8008598:	8181      	strh	r1, [r0, #12]
 800859a:	6643      	str	r3, [r0, #100]	; 0x64
 800859c:	81c2      	strh	r2, [r0, #14]
 800859e:	6183      	str	r3, [r0, #24]
 80085a0:	4619      	mov	r1, r3
 80085a2:	2208      	movs	r2, #8
 80085a4:	305c      	adds	r0, #92	; 0x5c
 80085a6:	f000 f91a 	bl	80087de <memset>
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <std+0x38>)
 80085ac:	6263      	str	r3, [r4, #36]	; 0x24
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x3c>)
 80085b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x40>)
 80085b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x44>)
 80085b8:	6224      	str	r4, [r4, #32]
 80085ba:	6323      	str	r3, [r4, #48]	; 0x30
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	bf00      	nop
 80085c0:	0800926d 	.word	0x0800926d
 80085c4:	0800928f 	.word	0x0800928f
 80085c8:	080092c7 	.word	0x080092c7
 80085cc:	080092eb 	.word	0x080092eb

080085d0 <_cleanup_r>:
 80085d0:	4901      	ldr	r1, [pc, #4]	; (80085d8 <_cleanup_r+0x8>)
 80085d2:	f000 b8af 	b.w	8008734 <_fwalk_reent>
 80085d6:	bf00      	nop
 80085d8:	0800a135 	.word	0x0800a135

080085dc <__sfmoreglue>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	1e4a      	subs	r2, r1, #1
 80085e0:	2568      	movs	r5, #104	; 0x68
 80085e2:	4355      	muls	r5, r2
 80085e4:	460e      	mov	r6, r1
 80085e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ea:	f000 f901 	bl	80087f0 <_malloc_r>
 80085ee:	4604      	mov	r4, r0
 80085f0:	b140      	cbz	r0, 8008604 <__sfmoreglue+0x28>
 80085f2:	2100      	movs	r1, #0
 80085f4:	e9c0 1600 	strd	r1, r6, [r0]
 80085f8:	300c      	adds	r0, #12
 80085fa:	60a0      	str	r0, [r4, #8]
 80085fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008600:	f000 f8ed 	bl	80087de <memset>
 8008604:	4620      	mov	r0, r4
 8008606:	bd70      	pop	{r4, r5, r6, pc}

08008608 <__sfp_lock_acquire>:
 8008608:	4801      	ldr	r0, [pc, #4]	; (8008610 <__sfp_lock_acquire+0x8>)
 800860a:	f000 b8d8 	b.w	80087be <__retarget_lock_acquire_recursive>
 800860e:	bf00      	nop
 8008610:	20001da8 	.word	0x20001da8

08008614 <__sfp_lock_release>:
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <__sfp_lock_release+0x8>)
 8008616:	f000 b8d3 	b.w	80087c0 <__retarget_lock_release_recursive>
 800861a:	bf00      	nop
 800861c:	20001da8 	.word	0x20001da8

08008620 <__sinit_lock_acquire>:
 8008620:	4801      	ldr	r0, [pc, #4]	; (8008628 <__sinit_lock_acquire+0x8>)
 8008622:	f000 b8cc 	b.w	80087be <__retarget_lock_acquire_recursive>
 8008626:	bf00      	nop
 8008628:	20001da3 	.word	0x20001da3

0800862c <__sinit_lock_release>:
 800862c:	4801      	ldr	r0, [pc, #4]	; (8008634 <__sinit_lock_release+0x8>)
 800862e:	f000 b8c7 	b.w	80087c0 <__retarget_lock_release_recursive>
 8008632:	bf00      	nop
 8008634:	20001da3 	.word	0x20001da3

08008638 <__sinit>:
 8008638:	b510      	push	{r4, lr}
 800863a:	4604      	mov	r4, r0
 800863c:	f7ff fff0 	bl	8008620 <__sinit_lock_acquire>
 8008640:	69a3      	ldr	r3, [r4, #24]
 8008642:	b11b      	cbz	r3, 800864c <__sinit+0x14>
 8008644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008648:	f7ff bff0 	b.w	800862c <__sinit_lock_release>
 800864c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008650:	6523      	str	r3, [r4, #80]	; 0x50
 8008652:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <__sinit+0x68>)
 8008654:	4a13      	ldr	r2, [pc, #76]	; (80086a4 <__sinit+0x6c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	62a2      	str	r2, [r4, #40]	; 0x28
 800865a:	42a3      	cmp	r3, r4
 800865c:	bf04      	itt	eq
 800865e:	2301      	moveq	r3, #1
 8008660:	61a3      	streq	r3, [r4, #24]
 8008662:	4620      	mov	r0, r4
 8008664:	f000 f820 	bl	80086a8 <__sfp>
 8008668:	6060      	str	r0, [r4, #4]
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f81c 	bl	80086a8 <__sfp>
 8008670:	60a0      	str	r0, [r4, #8]
 8008672:	4620      	mov	r0, r4
 8008674:	f000 f818 	bl	80086a8 <__sfp>
 8008678:	2200      	movs	r2, #0
 800867a:	60e0      	str	r0, [r4, #12]
 800867c:	2104      	movs	r1, #4
 800867e:	6860      	ldr	r0, [r4, #4]
 8008680:	f7ff ff82 	bl	8008588 <std>
 8008684:	68a0      	ldr	r0, [r4, #8]
 8008686:	2201      	movs	r2, #1
 8008688:	2109      	movs	r1, #9
 800868a:	f7ff ff7d 	bl	8008588 <std>
 800868e:	68e0      	ldr	r0, [r4, #12]
 8008690:	2202      	movs	r2, #2
 8008692:	2112      	movs	r1, #18
 8008694:	f7ff ff78 	bl	8008588 <std>
 8008698:	2301      	movs	r3, #1
 800869a:	61a3      	str	r3, [r4, #24]
 800869c:	e7d2      	b.n	8008644 <__sinit+0xc>
 800869e:	bf00      	nop
 80086a0:	0800b1fc 	.word	0x0800b1fc
 80086a4:	080085d1 	.word	0x080085d1

080086a8 <__sfp>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	4607      	mov	r7, r0
 80086ac:	f7ff ffac 	bl	8008608 <__sfp_lock_acquire>
 80086b0:	4b1e      	ldr	r3, [pc, #120]	; (800872c <__sfp+0x84>)
 80086b2:	681e      	ldr	r6, [r3, #0]
 80086b4:	69b3      	ldr	r3, [r6, #24]
 80086b6:	b913      	cbnz	r3, 80086be <__sfp+0x16>
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7ff ffbd 	bl	8008638 <__sinit>
 80086be:	3648      	adds	r6, #72	; 0x48
 80086c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	d503      	bpl.n	80086d0 <__sfp+0x28>
 80086c8:	6833      	ldr	r3, [r6, #0]
 80086ca:	b30b      	cbz	r3, 8008710 <__sfp+0x68>
 80086cc:	6836      	ldr	r6, [r6, #0]
 80086ce:	e7f7      	b.n	80086c0 <__sfp+0x18>
 80086d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d4:	b9d5      	cbnz	r5, 800870c <__sfp+0x64>
 80086d6:	4b16      	ldr	r3, [pc, #88]	; (8008730 <__sfp+0x88>)
 80086d8:	60e3      	str	r3, [r4, #12]
 80086da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086de:	6665      	str	r5, [r4, #100]	; 0x64
 80086e0:	f000 f86c 	bl	80087bc <__retarget_lock_init_recursive>
 80086e4:	f7ff ff96 	bl	8008614 <__sfp_lock_release>
 80086e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086f0:	6025      	str	r5, [r4, #0]
 80086f2:	61a5      	str	r5, [r4, #24]
 80086f4:	2208      	movs	r2, #8
 80086f6:	4629      	mov	r1, r5
 80086f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086fc:	f000 f86f 	bl	80087de <memset>
 8008700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008708:	4620      	mov	r0, r4
 800870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870c:	3468      	adds	r4, #104	; 0x68
 800870e:	e7d9      	b.n	80086c4 <__sfp+0x1c>
 8008710:	2104      	movs	r1, #4
 8008712:	4638      	mov	r0, r7
 8008714:	f7ff ff62 	bl	80085dc <__sfmoreglue>
 8008718:	4604      	mov	r4, r0
 800871a:	6030      	str	r0, [r6, #0]
 800871c:	2800      	cmp	r0, #0
 800871e:	d1d5      	bne.n	80086cc <__sfp+0x24>
 8008720:	f7ff ff78 	bl	8008614 <__sfp_lock_release>
 8008724:	230c      	movs	r3, #12
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	e7ee      	b.n	8008708 <__sfp+0x60>
 800872a:	bf00      	nop
 800872c:	0800b1fc 	.word	0x0800b1fc
 8008730:	ffff0001 	.word	0xffff0001

08008734 <_fwalk_reent>:
 8008734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008738:	4606      	mov	r6, r0
 800873a:	4688      	mov	r8, r1
 800873c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008740:	2700      	movs	r7, #0
 8008742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008746:	f1b9 0901 	subs.w	r9, r9, #1
 800874a:	d505      	bpl.n	8008758 <_fwalk_reent+0x24>
 800874c:	6824      	ldr	r4, [r4, #0]
 800874e:	2c00      	cmp	r4, #0
 8008750:	d1f7      	bne.n	8008742 <_fwalk_reent+0xe>
 8008752:	4638      	mov	r0, r7
 8008754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008758:	89ab      	ldrh	r3, [r5, #12]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d907      	bls.n	800876e <_fwalk_reent+0x3a>
 800875e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008762:	3301      	adds	r3, #1
 8008764:	d003      	beq.n	800876e <_fwalk_reent+0x3a>
 8008766:	4629      	mov	r1, r5
 8008768:	4630      	mov	r0, r6
 800876a:	47c0      	blx	r8
 800876c:	4307      	orrs	r7, r0
 800876e:	3568      	adds	r5, #104	; 0x68
 8008770:	e7e9      	b.n	8008746 <_fwalk_reent+0x12>
	...

08008774 <__libc_init_array>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	4d0d      	ldr	r5, [pc, #52]	; (80087ac <__libc_init_array+0x38>)
 8008778:	4c0d      	ldr	r4, [pc, #52]	; (80087b0 <__libc_init_array+0x3c>)
 800877a:	1b64      	subs	r4, r4, r5
 800877c:	10a4      	asrs	r4, r4, #2
 800877e:	2600      	movs	r6, #0
 8008780:	42a6      	cmp	r6, r4
 8008782:	d109      	bne.n	8008798 <__libc_init_array+0x24>
 8008784:	4d0b      	ldr	r5, [pc, #44]	; (80087b4 <__libc_init_array+0x40>)
 8008786:	4c0c      	ldr	r4, [pc, #48]	; (80087b8 <__libc_init_array+0x44>)
 8008788:	f002 fc66 	bl	800b058 <_init>
 800878c:	1b64      	subs	r4, r4, r5
 800878e:	10a4      	asrs	r4, r4, #2
 8008790:	2600      	movs	r6, #0
 8008792:	42a6      	cmp	r6, r4
 8008794:	d105      	bne.n	80087a2 <__libc_init_array+0x2e>
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	f855 3b04 	ldr.w	r3, [r5], #4
 800879c:	4798      	blx	r3
 800879e:	3601      	adds	r6, #1
 80087a0:	e7ee      	b.n	8008780 <__libc_init_array+0xc>
 80087a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a6:	4798      	blx	r3
 80087a8:	3601      	adds	r6, #1
 80087aa:	e7f2      	b.n	8008792 <__libc_init_array+0x1e>
 80087ac:	0800b584 	.word	0x0800b584
 80087b0:	0800b584 	.word	0x0800b584
 80087b4:	0800b584 	.word	0x0800b584
 80087b8:	0800b588 	.word	0x0800b588

080087bc <__retarget_lock_init_recursive>:
 80087bc:	4770      	bx	lr

080087be <__retarget_lock_acquire_recursive>:
 80087be:	4770      	bx	lr

080087c0 <__retarget_lock_release_recursive>:
 80087c0:	4770      	bx	lr

080087c2 <memcpy>:
 80087c2:	440a      	add	r2, r1
 80087c4:	4291      	cmp	r1, r2
 80087c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80087ca:	d100      	bne.n	80087ce <memcpy+0xc>
 80087cc:	4770      	bx	lr
 80087ce:	b510      	push	{r4, lr}
 80087d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d8:	4291      	cmp	r1, r2
 80087da:	d1f9      	bne.n	80087d0 <memcpy+0xe>
 80087dc:	bd10      	pop	{r4, pc}

080087de <memset>:
 80087de:	4402      	add	r2, r0
 80087e0:	4603      	mov	r3, r0
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d100      	bne.n	80087e8 <memset+0xa>
 80087e6:	4770      	bx	lr
 80087e8:	f803 1b01 	strb.w	r1, [r3], #1
 80087ec:	e7f9      	b.n	80087e2 <memset+0x4>
	...

080087f0 <_malloc_r>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	1ccd      	adds	r5, r1, #3
 80087f4:	f025 0503 	bic.w	r5, r5, #3
 80087f8:	3508      	adds	r5, #8
 80087fa:	2d0c      	cmp	r5, #12
 80087fc:	bf38      	it	cc
 80087fe:	250c      	movcc	r5, #12
 8008800:	2d00      	cmp	r5, #0
 8008802:	4606      	mov	r6, r0
 8008804:	db01      	blt.n	800880a <_malloc_r+0x1a>
 8008806:	42a9      	cmp	r1, r5
 8008808:	d903      	bls.n	8008812 <_malloc_r+0x22>
 800880a:	230c      	movs	r3, #12
 800880c:	6033      	str	r3, [r6, #0]
 800880e:	2000      	movs	r0, #0
 8008810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008812:	f001 fce9 	bl	800a1e8 <__malloc_lock>
 8008816:	4921      	ldr	r1, [pc, #132]	; (800889c <_malloc_r+0xac>)
 8008818:	680a      	ldr	r2, [r1, #0]
 800881a:	4614      	mov	r4, r2
 800881c:	b99c      	cbnz	r4, 8008846 <_malloc_r+0x56>
 800881e:	4f20      	ldr	r7, [pc, #128]	; (80088a0 <_malloc_r+0xb0>)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	b923      	cbnz	r3, 800882e <_malloc_r+0x3e>
 8008824:	4621      	mov	r1, r4
 8008826:	4630      	mov	r0, r6
 8008828:	f000 fd10 	bl	800924c <_sbrk_r>
 800882c:	6038      	str	r0, [r7, #0]
 800882e:	4629      	mov	r1, r5
 8008830:	4630      	mov	r0, r6
 8008832:	f000 fd0b 	bl	800924c <_sbrk_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d123      	bne.n	8008882 <_malloc_r+0x92>
 800883a:	230c      	movs	r3, #12
 800883c:	6033      	str	r3, [r6, #0]
 800883e:	4630      	mov	r0, r6
 8008840:	f001 fcd8 	bl	800a1f4 <__malloc_unlock>
 8008844:	e7e3      	b.n	800880e <_malloc_r+0x1e>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	1b5b      	subs	r3, r3, r5
 800884a:	d417      	bmi.n	800887c <_malloc_r+0x8c>
 800884c:	2b0b      	cmp	r3, #11
 800884e:	d903      	bls.n	8008858 <_malloc_r+0x68>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	441c      	add	r4, r3
 8008854:	6025      	str	r5, [r4, #0]
 8008856:	e004      	b.n	8008862 <_malloc_r+0x72>
 8008858:	6863      	ldr	r3, [r4, #4]
 800885a:	42a2      	cmp	r2, r4
 800885c:	bf0c      	ite	eq
 800885e:	600b      	streq	r3, [r1, #0]
 8008860:	6053      	strne	r3, [r2, #4]
 8008862:	4630      	mov	r0, r6
 8008864:	f001 fcc6 	bl	800a1f4 <__malloc_unlock>
 8008868:	f104 000b 	add.w	r0, r4, #11
 800886c:	1d23      	adds	r3, r4, #4
 800886e:	f020 0007 	bic.w	r0, r0, #7
 8008872:	1ac2      	subs	r2, r0, r3
 8008874:	d0cc      	beq.n	8008810 <_malloc_r+0x20>
 8008876:	1a1b      	subs	r3, r3, r0
 8008878:	50a3      	str	r3, [r4, r2]
 800887a:	e7c9      	b.n	8008810 <_malloc_r+0x20>
 800887c:	4622      	mov	r2, r4
 800887e:	6864      	ldr	r4, [r4, #4]
 8008880:	e7cc      	b.n	800881c <_malloc_r+0x2c>
 8008882:	1cc4      	adds	r4, r0, #3
 8008884:	f024 0403 	bic.w	r4, r4, #3
 8008888:	42a0      	cmp	r0, r4
 800888a:	d0e3      	beq.n	8008854 <_malloc_r+0x64>
 800888c:	1a21      	subs	r1, r4, r0
 800888e:	4630      	mov	r0, r6
 8008890:	f000 fcdc 	bl	800924c <_sbrk_r>
 8008894:	3001      	adds	r0, #1
 8008896:	d1dd      	bne.n	8008854 <_malloc_r+0x64>
 8008898:	e7cf      	b.n	800883a <_malloc_r+0x4a>
 800889a:	bf00      	nop
 800889c:	20001bd0 	.word	0x20001bd0
 80088a0:	20001bd4 	.word	0x20001bd4

080088a4 <__cvt>:
 80088a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	ec55 4b10 	vmov	r4, r5, d0
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	460e      	mov	r6, r1
 80088b0:	4619      	mov	r1, r3
 80088b2:	462b      	mov	r3, r5
 80088b4:	bfbb      	ittet	lt
 80088b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088ba:	461d      	movlt	r5, r3
 80088bc:	2300      	movge	r3, #0
 80088be:	232d      	movlt	r3, #45	; 0x2d
 80088c0:	700b      	strb	r3, [r1, #0]
 80088c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088c8:	4691      	mov	r9, r2
 80088ca:	f023 0820 	bic.w	r8, r3, #32
 80088ce:	bfbc      	itt	lt
 80088d0:	4622      	movlt	r2, r4
 80088d2:	4614      	movlt	r4, r2
 80088d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088d8:	d005      	beq.n	80088e6 <__cvt+0x42>
 80088da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088de:	d100      	bne.n	80088e2 <__cvt+0x3e>
 80088e0:	3601      	adds	r6, #1
 80088e2:	2102      	movs	r1, #2
 80088e4:	e000      	b.n	80088e8 <__cvt+0x44>
 80088e6:	2103      	movs	r1, #3
 80088e8:	ab03      	add	r3, sp, #12
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	ab02      	add	r3, sp, #8
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	ec45 4b10 	vmov	d0, r4, r5
 80088f4:	4653      	mov	r3, sl
 80088f6:	4632      	mov	r2, r6
 80088f8:	f000 fdaa 	bl	8009450 <_dtoa_r>
 80088fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008900:	4607      	mov	r7, r0
 8008902:	d102      	bne.n	800890a <__cvt+0x66>
 8008904:	f019 0f01 	tst.w	r9, #1
 8008908:	d022      	beq.n	8008950 <__cvt+0xac>
 800890a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800890e:	eb07 0906 	add.w	r9, r7, r6
 8008912:	d110      	bne.n	8008936 <__cvt+0x92>
 8008914:	783b      	ldrb	r3, [r7, #0]
 8008916:	2b30      	cmp	r3, #48	; 0x30
 8008918:	d10a      	bne.n	8008930 <__cvt+0x8c>
 800891a:	2200      	movs	r2, #0
 800891c:	2300      	movs	r3, #0
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f8 f8f9 	bl	8000b18 <__aeabi_dcmpeq>
 8008926:	b918      	cbnz	r0, 8008930 <__cvt+0x8c>
 8008928:	f1c6 0601 	rsb	r6, r6, #1
 800892c:	f8ca 6000 	str.w	r6, [sl]
 8008930:	f8da 3000 	ldr.w	r3, [sl]
 8008934:	4499      	add	r9, r3
 8008936:	2200      	movs	r2, #0
 8008938:	2300      	movs	r3, #0
 800893a:	4620      	mov	r0, r4
 800893c:	4629      	mov	r1, r5
 800893e:	f7f8 f8eb 	bl	8000b18 <__aeabi_dcmpeq>
 8008942:	b108      	cbz	r0, 8008948 <__cvt+0xa4>
 8008944:	f8cd 900c 	str.w	r9, [sp, #12]
 8008948:	2230      	movs	r2, #48	; 0x30
 800894a:	9b03      	ldr	r3, [sp, #12]
 800894c:	454b      	cmp	r3, r9
 800894e:	d307      	bcc.n	8008960 <__cvt+0xbc>
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008954:	1bdb      	subs	r3, r3, r7
 8008956:	4638      	mov	r0, r7
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	b004      	add	sp, #16
 800895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008960:	1c59      	adds	r1, r3, #1
 8008962:	9103      	str	r1, [sp, #12]
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	e7f0      	b.n	800894a <__cvt+0xa6>

08008968 <__exponent>:
 8008968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800896a:	4603      	mov	r3, r0
 800896c:	2900      	cmp	r1, #0
 800896e:	bfb8      	it	lt
 8008970:	4249      	neglt	r1, r1
 8008972:	f803 2b02 	strb.w	r2, [r3], #2
 8008976:	bfb4      	ite	lt
 8008978:	222d      	movlt	r2, #45	; 0x2d
 800897a:	222b      	movge	r2, #43	; 0x2b
 800897c:	2909      	cmp	r1, #9
 800897e:	7042      	strb	r2, [r0, #1]
 8008980:	dd2a      	ble.n	80089d8 <__exponent+0x70>
 8008982:	f10d 0407 	add.w	r4, sp, #7
 8008986:	46a4      	mov	ip, r4
 8008988:	270a      	movs	r7, #10
 800898a:	46a6      	mov	lr, r4
 800898c:	460a      	mov	r2, r1
 800898e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008992:	fb07 1516 	mls	r5, r7, r6, r1
 8008996:	3530      	adds	r5, #48	; 0x30
 8008998:	2a63      	cmp	r2, #99	; 0x63
 800899a:	f104 34ff 	add.w	r4, r4, #4294967295
 800899e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089a2:	4631      	mov	r1, r6
 80089a4:	dcf1      	bgt.n	800898a <__exponent+0x22>
 80089a6:	3130      	adds	r1, #48	; 0x30
 80089a8:	f1ae 0502 	sub.w	r5, lr, #2
 80089ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089b0:	1c44      	adds	r4, r0, #1
 80089b2:	4629      	mov	r1, r5
 80089b4:	4561      	cmp	r1, ip
 80089b6:	d30a      	bcc.n	80089ce <__exponent+0x66>
 80089b8:	f10d 0209 	add.w	r2, sp, #9
 80089bc:	eba2 020e 	sub.w	r2, r2, lr
 80089c0:	4565      	cmp	r5, ip
 80089c2:	bf88      	it	hi
 80089c4:	2200      	movhi	r2, #0
 80089c6:	4413      	add	r3, r2
 80089c8:	1a18      	subs	r0, r3, r0
 80089ca:	b003      	add	sp, #12
 80089cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089d6:	e7ed      	b.n	80089b4 <__exponent+0x4c>
 80089d8:	2330      	movs	r3, #48	; 0x30
 80089da:	3130      	adds	r1, #48	; 0x30
 80089dc:	7083      	strb	r3, [r0, #2]
 80089de:	70c1      	strb	r1, [r0, #3]
 80089e0:	1d03      	adds	r3, r0, #4
 80089e2:	e7f1      	b.n	80089c8 <__exponent+0x60>

080089e4 <_printf_float>:
 80089e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	ed2d 8b02 	vpush	{d8}
 80089ec:	b08d      	sub	sp, #52	; 0x34
 80089ee:	460c      	mov	r4, r1
 80089f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089f4:	4616      	mov	r6, r2
 80089f6:	461f      	mov	r7, r3
 80089f8:	4605      	mov	r5, r0
 80089fa:	f001 fbd7 	bl	800a1ac <_localeconv_r>
 80089fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008a02:	4650      	mov	r0, sl
 8008a04:	f7f7 fc0c 	bl	8000220 <strlen>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	f8d8 3000 	ldr.w	r3, [r8]
 8008a14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a18:	3307      	adds	r3, #7
 8008a1a:	f023 0307 	bic.w	r3, r3, #7
 8008a1e:	f103 0208 	add.w	r2, r3, #8
 8008a22:	f8c8 2000 	str.w	r2, [r8]
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a3c:	ee08 0a10 	vmov	s16, r0
 8008a40:	4b9f      	ldr	r3, [pc, #636]	; (8008cc0 <_printf_float+0x2dc>)
 8008a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	f7f8 f897 	bl	8000b7c <__aeabi_dcmpun>
 8008a4e:	bb88      	cbnz	r0, 8008ab4 <_printf_float+0xd0>
 8008a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a54:	4b9a      	ldr	r3, [pc, #616]	; (8008cc0 <_printf_float+0x2dc>)
 8008a56:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5a:	f7f8 f871 	bl	8000b40 <__aeabi_dcmple>
 8008a5e:	bb48      	cbnz	r0, 8008ab4 <_printf_float+0xd0>
 8008a60:	2200      	movs	r2, #0
 8008a62:	2300      	movs	r3, #0
 8008a64:	4640      	mov	r0, r8
 8008a66:	4649      	mov	r1, r9
 8008a68:	f7f8 f860 	bl	8000b2c <__aeabi_dcmplt>
 8008a6c:	b110      	cbz	r0, 8008a74 <_printf_float+0x90>
 8008a6e:	232d      	movs	r3, #45	; 0x2d
 8008a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a74:	4b93      	ldr	r3, [pc, #588]	; (8008cc4 <_printf_float+0x2e0>)
 8008a76:	4894      	ldr	r0, [pc, #592]	; (8008cc8 <_printf_float+0x2e4>)
 8008a78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a7c:	bf94      	ite	ls
 8008a7e:	4698      	movls	r8, r3
 8008a80:	4680      	movhi	r8, r0
 8008a82:	2303      	movs	r3, #3
 8008a84:	6123      	str	r3, [r4, #16]
 8008a86:	9b05      	ldr	r3, [sp, #20]
 8008a88:	f023 0204 	bic.w	r2, r3, #4
 8008a8c:	6022      	str	r2, [r4, #0]
 8008a8e:	f04f 0900 	mov.w	r9, #0
 8008a92:	9700      	str	r7, [sp, #0]
 8008a94:	4633      	mov	r3, r6
 8008a96:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f000 f9d8 	bl	8008e50 <_printf_common>
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	f040 8090 	bne.w	8008bc6 <_printf_float+0x1e2>
 8008aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aaa:	b00d      	add	sp, #52	; 0x34
 8008aac:	ecbd 8b02 	vpop	{d8}
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	4640      	mov	r0, r8
 8008aba:	4649      	mov	r1, r9
 8008abc:	f7f8 f85e 	bl	8000b7c <__aeabi_dcmpun>
 8008ac0:	b140      	cbz	r0, 8008ad4 <_printf_float+0xf0>
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfbc      	itt	lt
 8008ac8:	232d      	movlt	r3, #45	; 0x2d
 8008aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ace:	487f      	ldr	r0, [pc, #508]	; (8008ccc <_printf_float+0x2e8>)
 8008ad0:	4b7f      	ldr	r3, [pc, #508]	; (8008cd0 <_printf_float+0x2ec>)
 8008ad2:	e7d1      	b.n	8008a78 <_printf_float+0x94>
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ada:	9206      	str	r2, [sp, #24]
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	d13f      	bne.n	8008b60 <_printf_float+0x17c>
 8008ae0:	2306      	movs	r3, #6
 8008ae2:	6063      	str	r3, [r4, #4]
 8008ae4:	9b05      	ldr	r3, [sp, #20]
 8008ae6:	6861      	ldr	r1, [r4, #4]
 8008ae8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008aec:	2300      	movs	r3, #0
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	ab0a      	add	r3, sp, #40	; 0x28
 8008af2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008af6:	ab09      	add	r3, sp, #36	; 0x24
 8008af8:	ec49 8b10 	vmov	d0, r8, r9
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	6022      	str	r2, [r4, #0]
 8008b00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b04:	4628      	mov	r0, r5
 8008b06:	f7ff fecd 	bl	80088a4 <__cvt>
 8008b0a:	9b06      	ldr	r3, [sp, #24]
 8008b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b0e:	2b47      	cmp	r3, #71	; 0x47
 8008b10:	4680      	mov	r8, r0
 8008b12:	d108      	bne.n	8008b26 <_printf_float+0x142>
 8008b14:	1cc8      	adds	r0, r1, #3
 8008b16:	db02      	blt.n	8008b1e <_printf_float+0x13a>
 8008b18:	6863      	ldr	r3, [r4, #4]
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	dd41      	ble.n	8008ba2 <_printf_float+0x1be>
 8008b1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b22:	fa5f fb8b 	uxtb.w	fp, fp
 8008b26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b2a:	d820      	bhi.n	8008b6e <_printf_float+0x18a>
 8008b2c:	3901      	subs	r1, #1
 8008b2e:	465a      	mov	r2, fp
 8008b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b34:	9109      	str	r1, [sp, #36]	; 0x24
 8008b36:	f7ff ff17 	bl	8008968 <__exponent>
 8008b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b3c:	1813      	adds	r3, r2, r0
 8008b3e:	2a01      	cmp	r2, #1
 8008b40:	4681      	mov	r9, r0
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	dc02      	bgt.n	8008b4c <_printf_float+0x168>
 8008b46:	6822      	ldr	r2, [r4, #0]
 8008b48:	07d2      	lsls	r2, r2, #31
 8008b4a:	d501      	bpl.n	8008b50 <_printf_float+0x16c>
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	6123      	str	r3, [r4, #16]
 8008b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d09c      	beq.n	8008a92 <_printf_float+0xae>
 8008b58:	232d      	movs	r3, #45	; 0x2d
 8008b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5e:	e798      	b.n	8008a92 <_printf_float+0xae>
 8008b60:	9a06      	ldr	r2, [sp, #24]
 8008b62:	2a47      	cmp	r2, #71	; 0x47
 8008b64:	d1be      	bne.n	8008ae4 <_printf_float+0x100>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1bc      	bne.n	8008ae4 <_printf_float+0x100>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7b9      	b.n	8008ae2 <_printf_float+0xfe>
 8008b6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b72:	d118      	bne.n	8008ba6 <_printf_float+0x1c2>
 8008b74:	2900      	cmp	r1, #0
 8008b76:	6863      	ldr	r3, [r4, #4]
 8008b78:	dd0b      	ble.n	8008b92 <_printf_float+0x1ae>
 8008b7a:	6121      	str	r1, [r4, #16]
 8008b7c:	b913      	cbnz	r3, 8008b84 <_printf_float+0x1a0>
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	07d0      	lsls	r0, r2, #31
 8008b82:	d502      	bpl.n	8008b8a <_printf_float+0x1a6>
 8008b84:	3301      	adds	r3, #1
 8008b86:	440b      	add	r3, r1
 8008b88:	6123      	str	r3, [r4, #16]
 8008b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b8c:	f04f 0900 	mov.w	r9, #0
 8008b90:	e7de      	b.n	8008b50 <_printf_float+0x16c>
 8008b92:	b913      	cbnz	r3, 8008b9a <_printf_float+0x1b6>
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	07d2      	lsls	r2, r2, #31
 8008b98:	d501      	bpl.n	8008b9e <_printf_float+0x1ba>
 8008b9a:	3302      	adds	r3, #2
 8008b9c:	e7f4      	b.n	8008b88 <_printf_float+0x1a4>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e7f2      	b.n	8008b88 <_printf_float+0x1a4>
 8008ba2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba8:	4299      	cmp	r1, r3
 8008baa:	db05      	blt.n	8008bb8 <_printf_float+0x1d4>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	6121      	str	r1, [r4, #16]
 8008bb0:	07d8      	lsls	r0, r3, #31
 8008bb2:	d5ea      	bpl.n	8008b8a <_printf_float+0x1a6>
 8008bb4:	1c4b      	adds	r3, r1, #1
 8008bb6:	e7e7      	b.n	8008b88 <_printf_float+0x1a4>
 8008bb8:	2900      	cmp	r1, #0
 8008bba:	bfd4      	ite	le
 8008bbc:	f1c1 0202 	rsble	r2, r1, #2
 8008bc0:	2201      	movgt	r2, #1
 8008bc2:	4413      	add	r3, r2
 8008bc4:	e7e0      	b.n	8008b88 <_printf_float+0x1a4>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	055a      	lsls	r2, r3, #21
 8008bca:	d407      	bmi.n	8008bdc <_printf_float+0x1f8>
 8008bcc:	6923      	ldr	r3, [r4, #16]
 8008bce:	4642      	mov	r2, r8
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d12c      	bne.n	8008c34 <_printf_float+0x250>
 8008bda:	e764      	b.n	8008aa6 <_printf_float+0xc2>
 8008bdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008be0:	f240 80e0 	bls.w	8008da4 <_printf_float+0x3c0>
 8008be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008be8:	2200      	movs	r2, #0
 8008bea:	2300      	movs	r3, #0
 8008bec:	f7f7 ff94 	bl	8000b18 <__aeabi_dcmpeq>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d034      	beq.n	8008c5e <_printf_float+0x27a>
 8008bf4:	4a37      	ldr	r2, [pc, #220]	; (8008cd4 <_printf_float+0x2f0>)
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af51 	beq.w	8008aa6 <_printf_float+0xc2>
 8008c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	db02      	blt.n	8008c12 <_printf_float+0x22e>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	07d8      	lsls	r0, r3, #31
 8008c10:	d510      	bpl.n	8008c34 <_printf_float+0x250>
 8008c12:	ee18 3a10 	vmov	r3, s16
 8008c16:	4652      	mov	r2, sl
 8008c18:	4631      	mov	r1, r6
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	47b8      	blx	r7
 8008c1e:	3001      	adds	r0, #1
 8008c20:	f43f af41 	beq.w	8008aa6 <_printf_float+0xc2>
 8008c24:	f04f 0800 	mov.w	r8, #0
 8008c28:	f104 091a 	add.w	r9, r4, #26
 8008c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	4543      	cmp	r3, r8
 8008c32:	dc09      	bgt.n	8008c48 <_printf_float+0x264>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	079b      	lsls	r3, r3, #30
 8008c38:	f100 8105 	bmi.w	8008e46 <_printf_float+0x462>
 8008c3c:	68e0      	ldr	r0, [r4, #12]
 8008c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c40:	4298      	cmp	r0, r3
 8008c42:	bfb8      	it	lt
 8008c44:	4618      	movlt	r0, r3
 8008c46:	e730      	b.n	8008aaa <_printf_float+0xc6>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	464a      	mov	r2, r9
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b8      	blx	r7
 8008c52:	3001      	adds	r0, #1
 8008c54:	f43f af27 	beq.w	8008aa6 <_printf_float+0xc2>
 8008c58:	f108 0801 	add.w	r8, r8, #1
 8008c5c:	e7e6      	b.n	8008c2c <_printf_float+0x248>
 8008c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc39      	bgt.n	8008cd8 <_printf_float+0x2f4>
 8008c64:	4a1b      	ldr	r2, [pc, #108]	; (8008cd4 <_printf_float+0x2f0>)
 8008c66:	2301      	movs	r3, #1
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b8      	blx	r7
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f43f af19 	beq.w	8008aa6 <_printf_float+0xc2>
 8008c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	d102      	bne.n	8008c82 <_printf_float+0x29e>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	07d9      	lsls	r1, r3, #31
 8008c80:	d5d8      	bpl.n	8008c34 <_printf_float+0x250>
 8008c82:	ee18 3a10 	vmov	r3, s16
 8008c86:	4652      	mov	r2, sl
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f43f af09 	beq.w	8008aa6 <_printf_float+0xc2>
 8008c94:	f04f 0900 	mov.w	r9, #0
 8008c98:	f104 0a1a 	add.w	sl, r4, #26
 8008c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c9e:	425b      	negs	r3, r3
 8008ca0:	454b      	cmp	r3, r9
 8008ca2:	dc01      	bgt.n	8008ca8 <_printf_float+0x2c4>
 8008ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca6:	e792      	b.n	8008bce <_printf_float+0x1ea>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4652      	mov	r2, sl
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f aef7 	beq.w	8008aa6 <_printf_float+0xc2>
 8008cb8:	f109 0901 	add.w	r9, r9, #1
 8008cbc:	e7ee      	b.n	8008c9c <_printf_float+0x2b8>
 8008cbe:	bf00      	nop
 8008cc0:	7fefffff 	.word	0x7fefffff
 8008cc4:	0800b200 	.word	0x0800b200
 8008cc8:	0800b204 	.word	0x0800b204
 8008ccc:	0800b20c 	.word	0x0800b20c
 8008cd0:	0800b208 	.word	0x0800b208
 8008cd4:	0800b210 	.word	0x0800b210
 8008cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	bfa8      	it	ge
 8008ce0:	461a      	movge	r2, r3
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	4691      	mov	r9, r2
 8008ce6:	dc37      	bgt.n	8008d58 <_printf_float+0x374>
 8008ce8:	f04f 0b00 	mov.w	fp, #0
 8008cec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cf0:	f104 021a 	add.w	r2, r4, #26
 8008cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cf6:	9305      	str	r3, [sp, #20]
 8008cf8:	eba3 0309 	sub.w	r3, r3, r9
 8008cfc:	455b      	cmp	r3, fp
 8008cfe:	dc33      	bgt.n	8008d68 <_printf_float+0x384>
 8008d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d04:	429a      	cmp	r2, r3
 8008d06:	db3b      	blt.n	8008d80 <_printf_float+0x39c>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	07da      	lsls	r2, r3, #31
 8008d0c:	d438      	bmi.n	8008d80 <_printf_float+0x39c>
 8008d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d10:	9b05      	ldr	r3, [sp, #20]
 8008d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	eba2 0901 	sub.w	r9, r2, r1
 8008d1a:	4599      	cmp	r9, r3
 8008d1c:	bfa8      	it	ge
 8008d1e:	4699      	movge	r9, r3
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	dc35      	bgt.n	8008d92 <_printf_float+0x3ae>
 8008d26:	f04f 0800 	mov.w	r8, #0
 8008d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d2e:	f104 0a1a 	add.w	sl, r4, #26
 8008d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	eba3 0309 	sub.w	r3, r3, r9
 8008d3c:	4543      	cmp	r3, r8
 8008d3e:	f77f af79 	ble.w	8008c34 <_printf_float+0x250>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4652      	mov	r2, sl
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f aeaa 	beq.w	8008aa6 <_printf_float+0xc2>
 8008d52:	f108 0801 	add.w	r8, r8, #1
 8008d56:	e7ec      	b.n	8008d32 <_printf_float+0x34e>
 8008d58:	4613      	mov	r3, r2
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	d1c0      	bne.n	8008ce8 <_printf_float+0x304>
 8008d66:	e69e      	b.n	8008aa6 <_printf_float+0xc2>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	9205      	str	r2, [sp, #20]
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	f43f ae97 	beq.w	8008aa6 <_printf_float+0xc2>
 8008d78:	9a05      	ldr	r2, [sp, #20]
 8008d7a:	f10b 0b01 	add.w	fp, fp, #1
 8008d7e:	e7b9      	b.n	8008cf4 <_printf_float+0x310>
 8008d80:	ee18 3a10 	vmov	r3, s16
 8008d84:	4652      	mov	r2, sl
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b8      	blx	r7
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d1be      	bne.n	8008d0e <_printf_float+0x32a>
 8008d90:	e689      	b.n	8008aa6 <_printf_float+0xc2>
 8008d92:	9a05      	ldr	r2, [sp, #20]
 8008d94:	464b      	mov	r3, r9
 8008d96:	4442      	add	r2, r8
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d1c1      	bne.n	8008d26 <_printf_float+0x342>
 8008da2:	e680      	b.n	8008aa6 <_printf_float+0xc2>
 8008da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008da6:	2a01      	cmp	r2, #1
 8008da8:	dc01      	bgt.n	8008dae <_printf_float+0x3ca>
 8008daa:	07db      	lsls	r3, r3, #31
 8008dac:	d538      	bpl.n	8008e20 <_printf_float+0x43c>
 8008dae:	2301      	movs	r3, #1
 8008db0:	4642      	mov	r2, r8
 8008db2:	4631      	mov	r1, r6
 8008db4:	4628      	mov	r0, r5
 8008db6:	47b8      	blx	r7
 8008db8:	3001      	adds	r0, #1
 8008dba:	f43f ae74 	beq.w	8008aa6 <_printf_float+0xc2>
 8008dbe:	ee18 3a10 	vmov	r3, s16
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	47b8      	blx	r7
 8008dca:	3001      	adds	r0, #1
 8008dcc:	f43f ae6b 	beq.w	8008aa6 <_printf_float+0xc2>
 8008dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f7f7 fe9e 	bl	8000b18 <__aeabi_dcmpeq>
 8008ddc:	b9d8      	cbnz	r0, 8008e16 <_printf_float+0x432>
 8008dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de0:	f108 0201 	add.w	r2, r8, #1
 8008de4:	3b01      	subs	r3, #1
 8008de6:	4631      	mov	r1, r6
 8008de8:	4628      	mov	r0, r5
 8008dea:	47b8      	blx	r7
 8008dec:	3001      	adds	r0, #1
 8008dee:	d10e      	bne.n	8008e0e <_printf_float+0x42a>
 8008df0:	e659      	b.n	8008aa6 <_printf_float+0xc2>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4652      	mov	r2, sl
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b8      	blx	r7
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f43f ae52 	beq.w	8008aa6 <_printf_float+0xc2>
 8008e02:	f108 0801 	add.w	r8, r8, #1
 8008e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	4543      	cmp	r3, r8
 8008e0c:	dcf1      	bgt.n	8008df2 <_printf_float+0x40e>
 8008e0e:	464b      	mov	r3, r9
 8008e10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e14:	e6dc      	b.n	8008bd0 <_printf_float+0x1ec>
 8008e16:	f04f 0800 	mov.w	r8, #0
 8008e1a:	f104 0a1a 	add.w	sl, r4, #26
 8008e1e:	e7f2      	b.n	8008e06 <_printf_float+0x422>
 8008e20:	2301      	movs	r3, #1
 8008e22:	4642      	mov	r2, r8
 8008e24:	e7df      	b.n	8008de6 <_printf_float+0x402>
 8008e26:	2301      	movs	r3, #1
 8008e28:	464a      	mov	r2, r9
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b8      	blx	r7
 8008e30:	3001      	adds	r0, #1
 8008e32:	f43f ae38 	beq.w	8008aa6 <_printf_float+0xc2>
 8008e36:	f108 0801 	add.w	r8, r8, #1
 8008e3a:	68e3      	ldr	r3, [r4, #12]
 8008e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e3e:	1a5b      	subs	r3, r3, r1
 8008e40:	4543      	cmp	r3, r8
 8008e42:	dcf0      	bgt.n	8008e26 <_printf_float+0x442>
 8008e44:	e6fa      	b.n	8008c3c <_printf_float+0x258>
 8008e46:	f04f 0800 	mov.w	r8, #0
 8008e4a:	f104 0919 	add.w	r9, r4, #25
 8008e4e:	e7f4      	b.n	8008e3a <_printf_float+0x456>

08008e50 <_printf_common>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	4616      	mov	r6, r2
 8008e56:	4699      	mov	r9, r3
 8008e58:	688a      	ldr	r2, [r1, #8]
 8008e5a:	690b      	ldr	r3, [r1, #16]
 8008e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	bfb8      	it	lt
 8008e64:	4613      	movlt	r3, r2
 8008e66:	6033      	str	r3, [r6, #0]
 8008e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	b10a      	cbz	r2, 8008e76 <_printf_common+0x26>
 8008e72:	3301      	adds	r3, #1
 8008e74:	6033      	str	r3, [r6, #0]
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	0699      	lsls	r1, r3, #26
 8008e7a:	bf42      	ittt	mi
 8008e7c:	6833      	ldrmi	r3, [r6, #0]
 8008e7e:	3302      	addmi	r3, #2
 8008e80:	6033      	strmi	r3, [r6, #0]
 8008e82:	6825      	ldr	r5, [r4, #0]
 8008e84:	f015 0506 	ands.w	r5, r5, #6
 8008e88:	d106      	bne.n	8008e98 <_printf_common+0x48>
 8008e8a:	f104 0a19 	add.w	sl, r4, #25
 8008e8e:	68e3      	ldr	r3, [r4, #12]
 8008e90:	6832      	ldr	r2, [r6, #0]
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	42ab      	cmp	r3, r5
 8008e96:	dc26      	bgt.n	8008ee6 <_printf_common+0x96>
 8008e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e9c:	1e13      	subs	r3, r2, #0
 8008e9e:	6822      	ldr	r2, [r4, #0]
 8008ea0:	bf18      	it	ne
 8008ea2:	2301      	movne	r3, #1
 8008ea4:	0692      	lsls	r2, r2, #26
 8008ea6:	d42b      	bmi.n	8008f00 <_printf_common+0xb0>
 8008ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eac:	4649      	mov	r1, r9
 8008eae:	4638      	mov	r0, r7
 8008eb0:	47c0      	blx	r8
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d01e      	beq.n	8008ef4 <_printf_common+0xa4>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	68e5      	ldr	r5, [r4, #12]
 8008eba:	6832      	ldr	r2, [r6, #0]
 8008ebc:	f003 0306 	and.w	r3, r3, #6
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	bf08      	it	eq
 8008ec4:	1aad      	subeq	r5, r5, r2
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	6922      	ldr	r2, [r4, #16]
 8008eca:	bf0c      	ite	eq
 8008ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ed0:	2500      	movne	r5, #0
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	bfc4      	itt	gt
 8008ed6:	1a9b      	subgt	r3, r3, r2
 8008ed8:	18ed      	addgt	r5, r5, r3
 8008eda:	2600      	movs	r6, #0
 8008edc:	341a      	adds	r4, #26
 8008ede:	42b5      	cmp	r5, r6
 8008ee0:	d11a      	bne.n	8008f18 <_printf_common+0xc8>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e008      	b.n	8008ef8 <_printf_common+0xa8>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4652      	mov	r2, sl
 8008eea:	4649      	mov	r1, r9
 8008eec:	4638      	mov	r0, r7
 8008eee:	47c0      	blx	r8
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d103      	bne.n	8008efc <_printf_common+0xac>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efc:	3501      	adds	r5, #1
 8008efe:	e7c6      	b.n	8008e8e <_printf_common+0x3e>
 8008f00:	18e1      	adds	r1, r4, r3
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	2030      	movs	r0, #48	; 0x30
 8008f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f0a:	4422      	add	r2, r4
 8008f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f14:	3302      	adds	r3, #2
 8008f16:	e7c7      	b.n	8008ea8 <_printf_common+0x58>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4638      	mov	r0, r7
 8008f20:	47c0      	blx	r8
 8008f22:	3001      	adds	r0, #1
 8008f24:	d0e6      	beq.n	8008ef4 <_printf_common+0xa4>
 8008f26:	3601      	adds	r6, #1
 8008f28:	e7d9      	b.n	8008ede <_printf_common+0x8e>
	...

08008f2c <_printf_i>:
 8008f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	460c      	mov	r4, r1
 8008f32:	4691      	mov	r9, r2
 8008f34:	7e27      	ldrb	r7, [r4, #24]
 8008f36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f38:	2f78      	cmp	r7, #120	; 0x78
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	469a      	mov	sl, r3
 8008f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f42:	d807      	bhi.n	8008f54 <_printf_i+0x28>
 8008f44:	2f62      	cmp	r7, #98	; 0x62
 8008f46:	d80a      	bhi.n	8008f5e <_printf_i+0x32>
 8008f48:	2f00      	cmp	r7, #0
 8008f4a:	f000 80d8 	beq.w	80090fe <_printf_i+0x1d2>
 8008f4e:	2f58      	cmp	r7, #88	; 0x58
 8008f50:	f000 80a3 	beq.w	800909a <_printf_i+0x16e>
 8008f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f5c:	e03a      	b.n	8008fd4 <_printf_i+0xa8>
 8008f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f62:	2b15      	cmp	r3, #21
 8008f64:	d8f6      	bhi.n	8008f54 <_printf_i+0x28>
 8008f66:	a001      	add	r0, pc, #4	; (adr r0, 8008f6c <_printf_i+0x40>)
 8008f68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f6c:	08008fc5 	.word	0x08008fc5
 8008f70:	08008fd9 	.word	0x08008fd9
 8008f74:	08008f55 	.word	0x08008f55
 8008f78:	08008f55 	.word	0x08008f55
 8008f7c:	08008f55 	.word	0x08008f55
 8008f80:	08008f55 	.word	0x08008f55
 8008f84:	08008fd9 	.word	0x08008fd9
 8008f88:	08008f55 	.word	0x08008f55
 8008f8c:	08008f55 	.word	0x08008f55
 8008f90:	08008f55 	.word	0x08008f55
 8008f94:	08008f55 	.word	0x08008f55
 8008f98:	080090e5 	.word	0x080090e5
 8008f9c:	08009009 	.word	0x08009009
 8008fa0:	080090c7 	.word	0x080090c7
 8008fa4:	08008f55 	.word	0x08008f55
 8008fa8:	08008f55 	.word	0x08008f55
 8008fac:	08009107 	.word	0x08009107
 8008fb0:	08008f55 	.word	0x08008f55
 8008fb4:	08009009 	.word	0x08009009
 8008fb8:	08008f55 	.word	0x08008f55
 8008fbc:	08008f55 	.word	0x08008f55
 8008fc0:	080090cf 	.word	0x080090cf
 8008fc4:	680b      	ldr	r3, [r1, #0]
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	600a      	str	r2, [r1, #0]
 8008fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e0a3      	b.n	8009120 <_printf_i+0x1f4>
 8008fd8:	6825      	ldr	r5, [r4, #0]
 8008fda:	6808      	ldr	r0, [r1, #0]
 8008fdc:	062e      	lsls	r6, r5, #24
 8008fde:	f100 0304 	add.w	r3, r0, #4
 8008fe2:	d50a      	bpl.n	8008ffa <_printf_i+0xce>
 8008fe4:	6805      	ldr	r5, [r0, #0]
 8008fe6:	600b      	str	r3, [r1, #0]
 8008fe8:	2d00      	cmp	r5, #0
 8008fea:	da03      	bge.n	8008ff4 <_printf_i+0xc8>
 8008fec:	232d      	movs	r3, #45	; 0x2d
 8008fee:	426d      	negs	r5, r5
 8008ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ff4:	485e      	ldr	r0, [pc, #376]	; (8009170 <_printf_i+0x244>)
 8008ff6:	230a      	movs	r3, #10
 8008ff8:	e019      	b.n	800902e <_printf_i+0x102>
 8008ffa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ffe:	6805      	ldr	r5, [r0, #0]
 8009000:	600b      	str	r3, [r1, #0]
 8009002:	bf18      	it	ne
 8009004:	b22d      	sxthne	r5, r5
 8009006:	e7ef      	b.n	8008fe8 <_printf_i+0xbc>
 8009008:	680b      	ldr	r3, [r1, #0]
 800900a:	6825      	ldr	r5, [r4, #0]
 800900c:	1d18      	adds	r0, r3, #4
 800900e:	6008      	str	r0, [r1, #0]
 8009010:	0628      	lsls	r0, r5, #24
 8009012:	d501      	bpl.n	8009018 <_printf_i+0xec>
 8009014:	681d      	ldr	r5, [r3, #0]
 8009016:	e002      	b.n	800901e <_printf_i+0xf2>
 8009018:	0669      	lsls	r1, r5, #25
 800901a:	d5fb      	bpl.n	8009014 <_printf_i+0xe8>
 800901c:	881d      	ldrh	r5, [r3, #0]
 800901e:	4854      	ldr	r0, [pc, #336]	; (8009170 <_printf_i+0x244>)
 8009020:	2f6f      	cmp	r7, #111	; 0x6f
 8009022:	bf0c      	ite	eq
 8009024:	2308      	moveq	r3, #8
 8009026:	230a      	movne	r3, #10
 8009028:	2100      	movs	r1, #0
 800902a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800902e:	6866      	ldr	r6, [r4, #4]
 8009030:	60a6      	str	r6, [r4, #8]
 8009032:	2e00      	cmp	r6, #0
 8009034:	bfa2      	ittt	ge
 8009036:	6821      	ldrge	r1, [r4, #0]
 8009038:	f021 0104 	bicge.w	r1, r1, #4
 800903c:	6021      	strge	r1, [r4, #0]
 800903e:	b90d      	cbnz	r5, 8009044 <_printf_i+0x118>
 8009040:	2e00      	cmp	r6, #0
 8009042:	d04d      	beq.n	80090e0 <_printf_i+0x1b4>
 8009044:	4616      	mov	r6, r2
 8009046:	fbb5 f1f3 	udiv	r1, r5, r3
 800904a:	fb03 5711 	mls	r7, r3, r1, r5
 800904e:	5dc7      	ldrb	r7, [r0, r7]
 8009050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009054:	462f      	mov	r7, r5
 8009056:	42bb      	cmp	r3, r7
 8009058:	460d      	mov	r5, r1
 800905a:	d9f4      	bls.n	8009046 <_printf_i+0x11a>
 800905c:	2b08      	cmp	r3, #8
 800905e:	d10b      	bne.n	8009078 <_printf_i+0x14c>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	07df      	lsls	r7, r3, #31
 8009064:	d508      	bpl.n	8009078 <_printf_i+0x14c>
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	6861      	ldr	r1, [r4, #4]
 800906a:	4299      	cmp	r1, r3
 800906c:	bfde      	ittt	le
 800906e:	2330      	movle	r3, #48	; 0x30
 8009070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009074:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009078:	1b92      	subs	r2, r2, r6
 800907a:	6122      	str	r2, [r4, #16]
 800907c:	f8cd a000 	str.w	sl, [sp]
 8009080:	464b      	mov	r3, r9
 8009082:	aa03      	add	r2, sp, #12
 8009084:	4621      	mov	r1, r4
 8009086:	4640      	mov	r0, r8
 8009088:	f7ff fee2 	bl	8008e50 <_printf_common>
 800908c:	3001      	adds	r0, #1
 800908e:	d14c      	bne.n	800912a <_printf_i+0x1fe>
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	b004      	add	sp, #16
 8009096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909a:	4835      	ldr	r0, [pc, #212]	; (8009170 <_printf_i+0x244>)
 800909c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	680e      	ldr	r6, [r1, #0]
 80090a4:	061f      	lsls	r7, r3, #24
 80090a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80090aa:	600e      	str	r6, [r1, #0]
 80090ac:	d514      	bpl.n	80090d8 <_printf_i+0x1ac>
 80090ae:	07d9      	lsls	r1, r3, #31
 80090b0:	bf44      	itt	mi
 80090b2:	f043 0320 	orrmi.w	r3, r3, #32
 80090b6:	6023      	strmi	r3, [r4, #0]
 80090b8:	b91d      	cbnz	r5, 80090c2 <_printf_i+0x196>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	f023 0320 	bic.w	r3, r3, #32
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	2310      	movs	r3, #16
 80090c4:	e7b0      	b.n	8009028 <_printf_i+0xfc>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	f043 0320 	orr.w	r3, r3, #32
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	2378      	movs	r3, #120	; 0x78
 80090d0:	4828      	ldr	r0, [pc, #160]	; (8009174 <_printf_i+0x248>)
 80090d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090d6:	e7e3      	b.n	80090a0 <_printf_i+0x174>
 80090d8:	065e      	lsls	r6, r3, #25
 80090da:	bf48      	it	mi
 80090dc:	b2ad      	uxthmi	r5, r5
 80090de:	e7e6      	b.n	80090ae <_printf_i+0x182>
 80090e0:	4616      	mov	r6, r2
 80090e2:	e7bb      	b.n	800905c <_printf_i+0x130>
 80090e4:	680b      	ldr	r3, [r1, #0]
 80090e6:	6826      	ldr	r6, [r4, #0]
 80090e8:	6960      	ldr	r0, [r4, #20]
 80090ea:	1d1d      	adds	r5, r3, #4
 80090ec:	600d      	str	r5, [r1, #0]
 80090ee:	0635      	lsls	r5, r6, #24
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	d501      	bpl.n	80090f8 <_printf_i+0x1cc>
 80090f4:	6018      	str	r0, [r3, #0]
 80090f6:	e002      	b.n	80090fe <_printf_i+0x1d2>
 80090f8:	0671      	lsls	r1, r6, #25
 80090fa:	d5fb      	bpl.n	80090f4 <_printf_i+0x1c8>
 80090fc:	8018      	strh	r0, [r3, #0]
 80090fe:	2300      	movs	r3, #0
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	4616      	mov	r6, r2
 8009104:	e7ba      	b.n	800907c <_printf_i+0x150>
 8009106:	680b      	ldr	r3, [r1, #0]
 8009108:	1d1a      	adds	r2, r3, #4
 800910a:	600a      	str	r2, [r1, #0]
 800910c:	681e      	ldr	r6, [r3, #0]
 800910e:	6862      	ldr	r2, [r4, #4]
 8009110:	2100      	movs	r1, #0
 8009112:	4630      	mov	r0, r6
 8009114:	f7f7 f88c 	bl	8000230 <memchr>
 8009118:	b108      	cbz	r0, 800911e <_printf_i+0x1f2>
 800911a:	1b80      	subs	r0, r0, r6
 800911c:	6060      	str	r0, [r4, #4]
 800911e:	6863      	ldr	r3, [r4, #4]
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	2300      	movs	r3, #0
 8009124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009128:	e7a8      	b.n	800907c <_printf_i+0x150>
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	4632      	mov	r2, r6
 800912e:	4649      	mov	r1, r9
 8009130:	4640      	mov	r0, r8
 8009132:	47d0      	blx	sl
 8009134:	3001      	adds	r0, #1
 8009136:	d0ab      	beq.n	8009090 <_printf_i+0x164>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	079b      	lsls	r3, r3, #30
 800913c:	d413      	bmi.n	8009166 <_printf_i+0x23a>
 800913e:	68e0      	ldr	r0, [r4, #12]
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	4298      	cmp	r0, r3
 8009144:	bfb8      	it	lt
 8009146:	4618      	movlt	r0, r3
 8009148:	e7a4      	b.n	8009094 <_printf_i+0x168>
 800914a:	2301      	movs	r3, #1
 800914c:	4632      	mov	r2, r6
 800914e:	4649      	mov	r1, r9
 8009150:	4640      	mov	r0, r8
 8009152:	47d0      	blx	sl
 8009154:	3001      	adds	r0, #1
 8009156:	d09b      	beq.n	8009090 <_printf_i+0x164>
 8009158:	3501      	adds	r5, #1
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	9903      	ldr	r1, [sp, #12]
 800915e:	1a5b      	subs	r3, r3, r1
 8009160:	42ab      	cmp	r3, r5
 8009162:	dcf2      	bgt.n	800914a <_printf_i+0x21e>
 8009164:	e7eb      	b.n	800913e <_printf_i+0x212>
 8009166:	2500      	movs	r5, #0
 8009168:	f104 0619 	add.w	r6, r4, #25
 800916c:	e7f5      	b.n	800915a <_printf_i+0x22e>
 800916e:	bf00      	nop
 8009170:	0800b212 	.word	0x0800b212
 8009174:	0800b223 	.word	0x0800b223

08009178 <cleanup_glue>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	6809      	ldr	r1, [r1, #0]
 800917e:	4605      	mov	r5, r0
 8009180:	b109      	cbz	r1, 8009186 <cleanup_glue+0xe>
 8009182:	f7ff fff9 	bl	8009178 <cleanup_glue>
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800918e:	f001 bbc5 	b.w	800a91c <_free_r>
	...

08009194 <_reclaim_reent>:
 8009194:	4b2c      	ldr	r3, [pc, #176]	; (8009248 <_reclaim_reent+0xb4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4283      	cmp	r3, r0
 800919a:	b570      	push	{r4, r5, r6, lr}
 800919c:	4604      	mov	r4, r0
 800919e:	d051      	beq.n	8009244 <_reclaim_reent+0xb0>
 80091a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091a2:	b143      	cbz	r3, 80091b6 <_reclaim_reent+0x22>
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d14a      	bne.n	8009240 <_reclaim_reent+0xac>
 80091aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	b111      	cbz	r1, 80091b6 <_reclaim_reent+0x22>
 80091b0:	4620      	mov	r0, r4
 80091b2:	f001 fbb3 	bl	800a91c <_free_r>
 80091b6:	6961      	ldr	r1, [r4, #20]
 80091b8:	b111      	cbz	r1, 80091c0 <_reclaim_reent+0x2c>
 80091ba:	4620      	mov	r0, r4
 80091bc:	f001 fbae 	bl	800a91c <_free_r>
 80091c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091c2:	b111      	cbz	r1, 80091ca <_reclaim_reent+0x36>
 80091c4:	4620      	mov	r0, r4
 80091c6:	f001 fba9 	bl	800a91c <_free_r>
 80091ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091cc:	b111      	cbz	r1, 80091d4 <_reclaim_reent+0x40>
 80091ce:	4620      	mov	r0, r4
 80091d0:	f001 fba4 	bl	800a91c <_free_r>
 80091d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091d6:	b111      	cbz	r1, 80091de <_reclaim_reent+0x4a>
 80091d8:	4620      	mov	r0, r4
 80091da:	f001 fb9f 	bl	800a91c <_free_r>
 80091de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091e0:	b111      	cbz	r1, 80091e8 <_reclaim_reent+0x54>
 80091e2:	4620      	mov	r0, r4
 80091e4:	f001 fb9a 	bl	800a91c <_free_r>
 80091e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80091ea:	b111      	cbz	r1, 80091f2 <_reclaim_reent+0x5e>
 80091ec:	4620      	mov	r0, r4
 80091ee:	f001 fb95 	bl	800a91c <_free_r>
 80091f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80091f4:	b111      	cbz	r1, 80091fc <_reclaim_reent+0x68>
 80091f6:	4620      	mov	r0, r4
 80091f8:	f001 fb90 	bl	800a91c <_free_r>
 80091fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091fe:	b111      	cbz	r1, 8009206 <_reclaim_reent+0x72>
 8009200:	4620      	mov	r0, r4
 8009202:	f001 fb8b 	bl	800a91c <_free_r>
 8009206:	69a3      	ldr	r3, [r4, #24]
 8009208:	b1e3      	cbz	r3, 8009244 <_reclaim_reent+0xb0>
 800920a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800920c:	4620      	mov	r0, r4
 800920e:	4798      	blx	r3
 8009210:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009212:	b1b9      	cbz	r1, 8009244 <_reclaim_reent+0xb0>
 8009214:	4620      	mov	r0, r4
 8009216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800921a:	f7ff bfad 	b.w	8009178 <cleanup_glue>
 800921e:	5949      	ldr	r1, [r1, r5]
 8009220:	b941      	cbnz	r1, 8009234 <_reclaim_reent+0xa0>
 8009222:	3504      	adds	r5, #4
 8009224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009226:	2d80      	cmp	r5, #128	; 0x80
 8009228:	68d9      	ldr	r1, [r3, #12]
 800922a:	d1f8      	bne.n	800921e <_reclaim_reent+0x8a>
 800922c:	4620      	mov	r0, r4
 800922e:	f001 fb75 	bl	800a91c <_free_r>
 8009232:	e7ba      	b.n	80091aa <_reclaim_reent+0x16>
 8009234:	680e      	ldr	r6, [r1, #0]
 8009236:	4620      	mov	r0, r4
 8009238:	f001 fb70 	bl	800a91c <_free_r>
 800923c:	4631      	mov	r1, r6
 800923e:	e7ef      	b.n	8009220 <_reclaim_reent+0x8c>
 8009240:	2500      	movs	r5, #0
 8009242:	e7ef      	b.n	8009224 <_reclaim_reent+0x90>
 8009244:	bd70      	pop	{r4, r5, r6, pc}
 8009246:	bf00      	nop
 8009248:	20000010 	.word	0x20000010

0800924c <_sbrk_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d06      	ldr	r5, [pc, #24]	; (8009268 <_sbrk_r+0x1c>)
 8009250:	2300      	movs	r3, #0
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	f7f8 fa7a 	bl	8001750 <_sbrk>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_sbrk_r+0x1a>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_sbrk_r+0x1a>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20001dac 	.word	0x20001dac

0800926c <__sread>:
 800926c:	b510      	push	{r4, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	f001 fba2 	bl	800a9bc <_read_r>
 8009278:	2800      	cmp	r0, #0
 800927a:	bfab      	itete	ge
 800927c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800927e:	89a3      	ldrhlt	r3, [r4, #12]
 8009280:	181b      	addge	r3, r3, r0
 8009282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009286:	bfac      	ite	ge
 8009288:	6563      	strge	r3, [r4, #84]	; 0x54
 800928a:	81a3      	strhlt	r3, [r4, #12]
 800928c:	bd10      	pop	{r4, pc}

0800928e <__swrite>:
 800928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	461f      	mov	r7, r3
 8009294:	898b      	ldrh	r3, [r1, #12]
 8009296:	05db      	lsls	r3, r3, #23
 8009298:	4605      	mov	r5, r0
 800929a:	460c      	mov	r4, r1
 800929c:	4616      	mov	r6, r2
 800929e:	d505      	bpl.n	80092ac <__swrite+0x1e>
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	2302      	movs	r3, #2
 80092a6:	2200      	movs	r2, #0
 80092a8:	f000 ff84 	bl	800a1b4 <_lseek_r>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	4632      	mov	r2, r6
 80092ba:	463b      	mov	r3, r7
 80092bc:	4628      	mov	r0, r5
 80092be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c2:	f000 b817 	b.w	80092f4 <_write_r>

080092c6 <__sseek>:
 80092c6:	b510      	push	{r4, lr}
 80092c8:	460c      	mov	r4, r1
 80092ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ce:	f000 ff71 	bl	800a1b4 <_lseek_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	bf15      	itete	ne
 80092d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e2:	81a3      	strheq	r3, [r4, #12]
 80092e4:	bf18      	it	ne
 80092e6:	81a3      	strhne	r3, [r4, #12]
 80092e8:	bd10      	pop	{r4, pc}

080092ea <__sclose>:
 80092ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ee:	f000 b813 	b.w	8009318 <_close_r>
	...

080092f4 <_write_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4d07      	ldr	r5, [pc, #28]	; (8009314 <_write_r+0x20>)
 80092f8:	4604      	mov	r4, r0
 80092fa:	4608      	mov	r0, r1
 80092fc:	4611      	mov	r1, r2
 80092fe:	2200      	movs	r2, #0
 8009300:	602a      	str	r2, [r5, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	f7f7 ff78 	bl	80011f8 <_write>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_write_r+0x1e>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_write_r+0x1e>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	20001dac 	.word	0x20001dac

08009318 <_close_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d06      	ldr	r5, [pc, #24]	; (8009334 <_close_r+0x1c>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7f8 f9df 	bl	80016e6 <_close>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_close_r+0x1a>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_close_r+0x1a>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	20001dac 	.word	0x20001dac

08009338 <quorem>:
 8009338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	6903      	ldr	r3, [r0, #16]
 800933e:	690c      	ldr	r4, [r1, #16]
 8009340:	42a3      	cmp	r3, r4
 8009342:	4607      	mov	r7, r0
 8009344:	f2c0 8081 	blt.w	800944a <quorem+0x112>
 8009348:	3c01      	subs	r4, #1
 800934a:	f101 0814 	add.w	r8, r1, #20
 800934e:	f100 0514 	add.w	r5, r0, #20
 8009352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800935c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009360:	3301      	adds	r3, #1
 8009362:	429a      	cmp	r2, r3
 8009364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800936c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009370:	d331      	bcc.n	80093d6 <quorem+0x9e>
 8009372:	f04f 0e00 	mov.w	lr, #0
 8009376:	4640      	mov	r0, r8
 8009378:	46ac      	mov	ip, r5
 800937a:	46f2      	mov	sl, lr
 800937c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009380:	b293      	uxth	r3, r2
 8009382:	fb06 e303 	mla	r3, r6, r3, lr
 8009386:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800938a:	b29b      	uxth	r3, r3
 800938c:	ebaa 0303 	sub.w	r3, sl, r3
 8009390:	0c12      	lsrs	r2, r2, #16
 8009392:	f8dc a000 	ldr.w	sl, [ip]
 8009396:	fb06 e202 	mla	r2, r6, r2, lr
 800939a:	fa13 f38a 	uxtah	r3, r3, sl
 800939e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093a2:	fa1f fa82 	uxth.w	sl, r2
 80093a6:	f8dc 2000 	ldr.w	r2, [ip]
 80093aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80093ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093b8:	4581      	cmp	r9, r0
 80093ba:	f84c 3b04 	str.w	r3, [ip], #4
 80093be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093c2:	d2db      	bcs.n	800937c <quorem+0x44>
 80093c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80093c8:	b92b      	cbnz	r3, 80093d6 <quorem+0x9e>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	3b04      	subs	r3, #4
 80093ce:	429d      	cmp	r5, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	d32e      	bcc.n	8009432 <quorem+0xfa>
 80093d4:	613c      	str	r4, [r7, #16]
 80093d6:	4638      	mov	r0, r7
 80093d8:	f001 f990 	bl	800a6fc <__mcmp>
 80093dc:	2800      	cmp	r0, #0
 80093de:	db24      	blt.n	800942a <quorem+0xf2>
 80093e0:	3601      	adds	r6, #1
 80093e2:	4628      	mov	r0, r5
 80093e4:	f04f 0c00 	mov.w	ip, #0
 80093e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80093ec:	f8d0 e000 	ldr.w	lr, [r0]
 80093f0:	b293      	uxth	r3, r2
 80093f2:	ebac 0303 	sub.w	r3, ip, r3
 80093f6:	0c12      	lsrs	r2, r2, #16
 80093f8:	fa13 f38e 	uxtah	r3, r3, lr
 80093fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009404:	b29b      	uxth	r3, r3
 8009406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800940a:	45c1      	cmp	r9, r8
 800940c:	f840 3b04 	str.w	r3, [r0], #4
 8009410:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009414:	d2e8      	bcs.n	80093e8 <quorem+0xb0>
 8009416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800941a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800941e:	b922      	cbnz	r2, 800942a <quorem+0xf2>
 8009420:	3b04      	subs	r3, #4
 8009422:	429d      	cmp	r5, r3
 8009424:	461a      	mov	r2, r3
 8009426:	d30a      	bcc.n	800943e <quorem+0x106>
 8009428:	613c      	str	r4, [r7, #16]
 800942a:	4630      	mov	r0, r6
 800942c:	b003      	add	sp, #12
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	6812      	ldr	r2, [r2, #0]
 8009434:	3b04      	subs	r3, #4
 8009436:	2a00      	cmp	r2, #0
 8009438:	d1cc      	bne.n	80093d4 <quorem+0x9c>
 800943a:	3c01      	subs	r4, #1
 800943c:	e7c7      	b.n	80093ce <quorem+0x96>
 800943e:	6812      	ldr	r2, [r2, #0]
 8009440:	3b04      	subs	r3, #4
 8009442:	2a00      	cmp	r2, #0
 8009444:	d1f0      	bne.n	8009428 <quorem+0xf0>
 8009446:	3c01      	subs	r4, #1
 8009448:	e7eb      	b.n	8009422 <quorem+0xea>
 800944a:	2000      	movs	r0, #0
 800944c:	e7ee      	b.n	800942c <quorem+0xf4>
	...

08009450 <_dtoa_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	ed2d 8b02 	vpush	{d8}
 8009458:	ec57 6b10 	vmov	r6, r7, d0
 800945c:	b095      	sub	sp, #84	; 0x54
 800945e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009464:	9105      	str	r1, [sp, #20]
 8009466:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800946a:	4604      	mov	r4, r0
 800946c:	9209      	str	r2, [sp, #36]	; 0x24
 800946e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009470:	b975      	cbnz	r5, 8009490 <_dtoa_r+0x40>
 8009472:	2010      	movs	r0, #16
 8009474:	f000 feb0 	bl	800a1d8 <malloc>
 8009478:	4602      	mov	r2, r0
 800947a:	6260      	str	r0, [r4, #36]	; 0x24
 800947c:	b920      	cbnz	r0, 8009488 <_dtoa_r+0x38>
 800947e:	4bb2      	ldr	r3, [pc, #712]	; (8009748 <_dtoa_r+0x2f8>)
 8009480:	21ea      	movs	r1, #234	; 0xea
 8009482:	48b2      	ldr	r0, [pc, #712]	; (800974c <_dtoa_r+0x2fc>)
 8009484:	f001 faac 	bl	800a9e0 <__assert_func>
 8009488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800948c:	6005      	str	r5, [r0, #0]
 800948e:	60c5      	str	r5, [r0, #12]
 8009490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009492:	6819      	ldr	r1, [r3, #0]
 8009494:	b151      	cbz	r1, 80094ac <_dtoa_r+0x5c>
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	604a      	str	r2, [r1, #4]
 800949a:	2301      	movs	r3, #1
 800949c:	4093      	lsls	r3, r2
 800949e:	608b      	str	r3, [r1, #8]
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 feed 	bl	800a280 <_Bfree>
 80094a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	1e3b      	subs	r3, r7, #0
 80094ae:	bfb9      	ittee	lt
 80094b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094b4:	9303      	strlt	r3, [sp, #12]
 80094b6:	2300      	movge	r3, #0
 80094b8:	f8c8 3000 	strge.w	r3, [r8]
 80094bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80094c0:	4ba3      	ldr	r3, [pc, #652]	; (8009750 <_dtoa_r+0x300>)
 80094c2:	bfbc      	itt	lt
 80094c4:	2201      	movlt	r2, #1
 80094c6:	f8c8 2000 	strlt.w	r2, [r8]
 80094ca:	ea33 0309 	bics.w	r3, r3, r9
 80094ce:	d11b      	bne.n	8009508 <_dtoa_r+0xb8>
 80094d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094dc:	4333      	orrs	r3, r6
 80094de:	f000 857a 	beq.w	8009fd6 <_dtoa_r+0xb86>
 80094e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094e4:	b963      	cbnz	r3, 8009500 <_dtoa_r+0xb0>
 80094e6:	4b9b      	ldr	r3, [pc, #620]	; (8009754 <_dtoa_r+0x304>)
 80094e8:	e024      	b.n	8009534 <_dtoa_r+0xe4>
 80094ea:	4b9b      	ldr	r3, [pc, #620]	; (8009758 <_dtoa_r+0x308>)
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	3308      	adds	r3, #8
 80094f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	9800      	ldr	r0, [sp, #0]
 80094f6:	b015      	add	sp, #84	; 0x54
 80094f8:	ecbd 8b02 	vpop	{d8}
 80094fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009500:	4b94      	ldr	r3, [pc, #592]	; (8009754 <_dtoa_r+0x304>)
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	3303      	adds	r3, #3
 8009506:	e7f3      	b.n	80094f0 <_dtoa_r+0xa0>
 8009508:	ed9d 7b02 	vldr	d7, [sp, #8]
 800950c:	2200      	movs	r2, #0
 800950e:	ec51 0b17 	vmov	r0, r1, d7
 8009512:	2300      	movs	r3, #0
 8009514:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009518:	f7f7 fafe 	bl	8000b18 <__aeabi_dcmpeq>
 800951c:	4680      	mov	r8, r0
 800951e:	b158      	cbz	r0, 8009538 <_dtoa_r+0xe8>
 8009520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009522:	2301      	movs	r3, #1
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8551 	beq.w	8009fd0 <_dtoa_r+0xb80>
 800952e:	488b      	ldr	r0, [pc, #556]	; (800975c <_dtoa_r+0x30c>)
 8009530:	6018      	str	r0, [r3, #0]
 8009532:	1e43      	subs	r3, r0, #1
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	e7dd      	b.n	80094f4 <_dtoa_r+0xa4>
 8009538:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800953c:	aa12      	add	r2, sp, #72	; 0x48
 800953e:	a913      	add	r1, sp, #76	; 0x4c
 8009540:	4620      	mov	r0, r4
 8009542:	f001 f97f 	bl	800a844 <__d2b>
 8009546:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800954a:	4683      	mov	fp, r0
 800954c:	2d00      	cmp	r5, #0
 800954e:	d07c      	beq.n	800964a <_dtoa_r+0x1fa>
 8009550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009552:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800955a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800955e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009562:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800956a:	4b7d      	ldr	r3, [pc, #500]	; (8009760 <_dtoa_r+0x310>)
 800956c:	2200      	movs	r2, #0
 800956e:	4630      	mov	r0, r6
 8009570:	4639      	mov	r1, r7
 8009572:	f7f6 feb1 	bl	80002d8 <__aeabi_dsub>
 8009576:	a36e      	add	r3, pc, #440	; (adr r3, 8009730 <_dtoa_r+0x2e0>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f7f7 f864 	bl	8000648 <__aeabi_dmul>
 8009580:	a36d      	add	r3, pc, #436	; (adr r3, 8009738 <_dtoa_r+0x2e8>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f7f6 fea9 	bl	80002dc <__adddf3>
 800958a:	4606      	mov	r6, r0
 800958c:	4628      	mov	r0, r5
 800958e:	460f      	mov	r7, r1
 8009590:	f7f6 fff0 	bl	8000574 <__aeabi_i2d>
 8009594:	a36a      	add	r3, pc, #424	; (adr r3, 8009740 <_dtoa_r+0x2f0>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f7 f855 	bl	8000648 <__aeabi_dmul>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f6 fe99 	bl	80002dc <__adddf3>
 80095aa:	4606      	mov	r6, r0
 80095ac:	460f      	mov	r7, r1
 80095ae:	f7f7 fafb 	bl	8000ba8 <__aeabi_d2iz>
 80095b2:	2200      	movs	r2, #0
 80095b4:	4682      	mov	sl, r0
 80095b6:	2300      	movs	r3, #0
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f7 fab6 	bl	8000b2c <__aeabi_dcmplt>
 80095c0:	b148      	cbz	r0, 80095d6 <_dtoa_r+0x186>
 80095c2:	4650      	mov	r0, sl
 80095c4:	f7f6 ffd6 	bl	8000574 <__aeabi_i2d>
 80095c8:	4632      	mov	r2, r6
 80095ca:	463b      	mov	r3, r7
 80095cc:	f7f7 faa4 	bl	8000b18 <__aeabi_dcmpeq>
 80095d0:	b908      	cbnz	r0, 80095d6 <_dtoa_r+0x186>
 80095d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095d6:	f1ba 0f16 	cmp.w	sl, #22
 80095da:	d854      	bhi.n	8009686 <_dtoa_r+0x236>
 80095dc:	4b61      	ldr	r3, [pc, #388]	; (8009764 <_dtoa_r+0x314>)
 80095de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095ea:	f7f7 fa9f 	bl	8000b2c <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d04b      	beq.n	800968a <_dtoa_r+0x23a>
 80095f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095f6:	2300      	movs	r3, #0
 80095f8:	930e      	str	r3, [sp, #56]	; 0x38
 80095fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095fc:	1b5d      	subs	r5, r3, r5
 80095fe:	1e6b      	subs	r3, r5, #1
 8009600:	9304      	str	r3, [sp, #16]
 8009602:	bf43      	ittte	mi
 8009604:	2300      	movmi	r3, #0
 8009606:	f1c5 0801 	rsbmi	r8, r5, #1
 800960a:	9304      	strmi	r3, [sp, #16]
 800960c:	f04f 0800 	movpl.w	r8, #0
 8009610:	f1ba 0f00 	cmp.w	sl, #0
 8009614:	db3b      	blt.n	800968e <_dtoa_r+0x23e>
 8009616:	9b04      	ldr	r3, [sp, #16]
 8009618:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800961c:	4453      	add	r3, sl
 800961e:	9304      	str	r3, [sp, #16]
 8009620:	2300      	movs	r3, #0
 8009622:	9306      	str	r3, [sp, #24]
 8009624:	9b05      	ldr	r3, [sp, #20]
 8009626:	2b09      	cmp	r3, #9
 8009628:	d869      	bhi.n	80096fe <_dtoa_r+0x2ae>
 800962a:	2b05      	cmp	r3, #5
 800962c:	bfc4      	itt	gt
 800962e:	3b04      	subgt	r3, #4
 8009630:	9305      	strgt	r3, [sp, #20]
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	f1a3 0302 	sub.w	r3, r3, #2
 8009638:	bfcc      	ite	gt
 800963a:	2500      	movgt	r5, #0
 800963c:	2501      	movle	r5, #1
 800963e:	2b03      	cmp	r3, #3
 8009640:	d869      	bhi.n	8009716 <_dtoa_r+0x2c6>
 8009642:	e8df f003 	tbb	[pc, r3]
 8009646:	4e2c      	.short	0x4e2c
 8009648:	5a4c      	.short	0x5a4c
 800964a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800964e:	441d      	add	r5, r3
 8009650:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009654:	2b20      	cmp	r3, #32
 8009656:	bfc1      	itttt	gt
 8009658:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800965c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009660:	fa09 f303 	lslgt.w	r3, r9, r3
 8009664:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009668:	bfda      	itte	le
 800966a:	f1c3 0320 	rsble	r3, r3, #32
 800966e:	fa06 f003 	lslle.w	r0, r6, r3
 8009672:	4318      	orrgt	r0, r3
 8009674:	f7f6 ff6e 	bl	8000554 <__aeabi_ui2d>
 8009678:	2301      	movs	r3, #1
 800967a:	4606      	mov	r6, r0
 800967c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009680:	3d01      	subs	r5, #1
 8009682:	9310      	str	r3, [sp, #64]	; 0x40
 8009684:	e771      	b.n	800956a <_dtoa_r+0x11a>
 8009686:	2301      	movs	r3, #1
 8009688:	e7b6      	b.n	80095f8 <_dtoa_r+0x1a8>
 800968a:	900e      	str	r0, [sp, #56]	; 0x38
 800968c:	e7b5      	b.n	80095fa <_dtoa_r+0x1aa>
 800968e:	f1ca 0300 	rsb	r3, sl, #0
 8009692:	9306      	str	r3, [sp, #24]
 8009694:	2300      	movs	r3, #0
 8009696:	eba8 080a 	sub.w	r8, r8, sl
 800969a:	930d      	str	r3, [sp, #52]	; 0x34
 800969c:	e7c2      	b.n	8009624 <_dtoa_r+0x1d4>
 800969e:	2300      	movs	r3, #0
 80096a0:	9308      	str	r3, [sp, #32]
 80096a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dc39      	bgt.n	800971c <_dtoa_r+0x2cc>
 80096a8:	f04f 0901 	mov.w	r9, #1
 80096ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80096b0:	464b      	mov	r3, r9
 80096b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80096b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096b8:	2200      	movs	r2, #0
 80096ba:	6042      	str	r2, [r0, #4]
 80096bc:	2204      	movs	r2, #4
 80096be:	f102 0614 	add.w	r6, r2, #20
 80096c2:	429e      	cmp	r6, r3
 80096c4:	6841      	ldr	r1, [r0, #4]
 80096c6:	d92f      	bls.n	8009728 <_dtoa_r+0x2d8>
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fd99 	bl	800a200 <_Balloc>
 80096ce:	9000      	str	r0, [sp, #0]
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d14b      	bne.n	800976c <_dtoa_r+0x31c>
 80096d4:	4b24      	ldr	r3, [pc, #144]	; (8009768 <_dtoa_r+0x318>)
 80096d6:	4602      	mov	r2, r0
 80096d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096dc:	e6d1      	b.n	8009482 <_dtoa_r+0x32>
 80096de:	2301      	movs	r3, #1
 80096e0:	e7de      	b.n	80096a0 <_dtoa_r+0x250>
 80096e2:	2300      	movs	r3, #0
 80096e4:	9308      	str	r3, [sp, #32]
 80096e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e8:	eb0a 0903 	add.w	r9, sl, r3
 80096ec:	f109 0301 	add.w	r3, r9, #1
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	bfb8      	it	lt
 80096f6:	2301      	movlt	r3, #1
 80096f8:	e7dd      	b.n	80096b6 <_dtoa_r+0x266>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e7f2      	b.n	80096e4 <_dtoa_r+0x294>
 80096fe:	2501      	movs	r5, #1
 8009700:	2300      	movs	r3, #0
 8009702:	9305      	str	r3, [sp, #20]
 8009704:	9508      	str	r5, [sp, #32]
 8009706:	f04f 39ff 	mov.w	r9, #4294967295
 800970a:	2200      	movs	r2, #0
 800970c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009710:	2312      	movs	r3, #18
 8009712:	9209      	str	r2, [sp, #36]	; 0x24
 8009714:	e7cf      	b.n	80096b6 <_dtoa_r+0x266>
 8009716:	2301      	movs	r3, #1
 8009718:	9308      	str	r3, [sp, #32]
 800971a:	e7f4      	b.n	8009706 <_dtoa_r+0x2b6>
 800971c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009720:	f8cd 9004 	str.w	r9, [sp, #4]
 8009724:	464b      	mov	r3, r9
 8009726:	e7c6      	b.n	80096b6 <_dtoa_r+0x266>
 8009728:	3101      	adds	r1, #1
 800972a:	6041      	str	r1, [r0, #4]
 800972c:	0052      	lsls	r2, r2, #1
 800972e:	e7c6      	b.n	80096be <_dtoa_r+0x26e>
 8009730:	636f4361 	.word	0x636f4361
 8009734:	3fd287a7 	.word	0x3fd287a7
 8009738:	8b60c8b3 	.word	0x8b60c8b3
 800973c:	3fc68a28 	.word	0x3fc68a28
 8009740:	509f79fb 	.word	0x509f79fb
 8009744:	3fd34413 	.word	0x3fd34413
 8009748:	0800b241 	.word	0x0800b241
 800974c:	0800b258 	.word	0x0800b258
 8009750:	7ff00000 	.word	0x7ff00000
 8009754:	0800b23d 	.word	0x0800b23d
 8009758:	0800b234 	.word	0x0800b234
 800975c:	0800b211 	.word	0x0800b211
 8009760:	3ff80000 	.word	0x3ff80000
 8009764:	0800b350 	.word	0x0800b350
 8009768:	0800b2b7 	.word	0x0800b2b7
 800976c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800976e:	9a00      	ldr	r2, [sp, #0]
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	2b0e      	cmp	r3, #14
 8009776:	f200 80ad 	bhi.w	80098d4 <_dtoa_r+0x484>
 800977a:	2d00      	cmp	r5, #0
 800977c:	f000 80aa 	beq.w	80098d4 <_dtoa_r+0x484>
 8009780:	f1ba 0f00 	cmp.w	sl, #0
 8009784:	dd36      	ble.n	80097f4 <_dtoa_r+0x3a4>
 8009786:	4ac3      	ldr	r2, [pc, #780]	; (8009a94 <_dtoa_r+0x644>)
 8009788:	f00a 030f 	and.w	r3, sl, #15
 800978c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009790:	ed93 7b00 	vldr	d7, [r3]
 8009794:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009798:	ea4f 172a 	mov.w	r7, sl, asr #4
 800979c:	eeb0 8a47 	vmov.f32	s16, s14
 80097a0:	eef0 8a67 	vmov.f32	s17, s15
 80097a4:	d016      	beq.n	80097d4 <_dtoa_r+0x384>
 80097a6:	4bbc      	ldr	r3, [pc, #752]	; (8009a98 <_dtoa_r+0x648>)
 80097a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097b0:	f7f7 f874 	bl	800089c <__aeabi_ddiv>
 80097b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097b8:	f007 070f 	and.w	r7, r7, #15
 80097bc:	2503      	movs	r5, #3
 80097be:	4eb6      	ldr	r6, [pc, #728]	; (8009a98 <_dtoa_r+0x648>)
 80097c0:	b957      	cbnz	r7, 80097d8 <_dtoa_r+0x388>
 80097c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097c6:	ec53 2b18 	vmov	r2, r3, d8
 80097ca:	f7f7 f867 	bl	800089c <__aeabi_ddiv>
 80097ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d2:	e029      	b.n	8009828 <_dtoa_r+0x3d8>
 80097d4:	2502      	movs	r5, #2
 80097d6:	e7f2      	b.n	80097be <_dtoa_r+0x36e>
 80097d8:	07f9      	lsls	r1, r7, #31
 80097da:	d508      	bpl.n	80097ee <_dtoa_r+0x39e>
 80097dc:	ec51 0b18 	vmov	r0, r1, d8
 80097e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097e4:	f7f6 ff30 	bl	8000648 <__aeabi_dmul>
 80097e8:	ec41 0b18 	vmov	d8, r0, r1
 80097ec:	3501      	adds	r5, #1
 80097ee:	107f      	asrs	r7, r7, #1
 80097f0:	3608      	adds	r6, #8
 80097f2:	e7e5      	b.n	80097c0 <_dtoa_r+0x370>
 80097f4:	f000 80a6 	beq.w	8009944 <_dtoa_r+0x4f4>
 80097f8:	f1ca 0600 	rsb	r6, sl, #0
 80097fc:	4ba5      	ldr	r3, [pc, #660]	; (8009a94 <_dtoa_r+0x644>)
 80097fe:	4fa6      	ldr	r7, [pc, #664]	; (8009a98 <_dtoa_r+0x648>)
 8009800:	f006 020f 	and.w	r2, r6, #15
 8009804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009810:	f7f6 ff1a 	bl	8000648 <__aeabi_dmul>
 8009814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009818:	1136      	asrs	r6, r6, #4
 800981a:	2300      	movs	r3, #0
 800981c:	2502      	movs	r5, #2
 800981e:	2e00      	cmp	r6, #0
 8009820:	f040 8085 	bne.w	800992e <_dtoa_r+0x4de>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1d2      	bne.n	80097ce <_dtoa_r+0x37e>
 8009828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 808c 	beq.w	8009948 <_dtoa_r+0x4f8>
 8009830:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009834:	4b99      	ldr	r3, [pc, #612]	; (8009a9c <_dtoa_r+0x64c>)
 8009836:	2200      	movs	r2, #0
 8009838:	4630      	mov	r0, r6
 800983a:	4639      	mov	r1, r7
 800983c:	f7f7 f976 	bl	8000b2c <__aeabi_dcmplt>
 8009840:	2800      	cmp	r0, #0
 8009842:	f000 8081 	beq.w	8009948 <_dtoa_r+0x4f8>
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d07d      	beq.n	8009948 <_dtoa_r+0x4f8>
 800984c:	f1b9 0f00 	cmp.w	r9, #0
 8009850:	dd3c      	ble.n	80098cc <_dtoa_r+0x47c>
 8009852:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009856:	9307      	str	r3, [sp, #28]
 8009858:	2200      	movs	r2, #0
 800985a:	4b91      	ldr	r3, [pc, #580]	; (8009aa0 <_dtoa_r+0x650>)
 800985c:	4630      	mov	r0, r6
 800985e:	4639      	mov	r1, r7
 8009860:	f7f6 fef2 	bl	8000648 <__aeabi_dmul>
 8009864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009868:	3501      	adds	r5, #1
 800986a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800986e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009872:	4628      	mov	r0, r5
 8009874:	f7f6 fe7e 	bl	8000574 <__aeabi_i2d>
 8009878:	4632      	mov	r2, r6
 800987a:	463b      	mov	r3, r7
 800987c:	f7f6 fee4 	bl	8000648 <__aeabi_dmul>
 8009880:	4b88      	ldr	r3, [pc, #544]	; (8009aa4 <_dtoa_r+0x654>)
 8009882:	2200      	movs	r2, #0
 8009884:	f7f6 fd2a 	bl	80002dc <__adddf3>
 8009888:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800988c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	d15c      	bne.n	8009952 <_dtoa_r+0x502>
 8009898:	4b83      	ldr	r3, [pc, #524]	; (8009aa8 <_dtoa_r+0x658>)
 800989a:	2200      	movs	r2, #0
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f6 fd1a 	bl	80002d8 <__aeabi_dsub>
 80098a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098a8:	4606      	mov	r6, r0
 80098aa:	460f      	mov	r7, r1
 80098ac:	f7f7 f95c 	bl	8000b68 <__aeabi_dcmpgt>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	f040 8296 	bne.w	8009de2 <_dtoa_r+0x992>
 80098b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80098ba:	4630      	mov	r0, r6
 80098bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c0:	4639      	mov	r1, r7
 80098c2:	f7f7 f933 	bl	8000b2c <__aeabi_dcmplt>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f040 8288 	bne.w	8009ddc <_dtoa_r+0x98c>
 80098cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f2c0 8158 	blt.w	8009b8c <_dtoa_r+0x73c>
 80098dc:	f1ba 0f0e 	cmp.w	sl, #14
 80098e0:	f300 8154 	bgt.w	8009b8c <_dtoa_r+0x73c>
 80098e4:	4b6b      	ldr	r3, [pc, #428]	; (8009a94 <_dtoa_r+0x644>)
 80098e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f280 80e3 	bge.w	8009abc <_dtoa_r+0x66c>
 80098f6:	9b01      	ldr	r3, [sp, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f300 80df 	bgt.w	8009abc <_dtoa_r+0x66c>
 80098fe:	f040 826d 	bne.w	8009ddc <_dtoa_r+0x98c>
 8009902:	4b69      	ldr	r3, [pc, #420]	; (8009aa8 <_dtoa_r+0x658>)
 8009904:	2200      	movs	r2, #0
 8009906:	4640      	mov	r0, r8
 8009908:	4649      	mov	r1, r9
 800990a:	f7f6 fe9d 	bl	8000648 <__aeabi_dmul>
 800990e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009912:	f7f7 f91f 	bl	8000b54 <__aeabi_dcmpge>
 8009916:	9e01      	ldr	r6, [sp, #4]
 8009918:	4637      	mov	r7, r6
 800991a:	2800      	cmp	r0, #0
 800991c:	f040 8243 	bne.w	8009da6 <_dtoa_r+0x956>
 8009920:	9d00      	ldr	r5, [sp, #0]
 8009922:	2331      	movs	r3, #49	; 0x31
 8009924:	f805 3b01 	strb.w	r3, [r5], #1
 8009928:	f10a 0a01 	add.w	sl, sl, #1
 800992c:	e23f      	b.n	8009dae <_dtoa_r+0x95e>
 800992e:	07f2      	lsls	r2, r6, #31
 8009930:	d505      	bpl.n	800993e <_dtoa_r+0x4ee>
 8009932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009936:	f7f6 fe87 	bl	8000648 <__aeabi_dmul>
 800993a:	3501      	adds	r5, #1
 800993c:	2301      	movs	r3, #1
 800993e:	1076      	asrs	r6, r6, #1
 8009940:	3708      	adds	r7, #8
 8009942:	e76c      	b.n	800981e <_dtoa_r+0x3ce>
 8009944:	2502      	movs	r5, #2
 8009946:	e76f      	b.n	8009828 <_dtoa_r+0x3d8>
 8009948:	9b01      	ldr	r3, [sp, #4]
 800994a:	f8cd a01c 	str.w	sl, [sp, #28]
 800994e:	930c      	str	r3, [sp, #48]	; 0x30
 8009950:	e78d      	b.n	800986e <_dtoa_r+0x41e>
 8009952:	9900      	ldr	r1, [sp, #0]
 8009954:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009958:	4b4e      	ldr	r3, [pc, #312]	; (8009a94 <_dtoa_r+0x644>)
 800995a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800995e:	4401      	add	r1, r0
 8009960:	9102      	str	r1, [sp, #8]
 8009962:	9908      	ldr	r1, [sp, #32]
 8009964:	eeb0 8a47 	vmov.f32	s16, s14
 8009968:	eef0 8a67 	vmov.f32	s17, s15
 800996c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009970:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009974:	2900      	cmp	r1, #0
 8009976:	d045      	beq.n	8009a04 <_dtoa_r+0x5b4>
 8009978:	494c      	ldr	r1, [pc, #304]	; (8009aac <_dtoa_r+0x65c>)
 800997a:	2000      	movs	r0, #0
 800997c:	f7f6 ff8e 	bl	800089c <__aeabi_ddiv>
 8009980:	ec53 2b18 	vmov	r2, r3, d8
 8009984:	f7f6 fca8 	bl	80002d8 <__aeabi_dsub>
 8009988:	9d00      	ldr	r5, [sp, #0]
 800998a:	ec41 0b18 	vmov	d8, r0, r1
 800998e:	4639      	mov	r1, r7
 8009990:	4630      	mov	r0, r6
 8009992:	f7f7 f909 	bl	8000ba8 <__aeabi_d2iz>
 8009996:	900c      	str	r0, [sp, #48]	; 0x30
 8009998:	f7f6 fdec 	bl	8000574 <__aeabi_i2d>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f6 fc98 	bl	80002d8 <__aeabi_dsub>
 80099a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099aa:	3330      	adds	r3, #48	; 0x30
 80099ac:	f805 3b01 	strb.w	r3, [r5], #1
 80099b0:	ec53 2b18 	vmov	r2, r3, d8
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	f7f7 f8b8 	bl	8000b2c <__aeabi_dcmplt>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d165      	bne.n	8009a8c <_dtoa_r+0x63c>
 80099c0:	4632      	mov	r2, r6
 80099c2:	463b      	mov	r3, r7
 80099c4:	4935      	ldr	r1, [pc, #212]	; (8009a9c <_dtoa_r+0x64c>)
 80099c6:	2000      	movs	r0, #0
 80099c8:	f7f6 fc86 	bl	80002d8 <__aeabi_dsub>
 80099cc:	ec53 2b18 	vmov	r2, r3, d8
 80099d0:	f7f7 f8ac 	bl	8000b2c <__aeabi_dcmplt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f040 80b9 	bne.w	8009b4c <_dtoa_r+0x6fc>
 80099da:	9b02      	ldr	r3, [sp, #8]
 80099dc:	429d      	cmp	r5, r3
 80099de:	f43f af75 	beq.w	80098cc <_dtoa_r+0x47c>
 80099e2:	4b2f      	ldr	r3, [pc, #188]	; (8009aa0 <_dtoa_r+0x650>)
 80099e4:	ec51 0b18 	vmov	r0, r1, d8
 80099e8:	2200      	movs	r2, #0
 80099ea:	f7f6 fe2d 	bl	8000648 <__aeabi_dmul>
 80099ee:	4b2c      	ldr	r3, [pc, #176]	; (8009aa0 <_dtoa_r+0x650>)
 80099f0:	ec41 0b18 	vmov	d8, r0, r1
 80099f4:	2200      	movs	r2, #0
 80099f6:	4630      	mov	r0, r6
 80099f8:	4639      	mov	r1, r7
 80099fa:	f7f6 fe25 	bl	8000648 <__aeabi_dmul>
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	e7c4      	b.n	800998e <_dtoa_r+0x53e>
 8009a04:	ec51 0b17 	vmov	r0, r1, d7
 8009a08:	f7f6 fe1e 	bl	8000648 <__aeabi_dmul>
 8009a0c:	9b02      	ldr	r3, [sp, #8]
 8009a0e:	9d00      	ldr	r5, [sp, #0]
 8009a10:	930c      	str	r3, [sp, #48]	; 0x30
 8009a12:	ec41 0b18 	vmov	d8, r0, r1
 8009a16:	4639      	mov	r1, r7
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7f7 f8c5 	bl	8000ba8 <__aeabi_d2iz>
 8009a1e:	9011      	str	r0, [sp, #68]	; 0x44
 8009a20:	f7f6 fda8 	bl	8000574 <__aeabi_i2d>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4630      	mov	r0, r6
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	f7f6 fc54 	bl	80002d8 <__aeabi_dsub>
 8009a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a32:	3330      	adds	r3, #48	; 0x30
 8009a34:	f805 3b01 	strb.w	r3, [r5], #1
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	f04f 0200 	mov.w	r2, #0
 8009a44:	d134      	bne.n	8009ab0 <_dtoa_r+0x660>
 8009a46:	4b19      	ldr	r3, [pc, #100]	; (8009aac <_dtoa_r+0x65c>)
 8009a48:	ec51 0b18 	vmov	r0, r1, d8
 8009a4c:	f7f6 fc46 	bl	80002dc <__adddf3>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f7 f886 	bl	8000b68 <__aeabi_dcmpgt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d175      	bne.n	8009b4c <_dtoa_r+0x6fc>
 8009a60:	ec53 2b18 	vmov	r2, r3, d8
 8009a64:	4911      	ldr	r1, [pc, #68]	; (8009aac <_dtoa_r+0x65c>)
 8009a66:	2000      	movs	r0, #0
 8009a68:	f7f6 fc36 	bl	80002d8 <__aeabi_dsub>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f7 f85a 	bl	8000b2c <__aeabi_dcmplt>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	f43f af27 	beq.w	80098cc <_dtoa_r+0x47c>
 8009a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a80:	1e6b      	subs	r3, r5, #1
 8009a82:	930c      	str	r3, [sp, #48]	; 0x30
 8009a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a88:	2b30      	cmp	r3, #48	; 0x30
 8009a8a:	d0f8      	beq.n	8009a7e <_dtoa_r+0x62e>
 8009a8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a90:	e04a      	b.n	8009b28 <_dtoa_r+0x6d8>
 8009a92:	bf00      	nop
 8009a94:	0800b350 	.word	0x0800b350
 8009a98:	0800b328 	.word	0x0800b328
 8009a9c:	3ff00000 	.word	0x3ff00000
 8009aa0:	40240000 	.word	0x40240000
 8009aa4:	401c0000 	.word	0x401c0000
 8009aa8:	40140000 	.word	0x40140000
 8009aac:	3fe00000 	.word	0x3fe00000
 8009ab0:	4baf      	ldr	r3, [pc, #700]	; (8009d70 <_dtoa_r+0x920>)
 8009ab2:	f7f6 fdc9 	bl	8000648 <__aeabi_dmul>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	e7ac      	b.n	8009a16 <_dtoa_r+0x5c6>
 8009abc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ac0:	9d00      	ldr	r5, [sp, #0]
 8009ac2:	4642      	mov	r2, r8
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	4639      	mov	r1, r7
 8009aca:	f7f6 fee7 	bl	800089c <__aeabi_ddiv>
 8009ace:	f7f7 f86b 	bl	8000ba8 <__aeabi_d2iz>
 8009ad2:	9002      	str	r0, [sp, #8]
 8009ad4:	f7f6 fd4e 	bl	8000574 <__aeabi_i2d>
 8009ad8:	4642      	mov	r2, r8
 8009ada:	464b      	mov	r3, r9
 8009adc:	f7f6 fdb4 	bl	8000648 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fbf6 	bl	80002d8 <__aeabi_dsub>
 8009aec:	9e02      	ldr	r6, [sp, #8]
 8009aee:	9f01      	ldr	r7, [sp, #4]
 8009af0:	3630      	adds	r6, #48	; 0x30
 8009af2:	f805 6b01 	strb.w	r6, [r5], #1
 8009af6:	9e00      	ldr	r6, [sp, #0]
 8009af8:	1bae      	subs	r6, r5, r6
 8009afa:	42b7      	cmp	r7, r6
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	d137      	bne.n	8009b72 <_dtoa_r+0x722>
 8009b02:	f7f6 fbeb 	bl	80002dc <__adddf3>
 8009b06:	4642      	mov	r2, r8
 8009b08:	464b      	mov	r3, r9
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	f7f7 f82b 	bl	8000b68 <__aeabi_dcmpgt>
 8009b12:	b9c8      	cbnz	r0, 8009b48 <_dtoa_r+0x6f8>
 8009b14:	4642      	mov	r2, r8
 8009b16:	464b      	mov	r3, r9
 8009b18:	4630      	mov	r0, r6
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f6 fffc 	bl	8000b18 <__aeabi_dcmpeq>
 8009b20:	b110      	cbz	r0, 8009b28 <_dtoa_r+0x6d8>
 8009b22:	9b02      	ldr	r3, [sp, #8]
 8009b24:	07d9      	lsls	r1, r3, #31
 8009b26:	d40f      	bmi.n	8009b48 <_dtoa_r+0x6f8>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	4659      	mov	r1, fp
 8009b2c:	f000 fba8 	bl	800a280 <_Bfree>
 8009b30:	2300      	movs	r3, #0
 8009b32:	702b      	strb	r3, [r5, #0]
 8009b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b36:	f10a 0001 	add.w	r0, sl, #1
 8009b3a:	6018      	str	r0, [r3, #0]
 8009b3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f43f acd8 	beq.w	80094f4 <_dtoa_r+0xa4>
 8009b44:	601d      	str	r5, [r3, #0]
 8009b46:	e4d5      	b.n	80094f4 <_dtoa_r+0xa4>
 8009b48:	f8cd a01c 	str.w	sl, [sp, #28]
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	461d      	mov	r5, r3
 8009b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b54:	2a39      	cmp	r2, #57	; 0x39
 8009b56:	d108      	bne.n	8009b6a <_dtoa_r+0x71a>
 8009b58:	9a00      	ldr	r2, [sp, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d1f7      	bne.n	8009b4e <_dtoa_r+0x6fe>
 8009b5e:	9a07      	ldr	r2, [sp, #28]
 8009b60:	9900      	ldr	r1, [sp, #0]
 8009b62:	3201      	adds	r2, #1
 8009b64:	9207      	str	r2, [sp, #28]
 8009b66:	2230      	movs	r2, #48	; 0x30
 8009b68:	700a      	strb	r2, [r1, #0]
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	3201      	adds	r2, #1
 8009b6e:	701a      	strb	r2, [r3, #0]
 8009b70:	e78c      	b.n	8009a8c <_dtoa_r+0x63c>
 8009b72:	4b7f      	ldr	r3, [pc, #508]	; (8009d70 <_dtoa_r+0x920>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	f7f6 fd67 	bl	8000648 <__aeabi_dmul>
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460f      	mov	r7, r1
 8009b82:	f7f6 ffc9 	bl	8000b18 <__aeabi_dcmpeq>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d09b      	beq.n	8009ac2 <_dtoa_r+0x672>
 8009b8a:	e7cd      	b.n	8009b28 <_dtoa_r+0x6d8>
 8009b8c:	9a08      	ldr	r2, [sp, #32]
 8009b8e:	2a00      	cmp	r2, #0
 8009b90:	f000 80c4 	beq.w	8009d1c <_dtoa_r+0x8cc>
 8009b94:	9a05      	ldr	r2, [sp, #20]
 8009b96:	2a01      	cmp	r2, #1
 8009b98:	f300 80a8 	bgt.w	8009cec <_dtoa_r+0x89c>
 8009b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	f000 80a0 	beq.w	8009ce4 <_dtoa_r+0x894>
 8009ba4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ba8:	9e06      	ldr	r6, [sp, #24]
 8009baa:	4645      	mov	r5, r8
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	2101      	movs	r1, #1
 8009bb0:	441a      	add	r2, r3
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4498      	add	r8, r3
 8009bb6:	9204      	str	r2, [sp, #16]
 8009bb8:	f000 fc1e 	bl	800a3f8 <__i2b>
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	2d00      	cmp	r5, #0
 8009bc0:	dd0b      	ble.n	8009bda <_dtoa_r+0x78a>
 8009bc2:	9b04      	ldr	r3, [sp, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dd08      	ble.n	8009bda <_dtoa_r+0x78a>
 8009bc8:	42ab      	cmp	r3, r5
 8009bca:	9a04      	ldr	r2, [sp, #16]
 8009bcc:	bfa8      	it	ge
 8009bce:	462b      	movge	r3, r5
 8009bd0:	eba8 0803 	sub.w	r8, r8, r3
 8009bd4:	1aed      	subs	r5, r5, r3
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	b1fb      	cbz	r3, 8009c1e <_dtoa_r+0x7ce>
 8009bde:	9b08      	ldr	r3, [sp, #32]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 809f 	beq.w	8009d24 <_dtoa_r+0x8d4>
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	dd11      	ble.n	8009c0e <_dtoa_r+0x7be>
 8009bea:	4639      	mov	r1, r7
 8009bec:	4632      	mov	r2, r6
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 fcbe 	bl	800a570 <__pow5mult>
 8009bf4:	465a      	mov	r2, fp
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 fc12 	bl	800a424 <__multiply>
 8009c00:	4659      	mov	r1, fp
 8009c02:	9007      	str	r0, [sp, #28]
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fb3b 	bl	800a280 <_Bfree>
 8009c0a:	9b07      	ldr	r3, [sp, #28]
 8009c0c:	469b      	mov	fp, r3
 8009c0e:	9b06      	ldr	r3, [sp, #24]
 8009c10:	1b9a      	subs	r2, r3, r6
 8009c12:	d004      	beq.n	8009c1e <_dtoa_r+0x7ce>
 8009c14:	4659      	mov	r1, fp
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 fcaa 	bl	800a570 <__pow5mult>
 8009c1c:	4683      	mov	fp, r0
 8009c1e:	2101      	movs	r1, #1
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 fbe9 	bl	800a3f8 <__i2b>
 8009c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	dd7c      	ble.n	8009d28 <_dtoa_r+0x8d8>
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4601      	mov	r1, r0
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 fc9c 	bl	800a570 <__pow5mult>
 8009c38:	9b05      	ldr	r3, [sp, #20]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	dd76      	ble.n	8009d2e <_dtoa_r+0x8de>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9306      	str	r3, [sp, #24]
 8009c44:	6933      	ldr	r3, [r6, #16]
 8009c46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c4a:	6918      	ldr	r0, [r3, #16]
 8009c4c:	f000 fb84 	bl	800a358 <__hi0bits>
 8009c50:	f1c0 0020 	rsb	r0, r0, #32
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	4418      	add	r0, r3
 8009c58:	f010 001f 	ands.w	r0, r0, #31
 8009c5c:	f000 8086 	beq.w	8009d6c <_dtoa_r+0x91c>
 8009c60:	f1c0 0320 	rsb	r3, r0, #32
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	dd7f      	ble.n	8009d68 <_dtoa_r+0x918>
 8009c68:	f1c0 001c 	rsb	r0, r0, #28
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	4403      	add	r3, r0
 8009c70:	4480      	add	r8, r0
 8009c72:	4405      	add	r5, r0
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	f1b8 0f00 	cmp.w	r8, #0
 8009c7a:	dd05      	ble.n	8009c88 <_dtoa_r+0x838>
 8009c7c:	4659      	mov	r1, fp
 8009c7e:	4642      	mov	r2, r8
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fccf 	bl	800a624 <__lshift>
 8009c86:	4683      	mov	fp, r0
 8009c88:	9b04      	ldr	r3, [sp, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	dd05      	ble.n	8009c9a <_dtoa_r+0x84a>
 8009c8e:	4631      	mov	r1, r6
 8009c90:	461a      	mov	r2, r3
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fcc6 	bl	800a624 <__lshift>
 8009c98:	4606      	mov	r6, r0
 8009c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d069      	beq.n	8009d74 <_dtoa_r+0x924>
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	4658      	mov	r0, fp
 8009ca4:	f000 fd2a 	bl	800a6fc <__mcmp>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	da63      	bge.n	8009d74 <_dtoa_r+0x924>
 8009cac:	2300      	movs	r3, #0
 8009cae:	4659      	mov	r1, fp
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 fb06 	bl	800a2c4 <__multadd>
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cbe:	4683      	mov	fp, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 818f 	beq.w	8009fe4 <_dtoa_r+0xb94>
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	2300      	movs	r3, #0
 8009cca:	220a      	movs	r2, #10
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 faf9 	bl	800a2c4 <__multadd>
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	f300 808e 	bgt.w	8009df8 <_dtoa_r+0x9a8>
 8009cdc:	9b05      	ldr	r3, [sp, #20]
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	dc50      	bgt.n	8009d84 <_dtoa_r+0x934>
 8009ce2:	e089      	b.n	8009df8 <_dtoa_r+0x9a8>
 8009ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cea:	e75d      	b.n	8009ba8 <_dtoa_r+0x758>
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	1e5e      	subs	r6, r3, #1
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	42b3      	cmp	r3, r6
 8009cf4:	bfbf      	itttt	lt
 8009cf6:	9b06      	ldrlt	r3, [sp, #24]
 8009cf8:	9606      	strlt	r6, [sp, #24]
 8009cfa:	1af2      	sublt	r2, r6, r3
 8009cfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009cfe:	bfb6      	itet	lt
 8009d00:	189b      	addlt	r3, r3, r2
 8009d02:	1b9e      	subge	r6, r3, r6
 8009d04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	bfb8      	it	lt
 8009d0a:	2600      	movlt	r6, #0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bfb5      	itete	lt
 8009d10:	eba8 0503 	sublt.w	r5, r8, r3
 8009d14:	9b01      	ldrge	r3, [sp, #4]
 8009d16:	2300      	movlt	r3, #0
 8009d18:	4645      	movge	r5, r8
 8009d1a:	e747      	b.n	8009bac <_dtoa_r+0x75c>
 8009d1c:	9e06      	ldr	r6, [sp, #24]
 8009d1e:	9f08      	ldr	r7, [sp, #32]
 8009d20:	4645      	mov	r5, r8
 8009d22:	e74c      	b.n	8009bbe <_dtoa_r+0x76e>
 8009d24:	9a06      	ldr	r2, [sp, #24]
 8009d26:	e775      	b.n	8009c14 <_dtoa_r+0x7c4>
 8009d28:	9b05      	ldr	r3, [sp, #20]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	dc18      	bgt.n	8009d60 <_dtoa_r+0x910>
 8009d2e:	9b02      	ldr	r3, [sp, #8]
 8009d30:	b9b3      	cbnz	r3, 8009d60 <_dtoa_r+0x910>
 8009d32:	9b03      	ldr	r3, [sp, #12]
 8009d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d38:	b9a3      	cbnz	r3, 8009d64 <_dtoa_r+0x914>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d40:	0d1b      	lsrs	r3, r3, #20
 8009d42:	051b      	lsls	r3, r3, #20
 8009d44:	b12b      	cbz	r3, 8009d52 <_dtoa_r+0x902>
 8009d46:	9b04      	ldr	r3, [sp, #16]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	f108 0801 	add.w	r8, r8, #1
 8009d50:	2301      	movs	r3, #1
 8009d52:	9306      	str	r3, [sp, #24]
 8009d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f47f af74 	bne.w	8009c44 <_dtoa_r+0x7f4>
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	e779      	b.n	8009c54 <_dtoa_r+0x804>
 8009d60:	2300      	movs	r3, #0
 8009d62:	e7f6      	b.n	8009d52 <_dtoa_r+0x902>
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	e7f4      	b.n	8009d52 <_dtoa_r+0x902>
 8009d68:	d085      	beq.n	8009c76 <_dtoa_r+0x826>
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	301c      	adds	r0, #28
 8009d6e:	e77d      	b.n	8009c6c <_dtoa_r+0x81c>
 8009d70:	40240000 	.word	0x40240000
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dc38      	bgt.n	8009dec <_dtoa_r+0x99c>
 8009d7a:	9b05      	ldr	r3, [sp, #20]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	dd35      	ble.n	8009dec <_dtoa_r+0x99c>
 8009d80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d84:	f1b9 0f00 	cmp.w	r9, #0
 8009d88:	d10d      	bne.n	8009da6 <_dtoa_r+0x956>
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	464b      	mov	r3, r9
 8009d8e:	2205      	movs	r2, #5
 8009d90:	4620      	mov	r0, r4
 8009d92:	f000 fa97 	bl	800a2c4 <__multadd>
 8009d96:	4601      	mov	r1, r0
 8009d98:	4606      	mov	r6, r0
 8009d9a:	4658      	mov	r0, fp
 8009d9c:	f000 fcae 	bl	800a6fc <__mcmp>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f73f adbd 	bgt.w	8009920 <_dtoa_r+0x4d0>
 8009da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da8:	9d00      	ldr	r5, [sp, #0]
 8009daa:	ea6f 0a03 	mvn.w	sl, r3
 8009dae:	f04f 0800 	mov.w	r8, #0
 8009db2:	4631      	mov	r1, r6
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 fa63 	bl	800a280 <_Bfree>
 8009dba:	2f00      	cmp	r7, #0
 8009dbc:	f43f aeb4 	beq.w	8009b28 <_dtoa_r+0x6d8>
 8009dc0:	f1b8 0f00 	cmp.w	r8, #0
 8009dc4:	d005      	beq.n	8009dd2 <_dtoa_r+0x982>
 8009dc6:	45b8      	cmp	r8, r7
 8009dc8:	d003      	beq.n	8009dd2 <_dtoa_r+0x982>
 8009dca:	4641      	mov	r1, r8
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fa57 	bl	800a280 <_Bfree>
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fa53 	bl	800a280 <_Bfree>
 8009dda:	e6a5      	b.n	8009b28 <_dtoa_r+0x6d8>
 8009ddc:	2600      	movs	r6, #0
 8009dde:	4637      	mov	r7, r6
 8009de0:	e7e1      	b.n	8009da6 <_dtoa_r+0x956>
 8009de2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009de4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009de8:	4637      	mov	r7, r6
 8009dea:	e599      	b.n	8009920 <_dtoa_r+0x4d0>
 8009dec:	9b08      	ldr	r3, [sp, #32]
 8009dee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80fd 	beq.w	8009ff2 <_dtoa_r+0xba2>
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	dd05      	ble.n	8009e08 <_dtoa_r+0x9b8>
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	462a      	mov	r2, r5
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 fc0f 	bl	800a624 <__lshift>
 8009e06:	4607      	mov	r7, r0
 8009e08:	9b06      	ldr	r3, [sp, #24]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d05c      	beq.n	8009ec8 <_dtoa_r+0xa78>
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 f9f5 	bl	800a200 <_Balloc>
 8009e16:	4605      	mov	r5, r0
 8009e18:	b928      	cbnz	r0, 8009e26 <_dtoa_r+0x9d6>
 8009e1a:	4b80      	ldr	r3, [pc, #512]	; (800a01c <_dtoa_r+0xbcc>)
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e22:	f7ff bb2e 	b.w	8009482 <_dtoa_r+0x32>
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	3202      	adds	r2, #2
 8009e2a:	0092      	lsls	r2, r2, #2
 8009e2c:	f107 010c 	add.w	r1, r7, #12
 8009e30:	300c      	adds	r0, #12
 8009e32:	f7fe fcc6 	bl	80087c2 <memcpy>
 8009e36:	2201      	movs	r2, #1
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 fbf2 	bl	800a624 <__lshift>
 8009e40:	9b00      	ldr	r3, [sp, #0]
 8009e42:	3301      	adds	r3, #1
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	444b      	add	r3, r9
 8009e4a:	9307      	str	r3, [sp, #28]
 8009e4c:	9b02      	ldr	r3, [sp, #8]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	46b8      	mov	r8, r7
 8009e54:	9306      	str	r3, [sp, #24]
 8009e56:	4607      	mov	r7, r0
 8009e58:	9b01      	ldr	r3, [sp, #4]
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4658      	mov	r0, fp
 8009e60:	9302      	str	r3, [sp, #8]
 8009e62:	f7ff fa69 	bl	8009338 <quorem>
 8009e66:	4603      	mov	r3, r0
 8009e68:	3330      	adds	r3, #48	; 0x30
 8009e6a:	9004      	str	r0, [sp, #16]
 8009e6c:	4641      	mov	r1, r8
 8009e6e:	4658      	mov	r0, fp
 8009e70:	9308      	str	r3, [sp, #32]
 8009e72:	f000 fc43 	bl	800a6fc <__mcmp>
 8009e76:	463a      	mov	r2, r7
 8009e78:	4681      	mov	r9, r0
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fc59 	bl	800a734 <__mdiff>
 8009e82:	68c2      	ldr	r2, [r0, #12]
 8009e84:	9b08      	ldr	r3, [sp, #32]
 8009e86:	4605      	mov	r5, r0
 8009e88:	bb02      	cbnz	r2, 8009ecc <_dtoa_r+0xa7c>
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	4658      	mov	r0, fp
 8009e8e:	f000 fc35 	bl	800a6fc <__mcmp>
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	4602      	mov	r2, r0
 8009e96:	4629      	mov	r1, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009e9e:	f000 f9ef 	bl	800a280 <_Bfree>
 8009ea2:	9b05      	ldr	r3, [sp, #20]
 8009ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ea6:	9d01      	ldr	r5, [sp, #4]
 8009ea8:	ea43 0102 	orr.w	r1, r3, r2
 8009eac:	9b06      	ldr	r3, [sp, #24]
 8009eae:	430b      	orrs	r3, r1
 8009eb0:	9b08      	ldr	r3, [sp, #32]
 8009eb2:	d10d      	bne.n	8009ed0 <_dtoa_r+0xa80>
 8009eb4:	2b39      	cmp	r3, #57	; 0x39
 8009eb6:	d029      	beq.n	8009f0c <_dtoa_r+0xabc>
 8009eb8:	f1b9 0f00 	cmp.w	r9, #0
 8009ebc:	dd01      	ble.n	8009ec2 <_dtoa_r+0xa72>
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	3331      	adds	r3, #49	; 0x31
 8009ec2:	9a02      	ldr	r2, [sp, #8]
 8009ec4:	7013      	strb	r3, [r2, #0]
 8009ec6:	e774      	b.n	8009db2 <_dtoa_r+0x962>
 8009ec8:	4638      	mov	r0, r7
 8009eca:	e7b9      	b.n	8009e40 <_dtoa_r+0x9f0>
 8009ecc:	2201      	movs	r2, #1
 8009ece:	e7e2      	b.n	8009e96 <_dtoa_r+0xa46>
 8009ed0:	f1b9 0f00 	cmp.w	r9, #0
 8009ed4:	db06      	blt.n	8009ee4 <_dtoa_r+0xa94>
 8009ed6:	9905      	ldr	r1, [sp, #20]
 8009ed8:	ea41 0909 	orr.w	r9, r1, r9
 8009edc:	9906      	ldr	r1, [sp, #24]
 8009ede:	ea59 0101 	orrs.w	r1, r9, r1
 8009ee2:	d120      	bne.n	8009f26 <_dtoa_r+0xad6>
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	ddec      	ble.n	8009ec2 <_dtoa_r+0xa72>
 8009ee8:	4659      	mov	r1, fp
 8009eea:	2201      	movs	r2, #1
 8009eec:	4620      	mov	r0, r4
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	f000 fb98 	bl	800a624 <__lshift>
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4683      	mov	fp, r0
 8009ef8:	f000 fc00 	bl	800a6fc <__mcmp>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	dc02      	bgt.n	8009f08 <_dtoa_r+0xab8>
 8009f02:	d1de      	bne.n	8009ec2 <_dtoa_r+0xa72>
 8009f04:	07da      	lsls	r2, r3, #31
 8009f06:	d5dc      	bpl.n	8009ec2 <_dtoa_r+0xa72>
 8009f08:	2b39      	cmp	r3, #57	; 0x39
 8009f0a:	d1d8      	bne.n	8009ebe <_dtoa_r+0xa6e>
 8009f0c:	9a02      	ldr	r2, [sp, #8]
 8009f0e:	2339      	movs	r3, #57	; 0x39
 8009f10:	7013      	strb	r3, [r2, #0]
 8009f12:	462b      	mov	r3, r5
 8009f14:	461d      	mov	r5, r3
 8009f16:	3b01      	subs	r3, #1
 8009f18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f1c:	2a39      	cmp	r2, #57	; 0x39
 8009f1e:	d050      	beq.n	8009fc2 <_dtoa_r+0xb72>
 8009f20:	3201      	adds	r2, #1
 8009f22:	701a      	strb	r2, [r3, #0]
 8009f24:	e745      	b.n	8009db2 <_dtoa_r+0x962>
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	dd03      	ble.n	8009f32 <_dtoa_r+0xae2>
 8009f2a:	2b39      	cmp	r3, #57	; 0x39
 8009f2c:	d0ee      	beq.n	8009f0c <_dtoa_r+0xabc>
 8009f2e:	3301      	adds	r3, #1
 8009f30:	e7c7      	b.n	8009ec2 <_dtoa_r+0xa72>
 8009f32:	9a01      	ldr	r2, [sp, #4]
 8009f34:	9907      	ldr	r1, [sp, #28]
 8009f36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f3a:	428a      	cmp	r2, r1
 8009f3c:	d02a      	beq.n	8009f94 <_dtoa_r+0xb44>
 8009f3e:	4659      	mov	r1, fp
 8009f40:	2300      	movs	r3, #0
 8009f42:	220a      	movs	r2, #10
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 f9bd 	bl	800a2c4 <__multadd>
 8009f4a:	45b8      	cmp	r8, r7
 8009f4c:	4683      	mov	fp, r0
 8009f4e:	f04f 0300 	mov.w	r3, #0
 8009f52:	f04f 020a 	mov.w	r2, #10
 8009f56:	4641      	mov	r1, r8
 8009f58:	4620      	mov	r0, r4
 8009f5a:	d107      	bne.n	8009f6c <_dtoa_r+0xb1c>
 8009f5c:	f000 f9b2 	bl	800a2c4 <__multadd>
 8009f60:	4680      	mov	r8, r0
 8009f62:	4607      	mov	r7, r0
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	3301      	adds	r3, #1
 8009f68:	9301      	str	r3, [sp, #4]
 8009f6a:	e775      	b.n	8009e58 <_dtoa_r+0xa08>
 8009f6c:	f000 f9aa 	bl	800a2c4 <__multadd>
 8009f70:	4639      	mov	r1, r7
 8009f72:	4680      	mov	r8, r0
 8009f74:	2300      	movs	r3, #0
 8009f76:	220a      	movs	r2, #10
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 f9a3 	bl	800a2c4 <__multadd>
 8009f7e:	4607      	mov	r7, r0
 8009f80:	e7f0      	b.n	8009f64 <_dtoa_r+0xb14>
 8009f82:	f1b9 0f00 	cmp.w	r9, #0
 8009f86:	9a00      	ldr	r2, [sp, #0]
 8009f88:	bfcc      	ite	gt
 8009f8a:	464d      	movgt	r5, r9
 8009f8c:	2501      	movle	r5, #1
 8009f8e:	4415      	add	r5, r2
 8009f90:	f04f 0800 	mov.w	r8, #0
 8009f94:	4659      	mov	r1, fp
 8009f96:	2201      	movs	r2, #1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	f000 fb42 	bl	800a624 <__lshift>
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4683      	mov	fp, r0
 8009fa4:	f000 fbaa 	bl	800a6fc <__mcmp>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	dcb2      	bgt.n	8009f12 <_dtoa_r+0xac2>
 8009fac:	d102      	bne.n	8009fb4 <_dtoa_r+0xb64>
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	07db      	lsls	r3, r3, #31
 8009fb2:	d4ae      	bmi.n	8009f12 <_dtoa_r+0xac2>
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	461d      	mov	r5, r3
 8009fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fbc:	2a30      	cmp	r2, #48	; 0x30
 8009fbe:	d0fa      	beq.n	8009fb6 <_dtoa_r+0xb66>
 8009fc0:	e6f7      	b.n	8009db2 <_dtoa_r+0x962>
 8009fc2:	9a00      	ldr	r2, [sp, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d1a5      	bne.n	8009f14 <_dtoa_r+0xac4>
 8009fc8:	f10a 0a01 	add.w	sl, sl, #1
 8009fcc:	2331      	movs	r3, #49	; 0x31
 8009fce:	e779      	b.n	8009ec4 <_dtoa_r+0xa74>
 8009fd0:	4b13      	ldr	r3, [pc, #76]	; (800a020 <_dtoa_r+0xbd0>)
 8009fd2:	f7ff baaf 	b.w	8009534 <_dtoa_r+0xe4>
 8009fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f47f aa86 	bne.w	80094ea <_dtoa_r+0x9a>
 8009fde:	4b11      	ldr	r3, [pc, #68]	; (800a024 <_dtoa_r+0xbd4>)
 8009fe0:	f7ff baa8 	b.w	8009534 <_dtoa_r+0xe4>
 8009fe4:	f1b9 0f00 	cmp.w	r9, #0
 8009fe8:	dc03      	bgt.n	8009ff2 <_dtoa_r+0xba2>
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	f73f aec9 	bgt.w	8009d84 <_dtoa_r+0x934>
 8009ff2:	9d00      	ldr	r5, [sp, #0]
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4658      	mov	r0, fp
 8009ff8:	f7ff f99e 	bl	8009338 <quorem>
 8009ffc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a000:	f805 3b01 	strb.w	r3, [r5], #1
 800a004:	9a00      	ldr	r2, [sp, #0]
 800a006:	1aaa      	subs	r2, r5, r2
 800a008:	4591      	cmp	r9, r2
 800a00a:	ddba      	ble.n	8009f82 <_dtoa_r+0xb32>
 800a00c:	4659      	mov	r1, fp
 800a00e:	2300      	movs	r3, #0
 800a010:	220a      	movs	r2, #10
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f956 	bl	800a2c4 <__multadd>
 800a018:	4683      	mov	fp, r0
 800a01a:	e7eb      	b.n	8009ff4 <_dtoa_r+0xba4>
 800a01c:	0800b2b7 	.word	0x0800b2b7
 800a020:	0800b210 	.word	0x0800b210
 800a024:	0800b234 	.word	0x0800b234

0800a028 <__sflush_r>:
 800a028:	898a      	ldrh	r2, [r1, #12]
 800a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	4605      	mov	r5, r0
 800a030:	0710      	lsls	r0, r2, #28
 800a032:	460c      	mov	r4, r1
 800a034:	d458      	bmi.n	800a0e8 <__sflush_r+0xc0>
 800a036:	684b      	ldr	r3, [r1, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dc05      	bgt.n	800a048 <__sflush_r+0x20>
 800a03c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dc02      	bgt.n	800a048 <__sflush_r+0x20>
 800a042:	2000      	movs	r0, #0
 800a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a04a:	2e00      	cmp	r6, #0
 800a04c:	d0f9      	beq.n	800a042 <__sflush_r+0x1a>
 800a04e:	2300      	movs	r3, #0
 800a050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a054:	682f      	ldr	r7, [r5, #0]
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	d032      	beq.n	800a0c0 <__sflush_r+0x98>
 800a05a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	075a      	lsls	r2, r3, #29
 800a060:	d505      	bpl.n	800a06e <__sflush_r+0x46>
 800a062:	6863      	ldr	r3, [r4, #4]
 800a064:	1ac0      	subs	r0, r0, r3
 800a066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a068:	b10b      	cbz	r3, 800a06e <__sflush_r+0x46>
 800a06a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a06c:	1ac0      	subs	r0, r0, r3
 800a06e:	2300      	movs	r3, #0
 800a070:	4602      	mov	r2, r0
 800a072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a074:	6a21      	ldr	r1, [r4, #32]
 800a076:	4628      	mov	r0, r5
 800a078:	47b0      	blx	r6
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	d106      	bne.n	800a08e <__sflush_r+0x66>
 800a080:	6829      	ldr	r1, [r5, #0]
 800a082:	291d      	cmp	r1, #29
 800a084:	d82c      	bhi.n	800a0e0 <__sflush_r+0xb8>
 800a086:	4a2a      	ldr	r2, [pc, #168]	; (800a130 <__sflush_r+0x108>)
 800a088:	40ca      	lsrs	r2, r1
 800a08a:	07d6      	lsls	r6, r2, #31
 800a08c:	d528      	bpl.n	800a0e0 <__sflush_r+0xb8>
 800a08e:	2200      	movs	r2, #0
 800a090:	6062      	str	r2, [r4, #4]
 800a092:	04d9      	lsls	r1, r3, #19
 800a094:	6922      	ldr	r2, [r4, #16]
 800a096:	6022      	str	r2, [r4, #0]
 800a098:	d504      	bpl.n	800a0a4 <__sflush_r+0x7c>
 800a09a:	1c42      	adds	r2, r0, #1
 800a09c:	d101      	bne.n	800a0a2 <__sflush_r+0x7a>
 800a09e:	682b      	ldr	r3, [r5, #0]
 800a0a0:	b903      	cbnz	r3, 800a0a4 <__sflush_r+0x7c>
 800a0a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a0a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0a6:	602f      	str	r7, [r5, #0]
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	d0ca      	beq.n	800a042 <__sflush_r+0x1a>
 800a0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	d002      	beq.n	800a0ba <__sflush_r+0x92>
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 fc31 	bl	800a91c <_free_r>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a0be:	e7c1      	b.n	800a044 <__sflush_r+0x1c>
 800a0c0:	6a21      	ldr	r1, [r4, #32]
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b0      	blx	r6
 800a0c8:	1c41      	adds	r1, r0, #1
 800a0ca:	d1c7      	bne.n	800a05c <__sflush_r+0x34>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0c4      	beq.n	800a05c <__sflush_r+0x34>
 800a0d2:	2b1d      	cmp	r3, #29
 800a0d4:	d001      	beq.n	800a0da <__sflush_r+0xb2>
 800a0d6:	2b16      	cmp	r3, #22
 800a0d8:	d101      	bne.n	800a0de <__sflush_r+0xb6>
 800a0da:	602f      	str	r7, [r5, #0]
 800a0dc:	e7b1      	b.n	800a042 <__sflush_r+0x1a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	e7ad      	b.n	800a044 <__sflush_r+0x1c>
 800a0e8:	690f      	ldr	r7, [r1, #16]
 800a0ea:	2f00      	cmp	r7, #0
 800a0ec:	d0a9      	beq.n	800a042 <__sflush_r+0x1a>
 800a0ee:	0793      	lsls	r3, r2, #30
 800a0f0:	680e      	ldr	r6, [r1, #0]
 800a0f2:	bf08      	it	eq
 800a0f4:	694b      	ldreq	r3, [r1, #20]
 800a0f6:	600f      	str	r7, [r1, #0]
 800a0f8:	bf18      	it	ne
 800a0fa:	2300      	movne	r3, #0
 800a0fc:	eba6 0807 	sub.w	r8, r6, r7
 800a100:	608b      	str	r3, [r1, #8]
 800a102:	f1b8 0f00 	cmp.w	r8, #0
 800a106:	dd9c      	ble.n	800a042 <__sflush_r+0x1a>
 800a108:	6a21      	ldr	r1, [r4, #32]
 800a10a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a10c:	4643      	mov	r3, r8
 800a10e:	463a      	mov	r2, r7
 800a110:	4628      	mov	r0, r5
 800a112:	47b0      	blx	r6
 800a114:	2800      	cmp	r0, #0
 800a116:	dc06      	bgt.n	800a126 <__sflush_r+0xfe>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	e78e      	b.n	800a044 <__sflush_r+0x1c>
 800a126:	4407      	add	r7, r0
 800a128:	eba8 0800 	sub.w	r8, r8, r0
 800a12c:	e7e9      	b.n	800a102 <__sflush_r+0xda>
 800a12e:	bf00      	nop
 800a130:	20400001 	.word	0x20400001

0800a134 <_fflush_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	690b      	ldr	r3, [r1, #16]
 800a138:	4605      	mov	r5, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	b913      	cbnz	r3, 800a144 <_fflush_r+0x10>
 800a13e:	2500      	movs	r5, #0
 800a140:	4628      	mov	r0, r5
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	b118      	cbz	r0, 800a14e <_fflush_r+0x1a>
 800a146:	6983      	ldr	r3, [r0, #24]
 800a148:	b90b      	cbnz	r3, 800a14e <_fflush_r+0x1a>
 800a14a:	f7fe fa75 	bl	8008638 <__sinit>
 800a14e:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <_fflush_r+0x6c>)
 800a150:	429c      	cmp	r4, r3
 800a152:	d11b      	bne.n	800a18c <_fflush_r+0x58>
 800a154:	686c      	ldr	r4, [r5, #4]
 800a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0ef      	beq.n	800a13e <_fflush_r+0xa>
 800a15e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a160:	07d0      	lsls	r0, r2, #31
 800a162:	d404      	bmi.n	800a16e <_fflush_r+0x3a>
 800a164:	0599      	lsls	r1, r3, #22
 800a166:	d402      	bmi.n	800a16e <_fflush_r+0x3a>
 800a168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a16a:	f7fe fb28 	bl	80087be <__retarget_lock_acquire_recursive>
 800a16e:	4628      	mov	r0, r5
 800a170:	4621      	mov	r1, r4
 800a172:	f7ff ff59 	bl	800a028 <__sflush_r>
 800a176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a178:	07da      	lsls	r2, r3, #31
 800a17a:	4605      	mov	r5, r0
 800a17c:	d4e0      	bmi.n	800a140 <_fflush_r+0xc>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	059b      	lsls	r3, r3, #22
 800a182:	d4dd      	bmi.n	800a140 <_fflush_r+0xc>
 800a184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a186:	f7fe fb1b 	bl	80087c0 <__retarget_lock_release_recursive>
 800a18a:	e7d9      	b.n	800a140 <_fflush_r+0xc>
 800a18c:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <_fflush_r+0x70>)
 800a18e:	429c      	cmp	r4, r3
 800a190:	d101      	bne.n	800a196 <_fflush_r+0x62>
 800a192:	68ac      	ldr	r4, [r5, #8]
 800a194:	e7df      	b.n	800a156 <_fflush_r+0x22>
 800a196:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <_fflush_r+0x74>)
 800a198:	429c      	cmp	r4, r3
 800a19a:	bf08      	it	eq
 800a19c:	68ec      	ldreq	r4, [r5, #12]
 800a19e:	e7da      	b.n	800a156 <_fflush_r+0x22>
 800a1a0:	0800b1bc 	.word	0x0800b1bc
 800a1a4:	0800b1dc 	.word	0x0800b1dc
 800a1a8:	0800b19c 	.word	0x0800b19c

0800a1ac <_localeconv_r>:
 800a1ac:	4800      	ldr	r0, [pc, #0]	; (800a1b0 <_localeconv_r+0x4>)
 800a1ae:	4770      	bx	lr
 800a1b0:	20000164 	.word	0x20000164

0800a1b4 <_lseek_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	; (800a1d4 <_lseek_r+0x20>)
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	4608      	mov	r0, r1
 800a1bc:	4611      	mov	r1, r2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	602a      	str	r2, [r5, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f7f7 fab6 	bl	8001734 <_lseek>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_lseek_r+0x1e>
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_lseek_r+0x1e>
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	20001dac 	.word	0x20001dac

0800a1d8 <malloc>:
 800a1d8:	4b02      	ldr	r3, [pc, #8]	; (800a1e4 <malloc+0xc>)
 800a1da:	4601      	mov	r1, r0
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	f7fe bb07 	b.w	80087f0 <_malloc_r>
 800a1e2:	bf00      	nop
 800a1e4:	20000010 	.word	0x20000010

0800a1e8 <__malloc_lock>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__malloc_lock+0x8>)
 800a1ea:	f7fe bae8 	b.w	80087be <__retarget_lock_acquire_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20001da4 	.word	0x20001da4

0800a1f4 <__malloc_unlock>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__malloc_unlock+0x8>)
 800a1f6:	f7fe bae3 	b.w	80087c0 <__retarget_lock_release_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	20001da4 	.word	0x20001da4

0800a200 <_Balloc>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	b976      	cbnz	r6, 800a228 <_Balloc+0x28>
 800a20a:	2010      	movs	r0, #16
 800a20c:	f7ff ffe4 	bl	800a1d8 <malloc>
 800a210:	4602      	mov	r2, r0
 800a212:	6260      	str	r0, [r4, #36]	; 0x24
 800a214:	b920      	cbnz	r0, 800a220 <_Balloc+0x20>
 800a216:	4b18      	ldr	r3, [pc, #96]	; (800a278 <_Balloc+0x78>)
 800a218:	4818      	ldr	r0, [pc, #96]	; (800a27c <_Balloc+0x7c>)
 800a21a:	2166      	movs	r1, #102	; 0x66
 800a21c:	f000 fbe0 	bl	800a9e0 <__assert_func>
 800a220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a224:	6006      	str	r6, [r0, #0]
 800a226:	60c6      	str	r6, [r0, #12]
 800a228:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a22a:	68f3      	ldr	r3, [r6, #12]
 800a22c:	b183      	cbz	r3, 800a250 <_Balloc+0x50>
 800a22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a236:	b9b8      	cbnz	r0, 800a268 <_Balloc+0x68>
 800a238:	2101      	movs	r1, #1
 800a23a:	fa01 f605 	lsl.w	r6, r1, r5
 800a23e:	1d72      	adds	r2, r6, #5
 800a240:	0092      	lsls	r2, r2, #2
 800a242:	4620      	mov	r0, r4
 800a244:	f000 fb5a 	bl	800a8fc <_calloc_r>
 800a248:	b160      	cbz	r0, 800a264 <_Balloc+0x64>
 800a24a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a24e:	e00e      	b.n	800a26e <_Balloc+0x6e>
 800a250:	2221      	movs	r2, #33	; 0x21
 800a252:	2104      	movs	r1, #4
 800a254:	4620      	mov	r0, r4
 800a256:	f000 fb51 	bl	800a8fc <_calloc_r>
 800a25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25c:	60f0      	str	r0, [r6, #12]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e4      	bne.n	800a22e <_Balloc+0x2e>
 800a264:	2000      	movs	r0, #0
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	6802      	ldr	r2, [r0, #0]
 800a26a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a26e:	2300      	movs	r3, #0
 800a270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a274:	e7f7      	b.n	800a266 <_Balloc+0x66>
 800a276:	bf00      	nop
 800a278:	0800b241 	.word	0x0800b241
 800a27c:	0800b2c8 	.word	0x0800b2c8

0800a280 <_Bfree>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a284:	4605      	mov	r5, r0
 800a286:	460c      	mov	r4, r1
 800a288:	b976      	cbnz	r6, 800a2a8 <_Bfree+0x28>
 800a28a:	2010      	movs	r0, #16
 800a28c:	f7ff ffa4 	bl	800a1d8 <malloc>
 800a290:	4602      	mov	r2, r0
 800a292:	6268      	str	r0, [r5, #36]	; 0x24
 800a294:	b920      	cbnz	r0, 800a2a0 <_Bfree+0x20>
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <_Bfree+0x3c>)
 800a298:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <_Bfree+0x40>)
 800a29a:	218a      	movs	r1, #138	; 0x8a
 800a29c:	f000 fba0 	bl	800a9e0 <__assert_func>
 800a2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2a4:	6006      	str	r6, [r0, #0]
 800a2a6:	60c6      	str	r6, [r0, #12]
 800a2a8:	b13c      	cbz	r4, 800a2ba <_Bfree+0x3a>
 800a2aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2ac:	6862      	ldr	r2, [r4, #4]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2b4:	6021      	str	r1, [r4, #0]
 800a2b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	0800b241 	.word	0x0800b241
 800a2c0:	0800b2c8 	.word	0x0800b2c8

0800a2c4 <__multadd>:
 800a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c8:	690e      	ldr	r6, [r1, #16]
 800a2ca:	4607      	mov	r7, r0
 800a2cc:	4698      	mov	r8, r3
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	f101 0014 	add.w	r0, r1, #20
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6805      	ldr	r5, [r0, #0]
 800a2d8:	b2a9      	uxth	r1, r5
 800a2da:	fb02 8101 	mla	r1, r2, r1, r8
 800a2de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a2e2:	0c2d      	lsrs	r5, r5, #16
 800a2e4:	fb02 c505 	mla	r5, r2, r5, ip
 800a2e8:	b289      	uxth	r1, r1
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a2f0:	429e      	cmp	r6, r3
 800a2f2:	f840 1b04 	str.w	r1, [r0], #4
 800a2f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a2fa:	dcec      	bgt.n	800a2d6 <__multadd+0x12>
 800a2fc:	f1b8 0f00 	cmp.w	r8, #0
 800a300:	d022      	beq.n	800a348 <__multadd+0x84>
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	42b3      	cmp	r3, r6
 800a306:	dc19      	bgt.n	800a33c <__multadd+0x78>
 800a308:	6861      	ldr	r1, [r4, #4]
 800a30a:	4638      	mov	r0, r7
 800a30c:	3101      	adds	r1, #1
 800a30e:	f7ff ff77 	bl	800a200 <_Balloc>
 800a312:	4605      	mov	r5, r0
 800a314:	b928      	cbnz	r0, 800a322 <__multadd+0x5e>
 800a316:	4602      	mov	r2, r0
 800a318:	4b0d      	ldr	r3, [pc, #52]	; (800a350 <__multadd+0x8c>)
 800a31a:	480e      	ldr	r0, [pc, #56]	; (800a354 <__multadd+0x90>)
 800a31c:	21b5      	movs	r1, #181	; 0xb5
 800a31e:	f000 fb5f 	bl	800a9e0 <__assert_func>
 800a322:	6922      	ldr	r2, [r4, #16]
 800a324:	3202      	adds	r2, #2
 800a326:	f104 010c 	add.w	r1, r4, #12
 800a32a:	0092      	lsls	r2, r2, #2
 800a32c:	300c      	adds	r0, #12
 800a32e:	f7fe fa48 	bl	80087c2 <memcpy>
 800a332:	4621      	mov	r1, r4
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff ffa3 	bl	800a280 <_Bfree>
 800a33a:	462c      	mov	r4, r5
 800a33c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a340:	3601      	adds	r6, #1
 800a342:	f8c3 8014 	str.w	r8, [r3, #20]
 800a346:	6126      	str	r6, [r4, #16]
 800a348:	4620      	mov	r0, r4
 800a34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34e:	bf00      	nop
 800a350:	0800b2b7 	.word	0x0800b2b7
 800a354:	0800b2c8 	.word	0x0800b2c8

0800a358 <__hi0bits>:
 800a358:	0c03      	lsrs	r3, r0, #16
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	b9d3      	cbnz	r3, 800a394 <__hi0bits+0x3c>
 800a35e:	0400      	lsls	r0, r0, #16
 800a360:	2310      	movs	r3, #16
 800a362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a366:	bf04      	itt	eq
 800a368:	0200      	lsleq	r0, r0, #8
 800a36a:	3308      	addeq	r3, #8
 800a36c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a370:	bf04      	itt	eq
 800a372:	0100      	lsleq	r0, r0, #4
 800a374:	3304      	addeq	r3, #4
 800a376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a37a:	bf04      	itt	eq
 800a37c:	0080      	lsleq	r0, r0, #2
 800a37e:	3302      	addeq	r3, #2
 800a380:	2800      	cmp	r0, #0
 800a382:	db05      	blt.n	800a390 <__hi0bits+0x38>
 800a384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a388:	f103 0301 	add.w	r3, r3, #1
 800a38c:	bf08      	it	eq
 800a38e:	2320      	moveq	r3, #32
 800a390:	4618      	mov	r0, r3
 800a392:	4770      	bx	lr
 800a394:	2300      	movs	r3, #0
 800a396:	e7e4      	b.n	800a362 <__hi0bits+0xa>

0800a398 <__lo0bits>:
 800a398:	6803      	ldr	r3, [r0, #0]
 800a39a:	f013 0207 	ands.w	r2, r3, #7
 800a39e:	4601      	mov	r1, r0
 800a3a0:	d00b      	beq.n	800a3ba <__lo0bits+0x22>
 800a3a2:	07da      	lsls	r2, r3, #31
 800a3a4:	d424      	bmi.n	800a3f0 <__lo0bits+0x58>
 800a3a6:	0798      	lsls	r0, r3, #30
 800a3a8:	bf49      	itett	mi
 800a3aa:	085b      	lsrmi	r3, r3, #1
 800a3ac:	089b      	lsrpl	r3, r3, #2
 800a3ae:	2001      	movmi	r0, #1
 800a3b0:	600b      	strmi	r3, [r1, #0]
 800a3b2:	bf5c      	itt	pl
 800a3b4:	600b      	strpl	r3, [r1, #0]
 800a3b6:	2002      	movpl	r0, #2
 800a3b8:	4770      	bx	lr
 800a3ba:	b298      	uxth	r0, r3
 800a3bc:	b9b0      	cbnz	r0, 800a3ec <__lo0bits+0x54>
 800a3be:	0c1b      	lsrs	r3, r3, #16
 800a3c0:	2010      	movs	r0, #16
 800a3c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3c6:	bf04      	itt	eq
 800a3c8:	0a1b      	lsreq	r3, r3, #8
 800a3ca:	3008      	addeq	r0, #8
 800a3cc:	071a      	lsls	r2, r3, #28
 800a3ce:	bf04      	itt	eq
 800a3d0:	091b      	lsreq	r3, r3, #4
 800a3d2:	3004      	addeq	r0, #4
 800a3d4:	079a      	lsls	r2, r3, #30
 800a3d6:	bf04      	itt	eq
 800a3d8:	089b      	lsreq	r3, r3, #2
 800a3da:	3002      	addeq	r0, #2
 800a3dc:	07da      	lsls	r2, r3, #31
 800a3de:	d403      	bmi.n	800a3e8 <__lo0bits+0x50>
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	f100 0001 	add.w	r0, r0, #1
 800a3e6:	d005      	beq.n	800a3f4 <__lo0bits+0x5c>
 800a3e8:	600b      	str	r3, [r1, #0]
 800a3ea:	4770      	bx	lr
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	e7e8      	b.n	800a3c2 <__lo0bits+0x2a>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	4770      	bx	lr
 800a3f4:	2020      	movs	r0, #32
 800a3f6:	4770      	bx	lr

0800a3f8 <__i2b>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	f7ff feff 	bl	800a200 <_Balloc>
 800a402:	4602      	mov	r2, r0
 800a404:	b928      	cbnz	r0, 800a412 <__i2b+0x1a>
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <__i2b+0x24>)
 800a408:	4805      	ldr	r0, [pc, #20]	; (800a420 <__i2b+0x28>)
 800a40a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a40e:	f000 fae7 	bl	800a9e0 <__assert_func>
 800a412:	2301      	movs	r3, #1
 800a414:	6144      	str	r4, [r0, #20]
 800a416:	6103      	str	r3, [r0, #16]
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	bf00      	nop
 800a41c:	0800b2b7 	.word	0x0800b2b7
 800a420:	0800b2c8 	.word	0x0800b2c8

0800a424 <__multiply>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4614      	mov	r4, r2
 800a42a:	690a      	ldr	r2, [r1, #16]
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	429a      	cmp	r2, r3
 800a430:	bfb8      	it	lt
 800a432:	460b      	movlt	r3, r1
 800a434:	460d      	mov	r5, r1
 800a436:	bfbc      	itt	lt
 800a438:	4625      	movlt	r5, r4
 800a43a:	461c      	movlt	r4, r3
 800a43c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a440:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a444:	68ab      	ldr	r3, [r5, #8]
 800a446:	6869      	ldr	r1, [r5, #4]
 800a448:	eb0a 0709 	add.w	r7, sl, r9
 800a44c:	42bb      	cmp	r3, r7
 800a44e:	b085      	sub	sp, #20
 800a450:	bfb8      	it	lt
 800a452:	3101      	addlt	r1, #1
 800a454:	f7ff fed4 	bl	800a200 <_Balloc>
 800a458:	b930      	cbnz	r0, 800a468 <__multiply+0x44>
 800a45a:	4602      	mov	r2, r0
 800a45c:	4b42      	ldr	r3, [pc, #264]	; (800a568 <__multiply+0x144>)
 800a45e:	4843      	ldr	r0, [pc, #268]	; (800a56c <__multiply+0x148>)
 800a460:	f240 115d 	movw	r1, #349	; 0x15d
 800a464:	f000 fabc 	bl	800a9e0 <__assert_func>
 800a468:	f100 0614 	add.w	r6, r0, #20
 800a46c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a470:	4633      	mov	r3, r6
 800a472:	2200      	movs	r2, #0
 800a474:	4543      	cmp	r3, r8
 800a476:	d31e      	bcc.n	800a4b6 <__multiply+0x92>
 800a478:	f105 0c14 	add.w	ip, r5, #20
 800a47c:	f104 0314 	add.w	r3, r4, #20
 800a480:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a484:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a488:	9202      	str	r2, [sp, #8]
 800a48a:	ebac 0205 	sub.w	r2, ip, r5
 800a48e:	3a15      	subs	r2, #21
 800a490:	f022 0203 	bic.w	r2, r2, #3
 800a494:	3204      	adds	r2, #4
 800a496:	f105 0115 	add.w	r1, r5, #21
 800a49a:	458c      	cmp	ip, r1
 800a49c:	bf38      	it	cc
 800a49e:	2204      	movcc	r2, #4
 800a4a0:	9201      	str	r2, [sp, #4]
 800a4a2:	9a02      	ldr	r2, [sp, #8]
 800a4a4:	9303      	str	r3, [sp, #12]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d808      	bhi.n	800a4bc <__multiply+0x98>
 800a4aa:	2f00      	cmp	r7, #0
 800a4ac:	dc55      	bgt.n	800a55a <__multiply+0x136>
 800a4ae:	6107      	str	r7, [r0, #16]
 800a4b0:	b005      	add	sp, #20
 800a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b6:	f843 2b04 	str.w	r2, [r3], #4
 800a4ba:	e7db      	b.n	800a474 <__multiply+0x50>
 800a4bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4c0:	f1ba 0f00 	cmp.w	sl, #0
 800a4c4:	d020      	beq.n	800a508 <__multiply+0xe4>
 800a4c6:	f105 0e14 	add.w	lr, r5, #20
 800a4ca:	46b1      	mov	r9, r6
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a4d2:	f8d9 b000 	ldr.w	fp, [r9]
 800a4d6:	b2a1      	uxth	r1, r4
 800a4d8:	fa1f fb8b 	uxth.w	fp, fp
 800a4dc:	fb0a b101 	mla	r1, sl, r1, fp
 800a4e0:	4411      	add	r1, r2
 800a4e2:	f8d9 2000 	ldr.w	r2, [r9]
 800a4e6:	0c24      	lsrs	r4, r4, #16
 800a4e8:	0c12      	lsrs	r2, r2, #16
 800a4ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800a4ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a4f2:	b289      	uxth	r1, r1
 800a4f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a4f8:	45f4      	cmp	ip, lr
 800a4fa:	f849 1b04 	str.w	r1, [r9], #4
 800a4fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a502:	d8e4      	bhi.n	800a4ce <__multiply+0xaa>
 800a504:	9901      	ldr	r1, [sp, #4]
 800a506:	5072      	str	r2, [r6, r1]
 800a508:	9a03      	ldr	r2, [sp, #12]
 800a50a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a50e:	3304      	adds	r3, #4
 800a510:	f1b9 0f00 	cmp.w	r9, #0
 800a514:	d01f      	beq.n	800a556 <__multiply+0x132>
 800a516:	6834      	ldr	r4, [r6, #0]
 800a518:	f105 0114 	add.w	r1, r5, #20
 800a51c:	46b6      	mov	lr, r6
 800a51e:	f04f 0a00 	mov.w	sl, #0
 800a522:	880a      	ldrh	r2, [r1, #0]
 800a524:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a528:	fb09 b202 	mla	r2, r9, r2, fp
 800a52c:	4492      	add	sl, r2
 800a52e:	b2a4      	uxth	r4, r4
 800a530:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a534:	f84e 4b04 	str.w	r4, [lr], #4
 800a538:	f851 4b04 	ldr.w	r4, [r1], #4
 800a53c:	f8be 2000 	ldrh.w	r2, [lr]
 800a540:	0c24      	lsrs	r4, r4, #16
 800a542:	fb09 2404 	mla	r4, r9, r4, r2
 800a546:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a54a:	458c      	cmp	ip, r1
 800a54c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a550:	d8e7      	bhi.n	800a522 <__multiply+0xfe>
 800a552:	9a01      	ldr	r2, [sp, #4]
 800a554:	50b4      	str	r4, [r6, r2]
 800a556:	3604      	adds	r6, #4
 800a558:	e7a3      	b.n	800a4a2 <__multiply+0x7e>
 800a55a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1a5      	bne.n	800a4ae <__multiply+0x8a>
 800a562:	3f01      	subs	r7, #1
 800a564:	e7a1      	b.n	800a4aa <__multiply+0x86>
 800a566:	bf00      	nop
 800a568:	0800b2b7 	.word	0x0800b2b7
 800a56c:	0800b2c8 	.word	0x0800b2c8

0800a570 <__pow5mult>:
 800a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a574:	4615      	mov	r5, r2
 800a576:	f012 0203 	ands.w	r2, r2, #3
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	d007      	beq.n	800a590 <__pow5mult+0x20>
 800a580:	4c25      	ldr	r4, [pc, #148]	; (800a618 <__pow5mult+0xa8>)
 800a582:	3a01      	subs	r2, #1
 800a584:	2300      	movs	r3, #0
 800a586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a58a:	f7ff fe9b 	bl	800a2c4 <__multadd>
 800a58e:	4607      	mov	r7, r0
 800a590:	10ad      	asrs	r5, r5, #2
 800a592:	d03d      	beq.n	800a610 <__pow5mult+0xa0>
 800a594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a596:	b97c      	cbnz	r4, 800a5b8 <__pow5mult+0x48>
 800a598:	2010      	movs	r0, #16
 800a59a:	f7ff fe1d 	bl	800a1d8 <malloc>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a5a2:	b928      	cbnz	r0, 800a5b0 <__pow5mult+0x40>
 800a5a4:	4b1d      	ldr	r3, [pc, #116]	; (800a61c <__pow5mult+0xac>)
 800a5a6:	481e      	ldr	r0, [pc, #120]	; (800a620 <__pow5mult+0xb0>)
 800a5a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5ac:	f000 fa18 	bl	800a9e0 <__assert_func>
 800a5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5b4:	6004      	str	r4, [r0, #0]
 800a5b6:	60c4      	str	r4, [r0, #12]
 800a5b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5c0:	b94c      	cbnz	r4, 800a5d6 <__pow5mult+0x66>
 800a5c2:	f240 2171 	movw	r1, #625	; 0x271
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7ff ff16 	bl	800a3f8 <__i2b>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	f04f 0900 	mov.w	r9, #0
 800a5da:	07eb      	lsls	r3, r5, #31
 800a5dc:	d50a      	bpl.n	800a5f4 <__pow5mult+0x84>
 800a5de:	4639      	mov	r1, r7
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f7ff ff1e 	bl	800a424 <__multiply>
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff fe47 	bl	800a280 <_Bfree>
 800a5f2:	4647      	mov	r7, r8
 800a5f4:	106d      	asrs	r5, r5, #1
 800a5f6:	d00b      	beq.n	800a610 <__pow5mult+0xa0>
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	b938      	cbnz	r0, 800a60c <__pow5mult+0x9c>
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4621      	mov	r1, r4
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff ff0f 	bl	800a424 <__multiply>
 800a606:	6020      	str	r0, [r4, #0]
 800a608:	f8c0 9000 	str.w	r9, [r0]
 800a60c:	4604      	mov	r4, r0
 800a60e:	e7e4      	b.n	800a5da <__pow5mult+0x6a>
 800a610:	4638      	mov	r0, r7
 800a612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a616:	bf00      	nop
 800a618:	0800b418 	.word	0x0800b418
 800a61c:	0800b241 	.word	0x0800b241
 800a620:	0800b2c8 	.word	0x0800b2c8

0800a624 <__lshift>:
 800a624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a628:	460c      	mov	r4, r1
 800a62a:	6849      	ldr	r1, [r1, #4]
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a632:	68a3      	ldr	r3, [r4, #8]
 800a634:	4607      	mov	r7, r0
 800a636:	4691      	mov	r9, r2
 800a638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a63c:	f108 0601 	add.w	r6, r8, #1
 800a640:	42b3      	cmp	r3, r6
 800a642:	db0b      	blt.n	800a65c <__lshift+0x38>
 800a644:	4638      	mov	r0, r7
 800a646:	f7ff fddb 	bl	800a200 <_Balloc>
 800a64a:	4605      	mov	r5, r0
 800a64c:	b948      	cbnz	r0, 800a662 <__lshift+0x3e>
 800a64e:	4602      	mov	r2, r0
 800a650:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <__lshift+0xd0>)
 800a652:	4829      	ldr	r0, [pc, #164]	; (800a6f8 <__lshift+0xd4>)
 800a654:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a658:	f000 f9c2 	bl	800a9e0 <__assert_func>
 800a65c:	3101      	adds	r1, #1
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	e7ee      	b.n	800a640 <__lshift+0x1c>
 800a662:	2300      	movs	r3, #0
 800a664:	f100 0114 	add.w	r1, r0, #20
 800a668:	f100 0210 	add.w	r2, r0, #16
 800a66c:	4618      	mov	r0, r3
 800a66e:	4553      	cmp	r3, sl
 800a670:	db33      	blt.n	800a6da <__lshift+0xb6>
 800a672:	6920      	ldr	r0, [r4, #16]
 800a674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a678:	f104 0314 	add.w	r3, r4, #20
 800a67c:	f019 091f 	ands.w	r9, r9, #31
 800a680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a688:	d02b      	beq.n	800a6e2 <__lshift+0xbe>
 800a68a:	f1c9 0e20 	rsb	lr, r9, #32
 800a68e:	468a      	mov	sl, r1
 800a690:	2200      	movs	r2, #0
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	fa00 f009 	lsl.w	r0, r0, r9
 800a698:	4302      	orrs	r2, r0
 800a69a:	f84a 2b04 	str.w	r2, [sl], #4
 800a69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a2:	459c      	cmp	ip, r3
 800a6a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6a8:	d8f3      	bhi.n	800a692 <__lshift+0x6e>
 800a6aa:	ebac 0304 	sub.w	r3, ip, r4
 800a6ae:	3b15      	subs	r3, #21
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	f104 0015 	add.w	r0, r4, #21
 800a6ba:	4584      	cmp	ip, r0
 800a6bc:	bf38      	it	cc
 800a6be:	2304      	movcc	r3, #4
 800a6c0:	50ca      	str	r2, [r1, r3]
 800a6c2:	b10a      	cbz	r2, 800a6c8 <__lshift+0xa4>
 800a6c4:	f108 0602 	add.w	r6, r8, #2
 800a6c8:	3e01      	subs	r6, #1
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	612e      	str	r6, [r5, #16]
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	f7ff fdd6 	bl	800a280 <_Bfree>
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6de:	3301      	adds	r3, #1
 800a6e0:	e7c5      	b.n	800a66e <__lshift+0x4a>
 800a6e2:	3904      	subs	r1, #4
 800a6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6ec:	459c      	cmp	ip, r3
 800a6ee:	d8f9      	bhi.n	800a6e4 <__lshift+0xc0>
 800a6f0:	e7ea      	b.n	800a6c8 <__lshift+0xa4>
 800a6f2:	bf00      	nop
 800a6f4:	0800b2b7 	.word	0x0800b2b7
 800a6f8:	0800b2c8 	.word	0x0800b2c8

0800a6fc <__mcmp>:
 800a6fc:	b530      	push	{r4, r5, lr}
 800a6fe:	6902      	ldr	r2, [r0, #16]
 800a700:	690c      	ldr	r4, [r1, #16]
 800a702:	1b12      	subs	r2, r2, r4
 800a704:	d10e      	bne.n	800a724 <__mcmp+0x28>
 800a706:	f100 0314 	add.w	r3, r0, #20
 800a70a:	3114      	adds	r1, #20
 800a70c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a714:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a718:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a71c:	42a5      	cmp	r5, r4
 800a71e:	d003      	beq.n	800a728 <__mcmp+0x2c>
 800a720:	d305      	bcc.n	800a72e <__mcmp+0x32>
 800a722:	2201      	movs	r2, #1
 800a724:	4610      	mov	r0, r2
 800a726:	bd30      	pop	{r4, r5, pc}
 800a728:	4283      	cmp	r3, r0
 800a72a:	d3f3      	bcc.n	800a714 <__mcmp+0x18>
 800a72c:	e7fa      	b.n	800a724 <__mcmp+0x28>
 800a72e:	f04f 32ff 	mov.w	r2, #4294967295
 800a732:	e7f7      	b.n	800a724 <__mcmp+0x28>

0800a734 <__mdiff>:
 800a734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	460c      	mov	r4, r1
 800a73a:	4606      	mov	r6, r0
 800a73c:	4611      	mov	r1, r2
 800a73e:	4620      	mov	r0, r4
 800a740:	4617      	mov	r7, r2
 800a742:	f7ff ffdb 	bl	800a6fc <__mcmp>
 800a746:	1e05      	subs	r5, r0, #0
 800a748:	d110      	bne.n	800a76c <__mdiff+0x38>
 800a74a:	4629      	mov	r1, r5
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7ff fd57 	bl	800a200 <_Balloc>
 800a752:	b930      	cbnz	r0, 800a762 <__mdiff+0x2e>
 800a754:	4b39      	ldr	r3, [pc, #228]	; (800a83c <__mdiff+0x108>)
 800a756:	4602      	mov	r2, r0
 800a758:	f240 2132 	movw	r1, #562	; 0x232
 800a75c:	4838      	ldr	r0, [pc, #224]	; (800a840 <__mdiff+0x10c>)
 800a75e:	f000 f93f 	bl	800a9e0 <__assert_func>
 800a762:	2301      	movs	r3, #1
 800a764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76c:	bfa4      	itt	ge
 800a76e:	463b      	movge	r3, r7
 800a770:	4627      	movge	r7, r4
 800a772:	4630      	mov	r0, r6
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	bfa6      	itte	ge
 800a778:	461c      	movge	r4, r3
 800a77a:	2500      	movge	r5, #0
 800a77c:	2501      	movlt	r5, #1
 800a77e:	f7ff fd3f 	bl	800a200 <_Balloc>
 800a782:	b920      	cbnz	r0, 800a78e <__mdiff+0x5a>
 800a784:	4b2d      	ldr	r3, [pc, #180]	; (800a83c <__mdiff+0x108>)
 800a786:	4602      	mov	r2, r0
 800a788:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a78c:	e7e6      	b.n	800a75c <__mdiff+0x28>
 800a78e:	693e      	ldr	r6, [r7, #16]
 800a790:	60c5      	str	r5, [r0, #12]
 800a792:	6925      	ldr	r5, [r4, #16]
 800a794:	f107 0114 	add.w	r1, r7, #20
 800a798:	f104 0914 	add.w	r9, r4, #20
 800a79c:	f100 0e14 	add.w	lr, r0, #20
 800a7a0:	f107 0210 	add.w	r2, r7, #16
 800a7a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a7a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a7ac:	46f2      	mov	sl, lr
 800a7ae:	2700      	movs	r7, #0
 800a7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7b8:	fa1f f883 	uxth.w	r8, r3
 800a7bc:	fa17 f78b 	uxtah	r7, r7, fp
 800a7c0:	0c1b      	lsrs	r3, r3, #16
 800a7c2:	eba7 0808 	sub.w	r8, r7, r8
 800a7c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7ce:	fa1f f888 	uxth.w	r8, r8
 800a7d2:	141f      	asrs	r7, r3, #16
 800a7d4:	454d      	cmp	r5, r9
 800a7d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7da:	f84a 3b04 	str.w	r3, [sl], #4
 800a7de:	d8e7      	bhi.n	800a7b0 <__mdiff+0x7c>
 800a7e0:	1b2b      	subs	r3, r5, r4
 800a7e2:	3b15      	subs	r3, #21
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	3415      	adds	r4, #21
 800a7ec:	42a5      	cmp	r5, r4
 800a7ee:	bf38      	it	cc
 800a7f0:	2304      	movcc	r3, #4
 800a7f2:	4419      	add	r1, r3
 800a7f4:	4473      	add	r3, lr
 800a7f6:	469e      	mov	lr, r3
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	4565      	cmp	r5, ip
 800a7fc:	d30e      	bcc.n	800a81c <__mdiff+0xe8>
 800a7fe:	f10c 0203 	add.w	r2, ip, #3
 800a802:	1a52      	subs	r2, r2, r1
 800a804:	f022 0203 	bic.w	r2, r2, #3
 800a808:	3903      	subs	r1, #3
 800a80a:	458c      	cmp	ip, r1
 800a80c:	bf38      	it	cc
 800a80e:	2200      	movcc	r2, #0
 800a810:	441a      	add	r2, r3
 800a812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a816:	b17b      	cbz	r3, 800a838 <__mdiff+0x104>
 800a818:	6106      	str	r6, [r0, #16]
 800a81a:	e7a5      	b.n	800a768 <__mdiff+0x34>
 800a81c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a820:	fa17 f488 	uxtah	r4, r7, r8
 800a824:	1422      	asrs	r2, r4, #16
 800a826:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a82a:	b2a4      	uxth	r4, r4
 800a82c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a830:	f84e 4b04 	str.w	r4, [lr], #4
 800a834:	1417      	asrs	r7, r2, #16
 800a836:	e7e0      	b.n	800a7fa <__mdiff+0xc6>
 800a838:	3e01      	subs	r6, #1
 800a83a:	e7ea      	b.n	800a812 <__mdiff+0xde>
 800a83c:	0800b2b7 	.word	0x0800b2b7
 800a840:	0800b2c8 	.word	0x0800b2c8

0800a844 <__d2b>:
 800a844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a848:	4689      	mov	r9, r1
 800a84a:	2101      	movs	r1, #1
 800a84c:	ec57 6b10 	vmov	r6, r7, d0
 800a850:	4690      	mov	r8, r2
 800a852:	f7ff fcd5 	bl	800a200 <_Balloc>
 800a856:	4604      	mov	r4, r0
 800a858:	b930      	cbnz	r0, 800a868 <__d2b+0x24>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b25      	ldr	r3, [pc, #148]	; (800a8f4 <__d2b+0xb0>)
 800a85e:	4826      	ldr	r0, [pc, #152]	; (800a8f8 <__d2b+0xb4>)
 800a860:	f240 310a 	movw	r1, #778	; 0x30a
 800a864:	f000 f8bc 	bl	800a9e0 <__assert_func>
 800a868:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a86c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a870:	bb35      	cbnz	r5, 800a8c0 <__d2b+0x7c>
 800a872:	2e00      	cmp	r6, #0
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	d028      	beq.n	800a8ca <__d2b+0x86>
 800a878:	4668      	mov	r0, sp
 800a87a:	9600      	str	r6, [sp, #0]
 800a87c:	f7ff fd8c 	bl	800a398 <__lo0bits>
 800a880:	9900      	ldr	r1, [sp, #0]
 800a882:	b300      	cbz	r0, 800a8c6 <__d2b+0x82>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	f1c0 0320 	rsb	r3, r0, #32
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	430b      	orrs	r3, r1
 800a890:	40c2      	lsrs	r2, r0
 800a892:	6163      	str	r3, [r4, #20]
 800a894:	9201      	str	r2, [sp, #4]
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	61a3      	str	r3, [r4, #24]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf14      	ite	ne
 800a89e:	2202      	movne	r2, #2
 800a8a0:	2201      	moveq	r2, #1
 800a8a2:	6122      	str	r2, [r4, #16]
 800a8a4:	b1d5      	cbz	r5, 800a8dc <__d2b+0x98>
 800a8a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8aa:	4405      	add	r5, r0
 800a8ac:	f8c9 5000 	str.w	r5, [r9]
 800a8b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8b4:	f8c8 0000 	str.w	r0, [r8]
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8c4:	e7d5      	b.n	800a872 <__d2b+0x2e>
 800a8c6:	6161      	str	r1, [r4, #20]
 800a8c8:	e7e5      	b.n	800a896 <__d2b+0x52>
 800a8ca:	a801      	add	r0, sp, #4
 800a8cc:	f7ff fd64 	bl	800a398 <__lo0bits>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	6163      	str	r3, [r4, #20]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	6122      	str	r2, [r4, #16]
 800a8d8:	3020      	adds	r0, #32
 800a8da:	e7e3      	b.n	800a8a4 <__d2b+0x60>
 800a8dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8e4:	f8c9 0000 	str.w	r0, [r9]
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	f7ff fd35 	bl	800a358 <__hi0bits>
 800a8ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8f2:	e7df      	b.n	800a8b4 <__d2b+0x70>
 800a8f4:	0800b2b7 	.word	0x0800b2b7
 800a8f8:	0800b2c8 	.word	0x0800b2c8

0800a8fc <_calloc_r>:
 800a8fc:	b513      	push	{r0, r1, r4, lr}
 800a8fe:	434a      	muls	r2, r1
 800a900:	4611      	mov	r1, r2
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	f7fd ff74 	bl	80087f0 <_malloc_r>
 800a908:	4604      	mov	r4, r0
 800a90a:	b118      	cbz	r0, 800a914 <_calloc_r+0x18>
 800a90c:	9a01      	ldr	r2, [sp, #4]
 800a90e:	2100      	movs	r1, #0
 800a910:	f7fd ff65 	bl	80087de <memset>
 800a914:	4620      	mov	r0, r4
 800a916:	b002      	add	sp, #8
 800a918:	bd10      	pop	{r4, pc}
	...

0800a91c <_free_r>:
 800a91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a91e:	2900      	cmp	r1, #0
 800a920:	d048      	beq.n	800a9b4 <_free_r+0x98>
 800a922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a926:	9001      	str	r0, [sp, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f1a1 0404 	sub.w	r4, r1, #4
 800a92e:	bfb8      	it	lt
 800a930:	18e4      	addlt	r4, r4, r3
 800a932:	f7ff fc59 	bl	800a1e8 <__malloc_lock>
 800a936:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <_free_r+0x9c>)
 800a938:	9801      	ldr	r0, [sp, #4]
 800a93a:	6813      	ldr	r3, [r2, #0]
 800a93c:	4615      	mov	r5, r2
 800a93e:	b933      	cbnz	r3, 800a94e <_free_r+0x32>
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	6014      	str	r4, [r2, #0]
 800a944:	b003      	add	sp, #12
 800a946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a94a:	f7ff bc53 	b.w	800a1f4 <__malloc_unlock>
 800a94e:	42a3      	cmp	r3, r4
 800a950:	d90b      	bls.n	800a96a <_free_r+0x4e>
 800a952:	6821      	ldr	r1, [r4, #0]
 800a954:	1862      	adds	r2, r4, r1
 800a956:	4293      	cmp	r3, r2
 800a958:	bf04      	itt	eq
 800a95a:	681a      	ldreq	r2, [r3, #0]
 800a95c:	685b      	ldreq	r3, [r3, #4]
 800a95e:	6063      	str	r3, [r4, #4]
 800a960:	bf04      	itt	eq
 800a962:	1852      	addeq	r2, r2, r1
 800a964:	6022      	streq	r2, [r4, #0]
 800a966:	602c      	str	r4, [r5, #0]
 800a968:	e7ec      	b.n	800a944 <_free_r+0x28>
 800a96a:	461a      	mov	r2, r3
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	b10b      	cbz	r3, 800a974 <_free_r+0x58>
 800a970:	42a3      	cmp	r3, r4
 800a972:	d9fa      	bls.n	800a96a <_free_r+0x4e>
 800a974:	6811      	ldr	r1, [r2, #0]
 800a976:	1855      	adds	r5, r2, r1
 800a978:	42a5      	cmp	r5, r4
 800a97a:	d10b      	bne.n	800a994 <_free_r+0x78>
 800a97c:	6824      	ldr	r4, [r4, #0]
 800a97e:	4421      	add	r1, r4
 800a980:	1854      	adds	r4, r2, r1
 800a982:	42a3      	cmp	r3, r4
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	d1dd      	bne.n	800a944 <_free_r+0x28>
 800a988:	681c      	ldr	r4, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	6053      	str	r3, [r2, #4]
 800a98e:	4421      	add	r1, r4
 800a990:	6011      	str	r1, [r2, #0]
 800a992:	e7d7      	b.n	800a944 <_free_r+0x28>
 800a994:	d902      	bls.n	800a99c <_free_r+0x80>
 800a996:	230c      	movs	r3, #12
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	e7d3      	b.n	800a944 <_free_r+0x28>
 800a99c:	6825      	ldr	r5, [r4, #0]
 800a99e:	1961      	adds	r1, r4, r5
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	bf04      	itt	eq
 800a9a4:	6819      	ldreq	r1, [r3, #0]
 800a9a6:	685b      	ldreq	r3, [r3, #4]
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	bf04      	itt	eq
 800a9ac:	1949      	addeq	r1, r1, r5
 800a9ae:	6021      	streq	r1, [r4, #0]
 800a9b0:	6054      	str	r4, [r2, #4]
 800a9b2:	e7c7      	b.n	800a944 <_free_r+0x28>
 800a9b4:	b003      	add	sp, #12
 800a9b6:	bd30      	pop	{r4, r5, pc}
 800a9b8:	20001bd0 	.word	0x20001bd0

0800a9bc <_read_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d07      	ldr	r5, [pc, #28]	; (800a9dc <_read_r+0x20>)
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f7f6 fe6e 	bl	80016ac <_read>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_read_r+0x1e>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_read_r+0x1e>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	20001dac 	.word	0x20001dac

0800a9e0 <__assert_func>:
 800a9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9e2:	4614      	mov	r4, r2
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4b09      	ldr	r3, [pc, #36]	; (800aa0c <__assert_func+0x2c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	68d8      	ldr	r0, [r3, #12]
 800a9ee:	b14c      	cbz	r4, 800aa04 <__assert_func+0x24>
 800a9f0:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <__assert_func+0x30>)
 800a9f2:	9100      	str	r1, [sp, #0]
 800a9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9f8:	4906      	ldr	r1, [pc, #24]	; (800aa14 <__assert_func+0x34>)
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	f000 f80e 	bl	800aa1c <fiprintf>
 800aa00:	f000 fa58 	bl	800aeb4 <abort>
 800aa04:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <__assert_func+0x38>)
 800aa06:	461c      	mov	r4, r3
 800aa08:	e7f3      	b.n	800a9f2 <__assert_func+0x12>
 800aa0a:	bf00      	nop
 800aa0c:	20000010 	.word	0x20000010
 800aa10:	0800b424 	.word	0x0800b424
 800aa14:	0800b431 	.word	0x0800b431
 800aa18:	0800b45f 	.word	0x0800b45f

0800aa1c <fiprintf>:
 800aa1c:	b40e      	push	{r1, r2, r3}
 800aa1e:	b503      	push	{r0, r1, lr}
 800aa20:	4601      	mov	r1, r0
 800aa22:	ab03      	add	r3, sp, #12
 800aa24:	4805      	ldr	r0, [pc, #20]	; (800aa3c <fiprintf+0x20>)
 800aa26:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa2a:	6800      	ldr	r0, [r0, #0]
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	f000 f843 	bl	800aab8 <_vfiprintf_r>
 800aa32:	b002      	add	sp, #8
 800aa34:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa38:	b003      	add	sp, #12
 800aa3a:	4770      	bx	lr
 800aa3c:	20000010 	.word	0x20000010

0800aa40 <__ascii_mbtowc>:
 800aa40:	b082      	sub	sp, #8
 800aa42:	b901      	cbnz	r1, 800aa46 <__ascii_mbtowc+0x6>
 800aa44:	a901      	add	r1, sp, #4
 800aa46:	b142      	cbz	r2, 800aa5a <__ascii_mbtowc+0x1a>
 800aa48:	b14b      	cbz	r3, 800aa5e <__ascii_mbtowc+0x1e>
 800aa4a:	7813      	ldrb	r3, [r2, #0]
 800aa4c:	600b      	str	r3, [r1, #0]
 800aa4e:	7812      	ldrb	r2, [r2, #0]
 800aa50:	1e10      	subs	r0, r2, #0
 800aa52:	bf18      	it	ne
 800aa54:	2001      	movne	r0, #1
 800aa56:	b002      	add	sp, #8
 800aa58:	4770      	bx	lr
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	e7fb      	b.n	800aa56 <__ascii_mbtowc+0x16>
 800aa5e:	f06f 0001 	mvn.w	r0, #1
 800aa62:	e7f8      	b.n	800aa56 <__ascii_mbtowc+0x16>

0800aa64 <__sfputc_r>:
 800aa64:	6893      	ldr	r3, [r2, #8]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	b410      	push	{r4}
 800aa6c:	6093      	str	r3, [r2, #8]
 800aa6e:	da08      	bge.n	800aa82 <__sfputc_r+0x1e>
 800aa70:	6994      	ldr	r4, [r2, #24]
 800aa72:	42a3      	cmp	r3, r4
 800aa74:	db01      	blt.n	800aa7a <__sfputc_r+0x16>
 800aa76:	290a      	cmp	r1, #10
 800aa78:	d103      	bne.n	800aa82 <__sfputc_r+0x1e>
 800aa7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa7e:	f000 b94b 	b.w	800ad18 <__swbuf_r>
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	1c58      	adds	r0, r3, #1
 800aa86:	6010      	str	r0, [r2, #0]
 800aa88:	7019      	strb	r1, [r3, #0]
 800aa8a:	4608      	mov	r0, r1
 800aa8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <__sfputs_r>:
 800aa92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa94:	4606      	mov	r6, r0
 800aa96:	460f      	mov	r7, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	18d5      	adds	r5, r2, r3
 800aa9c:	42ac      	cmp	r4, r5
 800aa9e:	d101      	bne.n	800aaa4 <__sfputs_r+0x12>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	e007      	b.n	800aab4 <__sfputs_r+0x22>
 800aaa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa8:	463a      	mov	r2, r7
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7ff ffda 	bl	800aa64 <__sfputc_r>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d1f3      	bne.n	800aa9c <__sfputs_r+0xa>
 800aab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aab8 <_vfiprintf_r>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	460d      	mov	r5, r1
 800aabe:	b09d      	sub	sp, #116	; 0x74
 800aac0:	4614      	mov	r4, r2
 800aac2:	4698      	mov	r8, r3
 800aac4:	4606      	mov	r6, r0
 800aac6:	b118      	cbz	r0, 800aad0 <_vfiprintf_r+0x18>
 800aac8:	6983      	ldr	r3, [r0, #24]
 800aaca:	b90b      	cbnz	r3, 800aad0 <_vfiprintf_r+0x18>
 800aacc:	f7fd fdb4 	bl	8008638 <__sinit>
 800aad0:	4b89      	ldr	r3, [pc, #548]	; (800acf8 <_vfiprintf_r+0x240>)
 800aad2:	429d      	cmp	r5, r3
 800aad4:	d11b      	bne.n	800ab0e <_vfiprintf_r+0x56>
 800aad6:	6875      	ldr	r5, [r6, #4]
 800aad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aada:	07d9      	lsls	r1, r3, #31
 800aadc:	d405      	bmi.n	800aaea <_vfiprintf_r+0x32>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	059a      	lsls	r2, r3, #22
 800aae2:	d402      	bmi.n	800aaea <_vfiprintf_r+0x32>
 800aae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aae6:	f7fd fe6a 	bl	80087be <__retarget_lock_acquire_recursive>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	071b      	lsls	r3, r3, #28
 800aaee:	d501      	bpl.n	800aaf4 <_vfiprintf_r+0x3c>
 800aaf0:	692b      	ldr	r3, [r5, #16]
 800aaf2:	b9eb      	cbnz	r3, 800ab30 <_vfiprintf_r+0x78>
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f000 f96e 	bl	800add8 <__swsetup_r>
 800aafc:	b1c0      	cbz	r0, 800ab30 <_vfiprintf_r+0x78>
 800aafe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab00:	07dc      	lsls	r4, r3, #31
 800ab02:	d50e      	bpl.n	800ab22 <_vfiprintf_r+0x6a>
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	b01d      	add	sp, #116	; 0x74
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	4b7b      	ldr	r3, [pc, #492]	; (800acfc <_vfiprintf_r+0x244>)
 800ab10:	429d      	cmp	r5, r3
 800ab12:	d101      	bne.n	800ab18 <_vfiprintf_r+0x60>
 800ab14:	68b5      	ldr	r5, [r6, #8]
 800ab16:	e7df      	b.n	800aad8 <_vfiprintf_r+0x20>
 800ab18:	4b79      	ldr	r3, [pc, #484]	; (800ad00 <_vfiprintf_r+0x248>)
 800ab1a:	429d      	cmp	r5, r3
 800ab1c:	bf08      	it	eq
 800ab1e:	68f5      	ldreq	r5, [r6, #12]
 800ab20:	e7da      	b.n	800aad8 <_vfiprintf_r+0x20>
 800ab22:	89ab      	ldrh	r3, [r5, #12]
 800ab24:	0598      	lsls	r0, r3, #22
 800ab26:	d4ed      	bmi.n	800ab04 <_vfiprintf_r+0x4c>
 800ab28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab2a:	f7fd fe49 	bl	80087c0 <__retarget_lock_release_recursive>
 800ab2e:	e7e9      	b.n	800ab04 <_vfiprintf_r+0x4c>
 800ab30:	2300      	movs	r3, #0
 800ab32:	9309      	str	r3, [sp, #36]	; 0x24
 800ab34:	2320      	movs	r3, #32
 800ab36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab3e:	2330      	movs	r3, #48	; 0x30
 800ab40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad04 <_vfiprintf_r+0x24c>
 800ab44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab48:	f04f 0901 	mov.w	r9, #1
 800ab4c:	4623      	mov	r3, r4
 800ab4e:	469a      	mov	sl, r3
 800ab50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab54:	b10a      	cbz	r2, 800ab5a <_vfiprintf_r+0xa2>
 800ab56:	2a25      	cmp	r2, #37	; 0x25
 800ab58:	d1f9      	bne.n	800ab4e <_vfiprintf_r+0x96>
 800ab5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab5e:	d00b      	beq.n	800ab78 <_vfiprintf_r+0xc0>
 800ab60:	465b      	mov	r3, fp
 800ab62:	4622      	mov	r2, r4
 800ab64:	4629      	mov	r1, r5
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7ff ff93 	bl	800aa92 <__sfputs_r>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	f000 80aa 	beq.w	800acc6 <_vfiprintf_r+0x20e>
 800ab72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab74:	445a      	add	r2, fp
 800ab76:	9209      	str	r2, [sp, #36]	; 0x24
 800ab78:	f89a 3000 	ldrb.w	r3, [sl]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 80a2 	beq.w	800acc6 <_vfiprintf_r+0x20e>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab8c:	f10a 0a01 	add.w	sl, sl, #1
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab98:	931a      	str	r3, [sp, #104]	; 0x68
 800ab9a:	4654      	mov	r4, sl
 800ab9c:	2205      	movs	r2, #5
 800ab9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba2:	4858      	ldr	r0, [pc, #352]	; (800ad04 <_vfiprintf_r+0x24c>)
 800aba4:	f7f5 fb44 	bl	8000230 <memchr>
 800aba8:	9a04      	ldr	r2, [sp, #16]
 800abaa:	b9d8      	cbnz	r0, 800abe4 <_vfiprintf_r+0x12c>
 800abac:	06d1      	lsls	r1, r2, #27
 800abae:	bf44      	itt	mi
 800abb0:	2320      	movmi	r3, #32
 800abb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abb6:	0713      	lsls	r3, r2, #28
 800abb8:	bf44      	itt	mi
 800abba:	232b      	movmi	r3, #43	; 0x2b
 800abbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc0:	f89a 3000 	ldrb.w	r3, [sl]
 800abc4:	2b2a      	cmp	r3, #42	; 0x2a
 800abc6:	d015      	beq.n	800abf4 <_vfiprintf_r+0x13c>
 800abc8:	9a07      	ldr	r2, [sp, #28]
 800abca:	4654      	mov	r4, sl
 800abcc:	2000      	movs	r0, #0
 800abce:	f04f 0c0a 	mov.w	ip, #10
 800abd2:	4621      	mov	r1, r4
 800abd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abd8:	3b30      	subs	r3, #48	; 0x30
 800abda:	2b09      	cmp	r3, #9
 800abdc:	d94e      	bls.n	800ac7c <_vfiprintf_r+0x1c4>
 800abde:	b1b0      	cbz	r0, 800ac0e <_vfiprintf_r+0x156>
 800abe0:	9207      	str	r2, [sp, #28]
 800abe2:	e014      	b.n	800ac0e <_vfiprintf_r+0x156>
 800abe4:	eba0 0308 	sub.w	r3, r0, r8
 800abe8:	fa09 f303 	lsl.w	r3, r9, r3
 800abec:	4313      	orrs	r3, r2
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	46a2      	mov	sl, r4
 800abf2:	e7d2      	b.n	800ab9a <_vfiprintf_r+0xe2>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	1d19      	adds	r1, r3, #4
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	9103      	str	r1, [sp, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfbb      	ittet	lt
 800ac00:	425b      	neglt	r3, r3
 800ac02:	f042 0202 	orrlt.w	r2, r2, #2
 800ac06:	9307      	strge	r3, [sp, #28]
 800ac08:	9307      	strlt	r3, [sp, #28]
 800ac0a:	bfb8      	it	lt
 800ac0c:	9204      	strlt	r2, [sp, #16]
 800ac0e:	7823      	ldrb	r3, [r4, #0]
 800ac10:	2b2e      	cmp	r3, #46	; 0x2e
 800ac12:	d10c      	bne.n	800ac2e <_vfiprintf_r+0x176>
 800ac14:	7863      	ldrb	r3, [r4, #1]
 800ac16:	2b2a      	cmp	r3, #42	; 0x2a
 800ac18:	d135      	bne.n	800ac86 <_vfiprintf_r+0x1ce>
 800ac1a:	9b03      	ldr	r3, [sp, #12]
 800ac1c:	1d1a      	adds	r2, r3, #4
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	9203      	str	r2, [sp, #12]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	bfb8      	it	lt
 800ac26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac2a:	3402      	adds	r4, #2
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad14 <_vfiprintf_r+0x25c>
 800ac32:	7821      	ldrb	r1, [r4, #0]
 800ac34:	2203      	movs	r2, #3
 800ac36:	4650      	mov	r0, sl
 800ac38:	f7f5 fafa 	bl	8000230 <memchr>
 800ac3c:	b140      	cbz	r0, 800ac50 <_vfiprintf_r+0x198>
 800ac3e:	2340      	movs	r3, #64	; 0x40
 800ac40:	eba0 000a 	sub.w	r0, r0, sl
 800ac44:	fa03 f000 	lsl.w	r0, r3, r0
 800ac48:	9b04      	ldr	r3, [sp, #16]
 800ac4a:	4303      	orrs	r3, r0
 800ac4c:	3401      	adds	r4, #1
 800ac4e:	9304      	str	r3, [sp, #16]
 800ac50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac54:	482c      	ldr	r0, [pc, #176]	; (800ad08 <_vfiprintf_r+0x250>)
 800ac56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac5a:	2206      	movs	r2, #6
 800ac5c:	f7f5 fae8 	bl	8000230 <memchr>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d03f      	beq.n	800ace4 <_vfiprintf_r+0x22c>
 800ac64:	4b29      	ldr	r3, [pc, #164]	; (800ad0c <_vfiprintf_r+0x254>)
 800ac66:	bb1b      	cbnz	r3, 800acb0 <_vfiprintf_r+0x1f8>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	3307      	adds	r3, #7
 800ac6c:	f023 0307 	bic.w	r3, r3, #7
 800ac70:	3308      	adds	r3, #8
 800ac72:	9303      	str	r3, [sp, #12]
 800ac74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac76:	443b      	add	r3, r7
 800ac78:	9309      	str	r3, [sp, #36]	; 0x24
 800ac7a:	e767      	b.n	800ab4c <_vfiprintf_r+0x94>
 800ac7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac80:	460c      	mov	r4, r1
 800ac82:	2001      	movs	r0, #1
 800ac84:	e7a5      	b.n	800abd2 <_vfiprintf_r+0x11a>
 800ac86:	2300      	movs	r3, #0
 800ac88:	3401      	adds	r4, #1
 800ac8a:	9305      	str	r3, [sp, #20]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f04f 0c0a 	mov.w	ip, #10
 800ac92:	4620      	mov	r0, r4
 800ac94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac98:	3a30      	subs	r2, #48	; 0x30
 800ac9a:	2a09      	cmp	r2, #9
 800ac9c:	d903      	bls.n	800aca6 <_vfiprintf_r+0x1ee>
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0c5      	beq.n	800ac2e <_vfiprintf_r+0x176>
 800aca2:	9105      	str	r1, [sp, #20]
 800aca4:	e7c3      	b.n	800ac2e <_vfiprintf_r+0x176>
 800aca6:	fb0c 2101 	mla	r1, ip, r1, r2
 800acaa:	4604      	mov	r4, r0
 800acac:	2301      	movs	r3, #1
 800acae:	e7f0      	b.n	800ac92 <_vfiprintf_r+0x1da>
 800acb0:	ab03      	add	r3, sp, #12
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	462a      	mov	r2, r5
 800acb6:	4b16      	ldr	r3, [pc, #88]	; (800ad10 <_vfiprintf_r+0x258>)
 800acb8:	a904      	add	r1, sp, #16
 800acba:	4630      	mov	r0, r6
 800acbc:	f7fd fe92 	bl	80089e4 <_printf_float>
 800acc0:	4607      	mov	r7, r0
 800acc2:	1c78      	adds	r0, r7, #1
 800acc4:	d1d6      	bne.n	800ac74 <_vfiprintf_r+0x1bc>
 800acc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acc8:	07d9      	lsls	r1, r3, #31
 800acca:	d405      	bmi.n	800acd8 <_vfiprintf_r+0x220>
 800accc:	89ab      	ldrh	r3, [r5, #12]
 800acce:	059a      	lsls	r2, r3, #22
 800acd0:	d402      	bmi.n	800acd8 <_vfiprintf_r+0x220>
 800acd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acd4:	f7fd fd74 	bl	80087c0 <__retarget_lock_release_recursive>
 800acd8:	89ab      	ldrh	r3, [r5, #12]
 800acda:	065b      	lsls	r3, r3, #25
 800acdc:	f53f af12 	bmi.w	800ab04 <_vfiprintf_r+0x4c>
 800ace0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace2:	e711      	b.n	800ab08 <_vfiprintf_r+0x50>
 800ace4:	ab03      	add	r3, sp, #12
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	462a      	mov	r2, r5
 800acea:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <_vfiprintf_r+0x258>)
 800acec:	a904      	add	r1, sp, #16
 800acee:	4630      	mov	r0, r6
 800acf0:	f7fe f91c 	bl	8008f2c <_printf_i>
 800acf4:	e7e4      	b.n	800acc0 <_vfiprintf_r+0x208>
 800acf6:	bf00      	nop
 800acf8:	0800b1bc 	.word	0x0800b1bc
 800acfc:	0800b1dc 	.word	0x0800b1dc
 800ad00:	0800b19c 	.word	0x0800b19c
 800ad04:	0800b46a 	.word	0x0800b46a
 800ad08:	0800b474 	.word	0x0800b474
 800ad0c:	080089e5 	.word	0x080089e5
 800ad10:	0800aa93 	.word	0x0800aa93
 800ad14:	0800b470 	.word	0x0800b470

0800ad18 <__swbuf_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	4605      	mov	r5, r0
 800ad20:	b118      	cbz	r0, 800ad2a <__swbuf_r+0x12>
 800ad22:	6983      	ldr	r3, [r0, #24]
 800ad24:	b90b      	cbnz	r3, 800ad2a <__swbuf_r+0x12>
 800ad26:	f7fd fc87 	bl	8008638 <__sinit>
 800ad2a:	4b21      	ldr	r3, [pc, #132]	; (800adb0 <__swbuf_r+0x98>)
 800ad2c:	429c      	cmp	r4, r3
 800ad2e:	d12b      	bne.n	800ad88 <__swbuf_r+0x70>
 800ad30:	686c      	ldr	r4, [r5, #4]
 800ad32:	69a3      	ldr	r3, [r4, #24]
 800ad34:	60a3      	str	r3, [r4, #8]
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	071a      	lsls	r2, r3, #28
 800ad3a:	d52f      	bpl.n	800ad9c <__swbuf_r+0x84>
 800ad3c:	6923      	ldr	r3, [r4, #16]
 800ad3e:	b36b      	cbz	r3, 800ad9c <__swbuf_r+0x84>
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	6820      	ldr	r0, [r4, #0]
 800ad44:	1ac0      	subs	r0, r0, r3
 800ad46:	6963      	ldr	r3, [r4, #20]
 800ad48:	b2f6      	uxtb	r6, r6
 800ad4a:	4283      	cmp	r3, r0
 800ad4c:	4637      	mov	r7, r6
 800ad4e:	dc04      	bgt.n	800ad5a <__swbuf_r+0x42>
 800ad50:	4621      	mov	r1, r4
 800ad52:	4628      	mov	r0, r5
 800ad54:	f7ff f9ee 	bl	800a134 <_fflush_r>
 800ad58:	bb30      	cbnz	r0, 800ada8 <__swbuf_r+0x90>
 800ad5a:	68a3      	ldr	r3, [r4, #8]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	60a3      	str	r3, [r4, #8]
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	6022      	str	r2, [r4, #0]
 800ad66:	701e      	strb	r6, [r3, #0]
 800ad68:	6963      	ldr	r3, [r4, #20]
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	4283      	cmp	r3, r0
 800ad6e:	d004      	beq.n	800ad7a <__swbuf_r+0x62>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	07db      	lsls	r3, r3, #31
 800ad74:	d506      	bpl.n	800ad84 <__swbuf_r+0x6c>
 800ad76:	2e0a      	cmp	r6, #10
 800ad78:	d104      	bne.n	800ad84 <__swbuf_r+0x6c>
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f7ff f9d9 	bl	800a134 <_fflush_r>
 800ad82:	b988      	cbnz	r0, 800ada8 <__swbuf_r+0x90>
 800ad84:	4638      	mov	r0, r7
 800ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <__swbuf_r+0x9c>)
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d101      	bne.n	800ad92 <__swbuf_r+0x7a>
 800ad8e:	68ac      	ldr	r4, [r5, #8]
 800ad90:	e7cf      	b.n	800ad32 <__swbuf_r+0x1a>
 800ad92:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <__swbuf_r+0xa0>)
 800ad94:	429c      	cmp	r4, r3
 800ad96:	bf08      	it	eq
 800ad98:	68ec      	ldreq	r4, [r5, #12]
 800ad9a:	e7ca      	b.n	800ad32 <__swbuf_r+0x1a>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 f81a 	bl	800add8 <__swsetup_r>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d0cb      	beq.n	800ad40 <__swbuf_r+0x28>
 800ada8:	f04f 37ff 	mov.w	r7, #4294967295
 800adac:	e7ea      	b.n	800ad84 <__swbuf_r+0x6c>
 800adae:	bf00      	nop
 800adb0:	0800b1bc 	.word	0x0800b1bc
 800adb4:	0800b1dc 	.word	0x0800b1dc
 800adb8:	0800b19c 	.word	0x0800b19c

0800adbc <__ascii_wctomb>:
 800adbc:	b149      	cbz	r1, 800add2 <__ascii_wctomb+0x16>
 800adbe:	2aff      	cmp	r2, #255	; 0xff
 800adc0:	bf85      	ittet	hi
 800adc2:	238a      	movhi	r3, #138	; 0x8a
 800adc4:	6003      	strhi	r3, [r0, #0]
 800adc6:	700a      	strbls	r2, [r1, #0]
 800adc8:	f04f 30ff 	movhi.w	r0, #4294967295
 800adcc:	bf98      	it	ls
 800adce:	2001      	movls	r0, #1
 800add0:	4770      	bx	lr
 800add2:	4608      	mov	r0, r1
 800add4:	4770      	bx	lr
	...

0800add8 <__swsetup_r>:
 800add8:	4b32      	ldr	r3, [pc, #200]	; (800aea4 <__swsetup_r+0xcc>)
 800adda:	b570      	push	{r4, r5, r6, lr}
 800addc:	681d      	ldr	r5, [r3, #0]
 800adde:	4606      	mov	r6, r0
 800ade0:	460c      	mov	r4, r1
 800ade2:	b125      	cbz	r5, 800adee <__swsetup_r+0x16>
 800ade4:	69ab      	ldr	r3, [r5, #24]
 800ade6:	b913      	cbnz	r3, 800adee <__swsetup_r+0x16>
 800ade8:	4628      	mov	r0, r5
 800adea:	f7fd fc25 	bl	8008638 <__sinit>
 800adee:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <__swsetup_r+0xd0>)
 800adf0:	429c      	cmp	r4, r3
 800adf2:	d10f      	bne.n	800ae14 <__swsetup_r+0x3c>
 800adf4:	686c      	ldr	r4, [r5, #4]
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adfc:	0719      	lsls	r1, r3, #28
 800adfe:	d42c      	bmi.n	800ae5a <__swsetup_r+0x82>
 800ae00:	06dd      	lsls	r5, r3, #27
 800ae02:	d411      	bmi.n	800ae28 <__swsetup_r+0x50>
 800ae04:	2309      	movs	r3, #9
 800ae06:	6033      	str	r3, [r6, #0]
 800ae08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae12:	e03e      	b.n	800ae92 <__swsetup_r+0xba>
 800ae14:	4b25      	ldr	r3, [pc, #148]	; (800aeac <__swsetup_r+0xd4>)
 800ae16:	429c      	cmp	r4, r3
 800ae18:	d101      	bne.n	800ae1e <__swsetup_r+0x46>
 800ae1a:	68ac      	ldr	r4, [r5, #8]
 800ae1c:	e7eb      	b.n	800adf6 <__swsetup_r+0x1e>
 800ae1e:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <__swsetup_r+0xd8>)
 800ae20:	429c      	cmp	r4, r3
 800ae22:	bf08      	it	eq
 800ae24:	68ec      	ldreq	r4, [r5, #12]
 800ae26:	e7e6      	b.n	800adf6 <__swsetup_r+0x1e>
 800ae28:	0758      	lsls	r0, r3, #29
 800ae2a:	d512      	bpl.n	800ae52 <__swsetup_r+0x7a>
 800ae2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae2e:	b141      	cbz	r1, 800ae42 <__swsetup_r+0x6a>
 800ae30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae34:	4299      	cmp	r1, r3
 800ae36:	d002      	beq.n	800ae3e <__swsetup_r+0x66>
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7ff fd6f 	bl	800a91c <_free_r>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	6363      	str	r3, [r4, #52]	; 0x34
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	6063      	str	r3, [r4, #4]
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f043 0308 	orr.w	r3, r3, #8
 800ae58:	81a3      	strh	r3, [r4, #12]
 800ae5a:	6923      	ldr	r3, [r4, #16]
 800ae5c:	b94b      	cbnz	r3, 800ae72 <__swsetup_r+0x9a>
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae68:	d003      	beq.n	800ae72 <__swsetup_r+0x9a>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f000 f84d 	bl	800af0c <__smakebuf_r>
 800ae72:	89a0      	ldrh	r0, [r4, #12]
 800ae74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae78:	f010 0301 	ands.w	r3, r0, #1
 800ae7c:	d00a      	beq.n	800ae94 <__swsetup_r+0xbc>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60a3      	str	r3, [r4, #8]
 800ae82:	6963      	ldr	r3, [r4, #20]
 800ae84:	425b      	negs	r3, r3
 800ae86:	61a3      	str	r3, [r4, #24]
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	b943      	cbnz	r3, 800ae9e <__swsetup_r+0xc6>
 800ae8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae90:	d1ba      	bne.n	800ae08 <__swsetup_r+0x30>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	0781      	lsls	r1, r0, #30
 800ae96:	bf58      	it	pl
 800ae98:	6963      	ldrpl	r3, [r4, #20]
 800ae9a:	60a3      	str	r3, [r4, #8]
 800ae9c:	e7f4      	b.n	800ae88 <__swsetup_r+0xb0>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	e7f7      	b.n	800ae92 <__swsetup_r+0xba>
 800aea2:	bf00      	nop
 800aea4:	20000010 	.word	0x20000010
 800aea8:	0800b1bc 	.word	0x0800b1bc
 800aeac:	0800b1dc 	.word	0x0800b1dc
 800aeb0:	0800b19c 	.word	0x0800b19c

0800aeb4 <abort>:
 800aeb4:	b508      	push	{r3, lr}
 800aeb6:	2006      	movs	r0, #6
 800aeb8:	f000 f890 	bl	800afdc <raise>
 800aebc:	2001      	movs	r0, #1
 800aebe:	f7f6 fbeb 	bl	8001698 <_exit>

0800aec2 <__swhatbuf_r>:
 800aec2:	b570      	push	{r4, r5, r6, lr}
 800aec4:	460e      	mov	r6, r1
 800aec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeca:	2900      	cmp	r1, #0
 800aecc:	b096      	sub	sp, #88	; 0x58
 800aece:	4614      	mov	r4, r2
 800aed0:	461d      	mov	r5, r3
 800aed2:	da07      	bge.n	800aee4 <__swhatbuf_r+0x22>
 800aed4:	2300      	movs	r3, #0
 800aed6:	602b      	str	r3, [r5, #0]
 800aed8:	89b3      	ldrh	r3, [r6, #12]
 800aeda:	061a      	lsls	r2, r3, #24
 800aedc:	d410      	bmi.n	800af00 <__swhatbuf_r+0x3e>
 800aede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee2:	e00e      	b.n	800af02 <__swhatbuf_r+0x40>
 800aee4:	466a      	mov	r2, sp
 800aee6:	f000 f895 	bl	800b014 <_fstat_r>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	dbf2      	blt.n	800aed4 <__swhatbuf_r+0x12>
 800aeee:	9a01      	ldr	r2, [sp, #4]
 800aef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aef8:	425a      	negs	r2, r3
 800aefa:	415a      	adcs	r2, r3
 800aefc:	602a      	str	r2, [r5, #0]
 800aefe:	e7ee      	b.n	800aede <__swhatbuf_r+0x1c>
 800af00:	2340      	movs	r3, #64	; 0x40
 800af02:	2000      	movs	r0, #0
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	b016      	add	sp, #88	; 0x58
 800af08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af0c <__smakebuf_r>:
 800af0c:	898b      	ldrh	r3, [r1, #12]
 800af0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af10:	079d      	lsls	r5, r3, #30
 800af12:	4606      	mov	r6, r0
 800af14:	460c      	mov	r4, r1
 800af16:	d507      	bpl.n	800af28 <__smakebuf_r+0x1c>
 800af18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	6123      	str	r3, [r4, #16]
 800af20:	2301      	movs	r3, #1
 800af22:	6163      	str	r3, [r4, #20]
 800af24:	b002      	add	sp, #8
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	ab01      	add	r3, sp, #4
 800af2a:	466a      	mov	r2, sp
 800af2c:	f7ff ffc9 	bl	800aec2 <__swhatbuf_r>
 800af30:	9900      	ldr	r1, [sp, #0]
 800af32:	4605      	mov	r5, r0
 800af34:	4630      	mov	r0, r6
 800af36:	f7fd fc5b 	bl	80087f0 <_malloc_r>
 800af3a:	b948      	cbnz	r0, 800af50 <__smakebuf_r+0x44>
 800af3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af40:	059a      	lsls	r2, r3, #22
 800af42:	d4ef      	bmi.n	800af24 <__smakebuf_r+0x18>
 800af44:	f023 0303 	bic.w	r3, r3, #3
 800af48:	f043 0302 	orr.w	r3, r3, #2
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	e7e3      	b.n	800af18 <__smakebuf_r+0xc>
 800af50:	4b0d      	ldr	r3, [pc, #52]	; (800af88 <__smakebuf_r+0x7c>)
 800af52:	62b3      	str	r3, [r6, #40]	; 0x28
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	6020      	str	r0, [r4, #0]
 800af58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	6163      	str	r3, [r4, #20]
 800af62:	9b01      	ldr	r3, [sp, #4]
 800af64:	6120      	str	r0, [r4, #16]
 800af66:	b15b      	cbz	r3, 800af80 <__smakebuf_r+0x74>
 800af68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af6c:	4630      	mov	r0, r6
 800af6e:	f000 f863 	bl	800b038 <_isatty_r>
 800af72:	b128      	cbz	r0, 800af80 <__smakebuf_r+0x74>
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	f023 0303 	bic.w	r3, r3, #3
 800af7a:	f043 0301 	orr.w	r3, r3, #1
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	89a0      	ldrh	r0, [r4, #12]
 800af82:	4305      	orrs	r5, r0
 800af84:	81a5      	strh	r5, [r4, #12]
 800af86:	e7cd      	b.n	800af24 <__smakebuf_r+0x18>
 800af88:	080085d1 	.word	0x080085d1

0800af8c <_raise_r>:
 800af8c:	291f      	cmp	r1, #31
 800af8e:	b538      	push	{r3, r4, r5, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	460d      	mov	r5, r1
 800af94:	d904      	bls.n	800afa0 <_raise_r+0x14>
 800af96:	2316      	movs	r3, #22
 800af98:	6003      	str	r3, [r0, #0]
 800af9a:	f04f 30ff 	mov.w	r0, #4294967295
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afa2:	b112      	cbz	r2, 800afaa <_raise_r+0x1e>
 800afa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afa8:	b94b      	cbnz	r3, 800afbe <_raise_r+0x32>
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 f830 	bl	800b010 <_getpid_r>
 800afb0:	462a      	mov	r2, r5
 800afb2:	4601      	mov	r1, r0
 800afb4:	4620      	mov	r0, r4
 800afb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afba:	f000 b817 	b.w	800afec <_kill_r>
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d00a      	beq.n	800afd8 <_raise_r+0x4c>
 800afc2:	1c59      	adds	r1, r3, #1
 800afc4:	d103      	bne.n	800afce <_raise_r+0x42>
 800afc6:	2316      	movs	r3, #22
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	2001      	movs	r0, #1
 800afcc:	e7e7      	b.n	800af9e <_raise_r+0x12>
 800afce:	2400      	movs	r4, #0
 800afd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd4:	4628      	mov	r0, r5
 800afd6:	4798      	blx	r3
 800afd8:	2000      	movs	r0, #0
 800afda:	e7e0      	b.n	800af9e <_raise_r+0x12>

0800afdc <raise>:
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <raise+0xc>)
 800afde:	4601      	mov	r1, r0
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	f7ff bfd3 	b.w	800af8c <_raise_r>
 800afe6:	bf00      	nop
 800afe8:	20000010 	.word	0x20000010

0800afec <_kill_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d07      	ldr	r5, [pc, #28]	; (800b00c <_kill_r+0x20>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f7f6 fb3d 	bl	8001678 <_kill>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d102      	bne.n	800b008 <_kill_r+0x1c>
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	b103      	cbz	r3, 800b008 <_kill_r+0x1c>
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	bd38      	pop	{r3, r4, r5, pc}
 800b00a:	bf00      	nop
 800b00c:	20001dac 	.word	0x20001dac

0800b010 <_getpid_r>:
 800b010:	f7f6 bb2a 	b.w	8001668 <_getpid>

0800b014 <_fstat_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4d07      	ldr	r5, [pc, #28]	; (800b034 <_fstat_r+0x20>)
 800b018:	2300      	movs	r3, #0
 800b01a:	4604      	mov	r4, r0
 800b01c:	4608      	mov	r0, r1
 800b01e:	4611      	mov	r1, r2
 800b020:	602b      	str	r3, [r5, #0]
 800b022:	f7f6 fb6c 	bl	80016fe <_fstat>
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	d102      	bne.n	800b030 <_fstat_r+0x1c>
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	b103      	cbz	r3, 800b030 <_fstat_r+0x1c>
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	bd38      	pop	{r3, r4, r5, pc}
 800b032:	bf00      	nop
 800b034:	20001dac 	.word	0x20001dac

0800b038 <_isatty_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4d06      	ldr	r5, [pc, #24]	; (800b054 <_isatty_r+0x1c>)
 800b03c:	2300      	movs	r3, #0
 800b03e:	4604      	mov	r4, r0
 800b040:	4608      	mov	r0, r1
 800b042:	602b      	str	r3, [r5, #0]
 800b044:	f7f6 fb6b 	bl	800171e <_isatty>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_isatty_r+0x1a>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_isatty_r+0x1a>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	20001dac 	.word	0x20001dac

0800b058 <_init>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr

0800b064 <_fini>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	bf00      	nop
 800b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06a:	bc08      	pop	{r3}
 800b06c:	469e      	mov	lr, r3
 800b06e:	4770      	bx	lr
