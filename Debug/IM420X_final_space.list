
IM420X_final_space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e52c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800e710  0800e710  0001e710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eea0  0800eea0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eea0  0800eea0  0001eea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eea8  0800eea8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eea8  0800eea8  0001eea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eeac  0800eeac  0001eeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800eeb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c888  200001e0  0800f090  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001ca68  0800f090  0002ca68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000275e6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e6d  00000000  00000000  000477f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  0004c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b50  00000000  00000000  0004e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002baac  00000000  00000000  0004ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024622  00000000  00000000  0007b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bcab  00000000  00000000  0009ffde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001abc89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ff8  00000000  00000000  001abcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e6f4 	.word	0x0800e6f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800e6f4 	.word	0x0800e6f4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	initDFT(SAMPLE_SIZE);
 8000fa0:	206e      	movs	r0, #110	; 0x6e
 8000fa2:	f000 f93f 	bl	8001224 <initDFT>
	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* creation of spRXPositionMutex */
	spRXPositionMutexHandle = osMutexNew(&spRXPositionMutex_attributes);
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <MX_FREERTOS_Init+0x70>)
 8000fa8:	f005 ff3c 	bl	8006e24 <osMutexNew>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_FREERTOS_Init+0x74>)
 8000fb0:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of my22HzTimer */
	my22HzTimerHandle = osTimerNew(my22HzTimerCallback, osTimerPeriodic, NULL,
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_FREERTOS_Init+0x78>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4817      	ldr	r0, [pc, #92]	; (8001018 <MX_FREERTOS_Init+0x7c>)
 8000fba:	f005 fe89 	bl	8006cd0 <osTimerNew>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a16      	ldr	r2, [pc, #88]	; (800101c <MX_FREERTOS_Init+0x80>)
 8000fc2:	6013      	str	r3, [r2, #0]
			&my22HzTimer_attributes);

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osTimerStart(my22HzTimerHandle, (uint16_t) (DATA_SAMPLE_PERIOD * 1000));
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_FREERTOS_Init+0x80>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f005 fefb 	bl	8006dc8 <osTimerStart>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of identifyMagneti */
	identifyMagnetiHandle = osThreadNew(startidentifyMagneticFieldTask, NULL,
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <MX_FREERTOS_Init+0x84>)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <MX_FREERTOS_Init+0x88>)
 8000fd8:	f005 fd04 	bl	80069e4 <osThreadNew>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_FREERTOS_Init+0x8c>)
 8000fe0:	6013      	str	r3, [r2, #0]
			&identifyMagneti_attributes);

	/* creation of estimatePositio */
	estimatePositioHandle = osThreadNew(startEstimatePosition, NULL,
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_FREERTOS_Init+0x90>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4812      	ldr	r0, [pc, #72]	; (8001030 <MX_FREERTOS_Init+0x94>)
 8000fe8:	f005 fcfc 	bl	80069e4 <osThreadNew>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <MX_FREERTOS_Init+0x98>)
 8000ff0:	6013      	str	r3, [r2, #0]
			&estimatePositio_attributes);

	/* creation of sendData */
	sendDataHandle = osThreadNew(startSendData, NULL, &sendData_attributes);
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <MX_FREERTOS_Init+0x9c>)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <MX_FREERTOS_Init+0xa0>)
 8000ff8:	f005 fcf4 	bl	80069e4 <osThreadNew>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <MX_FREERTOS_Init+0xa4>)
 8001000:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	initMagnetiFieldISR();
 8001002:	f000 fca3 	bl	800194c <initMagnetiFieldISR>

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0800e86c 	.word	0x0800e86c
 8001010:	20002100 	.word	0x20002100
 8001014:	0800e85c 	.word	0x0800e85c
 8001018:	080010f5 	.word	0x080010f5
 800101c:	200020fc 	.word	0x200020fc
 8001020:	0800e7f0 	.word	0x0800e7f0
 8001024:	08001045 	.word	0x08001045
 8001028:	200020f0 	.word	0x200020f0
 800102c:	0800e814 	.word	0x0800e814
 8001030:	0800107d 	.word	0x0800107d
 8001034:	200020f4 	.word	0x200020f4
 8001038:	0800e838 	.word	0x0800e838
 800103c:	080010b5 	.word	0x080010b5
 8001040:	200020f8 	.word	0x200020f8

08001044 <startidentifyMagneticFieldTask>:
 * @brief  Function implementing the identifyMagneti thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startidentifyMagneticFieldTask */
void startidentifyMagneticFieldTask(void *argument) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startidentifyMagneticFieldTask */

	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	2100      	movs	r1, #0
 8001052:	2001      	movs	r0, #1
 8001054:	f005 fda6 	bl	8006ba4 <osThreadFlagsWait>
		stopMagnetiFieldISR();
 8001058:	f000 fc82 	bl	8001960 <stopMagnetiFieldISR>

		buffer_index_to_retrive_data = (buffer_index + 1) % 2;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <startidentifyMagneticFieldTask+0x30>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	bfb8      	it	lt
 800106a:	425b      	neglt	r3, r3
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b02      	ldr	r3, [pc, #8]	; (8001078 <startidentifyMagneticFieldTask+0x34>)
 8001070:	701a      	strb	r2, [r3, #0]
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001072:	e7eb      	b.n	800104c <startidentifyMagneticFieldTask+0x8>
 8001074:	200020ec 	.word	0x200020ec
 8001078:	200020ed 	.word	0x200020ed

0800107c <startEstimatePosition>:
 * @brief Function implementing the estimatePositio thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startEstimatePosition */
void startEstimatePosition(void *argument) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startEstimatePosition */

	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	2100      	movs	r1, #0
 800108a:	2001      	movs	r0, #1
 800108c:	f005 fd8a 	bl	8006ba4 <osThreadFlagsWait>
		if (osMutexAcquire(spRXPositionMutexHandle, osWaitForever) == osOK) {
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <startEstimatePosition+0x34>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	4618      	mov	r0, r3
 800109a:	f005 ff49 	bl	8006f30 <osMutexAcquire>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1ef      	bne.n	8001084 <startEstimatePosition+0x8>
			// sp_rx_position = estimatePoisition(mf_nodes);

			osMutexRelease(spRXPositionMutexHandle);
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <startEstimatePosition+0x34>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 ff8c 	bl	8006fc6 <osMutexRelease>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80010ae:	e7e9      	b.n	8001084 <startEstimatePosition+0x8>
 80010b0:	20002100 	.word	0x20002100

080010b4 <startSendData>:
 * @brief Function implementing the sendData thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSendData */
void startSendData(void *argument) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startSendData */
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	2100      	movs	r1, #0
 80010c2:	2001      	movs	r0, #1
 80010c4:	f005 fd6e 	bl	8006ba4 <osThreadFlagsWait>

		printf("so far, so good running\r\n");
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <startSendData+0x34>)
 80010ca:	f00a f88d 	bl	800b1e8 <puts>
		//printf("EsPos: x=%.2f y=%.2f z=%.2f\r\n", sp_rx_position.x,
		//		sp_rx_position.y, sp_rx_position.z);

		buffer_index_to_retrive_data = (buffer_index + 1) % 2;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <startSendData+0x38>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	bfb8      	it	lt
 80010dc:	425b      	neglt	r3, r3
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <startSendData+0x3c>)
 80010e2:	701a      	strb	r2, [r3, #0]
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80010e4:	e7ea      	b.n	80010bc <startSendData+0x8>
 80010e6:	bf00      	nop
 80010e8:	0800e75c 	.word	0x0800e75c
 80010ec:	200020ec 	.word	0x200020ec
 80010f0:	200020ed 	.word	0x200020ed

080010f4 <my22HzTimerCallback>:
	osThreadTerminate(NULL);
	/* USER CODE END startSendData */
}

/* my22HzTimerCallback function */
void my22HzTimerCallback(void *argument) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN my22HzTimerCallback */
	//osThreadFlagsSet(estimatePositioHandle, 0x0001U);
	//osThreadFlagsSet(sendDataHandle, 0x0001U);
	/* USER CODE END my22HzTimerCallback */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <sampleMagneticFieldISR>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void sampleMagneticFieldISR(I2C_HandleTypeDef *i2c) {
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if (ui16_sample_index == SAMPLE_SIZE) {
 8001110:	4b3e      	ldr	r3, [pc, #248]	; (800120c <sampleMagneticFieldISR+0x104>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	2b6e      	cmp	r3, #110	; 0x6e
 8001116:	d118      	bne.n	800114a <sampleMagneticFieldISR+0x42>
		osThreadFlagsSet(sendDataHandle, 0x0001U);
 8001118:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <sampleMagneticFieldISR+0x108>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fcf2 	bl	8006b08 <osThreadFlagsSet>

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001124:	2120      	movs	r1, #32
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f001 fc21 	bl	8002970 <HAL_GPIO_TogglePin>

		buffer_index = (buffer_index + 1) % 2;
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <sampleMagneticFieldISR+0x10c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b34      	ldr	r3, [pc, #208]	; (8001214 <sampleMagneticFieldISR+0x10c>)
 8001142:	701a      	strb	r2, [r3, #0]
		ui16_sample_index = 0;
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <sampleMagneticFieldISR+0x104>)
 8001146:	2200      	movs	r2, #0
 8001148:	801a      	strh	r2, [r3, #0]
	}

	mf_samples_buff[buffer_index][ui16_sample_index] = sampleMagneticField(
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <sampleMagneticFieldISR+0x10c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <sampleMagneticFieldISR+0x104>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4930      	ldr	r1, [pc, #192]	; (8001218 <sampleMagneticFieldISR+0x110>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8001164:	fb00 f202 	mul.w	r2, r0, r2
 8001168:	4413      	add	r3, r2
 800116a:	18cc      	adds	r4, r1, r3
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	482b      	ldr	r0, [pc, #172]	; (800121c <sampleMagneticFieldISR+0x114>)
 8001170:	f000 fba4 	bl	80018bc <sampleMagneticField>
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc4 6a00 	vstr	s13, [r4]
 8001184:	ed84 7a01 	vstr	s14, [r4, #4]
 8001188:	edc4 7a02 	vstr	s15, [r4, #8]
			readMagnetometerData, i2c);

	computeDFT(mf_samples_buff[buffer_index][ui16_sample_index],
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <sampleMagneticFieldISR+0x10c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461e      	mov	r6, r3
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <sampleMagneticFieldISR+0x104>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	461d      	mov	r5, r3
			cmf_samples[buffer_index], mf_samples_buff[buffer_index],
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <sampleMagneticFieldISR+0x10c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <sampleMagneticFieldISR+0x118>)
 80011a8:	1898      	adds	r0, r3, r2
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <sampleMagneticFieldISR+0x10c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a17      	ldr	r2, [pc, #92]	; (8001218 <sampleMagneticFieldISR+0x110>)
 80011ba:	1899      	adds	r1, r3, r2
	computeDFT(mf_samples_buff[buffer_index][ui16_sample_index],
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <sampleMagneticFieldISR+0x104>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	469c      	mov	ip, r3
 80011c2:	4c15      	ldr	r4, [pc, #84]	; (8001218 <sampleMagneticFieldISR+0x110>)
 80011c4:	462b      	mov	r3, r5
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	442b      	add	r3, r5
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 80011d0:	fb06 f202 	mul.w	r2, r6, r2
 80011d4:	4413      	add	r3, r2
 80011d6:	4423      	add	r3, r4
 80011d8:	edd3 6a00 	vldr	s13, [r3]
 80011dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80011e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011e4:	4662      	mov	r2, ip
 80011e6:	eeb0 0a66 	vmov.f32	s0, s13
 80011ea:	eef0 0a47 	vmov.f32	s1, s14
 80011ee:	eeb0 1a67 	vmov.f32	s2, s15
 80011f2:	f000 f8b3 	bl	800135c <computeDFT>
			(int) ui16_sample_index);

	ui16_sample_index++;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <sampleMagneticFieldISR+0x104>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <sampleMagneticFieldISR+0x104>)
 8001200:	801a      	strh	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120a:	bf00      	nop
 800120c:	200020ee 	.word	0x200020ee
 8001210:	200020f8 	.word	0x200020f8
 8001214:	200020ec 	.word	0x200020ec
 8001218:	2000169c 	.word	0x2000169c
 800121c:	08001c21 	.word	0x08001c21
 8001220:	200001fc 	.word	0x200001fc

08001224 <initDFT>:
 */
float complex dc_angles[110][110];

float double_per_sample_size;

void initDFT(size_t _samples_size) {
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	ed2d 8b02 	vpush	{d8}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	samples_size = _samples_size;
 8001230:	4a45      	ldr	r2, [pc, #276]	; (8001348 <initDFT+0x124>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
	double_per_sample_size = 2.0 / samples_size;
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <initDFT+0x124>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f98a 	bl	8000554 <__aeabi_ui2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800124c:	f7ff fb26 	bl	800089c <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fcce 	bl	8000bf8 <__aeabi_d2f>
 800125c:	4603      	mov	r3, r0
 800125e:	4a3b      	ldr	r2, [pc, #236]	; (800134c <initDFT+0x128>)
 8001260:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < samples_size; i++) { // this will be the current_index
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e063      	b.n	8001330 <initDFT+0x10c>
		for (int j = 0; j < samples_size; j++) {
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	e058      	b.n	8001320 <initDFT+0xfc>
			dc_angles[i][j] = cexp(i * j * double_per_sample_size * MINUS_PI_I);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <initDFT+0x128>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001288:	eddf 7a31 	vldr	s15, [pc, #196]	; 8001350 <initDFT+0x12c>
 800128c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001290:	ee17 0a90 	vmov	r0, s15
 8001294:	f7ff f980 	bl	8000598 <__aeabi_f2d>
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8001354 <initDFT+0x130>
 80012a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012a4:	ee17 0a90 	vmov	r0, s15
 80012a8:	f7ff f976 	bl	8000598 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	ec41 0b16 	vmov	d6, r0, r1
 80012b8:	ec43 2b17 	vmov	d7, r2, r3
 80012bc:	eeb0 0a46 	vmov.f32	s0, s12
 80012c0:	eef0 0a66 	vmov.f32	s1, s13
 80012c4:	eeb0 1a47 	vmov.f32	s2, s14
 80012c8:	eef0 1a67 	vmov.f32	s3, s15
 80012cc:	f00b ff0e 	bl	800d0ec <cexp>
 80012d0:	eeb0 7a40 	vmov.f32	s14, s0
 80012d4:	eef0 7a60 	vmov.f32	s15, s1
 80012d8:	eeb0 8a41 	vmov.f32	s16, s2
 80012dc:	eef0 8a61 	vmov.f32	s17, s3
 80012e0:	ec53 2b17 	vmov	r2, r3, d7
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc86 	bl	8000bf8 <__aeabi_d2f>
 80012ec:	4604      	mov	r4, r0
 80012ee:	ec53 2b18 	vmov	r2, r3, d8
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc7f 	bl	8000bf8 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4618      	mov	r0, r3
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <initDFT+0x134>)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	216e      	movs	r1, #110	; 0x6e
 8001304:	fb03 f101 	mul.w	r1, r3, r1
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	440b      	add	r3, r1
 800130c:	00d9      	lsls	r1, r3, #3
 800130e:	4411      	add	r1, r2
 8001310:	600c      	str	r4, [r1, #0]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	3304      	adds	r3, #4
 8001318:	6018      	str	r0, [r3, #0]
		for (int j = 0; j < samples_size; j++) {
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3301      	adds	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <initDFT+0x124>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3a1      	bcc.n	800126e <initDFT+0x4a>
	for (int i = 0; i < samples_size; i++) { // this will be the current_index
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <initDFT+0x124>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d396      	bcc.n	8001268 <initDFT+0x44>
		}
	}
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	ecbd 8b02 	vpop	{d8}
 8001346:	bdb0      	pop	{r4, r5, r7, pc}
 8001348:	20002104 	.word	0x20002104
 800134c:	20019b28 	.word	0x20019b28
 8001350:	80000000 	.word	0x80000000
 8001354:	c0490fdb 	.word	0xc0490fdb
 8001358:	20002108 	.word	0x20002108

0800135c <computeDFT>:

void computeDFT(const MagneticField d_sample, MagneticFieldComplex output[restrict],MagneticField input[restrict], int current_index) {
 800135c:	b480      	push	{r7}
 800135e:	b08d      	sub	sp, #52	; 0x34
 8001360:	af00      	add	r7, sp, #0
 8001362:	eef0 6a40 	vmov.f32	s13, s0
 8001366:	eeb0 7a60 	vmov.f32	s14, s1
 800136a:	eef0 7a41 	vmov.f32	s15, s2
 800136e:	60b8      	str	r0, [r7, #8]
 8001370:	6079      	str	r1, [r7, #4]
 8001372:	603a      	str	r2, [r7, #0]
 8001374:	edc7 6a03 	vstr	s13, [r7, #12]
 8001378:	ed87 7a04 	vstr	s14, [r7, #16]
 800137c:	edc7 7a05 	vstr	s15, [r7, #20]
	float complex dc_angle;

	for (int i = 0; i < current_index + 1; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001384:	e0aa      	b.n	80014dc <computeDFT+0x180>
 8001386:	49be      	ldr	r1, [pc, #760]	; (8001680 <computeDFT+0x324>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	226e      	movs	r2, #110	; 0x6e
 800138c:	fb03 f202 	mul.w	r2, r3, r2
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	49b8      	ldr	r1, [pc, #736]	; (8001680 <computeDFT+0x324>)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	226e      	movs	r2, #110	; 0x6e
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3304      	adds	r3, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	61bb      	str	r3, [r7, #24]
		dc_angle = dc_angles[current_index][i];
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	623a      	str	r2, [r7, #32]
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24

		output[i].x += double_per_sample_size * (d_sample.x * ( dc_angle));
 80013bc:	4bb1      	ldr	r3, [pc, #708]	; (8001684 <computeDFT+0x328>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80013c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80013ca:	ee66 6a87 	vmul.f32	s13, s13, s14
 80013ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80013d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013d6:	ee26 7a07 	vmul.f32	s14, s12, s14
 80013da:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80013de:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4413      	add	r3, r2
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	461a      	mov	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800140e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001412:	ed83 7a00 	vstr	s14, [r3]
 8001416:	edc3 7a01 	vstr	s15, [r3, #4]
		output[i].y += double_per_sample_size * (d_sample.y * ( dc_angle));
 800141a:	4b9a      	ldr	r3, [pc, #616]	; (8001684 <computeDFT+0x328>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	edd7 6a04 	vldr	s13, [r7, #16]
 8001424:	ed97 7a07 	vldr	s14, [r7, #28]
 8001428:	ee66 6a87 	vmul.f32	s13, s13, s14
 800142c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001430:	ed97 7a06 	vldr	s14, [r7, #24]
 8001434:	ee26 7a07 	vmul.f32	s14, s12, s14
 8001438:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800143c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	461a      	mov	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4413      	add	r3, r2
 8001450:	ed93 7a02 	vldr	s14, [r3, #8]
 8001454:	edd3 7a03 	vldr	s15, [r3, #12]
 8001458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	461a      	mov	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4413      	add	r3, r2
 8001468:	ee36 7a07 	vadd.f32	s14, s12, s14
 800146c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001470:	ed83 7a02 	vstr	s14, [r3, #8]
 8001474:	edc3 7a03 	vstr	s15, [r3, #12]
		output[i].z += double_per_sample_size * (d_sample.z * ( dc_angle));
 8001478:	4b82      	ldr	r3, [pc, #520]	; (8001684 <computeDFT+0x328>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001482:	ed97 7a07 	vldr	s14, [r7, #28]
 8001486:	ee66 6a87 	vmul.f32	s13, s13, s14
 800148a:	ed97 6a05 	vldr	s12, [r7, #20]
 800148e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001492:	ee26 7a07 	vmul.f32	s14, s12, s14
 8001496:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800149a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800149e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	461a      	mov	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80014b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80014b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	461a      	mov	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80014ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014ce:	ed83 7a04 	vstr	s14, [r3, #16]
 80014d2:	edc3 7a05 	vstr	s15, [r3, #20]
	for (int i = 0; i < current_index + 1; i++) {
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	3301      	adds	r3, #1
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f6bf af50 	bge.w	8001386 <computeDFT+0x2a>
	}

	for (int i = 0; i < current_index; i++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ea:	e0bc      	b.n	8001666 <computeDFT+0x30a>
 80014ec:	4964      	ldr	r1, [pc, #400]	; (8001680 <computeDFT+0x324>)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	226e      	movs	r2, #110	; 0x6e
 80014f2:	fb03 f202 	mul.w	r2, r3, r2
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	495f      	ldr	r1, [pc, #380]	; (8001680 <computeDFT+0x324>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	226e      	movs	r2, #110	; 0x6e
 8001508:	fb03 f202 	mul.w	r2, r3, r2
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
		dc_angle = dc_angles[current_index][i];
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	623a      	str	r2, [r7, #32]
 8001520:	627b      	str	r3, [r7, #36]	; 0x24

		output[current_index].x += double_per_sample_size * (input[i].x * ( dc_angle));
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <computeDFT+0x328>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001540:	ee67 6a26 	vmul.f32	s13, s14, s13
 8001544:	ed97 6a06 	vldr	s12, [r7, #24]
 8001548:	ee27 7a06 	vmul.f32	s14, s14, s12
 800154c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001550:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	461a      	mov	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	ed93 7a00 	vldr	s14, [r3]
 8001568:	edd3 7a01 	vldr	s15, [r3, #4]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	461a      	mov	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8001580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001584:	ed83 7a00 	vstr	s14, [r3]
 8001588:	edc3 7a01 	vstr	s15, [r3, #4]
		output[current_index].y += double_per_sample_size * (input[i].y * ( dc_angle));
 800158c:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <computeDFT+0x328>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80015a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80015aa:	ee67 6a26 	vmul.f32	s13, s14, s13
 80015ae:	ed97 6a06 	vldr	s12, [r7, #24]
 80015b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80015b6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80015ba:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4413      	add	r3, r2
 80015ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80015d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	461a      	mov	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4413      	add	r3, r2
 80015e6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80015ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015ee:	ed83 7a02 	vstr	s14, [r3, #8]
 80015f2:	edc3 7a03 	vstr	s15, [r3, #12]
		output[current_index].z += double_per_sample_size * (input[i].z * ( dc_angle));
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <computeDFT+0x328>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001610:	edd7 6a07 	vldr	s13, [r7, #28]
 8001614:	ee67 6a26 	vmul.f32	s13, s14, s13
 8001618:	ed97 6a06 	vldr	s12, [r7, #24]
 800161c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001620:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001624:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	461a      	mov	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	ed93 7a04 	vldr	s14, [r3, #16]
 800163c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4413      	add	r3, r2
 8001650:	ee36 7a07 	vadd.f32	s14, s12, s14
 8001654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001658:	ed83 7a04 	vstr	s14, [r3, #16]
 800165c:	edc3 7a05 	vstr	s15, [r3, #20]
	for (int i = 0; i < current_index; i++) {
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	3301      	adds	r3, #1
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
 8001666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	f6ff af3e 	blt.w	80014ec <computeDFT+0x190>
	}
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3734      	adds	r7, #52	; 0x34
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20002108 	.word	0x20002108
 8001684:	20019b28 	.word	0x20019b28

08001688 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a37      	ldr	r2, [pc, #220]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b35      	ldr	r3, [pc, #212]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016bc:	f043 0320 	orr.w	r3, r3, #32
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_GPIO_Init+0xf8>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2120      	movs	r1, #32
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f001 f91b 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001710:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_GPIO_Init+0xfc>)
 8001722:	f000 ff8b 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001726:	230c      	movs	r3, #12
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001736:	230c      	movs	r3, #12
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f000 ff7a 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001748:	2320      	movs	r3, #32
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f000 ff6b 	bl	800263c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	2028      	movs	r0, #40	; 0x28
 800176c:	f000 fe7e 	bl	800246c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001770:	2028      	movs	r0, #40	; 0x28
 8001772:	f000 fe95 	bl	80024a0 <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	48000800 	.word	0x48000800

08001788 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_I2C1_Init+0x74>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <MX_I2C1_Init+0x78>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_I2C1_Init+0x74>)
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <MX_I2C1_Init+0x7c>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_I2C1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_I2C1_Init+0x74>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_I2C1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_I2C1_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_I2C1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <MX_I2C1_Init+0x74>)
 80017c4:	f001 f911 	bl	80029ea <HAL_I2C_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ce:	f000 f96b 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <MX_I2C1_Init+0x74>)
 80017d6:	f001 ff01 	bl	80035dc <HAL_I2CEx_ConfigAnalogFilter>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017e0:	f000 f962 	bl	8001aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_I2C1_Init+0x74>)
 80017e8:	f001 ff43 	bl	8003672 <HAL_I2CEx_ConfigDigitalFilter>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 f959 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20019b2c 	.word	0x20019b2c
 8001800:	40005400 	.word	0x40005400
 8001804:	30a0a7fb 	.word	0x30a0a7fb

08001808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09e      	sub	sp, #120	; 0x78
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2254      	movs	r2, #84	; 0x54
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f008 ff68 	bl	800a6fe <memset>
  if(i2cHandle->Instance==I2C1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <HAL_I2C_MspInit+0xa8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d136      	bne.n	80018a6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001838:	2340      	movs	r3, #64	; 0x40
 800183a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fd7b 	bl	8004340 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001850:	f000 f92a 	bl	8001aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_I2C_MspInit+0xac>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <HAL_I2C_MspInit+0xac>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_I2C_MspInit+0xac>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800186c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001870:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187e:	2304      	movs	r3, #4
 8001880:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001886:	4619      	mov	r1, r3
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <HAL_I2C_MspInit+0xb0>)
 800188a:	f000 fed7 	bl	800263c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_I2C_MspInit+0xac>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_I2C_MspInit+0xac>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_I2C_MspInit+0xac>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018a6:	bf00      	nop
 80018a8:	3778      	adds	r7, #120	; 0x78
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400

080018bc <sampleMagneticField>:
#include "magnetic_field.h"

MagneticField sampleMagneticField(
		HAL_StatusTypeDef (*readMagneticSensor)(I2C_HandleTypeDef*, float*),
		I2C_HandleTypeDef *i2c) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b090      	sub	sp, #64	; 0x40
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6178      	str	r0, [r7, #20]
 80018c4:	6139      	str	r1, [r7, #16]
	MagneticField mf_sample;

	float d_response[3];

	if (HAL_OK == readMagneticSensor(i2c, d_response)) {
 80018c6:	f107 021c 	add.w	r2, r7, #28
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4611      	mov	r1, r2
 80018ce:	6938      	ldr	r0, [r7, #16]
 80018d0:	4798      	blx	r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <sampleMagneticField+0x28>

		mf_sample.x = d_response[0];
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
		mf_sample.y = d_response[1];
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
		mf_sample.z = d_response[2];
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30

	}

	return mf_sample;
 80018e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f8:	ee06 1a90 	vmov	s13, r1
 80018fc:	ee07 2a10 	vmov	s14, r2
 8001900:	ee07 3a90 	vmov	s15, r3
}
 8001904:	eeb0 0a66 	vmov.f32	s0, s13
 8001908:	eef0 0a47 	vmov.f32	s1, s14
 800190c:	eeb0 1a67 	vmov.f32	s2, s15
 8001910:	3740      	adds	r7, #64	; 0x40
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) ptr, len) != HAL_OK) {
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	b29b      	uxth	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <_write+0x30>)
 800192e:	f003 fbcf 	bl	80050d0 <HAL_UART_Transmit_IT>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <_write+0x24>
		Error_Handler();
 8001938:	f000 f8b6 	bl	8001aa8 <Error_Handler>
	}

	return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20019c14 	.word	0x20019c14

0800194c <initMagnetiFieldISR>:

void initMagnetiFieldISR() {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <initMagnetiFieldISR+0x10>)
 8001952:	f002 ff9b 	bl	800488c <HAL_TIM_Base_Start_IT>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20019bc8 	.word	0x20019bc8

08001960 <stopMagnetiFieldISR>:

void stopMagnetiFieldISR() {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <stopMagnetiFieldISR+0x10>)
 8001966:	f003 f809 	bl	800497c <HAL_TIM_Base_Stop_IT>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20019bc8 	.word	0x20019bc8

08001974 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  	HAL_Init();
 8001978:	f000 fc67 	bl	800224a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800197c:	f000 f82a 	bl	80019d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001980:	f7ff fe82 	bl	8001688 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001984:	f7ff ff00 	bl	8001788 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001988:	f000 fb8a 	bl	80020a0 <MX_USART1_UART_Init>
	MX_TIM6_Init();
 800198c:	f000 fb2c 	bl	8001fe8 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	/*
	 * Initialize the LSM303 sensor here
	 */
	while (initializeLSM303DHLC(&hi2c1) != HAL_OK) {
 8001990:	e006      	b.n	80019a0 <main+0x2c>
		printf("Trying to connect with sensor. Check wires!\r\n");
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <main+0x54>)
 8001994:	f009 fc28 	bl	800b1e8 <puts>
		HAL_Delay(1000);
 8001998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199c:	f000 fc8c 	bl	80022b8 <HAL_Delay>
	while (initializeLSM303DHLC(&hi2c1) != HAL_OK) {
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <main+0x58>)
 80019a2:	f000 f88f 	bl	8001ac4 <initializeLSM303DHLC>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f2      	bne.n	8001992 <main+0x1e>
	}

	HAL_Delay(500);
 80019ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b0:	f000 fc82 	bl	80022b8 <HAL_Delay>

	printf("frame;node;mag_x;mag_y;mag_z\r\n");
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <main+0x5c>)
 80019b6:	f009 fc17 	bl	800b1e8 <puts>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 80019ba:	f004 ffc9 	bl	8006950 <osKernelInitialize>
	MX_FREERTOS_Init();
 80019be:	f7ff faed 	bl	8000f9c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80019c2:	f004 ffe9 	bl	8006998 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// Start timer
	while (1) {
 80019c6:	e7fe      	b.n	80019c6 <main+0x52>
 80019c8:	0800e778 	.word	0x0800e778
 80019cc:	20019b2c 	.word	0x20019b2c
 80019d0:	0800e7a8 	.word	0x0800e7a8

080019d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b094      	sub	sp, #80	; 0x50
 80019d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	2238      	movs	r2, #56	; 0x38
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f008 fe8b 	bl	800a6fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f001 fe88 	bl	800370c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a06:	2340      	movs	r3, #64	; 0x40
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a12:	2304      	movs	r3, #4
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001a16:	2355      	movs	r3, #85	; 0x55
 8001a18:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a26:	f107 0318 	add.w	r3, r7, #24
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 ff22 	bl	8003874 <HAL_RCC_OscConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x66>
		Error_Handler();
 8001a36:	f000 f837 	bl	8001aa8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2104      	movs	r1, #4
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fa26 	bl	8003ea4 <HAL_RCC_ClockConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0x8e>
		Error_Handler();
 8001a5e:	f000 f823 	bl	8001aa8 <Error_Handler>
	}
}
 8001a62:	bf00      	nop
 8001a64:	3750      	adds	r7, #80	; 0x50
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a7e:	f000 fbfd 	bl	800227c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM6) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <HAL_TIM_PeriodElapsedCallback+0x26>
		sampleMagneticFieldISR(&hi2c1);
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a8e:	f7ff fb3b 	bl	8001108 <sampleMagneticFieldISR>
	}

	/* USER CODE END Callback 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40001400 	.word	0x40001400
 8001aa0:	40001000 	.word	0x40001000
 8001aa4:	20019b2c 	.word	0x20019b2c

08001aa8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("ERROR\r\n");
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <Error_Handler+0x18>)
 8001ab2:	f009 fb99 	bl	800b1e8 <puts>
		HAL_Delay(1000);
 8001ab6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aba:	f000 fbfd 	bl	80022b8 <HAL_Delay>
		printf("ERROR\r\n");
 8001abe:	e7f7      	b.n	8001ab0 <Error_Handler+0x8>
 8001ac0:	0800e7c8 	.word	0x0800e7c8

08001ac4 <initializeLSM303DHLC>:
		8.4561143, -23.47531504, 4.73971622, 9.9730783, -10.5071423, 21.3386451,
		-0.84730778, -16.49198528, 9.71980305, -16.49198528, -0.84730778,
		21.3386451, -10.5071423, 9.9730783, 4.73971622, -23.47531504, 8.4561143,
		-4.19307089, -6.70128196 };

HAL_StatusTypeDef initializeLSM303DHLC(I2C_HandleTypeDef *i2c) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	uint8_t ui_init_params[3][2] = { { CRA_REG_M, CRA_REG_M_CONFIG }, {
 8001acc:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <initializeLSM303DHLC+0xa0>)
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad6:	6018      	str	r0, [r3, #0]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	8019      	strh	r1, [r3, #0]
			CRB_REG_M, CRB_REG_M_CONFIG }, { MR_REG_M, MR_REG_M_CONFIG } };

	ret = HAL_I2C_IsDeviceReady(i2c, MY_LSM303DLHC_MAG_ADD, 10, 200);
 8001adc:	23c8      	movs	r3, #200	; 0xc8
 8001ade:	220a      	movs	r2, #10
 8001ae0:	213c      	movs	r1, #60	; 0x3c
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 f9fa 	bl	8002edc <HAL_I2C_IsDeviceReady>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <initializeLSM303DHLC+0x32>
		return ret;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	e032      	b.n	8001b5c <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[0],
 8001af6:	f107 0208 	add.w	r2, r7, #8
 8001afa:	23c8      	movs	r3, #200	; 0xc8
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2302      	movs	r3, #2
 8001b00:	213c      	movs	r1, #60	; 0x3c
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f001 f800 	bl	8002b08 <HAL_I2C_Master_Transmit>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <initializeLSM303DHLC+0x52>
		return ret;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	e022      	b.n	8001b5c <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[1],
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	1c9a      	adds	r2, r3, #2
 8001b1c:	23c8      	movs	r3, #200	; 0xc8
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2302      	movs	r3, #2
 8001b22:	213c      	movs	r1, #60	; 0x3c
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 ffef 	bl	8002b08 <HAL_I2C_Master_Transmit>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <initializeLSM303DHLC+0x74>
		return ret;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	e011      	b.n	8001b5c <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[2],
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	1d1a      	adds	r2, r3, #4
 8001b3e:	23c8      	movs	r3, #200	; 0xc8
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2302      	movs	r3, #2
 8001b44:	213c      	movs	r1, #60	; 0x3c
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 ffde 	bl	8002b08 <HAL_I2C_Master_Transmit>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <initializeLSM303DHLC+0x96>
		return ret;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	e000      	b.n	8001b5c <initializeLSM303DHLC+0x98>
	}

	return ret;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	0800e7d0 	.word	0x0800e7d0

08001b68 <readRawMagnetometerData>:

HAL_StatusTypeDef readRawMagnetometerData(I2C_HandleTypeDef *i2c,
		int16_t *i16_raw_response, uint8_t *ui8_buf_response) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;

	uint8_t reg = OUT_X_H_M;
 8001b74:	2303      	movs	r3, #3
 8001b76:	77bb      	strb	r3, [r7, #30]
	uint8_t ui_lsm_response[6];
	union_ui8_ui16 ui8_16_aux;

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, &reg, 1,
 8001b78:	f107 021e 	add.w	r2, r7, #30
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2301      	movs	r3, #1
 8001b84:	213c      	movs	r1, #60	; 0x3c
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 ffbe 	bl	8002b08 <HAL_I2C_Master_Transmit>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	77fb      	strb	r3, [r7, #31]
	HAL_MAX_DELAY);
	if (ret == HAL_OK) {
 8001b90:	7ffb      	ldrb	r3, [r7, #31]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d13f      	bne.n	8001c16 <readRawMagnetometerData+0xae>
		ret = HAL_I2C_Master_Receive(i2c, MY_LSM303DLHC_MAG_ADD,
 8001b96:	f107 0218 	add.w	r2, r7, #24
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	213c      	movs	r1, #60	; 0x3c
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f001 f8a3 	bl	8002cf0 <HAL_I2C_Master_Receive>
 8001baa:	4603      	mov	r3, r0
 8001bac:	77fb      	strb	r3, [r7, #31]
				ui_lsm_response, 6, HAL_MAX_DELAY);

		if (ret == HAL_OK) {
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d130      	bne.n	8001c16 <readRawMagnetometerData+0xae>
			ui8_16_aux.ui8[0] = ui_lsm_response[1];
 8001bb4:	7e7b      	ldrb	r3, [r7, #25]
 8001bb6:	743b      	strb	r3, [r7, #16]
			ui8_16_aux.ui8[1] = ui_lsm_response[0];
 8001bb8:	7e3b      	ldrb	r3, [r7, #24]
 8001bba:	747b      	strb	r3, [r7, #17]

			ui8_16_aux.ui8[2] = ui_lsm_response[3];
 8001bbc:	7efb      	ldrb	r3, [r7, #27]
 8001bbe:	74bb      	strb	r3, [r7, #18]
			ui8_16_aux.ui8[3] = ui_lsm_response[2];
 8001bc0:	7ebb      	ldrb	r3, [r7, #26]
 8001bc2:	74fb      	strb	r3, [r7, #19]

			ui8_16_aux.ui8[4] = ui_lsm_response[5];
 8001bc4:	7f7b      	ldrb	r3, [r7, #29]
 8001bc6:	753b      	strb	r3, [r7, #20]
			ui8_16_aux.ui8[5] = ui_lsm_response[4];
 8001bc8:	7f3b      	ldrb	r3, [r7, #28]
 8001bca:	757b      	strb	r3, [r7, #21]

			i16_raw_response[0] = ui8_16_aux.i16[0];
 8001bcc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	801a      	strh	r2, [r3, #0]
			i16_raw_response[1] = ui8_16_aux.i16[1];
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bdc:	801a      	strh	r2, [r3, #0]
			i16_raw_response[2] = ui8_16_aux.i16[2];
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3304      	adds	r3, #4
 8001be2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001be6:	801a      	strh	r2, [r3, #0]

			ui8_buf_response[0] = ui8_16_aux.ui8[0];
 8001be8:	7c3a      	ldrb	r2, [r7, #16]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	701a      	strb	r2, [r3, #0]
			ui8_buf_response[1] = ui8_16_aux.ui8[1];
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	7c7a      	ldrb	r2, [r7, #17]
 8001bf4:	701a      	strb	r2, [r3, #0]
			ui8_buf_response[2] = ui8_16_aux.ui8[2];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	7cba      	ldrb	r2, [r7, #18]
 8001bfc:	701a      	strb	r2, [r3, #0]
			ui8_buf_response[3] = ui8_16_aux.ui8[3];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3303      	adds	r3, #3
 8001c02:	7cfa      	ldrb	r2, [r7, #19]
 8001c04:	701a      	strb	r2, [r3, #0]
			ui8_buf_response[4] = ui8_16_aux.ui8[4];
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	7d3a      	ldrb	r2, [r7, #20]
 8001c0c:	701a      	strb	r2, [r3, #0]
			ui8_buf_response[5] = ui8_16_aux.ui8[5];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3305      	adds	r3, #5
 8001c12:	7d7a      	ldrb	r2, [r7, #21]
 8001c14:	701a      	strb	r2, [r3, #0]
		}
	}

	return ret;
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <readMagnetometerData>:

HAL_StatusTypeDef readMagnetometerData(I2C_HandleTypeDef *i2c,
		float *f_response) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	int16_t i16_raw_response[3];
	uint8_t ui8_raw_response[6];

	ret = readRawMagnetometerData(i2c, i16_raw_response, ui8_raw_response);
 8001c2a:	f107 0208 	add.w	r2, r7, #8
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff97 	bl	8001b68 <readRawMagnetometerData>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	75fb      	strb	r3, [r7, #23]
	if (ret == HAL_OK) {
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d134      	bne.n	8001cae <readMagnetometerData+0x8e>
		f_response[2] = mocked_values_z[mock_value_index];

		mock_value_index = (mock_value_index + 1) % MOCK_SIZE;
#else
		// X conversion
		f_response[0] = i16_raw_response[0] / (float) X_Y_GAIN;
 8001c44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c50:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001cb8 <readMagnetometerData+0x98>
 8001c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c58:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001cbc <readMagnetometerData+0x9c>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	edc3 7a00 	vstr	s15, [r3]
		// Z conversion
		f_response[1] = i16_raw_response[1] / (float) Z_GAIN;
 8001c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c72:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001cc0 <readMagnetometerData+0xa0>
 8001c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001cbc <readMagnetometerData+0x9c>
 8001c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c86:	edc3 7a00 	vstr	s15, [r3]

		// Y conversion
		f_response[2] = i16_raw_response[2] / (float) X_Y_GAIN;
 8001c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c96:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001cb8 <readMagnetometerData+0x98>
 8001c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001cbc <readMagnetometerData+0x9c>
 8001ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001caa:	edc3 7a00 	vstr	s15, [r3]

#endif
	}

	return ret;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	43660000 	.word	0x43660000
 8001cbc:	42c80000 	.word	0x42c80000
 8001cc0:	434d0000 	.word	0x434d0000

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_MspInit+0x50>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_MspInit+0x50>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_MspInit+0x50>)
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_MspInit+0x50>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_MspInit+0x50>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_MspInit+0x50>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	f06f 0001 	mvn.w	r0, #1
 8001d02:	f000 fbb3 	bl	800246c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d06:	f001 fda5 	bl	8003854 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_InitTick+0xcc>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <HAL_InitTick+0xcc>)
 8001d34:	f043 0320 	orr.w	r3, r3, #32
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_InitTick+0xcc>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d46:	f107 020c 	add.w	r2, r7, #12
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 fa7d 	bl	8004250 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d56:	f002 fa4f 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8001d5a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	4a22      	ldr	r2, [pc, #136]	; (8001de8 <HAL_InitTick+0xd0>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	0c9b      	lsrs	r3, r3, #18
 8001d66:	3b01      	subs	r3, #1
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_InitTick+0xd4>)
 8001d6c:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <HAL_InitTick+0xd8>)
 8001d6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <HAL_InitTick+0xd4>)
 8001d72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d76:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d78:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_InitTick+0xd4>)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_InitTick+0xd4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_InitTick+0xd4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001d8a:	4818      	ldr	r0, [pc, #96]	; (8001dec <HAL_InitTick+0xd4>)
 8001d8c:	f002 fd26 	bl	80047dc <HAL_TIM_Base_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001d9e:	4813      	ldr	r0, [pc, #76]	; (8001dec <HAL_InitTick+0xd4>)
 8001da0:	f002 fd74 	bl	800488c <HAL_TIM_Base_Start_IT>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d111      	bne.n	8001dd6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001db2:	2037      	movs	r0, #55	; 0x37
 8001db4:	f000 fb74 	bl	80024a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	d808      	bhi.n	8001dd0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	2037      	movs	r0, #55	; 0x37
 8001dc4:	f000 fb52 	bl	800246c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_InitTick+0xdc>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e002      	b.n	8001dd6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3730      	adds	r7, #48	; 0x30
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	20019b78 	.word	0x20019b78
 8001df0:	40001400 	.word	0x40001400
 8001df4:	20000004 	.word	0x20000004

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <USART1_IRQHandler+0x10>)
 8001e2a:	f003 f9f9 	bl	8005220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20019c14 	.word	0x20019c14

08001e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e40:	f000 fdb0 	bl	80029a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <TIM6_DAC_IRQHandler+0x10>)
 8001e4e:	f002 fdc4 	bl	80049da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20019bc8 	.word	0x20019bc8

08001e5c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM7_DAC_IRQHandler+0x10>)
 8001e62:	f002 fdba 	bl	80049da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20019b78 	.word	0x20019b78

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e8a:	f008 fb07 	bl	800a49c <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
	return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eb2:	e7fe      	b.n	8001eb2 <_exit+0x12>

08001eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e00a      	b.n	8001edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ec6:	f3af 8000 	nop.w
 8001eca:	4601      	mov	r1, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf0      	blt.n	8001ec6 <_read+0x12>
	}

return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_close>:
	}
	return len;
}

int _close(int file)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f16:	605a      	str	r2, [r3, #4]
	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
	return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f008 fa88 	bl	800a49c <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20020000 	.word	0x20020000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20019bc4 	.word	0x20019bc4
 8001fc0:	2001ca68 	.word	0x2001ca68

08001fc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_TIM6_Init+0x64>)
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <MX_TIM6_Init+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7727 - 1;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_TIM6_Init+0x64>)
 8002000:	f641 622e 	movw	r2, #7726	; 0x1e2e
 8002004:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_TIM6_Init+0x64>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_TIM6_Init+0x64>)
 800200e:	2263      	movs	r2, #99	; 0x63
 8002010:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_TIM6_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <MX_TIM6_Init+0x64>)
 800201a:	f002 fbdf 	bl	80047dc <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002024:	f7ff fd40 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_TIM6_Init+0x64>)
 8002036:	f002 ff1f 	bl	8004e78 <HAL_TIMEx_MasterConfigSynchronization>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002040:	f7ff fd32 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20019bc8 	.word	0x20019bc8
 8002050:	40001000 	.word	0x40001000

08002054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_TIM_Base_MspInit+0x44>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d113      	bne.n	800208e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2105      	movs	r1, #5
 8002082:	2036      	movs	r0, #54	; 0x36
 8002084:	f000 f9f2 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002088:	2036      	movs	r0, #54	; 0x36
 800208a:	f000 fa09 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40001000 	.word	0x40001000
 800209c:	40021000 	.word	0x40021000

080020a0 <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020a6:	4a23      	ldr	r2, [pc, #140]	; (8002134 <MX_USART1_UART_Init+0x94>)
 80020a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80020e8:	4811      	ldr	r0, [pc, #68]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020ea:	f002 ffa1 	bl	8005030 <HAL_UART_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80020f4:	f7ff fcd8 	bl	8001aa8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80020f8:	2100      	movs	r1, #0
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_USART1_UART_Init+0x90>)
 80020fc:	f004 fb19 	bl	8006732 <HAL_UARTEx_SetTxFifoThreshold>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002106:	f7ff fccf 	bl	8001aa8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800210a:	2100      	movs	r1, #0
 800210c:	4808      	ldr	r0, [pc, #32]	; (8002130 <MX_USART1_UART_Init+0x90>)
 800210e:	f004 fb4e 	bl	80067ae <HAL_UARTEx_SetRxFifoThreshold>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002118:	f7ff fcc6 	bl	8001aa8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_USART1_UART_Init+0x90>)
 800211e:	f004 facf 	bl	80066c0 <HAL_UARTEx_DisableFifoMode>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8002128:	f7ff fcbe 	bl	8001aa8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20019c14 	.word	0x20019c14
 8002134:	40013800 	.word	0x40013800

08002138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b09e      	sub	sp, #120	; 0x78
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2254      	movs	r2, #84	; 0x54
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f008 fad0 	bl	800a6fe <memset>
	if (uartHandle->Instance == USART1) {
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a22      	ldr	r2, [pc, #136]	; (80021ec <HAL_UART_MspInit+0xb4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d13d      	bne.n	80021e4 <HAL_UART_MspInit+0xac>

		/* USER CODE END USART1_MspInit 0 */

		/** Initializes the peripherals clocks
		 */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
		PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4618      	mov	r0, r3
 8002176:	f002 f8e3 	bl	8004340 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x4c>
			Error_Handler();
 8002180:	f7ff fc92 	bl	8001aa8 <Error_Handler>
		}

		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_UART_MspInit+0xb8>)
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_UART_MspInit+0xb8>)
 800218a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218e:	6613      	str	r3, [r2, #96]	; 0x60
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_UART_MspInit+0xb8>)
 8002192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_UART_MspInit+0xb8>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <HAL_UART_MspInit+0xb8>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_UART_MspInit+0xb8>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PC4     ------> USART1_TX
		 PC5     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80021b4:	2330      	movs	r3, #48	; 0x30
 80021b6:	667b      	str	r3, [r7, #100]	; 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	66bb      	str	r3, [r7, #104]	; 0x68
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	66fb      	str	r3, [r7, #108]	; 0x6c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	673b      	str	r3, [r7, #112]	; 0x70
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c4:	2307      	movs	r3, #7
 80021c6:	677b      	str	r3, [r7, #116]	; 0x74
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021cc:	4619      	mov	r1, r3
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <HAL_UART_MspInit+0xbc>)
 80021d0:	f000 fa34 	bl	800263c <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2105      	movs	r1, #5
 80021d8:	2025      	movs	r0, #37	; 0x25
 80021da:	f000 f947 	bl	800246c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021de:	2025      	movs	r0, #37	; 0x25
 80021e0:	f000 f95e 	bl	80024a0 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}
}
 80021e4:	bf00      	nop
 80021e6:	3778      	adds	r7, #120	; 0x78
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40013800 	.word	0x40013800
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000800 	.word	0x48000800

080021f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021fc:	480d      	ldr	r0, [pc, #52]	; (8002234 <LoopForever+0x6>)
  ldr r1, =_edata
 80021fe:	490e      	ldr	r1, [pc, #56]	; (8002238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <LoopForever+0xe>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002214:	4c0b      	ldr	r4, [pc, #44]	; (8002244 <LoopForever+0x16>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002222:	f7ff fecf 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002226:	f008 fa35 	bl	800a694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800222a:	f7ff fba3 	bl	8001974 <main>

0800222e <LoopForever>:

LoopForever:
    b LoopForever
 800222e:	e7fe      	b.n	800222e <LoopForever>
  ldr   r0, =_estack
 8002230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800223c:	0800eeb0 	.word	0x0800eeb0
  ldr r2, =_sbss
 8002240:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002244:	2001ca68 	.word	0x2001ca68

08002248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC1_2_IRQHandler>

0800224a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 f8fe 	bl	8002456 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800225a:	200f      	movs	r0, #15
 800225c:	f7ff fd5c 	bl	8001d18 <HAL_InitTick>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	e001      	b.n	8002270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800226c:	f7ff fd2a 	bl	8001cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002270:	79fb      	ldrb	r3, [r7, #7]

}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_IncTick+0x1c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_IncTick+0x20>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4413      	add	r3, r2
 800228a:	4a03      	ldr	r2, [pc, #12]	; (8002298 <HAL_IncTick+0x1c>)
 800228c:	6013      	str	r3, [r2, #0]
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	20019ca4 	.word	0x20019ca4
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20019ca4 	.word	0x20019ca4

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d004      	beq.n	80022dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_Delay+0x40>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022dc:	bf00      	nop
 80022de:	f7ff ffdf 	bl	80022a0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d8f7      	bhi.n	80022de <HAL_Delay+0x26>
  {
  }
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000008 	.word	0x20000008

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff4c 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800247a:	f7ff ff63 	bl	8002344 <__NVIC_GetPriorityGrouping>
 800247e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	6978      	ldr	r0, [r7, #20]
 8002486:	f7ff ffb3 	bl	80023f0 <NVIC_EncodePriority>
 800248a:	4602      	mov	r2, r0
 800248c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff82 	bl	800239c <__NVIC_SetPriority>
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff56 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d005      	beq.n	80024e0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e037      	b.n	8002550 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 020e 	bic.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800252c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002544:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800254e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d00d      	beq.n	80025a2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e047      	b.n	8002632 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 020e 	bic.w	r2, r2, #14
 80025b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f003 021f 	and.w	r2, r3, #31
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002606:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002610:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
    }
  }
  return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800264a:	e15a      	b.n	8002902 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 814c 	beq.w	80028fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d005      	beq.n	800267c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002678:	2b02      	cmp	r3, #2
 800267a:	d130      	bne.n	80026de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b2:	2201      	movs	r2, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 0201 	and.w	r2, r3, #1
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d017      	beq.n	800271a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d123      	bne.n	800276e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	6939      	ldr	r1, [r7, #16]
 800276a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0203 	and.w	r2, r3, #3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80a6 	beq.w	80028fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b0:	4b5b      	ldr	r3, [pc, #364]	; (8002920 <HAL_GPIO_Init+0x2e4>)
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	4a5a      	ldr	r2, [pc, #360]	; (8002920 <HAL_GPIO_Init+0x2e4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6613      	str	r3, [r2, #96]	; 0x60
 80027bc:	4b58      	ldr	r3, [pc, #352]	; (8002920 <HAL_GPIO_Init+0x2e4>)
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c8:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027f2:	d01f      	beq.n	8002834 <HAL_GPIO_Init+0x1f8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a4c      	ldr	r2, [pc, #304]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d019      	beq.n	8002830 <HAL_GPIO_Init+0x1f4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a4b      	ldr	r2, [pc, #300]	; (800292c <HAL_GPIO_Init+0x2f0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d013      	beq.n	800282c <HAL_GPIO_Init+0x1f0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <HAL_GPIO_Init+0x2f4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00d      	beq.n	8002828 <HAL_GPIO_Init+0x1ec>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a49      	ldr	r2, [pc, #292]	; (8002934 <HAL_GPIO_Init+0x2f8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_GPIO_Init+0x1e8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a48      	ldr	r2, [pc, #288]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_GPIO_Init+0x1e4>
 800281c:	2305      	movs	r3, #5
 800281e:	e00a      	b.n	8002836 <HAL_GPIO_Init+0x1fa>
 8002820:	2306      	movs	r3, #6
 8002822:	e008      	b.n	8002836 <HAL_GPIO_Init+0x1fa>
 8002824:	2304      	movs	r3, #4
 8002826:	e006      	b.n	8002836 <HAL_GPIO_Init+0x1fa>
 8002828:	2303      	movs	r3, #3
 800282a:	e004      	b.n	8002836 <HAL_GPIO_Init+0x1fa>
 800282c:	2302      	movs	r3, #2
 800282e:	e002      	b.n	8002836 <HAL_GPIO_Init+0x1fa>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_GPIO_Init+0x1fa>
 8002834:	2300      	movs	r3, #0
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	f002 0203 	and.w	r2, r2, #3
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	4093      	lsls	r3, r2
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002846:	4937      	ldr	r1, [pc, #220]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002854:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_GPIO_Init+0x300>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002878:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_GPIO_Init+0x300>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_GPIO_Init+0x300>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028a2:	4a26      	ldr	r2, [pc, #152]	; (800293c <HAL_GPIO_Init+0x300>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_GPIO_Init+0x300>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_GPIO_Init+0x300>)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_GPIO_Init+0x300>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_GPIO_Init+0x300>)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f ae9d 	bne.w	800264c <HAL_GPIO_Init+0x10>
  }
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40021000 	.word	0x40021000
 8002924:	40010000 	.word	0x40010000
 8002928:	48000400 	.word	0x48000400
 800292c:	48000800 	.word	0x48000800
 8002930:	48000c00 	.word	0x48000c00
 8002934:	48001000 	.word	0x48001000
 8002938:	48001400 	.word	0x48001400
 800293c:	40010400 	.word	0x40010400

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800295c:	e002      	b.n	8002964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	43d9      	mvns	r1, r3
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	400b      	ands	r3, r1
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ba:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f806 	bl	80029d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e081      	b.n	8002b00 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fe fef9 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2224      	movs	r2, #36	; 0x24
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	e006      	b.n	8002a72 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d104      	bne.n	8002a84 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a96:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69d9      	ldr	r1, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	461a      	mov	r2, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	817b      	strh	r3, [r7, #10]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	f040 80da 	bne.w	8002cde <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_I2C_Master_Transmit+0x30>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e0d3      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1d8>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b40:	f7ff fbae 	bl	80022a0 <HAL_GetTick>
 8002b44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2319      	movs	r3, #25
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 faed 	bl	8003132 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0be      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2221      	movs	r2, #33	; 0x21
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	893a      	ldrh	r2, [r7, #8]
 8002b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2bff      	cmp	r3, #255	; 0xff
 8002b92:	d90e      	bls.n	8002bb2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fce4 	bl	8003578 <I2C_TransferConfig>
 8002bb0:	e06c      	b.n	8002c8c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	8979      	ldrh	r1, [r7, #10]
 8002bc4:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fcd3 	bl	8003578 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bd2:	e05b      	b.n	8002c8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	6a39      	ldr	r1, [r7, #32]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 faea 	bl	80031b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e07b      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d034      	beq.n	8002c8c <HAL_I2C_Master_Transmit+0x184>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d130      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fa7c 	bl	8003132 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e04d      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2bff      	cmp	r3, #255	; 0xff
 8002c4c:	d90e      	bls.n	8002c6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	22ff      	movs	r2, #255	; 0xff
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	8979      	ldrh	r1, [r7, #10]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fc87 	bl	8003578 <I2C_TransferConfig>
 8002c6a:	e00f      	b.n	8002c8c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fc76 	bl	8003578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d19e      	bne.n	8002bd4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6a39      	ldr	r1, [r7, #32]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fac9 	bl	8003232 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e01a      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_I2C_Master_Transmit+0x1e4>)
 8002cbe:	400b      	ands	r3, r1
 8002cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	80002000 	.word	0x80002000
 8002cec:	fe00e800 	.word	0xfe00e800

08002cf0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
 8002d00:	4613      	mov	r3, r2
 8002d02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	f040 80db 	bne.w	8002ec8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_I2C_Master_Receive+0x30>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e0d4      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d28:	f7ff faba 	bl	80022a0 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2319      	movs	r3, #25
 8002d34:	2201      	movs	r2, #1
 8002d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f9f9 	bl	8003132 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0bf      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2222      	movs	r2, #34	; 0x22
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2210      	movs	r2, #16
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	893a      	ldrh	r2, [r7, #8]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2bff      	cmp	r3, #255	; 0xff
 8002d7a:	d90e      	bls.n	8002d9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	4b52      	ldr	r3, [pc, #328]	; (8002ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fbf0 	bl	8003578 <I2C_TransferConfig>
 8002d98:	e06d      	b.n	8002e76 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fbdf 	bl	8003578 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002dba:	e05c      	b.n	8002e76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	6a39      	ldr	r1, [r7, #32]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fa73 	bl	80032ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e07c      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d034      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x186>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d130      	bne.n	8002e76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f987 	bl	8003132 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e04d      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2bff      	cmp	r3, #255	; 0xff
 8002e36:	d90e      	bls.n	8002e56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	22ff      	movs	r2, #255	; 0xff
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fb92 	bl	8003578 <I2C_TransferConfig>
 8002e54:	e00f      	b.n	8002e76 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	8979      	ldrh	r1, [r7, #10]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fb81 	bl	8003578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d19d      	bne.n	8002dbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6a39      	ldr	r1, [r7, #32]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f9d4 	bl	8003232 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e01a      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_I2C_Master_Receive+0x1e8>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	80002400 	.word	0x80002400
 8002ed8:	fe00e800 	.word	0xfe00e800

08002edc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	f040 80f1 	bne.w	80030e0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0e7      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2C_IsDeviceReady+0x44>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e0e0      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_I2C_IsDeviceReady+0x72>
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f4c:	e004      	b.n	8002f58 <HAL_I2C_IsDeviceReady+0x7c>
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f99f 	bl	80022a0 <HAL_GetTick>
 8002f62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f90:	e034      	b.n	8002ffc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d01a      	beq.n	8002fd0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7ff f981 	bl	80022a0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <HAL_I2C_IsDeviceReady+0xd4>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e088      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <HAL_I2C_IsDeviceReady+0x12c>
 8003002:	7fbb      	ldrb	r3, [r7, #30]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0c4      	beq.n	8002f92 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d01a      	beq.n	800304c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2200      	movs	r2, #0
 800301e:	2120      	movs	r1, #32
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f886 	bl	8003132 <I2C_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e058      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2220      	movs	r2, #32
 8003036:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e04a      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	2120      	movs	r1, #32
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f86b 	bl	8003132 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e03d      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2210      	movs	r2, #16
 800306c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2220      	movs	r2, #32
 8003074:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d118      	bne.n	80030b0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2200      	movs	r2, #0
 8003096:	2120      	movs	r1, #32
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f84a 	bl	8003132 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e01c      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	3301      	adds	r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	f63f af3b 	bhi.w	8002f36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d103      	bne.n	8003108 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d007      	beq.n	8003126 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	619a      	str	r2, [r3, #24]
  }
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003142:	e022      	b.n	800318a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d01e      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7ff f8a8 	bl	80022a0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d302      	bcc.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x30>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e00f      	b.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d0cd      	beq.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031be:	e02c      	b.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f8eb 	bl	80033a0 <I2C_IsErrorOccurred>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e02a      	b.n	800322a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d01e      	beq.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031dc:	f7ff f860 	bl	80022a0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d302      	bcc.n	80031f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d113      	bne.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e007      	b.n	800322a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	d1cb      	bne.n	80031c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800323e:	e028      	b.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f8ab 	bl	80033a0 <I2C_IsErrorOccurred>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e026      	b.n	80032a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7ff f824 	bl	80022a0 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d113      	bne.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e007      	b.n	80032a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b20      	cmp	r3, #32
 800329e:	d1cf      	bne.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b8:	e064      	b.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f86e 	bl	80033a0 <I2C_IsErrorOccurred>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e062      	b.n	8003394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d138      	bne.n	800334e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d105      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e04e      	b.n	8003394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d107      	bne.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2204      	movs	r2, #4
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
 8003312:	e002      	b.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2220      	movs	r2, #32
 8003320:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800332e:	400b      	ands	r3, r1
 8003330:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e022      	b.n	8003394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe ffa7 	bl	80022a0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10f      	bne.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e007      	b.n	8003394 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d193      	bne.n	80032ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	fe00e800 	.word	0xfe00e800

080033a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d075      	beq.n	80034b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2210      	movs	r2, #16
 80033d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d4:	e056      	b.n	8003484 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d052      	beq.n	8003484 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe ff5f 	bl	80022a0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_IsErrorOccurred+0x54>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d147      	bne.n	8003484 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003406:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003416:	d12e      	bne.n	8003476 <I2C_IsErrorOccurred+0xd6>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341e:	d02a      	beq.n	8003476 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b20      	cmp	r3, #32
 8003424:	d027      	beq.n	8003476 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003434:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003436:	f7fe ff33 	bl	80022a0 <HAL_GetTick>
 800343a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343c:	e01b      	b.n	8003476 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800343e:	f7fe ff2f 	bl	80022a0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b19      	cmp	r3, #25
 800344a:	d914      	bls.n	8003476 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d1dc      	bne.n	800343e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b20      	cmp	r3, #32
 8003490:	d003      	beq.n	800349a <I2C_IsErrorOccurred+0xfa>
 8003492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003496:	2b00      	cmp	r3, #0
 8003498:	d09d      	beq.n	80033d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800349a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2220      	movs	r2, #32
 80034a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f043 0308 	orr.w	r3, r3, #8
 80034f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01c      	beq.n	8003568 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff fddb 	bl	80030ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <I2C_IsErrorOccurred+0x1d4>)
 8003540:	400b      	ands	r3, r1
 8003542:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	431a      	orrs	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800356c:	4618      	mov	r0, r3
 800356e:	3728      	adds	r7, #40	; 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	fe00e800 	.word	0xfe00e800

08003578 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	4613      	mov	r3, r2
 8003588:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003590:	7a7b      	ldrb	r3, [r7, #9]
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003598:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035a6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	0d5b      	lsrs	r3, r3, #21
 80035b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <I2C_TransferConfig+0x60>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	43db      	mvns	r3, r3
 80035bc:	ea02 0103 	and.w	r1, r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	03ff63ff 	.word	0x03ff63ff

080035dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d138      	bne.n	8003664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e032      	b.n	8003666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800362e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b20      	cmp	r3, #32
 8003686:	d139      	bne.n	80036fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003692:	2302      	movs	r3, #2
 8003694:	e033      	b.n	80036fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2224      	movs	r2, #36	; 0x24
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d141      	bne.n	800379e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800371a:	4b4b      	ldr	r3, [pc, #300]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d131      	bne.n	800378c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003728:	4b47      	ldr	r3, [pc, #284]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372e:	4a46      	ldr	r2, [pc, #280]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	4b43      	ldr	r3, [pc, #268]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003740:	4a41      	ldr	r2, [pc, #260]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003748:	4b40      	ldr	r3, [pc, #256]	; (800384c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2232      	movs	r2, #50	; 0x32
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375e:	e002      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003766:	4b38      	ldr	r3, [pc, #224]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003772:	d102      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f2      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800377a:	4b33      	ldr	r3, [pc, #204]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003786:	d158      	bne.n	800383a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e057      	b.n	800383c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003792:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800379c:	e04d      	b.n	800383a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a4:	d141      	bne.n	800382a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037a6:	4b28      	ldr	r3, [pc, #160]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b2:	d131      	bne.n	8003818 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ba:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2232      	movs	r2, #50	; 0x32
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	0c9b      	lsrs	r3, r3, #18
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ea:	e002      	b.n	80037f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fe:	d102      	bne.n	8003806 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f2      	bne.n	80037ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003812:	d112      	bne.n	800383a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e011      	b.n	800383c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003828:	e007      	b.n	800383a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003832:	4a05      	ldr	r2, [pc, #20]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003838:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40007000 	.word	0x40007000
 800384c:	20000000 	.word	0x20000000
 8003850:	431bde83 	.word	0x431bde83

08003854 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a04      	ldr	r2, [pc, #16]	; (8003870 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800385e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003862:	6093      	str	r3, [r2, #8]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40007000 	.word	0x40007000

08003874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e306      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b97      	ldr	r3, [pc, #604]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389c:	4b94      	ldr	r3, [pc, #592]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3e>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_OscConfig+0x44>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b8d      	ldr	r3, [pc, #564]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05b      	beq.n	800397c <HAL_RCC_OscConfig+0x108>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d157      	bne.n	800397c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e2e1      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x74>
 80038da:	4b85      	ldr	r3, [pc, #532]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a84      	ldr	r2, [pc, #528]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b7f      	ldr	r3, [pc, #508]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7e      	ldr	r2, [pc, #504]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b7c      	ldr	r3, [pc, #496]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7b      	ldr	r2, [pc, #492]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 800390c:	4b78      	ldr	r3, [pc, #480]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a77      	ldr	r2, [pc, #476]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b75      	ldr	r3, [pc, #468]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a74      	ldr	r2, [pc, #464]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe fcb8 	bl	80022a0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003934:	f7fe fcb4 	bl	80022a0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e2a6      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003946:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xc0>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe fca4 	bl	80022a0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800395c:	f7fe fca0 	bl	80022a0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e292      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396e:	4b60      	ldr	r3, [pc, #384]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0xe8>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d075      	beq.n	8003a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398a:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003994:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b0c      	cmp	r3, #12
 80039a2:	d102      	bne.n	80039aa <HAL_RCC_OscConfig+0x136>
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_OscConfig+0x13c>
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d11f      	bne.n	80039f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b0:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_OscConfig+0x154>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e265      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	4946      	ldr	r1, [pc, #280]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <HAL_RCC_OscConfig+0x280>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe f999 	bl	8001d18 <HAL_InitTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d043      	beq.n	8003a74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e251      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d023      	beq.n	8003a40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a3c      	ldr	r2, [pc, #240]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe fc4c 	bl	80022a0 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0c:	f7fe fc48 	bl	80022a0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e23a      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a1e:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	061b      	lsls	r3, r3, #24
 8003a38:	492d      	ldr	r1, [pc, #180]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
 8003a3e:	e01a      	b.n	8003a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fc28 	bl	80022a0 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fc24 	bl	80022a0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e216      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a66:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x1e0>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d041      	beq.n	8003b06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fc01 	bl	80022a0 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fe fbfd 	bl	80022a0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e1ef      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ef      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x22e>
 8003ac2:	e020      	b.n	8003b06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aca:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <HAL_RCC_OscConfig+0x27c>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fbe4 	bl	80022a0 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ada:	e00d      	b.n	8003af8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fe fbe0 	bl	80022a0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d906      	bls.n	8003af8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e1d2      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af8:	4b8c      	ldr	r3, [pc, #560]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1ea      	bne.n	8003adc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80a6 	beq.w	8003c60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b14:	2300      	movs	r3, #0
 8003b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b18:	4b84      	ldr	r3, [pc, #528]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x2b4>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x2b6>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b7f      	ldr	r3, [pc, #508]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	4a7e      	ldr	r2, [pc, #504]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3a:	4b7c      	ldr	r3, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4a:	4b79      	ldr	r3, [pc, #484]	; (8003d30 <HAL_RCC_OscConfig+0x4bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b56:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <HAL_RCC_OscConfig+0x4bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a75      	ldr	r2, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0x4bc>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fb9d 	bl	80022a0 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fe fb99 	bl	80022a0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e18b      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCC_OscConfig+0x4bc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d108      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x32e>
 8003b90:	4b66      	ldr	r3, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba0:	e024      	b.n	8003bec <HAL_RCC_OscConfig+0x378>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d110      	bne.n	8003bcc <HAL_RCC_OscConfig+0x358>
 8003baa:	4b60      	ldr	r3, [pc, #384]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	4a5e      	ldr	r2, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x378>
 8003bcc:	4b57      	ldr	r3, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	4a56      	ldr	r2, [pc, #344]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	4a52      	ldr	r2, [pc, #328]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d016      	beq.n	8003c22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fe fb54 	bl	80022a0 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fe fb50 	bl	80022a0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e140      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c12:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ed      	beq.n	8003bfc <HAL_RCC_OscConfig+0x388>
 8003c20:	e015      	b.n	8003c4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fe fb3d 	bl	80022a0 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fe fb39 	bl	80022a0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e129      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ed      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c4e:	7ffb      	ldrb	r3, [r7, #31]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c54:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4a34      	ldr	r2, [pc, #208]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01c      	beq.n	8003cae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c74:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c7a:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fe fb0c 	bl	80022a0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c8c:	f7fe fb08 	bl	80022a0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0fa      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ef      	beq.n	8003c8c <HAL_RCC_OscConfig+0x418>
 8003cac:	e01b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cae:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe faef 	bl	80022a0 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cc6:	f7fe faeb 	bl	80022a0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0dd      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ef      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80d1 	beq.w	8003e92 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	f000 808b 	beq.w	8003e14 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d15e      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fe fac5 	bl	80022a0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	e00c      	b.n	8003d34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe fac1 	bl	80022a0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d905      	bls.n	8003d34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e0b3      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ec      	bne.n	8003d1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d40:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	4b56      	ldr	r3, [pc, #344]	; (8003ea0 <HAL_RCC_OscConfig+0x62c>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6a11      	ldr	r1, [r2, #32]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d50:	3a01      	subs	r2, #1
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	4311      	orrs	r1, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d5a:	0212      	lsls	r2, r2, #8
 8003d5c:	4311      	orrs	r1, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d62:	0852      	lsrs	r2, r2, #1
 8003d64:	3a01      	subs	r2, #1
 8003d66:	0552      	lsls	r2, r2, #21
 8003d68:	4311      	orrs	r1, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d6e:	0852      	lsrs	r2, r2, #1
 8003d70:	3a01      	subs	r2, #1
 8003d72:	0652      	lsls	r2, r2, #25
 8003d74:	4311      	orrs	r1, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d7a:	06d2      	lsls	r2, r2, #27
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	4947      	ldr	r1, [pc, #284]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d84:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a44      	ldr	r2, [pc, #272]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d90:	4b42      	ldr	r3, [pc, #264]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a41      	ldr	r2, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fa80 	bl	80022a0 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe fa7c 	bl	80022a0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e06e      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db6:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x530>
 8003dc2:	e066      	b.n	8003e92 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc4:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ddc:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003de2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe fa58 	bl	80022a0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fe fa54 	bl	80022a0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e046      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x580>
 8003e12:	e03e      	b.n	8003e92 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e039      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <HAL_RCC_OscConfig+0x628>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d12c      	bne.n	8003e8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d123      	bne.n	8003e8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d11b      	bne.n	8003e8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d113      	bne.n	8003e8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	3b01      	subs	r3, #1
 8003e88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	019f800c 	.word	0x019f800c

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e11e      	b.n	80040fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b91      	ldr	r3, [pc, #580]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b8e      	ldr	r3, [pc, #568]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 020f 	bic.w	r2, r3, #15
 8003ed2:	498c      	ldr	r1, [pc, #560]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b8a      	ldr	r3, [pc, #552]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e106      	b.n	80040fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d073      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d129      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f00:	4b81      	ldr	r3, [pc, #516]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0f4      	b.n	80040fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f10:	f000 f9d0 	bl	80042b4 <RCC_GetSysClockFreqFromPLLSource>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4a7c      	ldr	r2, [pc, #496]	; (800410c <HAL_RCC_ClockConfig+0x268>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d93f      	bls.n	8003f9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f1e:	4b7a      	ldr	r3, [pc, #488]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d033      	beq.n	8003f9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d12f      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f3e:	4b72      	ldr	r3, [pc, #456]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f46:	4a70      	ldr	r2, [pc, #448]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e024      	b.n	8003f9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0c6      	b.n	80040fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0be      	b.n	80040fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f7c:	f000 f8ce 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4a61      	ldr	r2, [pc, #388]	; (800410c <HAL_RCC_ClockConfig+0x268>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d909      	bls.n	8003f9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f92:	4a5d      	ldr	r2, [pc, #372]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f9e:	4b5a      	ldr	r3, [pc, #360]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4957      	ldr	r1, [pc, #348]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb0:	f7fe f976 	bl	80022a0 <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fe f972 	bl	80022a0 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e095      	b.n	80040fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 020c 	and.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d023      	beq.n	8004034 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a42      	ldr	r2, [pc, #264]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8003ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004002:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004010:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004018:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 800401a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800401e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4936      	ldr	r1, [pc, #216]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
 8004032:	e008      	b.n	8004046 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b80      	cmp	r3, #128	; 0x80
 8004038:	d105      	bne.n	8004046 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800403a:	4b33      	ldr	r3, [pc, #204]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4a32      	ldr	r2, [pc, #200]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 8004040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004044:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004046:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d21d      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 020f 	bic.w	r2, r3, #15
 800405c:	4929      	ldr	r1, [pc, #164]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004064:	f7fe f91c 	bl	80022a0 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406c:	f7fe f918 	bl	80022a0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e03b      	b.n	80040fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCC_ClockConfig+0x260>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d1ed      	bne.n	800406c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4917      	ldr	r1, [pc, #92]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	490f      	ldr	r1, [pc, #60]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ce:	f000 f825 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040d2:	4602      	mov	r2, r0
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCC_ClockConfig+0x264>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	490c      	ldr	r1, [pc, #48]	; (8004110 <HAL_RCC_ClockConfig+0x26c>)
 80040e0:	5ccb      	ldrb	r3, [r1, r3]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x270>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x274>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fe10 	bl	8001d18 <HAL_InitTick>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40022000 	.word	0x40022000
 8004108:	40021000 	.word	0x40021000
 800410c:	04c4b400 	.word	0x04c4b400
 8004110:	0800e87c 	.word	0x0800e87c
 8004114:	20000000 	.word	0x20000000
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b04      	cmp	r3, #4
 800412c:	d102      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800412e:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	e047      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004134:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d102      	bne.n	8004146 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004140:	4b26      	ldr	r3, [pc, #152]	; (80041dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e03e      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004146:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b0c      	cmp	r3, #12
 8004150:	d136      	bne.n	80041c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004152:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3301      	adds	r3, #1
 8004168:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d10c      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004170:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800417a:	68d2      	ldr	r2, [r2, #12]
 800417c:	0a12      	lsrs	r2, r2, #8
 800417e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	617b      	str	r3, [r7, #20]
      break;
 8004188:	e00c      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418a:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004194:	68d2      	ldr	r2, [r2, #12]
 8004196:	0a12      	lsrs	r2, r2, #8
 8004198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
      break;
 80041a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0e5b      	lsrs	r3, r3, #25
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e001      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041c4:	693b      	ldr	r3, [r7, #16]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	016e3600 	.word	0x016e3600

080041e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000000 	.word	0x20000000

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041fc:	f7ff fff0 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4904      	ldr	r1, [pc, #16]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	0800e88c 	.word	0x0800e88c

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004228:	f7ff ffda 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0adb      	lsrs	r3, r3, #11
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4904      	ldr	r1, [pc, #16]	; (800424c <HAL_RCC_GetPCLK2Freq+0x28>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	0800e88c 	.word	0x0800e88c

08004250 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	220f      	movs	r2, #15
 800425e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_RCC_GetClockConfig+0x60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40022000 	.word	0x40022000

080042b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ba:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d10c      	bne.n	80042f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042e2:	68d2      	ldr	r2, [r2, #12]
 80042e4:	0a12      	lsrs	r2, r2, #8
 80042e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	617b      	str	r3, [r7, #20]
    break;
 80042f0:	e00c      	b.n	800430c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	0a12      	lsrs	r2, r2, #8
 8004300:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]
    break;
 800430a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0e5b      	lsrs	r3, r3, #25
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004326:	687b      	ldr	r3, [r7, #4]
}
 8004328:	4618      	mov	r0, r3
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40021000 	.word	0x40021000
 8004338:	016e3600 	.word	0x016e3600
 800433c:	00f42400 	.word	0x00f42400

08004340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004348:	2300      	movs	r3, #0
 800434a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800434c:	2300      	movs	r3, #0
 800434e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8098 	beq.w	800448e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435e:	2300      	movs	r3, #0
 8004360:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b40      	ldr	r3, [pc, #256]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	4a3f      	ldr	r2, [pc, #252]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
 800437a:	4b3d      	ldr	r3, [pc, #244]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004386:	2301      	movs	r3, #1
 8004388:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800438a:	4b3a      	ldr	r3, [pc, #232]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a39      	ldr	r2, [pc, #228]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004396:	f7fd ff83 	bl	80022a0 <HAL_GetTick>
 800439a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800439c:	e009      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439e:	f7fd ff7f 	bl	80022a0 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d902      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	74fb      	strb	r3, [r7, #19]
        break;
 80043b0:	e005      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043b2:	4b30      	ldr	r3, [pc, #192]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ef      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d159      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01e      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d019      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ec:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fd ff3f 	bl	80022a0 <HAL_GetTick>
 8004422:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004424:	e00b      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fd ff3b 	bl	80022a0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d902      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	74fb      	strb	r3, [r7, #19]
            break;
 800443c:	e006      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ec      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004468:	e008      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	74bb      	strb	r3, [r7, #18]
 800446e:	e005      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004470:	40021000 	.word	0x40021000
 8004474:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800447c:	7c7b      	ldrb	r3, [r7, #17]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d105      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004482:	4ba7      	ldr	r3, [pc, #668]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	4aa6      	ldr	r2, [pc, #664]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800449a:	4ba1      	ldr	r3, [pc, #644]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f023 0203 	bic.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	499d      	ldr	r1, [pc, #628]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044bc:	4b98      	ldr	r3, [pc, #608]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f023 020c 	bic.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4995      	ldr	r1, [pc, #596]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044de:	4b90      	ldr	r3, [pc, #576]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	498c      	ldr	r1, [pc, #560]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004500:	4b87      	ldr	r3, [pc, #540]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	4984      	ldr	r1, [pc, #528]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004522:	4b7f      	ldr	r3, [pc, #508]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	497b      	ldr	r1, [pc, #492]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004544:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	4973      	ldr	r1, [pc, #460]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004566:	4b6e      	ldr	r3, [pc, #440]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	496a      	ldr	r1, [pc, #424]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004588:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4962      	ldr	r1, [pc, #392]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045aa:	4b5d      	ldr	r3, [pc, #372]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	4959      	ldr	r1, [pc, #356]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045cc:	4b54      	ldr	r3, [pc, #336]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	4951      	ldr	r1, [pc, #324]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ee:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4948      	ldr	r1, [pc, #288]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004610:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4940      	ldr	r1, [pc, #256]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462e:	d105      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004630:	4b3b      	ldr	r3, [pc, #236]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a3a      	ldr	r2, [pc, #232]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	4932      	ldr	r1, [pc, #200]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004666:	d105      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004668:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004672:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d015      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004680:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	4924      	ldr	r1, [pc, #144]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800469e:	d105      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a0:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d015      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	4916      	ldr	r1, [pc, #88]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d6:	d105      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d019      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4908      	ldr	r1, [pc, #32]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470e:	d109      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a02      	ldr	r2, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471a:	60d3      	str	r3, [r2, #12]
 800471c:	e002      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	4926      	ldr	r1, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800474e:	d105      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a20      	ldr	r2, [pc, #128]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004776:	4918      	ldr	r1, [pc, #96]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d105      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004788:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004792:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d015      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	490a      	ldr	r1, [pc, #40]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047be:	d105      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000

080047dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e049      	b.n	8004882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd fc26 	bl	8002054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f000 fa84 	bl	8004d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e054      	b.n	800494e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <HAL_TIM_Base_Start_IT+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d022      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d01d      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <HAL_TIM_Base_Start_IT+0xd4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a21      	ldr	r2, [pc, #132]	; (8004964 <HAL_TIM_Base_Start_IT+0xd8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <HAL_TIM_Base_Start_IT+0xdc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00e      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_TIM_Base_Start_IT+0xe0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <HAL_TIM_Base_Start_IT+0xe4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <HAL_TIM_Base_Start_IT+0xe8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d115      	bne.n	8004938 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_TIM_Base_Start_IT+0xec>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b06      	cmp	r3, #6
 800491c:	d015      	beq.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d011      	beq.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	e008      	b.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e000      	b.n	800494c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40013400 	.word	0x40013400
 8004970:	40014000 	.word	0x40014000
 8004974:	40015000 	.word	0x40015000
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6a1a      	ldr	r2, [r3, #32]
 800499a:	f241 1311 	movw	r3, #4369	; 0x1111
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10f      	bne.n	80049c4 <HAL_TIM_Base_Stop_IT+0x48>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	f244 4344 	movw	r3, #17476	; 0x4444
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_Base_Stop_IT+0x48>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d122      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d11b      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0202 	mvn.w	r2, #2
 8004a06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f965 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004a22:	e005      	b.n	8004a30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f957 	bl	8004cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f968 	bl	8004d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d122      	bne.n	8004a8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d11b      	bne.n	8004a8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f06f 0204 	mvn.w	r2, #4
 8004a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f93b 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004a76:	e005      	b.n	8004a84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f92d 	bl	8004cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f93e 	bl	8004d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d122      	bne.n	8004ade <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d11b      	bne.n	8004ade <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f06f 0208 	mvn.w	r2, #8
 8004aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f911 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004aca:	e005      	b.n	8004ad8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f903 	bl	8004cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f914 	bl	8004d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d122      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b10      	cmp	r3, #16
 8004af8:	d11b      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0210 	mvn.w	r2, #16
 8004b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2208      	movs	r2, #8
 8004b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f8e7 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004b1e:	e005      	b.n	8004b2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8d9 	bl	8004cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8ea 	bl	8004d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10e      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f06f 0201 	mvn.w	r2, #1
 8004b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc ff87 	bl	8001a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d10e      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d107      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa17 	bl	8004fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b98:	d10e      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa0a 	bl	8004fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d10e      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f898 	bl	8004d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	d10e      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d107      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0220 	mvn.w	r2, #32
 8004c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9ca 	bl	8004fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1e:	d10f      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f9d0 	bl	8004fe0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c4e:	d10f      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c5e:	d107      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9c2 	bl	8004ff4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f9b4 	bl	8005008 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004caa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cae:	d10f      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9a6 	bl	800501c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a46      	ldr	r2, [pc, #280]	; (8004e54 <TIM_Base_SetConfig+0x12c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d017      	beq.n	8004d70 <TIM_Base_SetConfig+0x48>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d46:	d013      	beq.n	8004d70 <TIM_Base_SetConfig+0x48>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a43      	ldr	r2, [pc, #268]	; (8004e58 <TIM_Base_SetConfig+0x130>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00f      	beq.n	8004d70 <TIM_Base_SetConfig+0x48>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a42      	ldr	r2, [pc, #264]	; (8004e5c <TIM_Base_SetConfig+0x134>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <TIM_Base_SetConfig+0x48>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a41      	ldr	r2, [pc, #260]	; (8004e60 <TIM_Base_SetConfig+0x138>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d007      	beq.n	8004d70 <TIM_Base_SetConfig+0x48>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <TIM_Base_SetConfig+0x13c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_Base_SetConfig+0x48>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <TIM_Base_SetConfig+0x140>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d108      	bne.n	8004d82 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a33      	ldr	r2, [pc, #204]	; (8004e54 <TIM_Base_SetConfig+0x12c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d023      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d01f      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a30      	ldr	r2, [pc, #192]	; (8004e58 <TIM_Base_SetConfig+0x130>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01b      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <TIM_Base_SetConfig+0x134>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d017      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2e      	ldr	r2, [pc, #184]	; (8004e60 <TIM_Base_SetConfig+0x138>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <TIM_Base_SetConfig+0x13c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <TIM_Base_SetConfig+0x144>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <TIM_Base_SetConfig+0x148>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <TIM_Base_SetConfig+0x14c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_Base_SetConfig+0xaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <TIM_Base_SetConfig+0x140>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d108      	bne.n	8004de4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <TIM_Base_SetConfig+0x12c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <TIM_Base_SetConfig+0x110>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a14      	ldr	r2, [pc, #80]	; (8004e64 <TIM_Base_SetConfig+0x13c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00f      	beq.n	8004e38 <TIM_Base_SetConfig+0x110>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <TIM_Base_SetConfig+0x144>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x110>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <TIM_Base_SetConfig+0x148>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x110>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <TIM_Base_SetConfig+0x14c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x110>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <TIM_Base_SetConfig+0x140>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d103      	bne.n	8004e40 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	615a      	str	r2, [r3, #20]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40015000 	.word	0x40015000
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800

08004e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e074      	b.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a33      	ldr	r2, [pc, #204]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a31      	ldr	r2, [pc, #196]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ed4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a21      	ldr	r2, [pc, #132]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d01d      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10c      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40012c00 	.word	0x40012c00
 8004f8c:	40013400 	.word	0x40013400
 8004f90:	40015000 	.word	0x40015000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40014000 	.word	0x40014000

08004fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e042      	b.n	80050c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fd f86f 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2224      	movs	r2, #36	; 0x24
 800505e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fc0c 	bl	8005890 <UART_SetConfig>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e022      	b.n	80050c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fefc 	bl	8005e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800509e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 ff83 	bl	8005fcc <UART_CheckIdleState>
 80050c6:	4603      	mov	r3, r0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b091      	sub	sp, #68	; 0x44
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	f040 808c 	bne.w	8005202 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_UART_Transmit_IT+0x26>
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e084      	b.n	8005204 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UART_Transmit_IT+0x38>
 8005104:	2302      	movs	r3, #2
 8005106:	e07d      	b.n	8005204 <HAL_UART_Transmit_IT+0x134>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2221      	movs	r2, #33	; 0x21
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005144:	d12e      	bne.n	80051a4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514e:	d107      	bne.n	8005160 <HAL_UART_Transmit_IT+0x90>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <HAL_UART_Transmit_IT+0x140>)
 800515c:	675a      	str	r2, [r3, #116]	; 0x74
 800515e:	e002      	b.n	8005166 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <HAL_UART_Transmit_IT+0x144>)
 8005164:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800518e:	637a      	str	r2, [r7, #52]	; 0x34
 8005190:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <HAL_UART_Transmit_IT+0x9e>
 80051a2:	e02c      	b.n	80051fe <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d107      	bne.n	80051be <HAL_UART_Transmit_IT+0xee>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_UART_Transmit_IT+0x148>)
 80051ba:	675a      	str	r2, [r3, #116]	; 0x74
 80051bc:	e002      	b.n	80051c4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a16      	ldr	r2, [pc, #88]	; (800521c <HAL_UART_Transmit_IT+0x14c>)
 80051c2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	613b      	str	r3, [r7, #16]
   return(result);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ea:	623b      	str	r3, [r7, #32]
 80051ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	69f9      	ldr	r1, [r7, #28]
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e000      	b.n	8005204 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3744      	adds	r7, #68	; 0x44
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	08006545 	.word	0x08006545
 8005214:	08006465 	.word	0x08006465
 8005218:	080063a3 	.word	0x080063a3
 800521c:	080062eb 	.word	0x080062eb

08005220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b0ba      	sub	sp, #232	; 0xe8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800524a:	f640 030f 	movw	r3, #2063	; 0x80f
 800524e:	4013      	ands	r3, r2
 8005250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d11b      	bne.n	8005294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800525c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d015      	beq.n	8005294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 82d6 	beq.w	8005836 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
      }
      return;
 8005292:	e2d0      	b.n	8005836 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 811f 	beq.w	80054dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800529e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052a2:	4b8b      	ldr	r3, [pc, #556]	; (80054d0 <HAL_UART_IRQHandler+0x2b0>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052ae:	4b89      	ldr	r3, [pc, #548]	; (80054d4 <HAL_UART_IRQHandler+0x2b4>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8112 	beq.w	80054dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <HAL_UART_IRQHandler+0xc8>
 80052c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d011      	beq.n	8005318 <HAL_UART_IRQHandler+0xf8>
 80052f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2202      	movs	r2, #2
 8005306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530e:	f043 0204 	orr.w	r2, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d011      	beq.n	8005348 <HAL_UART_IRQHandler+0x128>
 8005324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00b      	beq.n	8005348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2204      	movs	r2, #4
 8005336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800533e:	f043 0202 	orr.w	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d017      	beq.n	8005384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005364:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <HAL_UART_IRQHandler+0x2b0>)
 8005366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2208      	movs	r2, #8
 8005372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537a:	f043 0208 	orr.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538c:	2b00      	cmp	r3, #0
 800538e:	d012      	beq.n	80053b6 <HAL_UART_IRQHandler+0x196>
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00c      	beq.n	80053b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 823c 	beq.w	800583a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d013      	beq.n	80053f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d005      	beq.n	800541a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800540e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005416:	2b00      	cmp	r3, #0
 8005418:	d04f      	beq.n	80054ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fee9 	bl	80061f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d141      	bne.n	80054b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800545a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800545e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1d9      	bne.n	800542e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_UART_IRQHandler+0x2b8>)
 8005488:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd f86d 	bl	800256e <HAL_DMA_Abort_IT>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d017      	beq.n	80054ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80054a4:	4610      	mov	r0, r2
 80054a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e00f      	b.n	80054ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f9da 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	e00b      	b.n	80054ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9d6 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	e007      	b.n	80054ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f9d2 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80054c8:	e1b7      	b.n	800583a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ca:	bf00      	nop
    return;
 80054cc:	e1b5      	b.n	800583a <HAL_UART_IRQHandler+0x61a>
 80054ce:	bf00      	nop
 80054d0:	10000001 	.word	0x10000001
 80054d4:	04000120 	.word	0x04000120
 80054d8:	080062bf 	.word	0x080062bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	f040 814a 	bne.w	800577a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8143 	beq.w	800577a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 813c 	beq.w	800577a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2210      	movs	r2, #16
 8005508:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	f040 80b5 	bne.w	8005684 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005526:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8187 	beq.w	800583e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800553a:	429a      	cmp	r2, r3
 800553c:	f080 817f 	bcs.w	800583e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005546:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 8086 	bne.w	8005668 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800558a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800559e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1da      	bne.n	800555c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3308      	adds	r3, #8
 80055c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e1      	bne.n	80055a6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005608:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800560c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e3      	bne.n	80055e2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005638:	f023 0310 	bic.w	r3, r3, #16
 800563c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800564a:	65bb      	str	r3, [r7, #88]	; 0x58
 800564c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e4      	bne.n	8005628 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc ff2a 	bl	80024bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005674:	b29b      	uxth	r3, r3
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	b29b      	uxth	r3, r3
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8fb 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005682:	e0dc      	b.n	800583e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005690:	b29b      	uxth	r3, r3
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80ce 	beq.w	8005842 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80056a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80c9 	beq.w	8005842 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056d2:	647b      	str	r3, [r7, #68]	; 0x44
 80056d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e4      	bne.n	80056b0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	623b      	str	r3, [r7, #32]
   return(result);
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800570e:	633a      	str	r2, [r7, #48]	; 0x30
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e1      	bne.n	80056e6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	60fb      	str	r3, [r7, #12]
   return(result);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0310 	bic.w	r3, r3, #16
 800574a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	617b      	str	r3, [r7, #20]
   return(result);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e4      	bne.n	8005736 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800576c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f880 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005778:	e063      	b.n	8005842 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <HAL_UART_IRQHandler+0x584>
 8005786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800579a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 ff71 	bl	8006684 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057a2:	e051      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d014      	beq.n	80057da <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03a      	beq.n	8005846 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
    }
    return;
 80057d8:	e035      	b.n	8005846 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_UART_IRQHandler+0x5da>
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 ff1b 	bl	800662e <UART_EndTransmit_IT>
    return;
 80057f8:	e026      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_UART_IRQHandler+0x5fa>
 8005806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800580a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 ff4a 	bl	80066ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005818:	e016      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <HAL_UART_IRQHandler+0x628>
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582a:	2b00      	cmp	r3, #0
 800582c:	da0c      	bge.n	8005848 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 ff32 	bl	8006698 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005834:	e008      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
      return;
 8005836:	bf00      	nop
 8005838:	e006      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
    return;
 800583a:	bf00      	nop
 800583c:	e004      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
      return;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
      return;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <HAL_UART_IRQHandler+0x628>
    return;
 8005846:	bf00      	nop
  }
}
 8005848:	37e8      	adds	r7, #232	; 0xe8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop

08005850 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005894:	b08c      	sub	sp, #48	; 0x30
 8005896:	af00      	add	r7, sp, #0
 8005898:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4baa      	ldr	r3, [pc, #680]	; (8005b68 <UART_SetConfig+0x2d8>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a9f      	ldr	r2, [pc, #636]	; (8005b6c <UART_SetConfig+0x2dc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f8:	4313      	orrs	r3, r2
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005906:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005910:	430b      	orrs	r3, r1
 8005912:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	f023 010f 	bic.w	r1, r3, #15
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a90      	ldr	r2, [pc, #576]	; (8005b70 <UART_SetConfig+0x2e0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d125      	bne.n	8005980 <UART_SetConfig+0xf0>
 8005934:	4b8f      	ldr	r3, [pc, #572]	; (8005b74 <UART_SetConfig+0x2e4>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b03      	cmp	r3, #3
 8005940:	d81a      	bhi.n	8005978 <UART_SetConfig+0xe8>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0xb8>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005959 	.word	0x08005959
 800594c:	08005969 	.word	0x08005969
 8005950:	08005961 	.word	0x08005961
 8005954:	08005971 	.word	0x08005971
 8005958:	2301      	movs	r3, #1
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595e:	e116      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005960:	2302      	movs	r3, #2
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e112      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005968:	2304      	movs	r3, #4
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e10e      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005970:	2308      	movs	r3, #8
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e10a      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005978:	2310      	movs	r3, #16
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597e:	e106      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a7c      	ldr	r2, [pc, #496]	; (8005b78 <UART_SetConfig+0x2e8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d138      	bne.n	80059fc <UART_SetConfig+0x16c>
 800598a:	4b7a      	ldr	r3, [pc, #488]	; (8005b74 <UART_SetConfig+0x2e4>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f003 030c 	and.w	r3, r3, #12
 8005994:	2b0c      	cmp	r3, #12
 8005996:	d82d      	bhi.n	80059f4 <UART_SetConfig+0x164>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0x110>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059d5 	.word	0x080059d5
 80059a4:	080059f5 	.word	0x080059f5
 80059a8:	080059f5 	.word	0x080059f5
 80059ac:	080059f5 	.word	0x080059f5
 80059b0:	080059e5 	.word	0x080059e5
 80059b4:	080059f5 	.word	0x080059f5
 80059b8:	080059f5 	.word	0x080059f5
 80059bc:	080059f5 	.word	0x080059f5
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	080059f5 	.word	0x080059f5
 80059c8:	080059f5 	.word	0x080059f5
 80059cc:	080059f5 	.word	0x080059f5
 80059d0:	080059ed 	.word	0x080059ed
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e0d8      	b.n	8005b8e <UART_SetConfig+0x2fe>
 80059dc:	2302      	movs	r3, #2
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e0d4      	b.n	8005b8e <UART_SetConfig+0x2fe>
 80059e4:	2304      	movs	r3, #4
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e0d0      	b.n	8005b8e <UART_SetConfig+0x2fe>
 80059ec:	2308      	movs	r3, #8
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e0cc      	b.n	8005b8e <UART_SetConfig+0x2fe>
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fa:	e0c8      	b.n	8005b8e <UART_SetConfig+0x2fe>
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a5e      	ldr	r2, [pc, #376]	; (8005b7c <UART_SetConfig+0x2ec>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d125      	bne.n	8005a52 <UART_SetConfig+0x1c2>
 8005a06:	4b5b      	ldr	r3, [pc, #364]	; (8005b74 <UART_SetConfig+0x2e4>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d016      	beq.n	8005a42 <UART_SetConfig+0x1b2>
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d818      	bhi.n	8005a4a <UART_SetConfig+0x1ba>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d00a      	beq.n	8005a32 <UART_SetConfig+0x1a2>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d814      	bhi.n	8005a4a <UART_SetConfig+0x1ba>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <UART_SetConfig+0x19a>
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d008      	beq.n	8005a3a <UART_SetConfig+0x1aa>
 8005a28:	e00f      	b.n	8005a4a <UART_SetConfig+0x1ba>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a30:	e0ad      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a32:	2302      	movs	r3, #2
 8005a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a38:	e0a9      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a40:	e0a5      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a42:	2308      	movs	r3, #8
 8005a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a48:	e0a1      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a50:	e09d      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a4a      	ldr	r2, [pc, #296]	; (8005b80 <UART_SetConfig+0x2f0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d125      	bne.n	8005aa8 <UART_SetConfig+0x218>
 8005a5c:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <UART_SetConfig+0x2e4>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a66:	2bc0      	cmp	r3, #192	; 0xc0
 8005a68:	d016      	beq.n	8005a98 <UART_SetConfig+0x208>
 8005a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a6c:	d818      	bhi.n	8005aa0 <UART_SetConfig+0x210>
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d00a      	beq.n	8005a88 <UART_SetConfig+0x1f8>
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d814      	bhi.n	8005aa0 <UART_SetConfig+0x210>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <UART_SetConfig+0x1f0>
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d008      	beq.n	8005a90 <UART_SetConfig+0x200>
 8005a7e:	e00f      	b.n	8005aa0 <UART_SetConfig+0x210>
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e082      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e07e      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a96:	e07a      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e076      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	e072      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a35      	ldr	r2, [pc, #212]	; (8005b84 <UART_SetConfig+0x2f4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d12a      	bne.n	8005b08 <UART_SetConfig+0x278>
 8005ab2:	4b30      	ldr	r3, [pc, #192]	; (8005b74 <UART_SetConfig+0x2e4>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac0:	d01a      	beq.n	8005af8 <UART_SetConfig+0x268>
 8005ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac6:	d81b      	bhi.n	8005b00 <UART_SetConfig+0x270>
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d00c      	beq.n	8005ae8 <UART_SetConfig+0x258>
 8005ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad2:	d815      	bhi.n	8005b00 <UART_SetConfig+0x270>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <UART_SetConfig+0x250>
 8005ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005adc:	d008      	beq.n	8005af0 <UART_SetConfig+0x260>
 8005ade:	e00f      	b.n	8005b00 <UART_SetConfig+0x270>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ae6:	e052      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aee:	e04e      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af6:	e04a      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005af8:	2308      	movs	r3, #8
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afe:	e046      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b06:	e042      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <UART_SetConfig+0x2dc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d13a      	bne.n	8005b88 <UART_SetConfig+0x2f8>
 8005b12:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <UART_SetConfig+0x2e4>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b20:	d01a      	beq.n	8005b58 <UART_SetConfig+0x2c8>
 8005b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b26:	d81b      	bhi.n	8005b60 <UART_SetConfig+0x2d0>
 8005b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2c:	d00c      	beq.n	8005b48 <UART_SetConfig+0x2b8>
 8005b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b32:	d815      	bhi.n	8005b60 <UART_SetConfig+0x2d0>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <UART_SetConfig+0x2b0>
 8005b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3c:	d008      	beq.n	8005b50 <UART_SetConfig+0x2c0>
 8005b3e:	e00f      	b.n	8005b60 <UART_SetConfig+0x2d0>
 8005b40:	2300      	movs	r3, #0
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b46:	e022      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b4e:	e01e      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005b50:	2304      	movs	r3, #4
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b56:	e01a      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5e:	e016      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005b60:	2310      	movs	r3, #16
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b66:	e012      	b.n	8005b8e <UART_SetConfig+0x2fe>
 8005b68:	cfff69f3 	.word	0xcfff69f3
 8005b6c:	40008000 	.word	0x40008000
 8005b70:	40013800 	.word	0x40013800
 8005b74:	40021000 	.word	0x40021000
 8005b78:	40004400 	.word	0x40004400
 8005b7c:	40004800 	.word	0x40004800
 8005b80:	40004c00 	.word	0x40004c00
 8005b84:	40005000 	.word	0x40005000
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4aae      	ldr	r2, [pc, #696]	; (8005e4c <UART_SetConfig+0x5bc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	f040 8097 	bne.w	8005cc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d823      	bhi.n	8005bea <UART_SetConfig+0x35a>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <UART_SetConfig+0x318>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005beb 	.word	0x08005beb
 8005bb0:	08005bd5 	.word	0x08005bd5
 8005bb4:	08005beb 	.word	0x08005beb
 8005bb8:	08005bdb 	.word	0x08005bdb
 8005bbc:	08005beb 	.word	0x08005beb
 8005bc0:	08005beb 	.word	0x08005beb
 8005bc4:	08005beb 	.word	0x08005beb
 8005bc8:	08005be3 	.word	0x08005be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7fe fb14 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8005bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bd2:	e010      	b.n	8005bf6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd4:	4b9e      	ldr	r3, [pc, #632]	; (8005e50 <UART_SetConfig+0x5c0>)
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bd8:	e00d      	b.n	8005bf6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bda:	f7fe fa9f 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005bde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005be0:	e009      	b.n	8005bf6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005be8:	e005      	b.n	8005bf6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8130 	beq.w	8005e5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	4a94      	ldr	r2, [pc, #592]	; (8005e54 <UART_SetConfig+0x5c4>)
 8005c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d305      	bcc.n	8005c2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d903      	bls.n	8005c36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c34:	e113      	b.n	8005e5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	2200      	movs	r2, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	60fa      	str	r2, [r7, #12]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	4a84      	ldr	r2, [pc, #528]	; (8005e54 <UART_SetConfig+0x5c4>)
 8005c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c58:	f7fb f81e 	bl	8000c98 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	020b      	lsls	r3, r1, #8
 8005c6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c72:	0202      	lsls	r2, r0, #8
 8005c74:	6979      	ldr	r1, [r7, #20]
 8005c76:	6849      	ldr	r1, [r1, #4]
 8005c78:	0849      	lsrs	r1, r1, #1
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	4605      	mov	r5, r0
 8005c80:	eb12 0804 	adds.w	r8, r2, r4
 8005c84:	eb43 0905 	adc.w	r9, r3, r5
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	469a      	mov	sl, r3
 8005c90:	4693      	mov	fp, r2
 8005c92:	4652      	mov	r2, sl
 8005c94:	465b      	mov	r3, fp
 8005c96:	4640      	mov	r0, r8
 8005c98:	4649      	mov	r1, r9
 8005c9a:	f7fa fffd 	bl	8000c98 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cac:	d308      	bcc.n	8005cc0 <UART_SetConfig+0x430>
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb4:	d204      	bcs.n	8005cc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a3a      	ldr	r2, [r7, #32]
 8005cbc:	60da      	str	r2, [r3, #12]
 8005cbe:	e0ce      	b.n	8005e5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cc6:	e0ca      	b.n	8005e5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd0:	d166      	bne.n	8005da0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d827      	bhi.n	8005d2a <UART_SetConfig+0x49a>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x450>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	08005d2b 	.word	0x08005d2b
 8005cf0:	08005d1b 	.word	0x08005d1b
 8005cf4:	08005d2b 	.word	0x08005d2b
 8005cf8:	08005d2b 	.word	0x08005d2b
 8005cfc:	08005d2b 	.word	0x08005d2b
 8005d00:	08005d23 	.word	0x08005d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fe fa78 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8005d08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d0a:	e014      	b.n	8005d36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d0c:	f7fe fa8a 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8005d10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d12:	e010      	b.n	8005d36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b4e      	ldr	r3, [pc, #312]	; (8005e50 <UART_SetConfig+0x5c0>)
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d18:	e00d      	b.n	8005d36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fe f9ff 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d20:	e009      	b.n	8005d36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d28:	e005      	b.n	8005d36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8090 	beq.w	8005e5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	4a44      	ldr	r2, [pc, #272]	; (8005e54 <UART_SetConfig+0x5c4>)
 8005d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d50:	005a      	lsls	r2, r3, #1
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	441a      	add	r2, r3
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b0f      	cmp	r3, #15
 8005d68:	d916      	bls.n	8005d98 <UART_SetConfig+0x508>
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d70:	d212      	bcs.n	8005d98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f023 030f 	bic.w	r3, r3, #15
 8005d7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	8bfb      	ldrh	r3, [r7, #30]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	8bfa      	ldrh	r2, [r7, #30]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	e062      	b.n	8005e5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d9e:	e05e      	b.n	8005e5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005da0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d828      	bhi.n	8005dfa <UART_SetConfig+0x56a>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x520>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005ddd 	.word	0x08005ddd
 8005db8:	08005de5 	.word	0x08005de5
 8005dbc:	08005dfb 	.word	0x08005dfb
 8005dc0:	08005deb 	.word	0x08005deb
 8005dc4:	08005dfb 	.word	0x08005dfb
 8005dc8:	08005dfb 	.word	0x08005dfb
 8005dcc:	08005dfb 	.word	0x08005dfb
 8005dd0:	08005df3 	.word	0x08005df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f7fe fa10 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dda:	e014      	b.n	8005e06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ddc:	f7fe fa22 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8005de0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005de2:	e010      	b.n	8005e06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de4:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <UART_SetConfig+0x5c0>)
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005de8:	e00d      	b.n	8005e06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dea:	f7fe f997 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005df0:	e009      	b.n	8005e06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005df8:	e005      	b.n	8005e06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e04:	bf00      	nop
    }

    if (pclk != 0U)
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d028      	beq.n	8005e5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <UART_SetConfig+0x5c4>)
 8005e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e16:	461a      	mov	r2, r3
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	441a      	add	r2, r3
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b0f      	cmp	r3, #15
 8005e34:	d910      	bls.n	8005e58 <UART_SetConfig+0x5c8>
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d20c      	bcs.n	8005e58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	e009      	b.n	8005e5e <UART_SetConfig+0x5ce>
 8005e4a:	bf00      	nop
 8005e4c:	40008000 	.word	0x40008000
 8005e50:	00f42400 	.word	0x00f42400
 8005e54:	0800e894 	.word	0x0800e894
      }
      else
      {
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3730      	adds	r7, #48	; 0x30
 8005e82:	46bd      	mov	sp, r7
 8005e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01a      	beq.n	8005f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f86:	d10a      	bne.n	8005f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	605a      	str	r2, [r3, #4]
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fdc:	f7fc f960 	bl	80022a0 <HAL_GetTick>
 8005fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d10e      	bne.n	800600e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f82f 	bl	8006062 <UART_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e025      	b.n	800605a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b04      	cmp	r3, #4
 800601a:	d10e      	bne.n	800603a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f819 	bl	8006062 <UART_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e00f      	b.n	800605a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b09c      	sub	sp, #112	; 0x70
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006072:	e0a9      	b.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	f000 80a5 	beq.w	80061c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607e:	f7fc f90f 	bl	80022a0 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800608a:	429a      	cmp	r2, r3
 800608c:	d302      	bcc.n	8006094 <UART_WaitOnFlagUntilTimeout+0x32>
 800608e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006090:	2b00      	cmp	r3, #0
 8006092:	d140      	bne.n	8006116 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060a8:	667b      	str	r3, [r7, #100]	; 0x64
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e6      	bne.n	8006094 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	663b      	str	r3, [r7, #96]	; 0x60
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80060e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e5      	bne.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e069      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d051      	beq.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006132:	d149      	bne.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800613c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
 800615e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e6      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	613b      	str	r3, [r7, #16]
   return(result);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	66bb      	str	r3, [r7, #104]	; 0x68
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3308      	adds	r3, #8
 800618e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006190:	623a      	str	r2, [r7, #32]
 8006192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	61bb      	str	r3, [r7, #24]
   return(result);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e5      	bne.n	8006170 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e010      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	f43f af46 	beq.w	8006074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3770      	adds	r7, #112	; 0x70
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b095      	sub	sp, #84	; 0x54
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
 800621a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800621e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	61fb      	str	r3, [r7, #28]
   return(result);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	64bb      	str	r3, [r7, #72]	; 0x48
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3308      	adds	r3, #8
 800624e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006250:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e3      	bne.n	800622c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006268:	2b01      	cmp	r3, #1
 800626a:	d118      	bne.n	800629e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	60bb      	str	r3, [r7, #8]
   return(result);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f023 0310 	bic.w	r3, r3, #16
 8006280:	647b      	str	r3, [r7, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6979      	ldr	r1, [r7, #20]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	613b      	str	r3, [r7, #16]
   return(result);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e6      	bne.n	800626c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80062b2:	bf00      	nop
 80062b4:	3754      	adds	r7, #84	; 0x54
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7ff fac1 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b08f      	sub	sp, #60	; 0x3c
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f8:	2b21      	cmp	r3, #33	; 0x21
 80062fa:	d14c      	bne.n	8006396 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d132      	bne.n	800636e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	61fb      	str	r3, [r7, #28]
   return(result);
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006328:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800632c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e6      	bne.n	8006308 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	60bb      	str	r3, [r7, #8]
   return(result);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800634e:	633b      	str	r3, [r7, #48]	; 0x30
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	613b      	str	r3, [r7, #16]
   return(result);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800636c:	e013      	b.n	8006396 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006396:	bf00      	nop
 8006398:	373c      	adds	r7, #60	; 0x3c
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b091      	sub	sp, #68	; 0x44
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b0:	2b21      	cmp	r3, #33	; 0x21
 80063b2:	d151      	bne.n	8006458 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d132      	bne.n	8006426 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	623b      	str	r3, [r7, #32]
   return(result);
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	633b      	str	r3, [r7, #48]	; 0x30
 80063e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e6      	bne.n	80063c0 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	69b9      	ldr	r1, [r7, #24]
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	617b      	str	r3, [r7, #20]
   return(result);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e6      	bne.n	80063f2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006424:	e018      	b.n	8006458 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	1c9a      	adds	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006458:	bf00      	nop
 800645a:	3744      	adds	r7, #68	; 0x44
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b091      	sub	sp, #68	; 0x44
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006472:	2b21      	cmp	r3, #33	; 0x21
 8006474:	d160      	bne.n	8006538 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800647c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800647e:	e057      	b.n	8006530 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d133      	bne.n	80064f4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	623b      	str	r3, [r7, #32]
   return(result);
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ac:	633a      	str	r2, [r7, #48]	; 0x30
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e5      	bne.n	800648c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	69b9      	ldr	r1, [r7, #24]
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	617b      	str	r3, [r7, #20]
   return(result);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e6      	bne.n	80064c0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80064f2:	e021      	b.n	8006538 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d013      	beq.n	800652a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006506:	781a      	ldrb	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800652a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800652c:	3b01      	subs	r3, #1
 800652e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1a4      	bne.n	8006480 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006536:	e7ff      	b.n	8006538 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006538:	bf00      	nop
 800653a:	3744      	adds	r7, #68	; 0x44
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b091      	sub	sp, #68	; 0x44
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006552:	2b21      	cmp	r3, #33	; 0x21
 8006554:	d165      	bne.n	8006622 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800655c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800655e:	e05c      	b.n	800661a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d133      	bne.n	80065d4 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	61fb      	str	r3, [r7, #28]
   return(result);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3308      	adds	r3, #8
 800658a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800658c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	633b      	str	r3, [r7, #48]	; 0x30
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6979      	ldr	r1, [r7, #20]
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	613b      	str	r3, [r7, #16]
   return(result);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e6      	bne.n	80065a0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80065d2:	e026      	b.n	8006622 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d018      	beq.n	8006614 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006616:	3b01      	subs	r3, #1
 8006618:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800661a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800661c:	2b00      	cmp	r3, #0
 800661e:	d19f      	bne.n	8006560 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006620:	e7ff      	b.n	8006622 <UART_TxISR_16BIT_FIFOEN+0xde>
 8006622:	bf00      	nop
 8006624:	3744      	adds	r7, #68	; 0x44
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b088      	sub	sp, #32
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	60bb      	str	r3, [r7, #8]
   return(result);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6979      	ldr	r1, [r7, #20]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	613b      	str	r3, [r7, #16]
   return(result);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e6      	bne.n	8006636 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff f8ea 	bl	8005850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667c:	bf00      	nop
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e027      	b.n	8006726 <HAL_UARTEx_DisableFifoMode+0x66>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2224      	movs	r2, #36	; 0x24
 80066e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006704:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006746:	2302      	movs	r3, #2
 8006748:	e02d      	b.n	80067a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2224      	movs	r2, #36	; 0x24
 8006756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0201 	bic.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f850 	bl	800682c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e02d      	b.n	8006822 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2224      	movs	r2, #36	; 0x24
 80067d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0201 	bic.w	r2, r2, #1
 80067ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f812 	bl	800682c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006838:	2b00      	cmp	r3, #0
 800683a:	d108      	bne.n	800684e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800684c:	e031      	b.n	80068b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800684e:	2308      	movs	r3, #8
 8006850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006852:	2308      	movs	r3, #8
 8006854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	0e5b      	lsrs	r3, r3, #25
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	0f5b      	lsrs	r3, r3, #29
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	7b3a      	ldrb	r2, [r7, #12]
 800687a:	4911      	ldr	r1, [pc, #68]	; (80068c0 <UARTEx_SetNbDataToProcess+0x94>)
 800687c:	5c8a      	ldrb	r2, [r1, r2]
 800687e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006882:	7b3a      	ldrb	r2, [r7, #12]
 8006884:	490f      	ldr	r1, [pc, #60]	; (80068c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006888:	fb93 f3f2 	sdiv	r3, r3, r2
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	7b7a      	ldrb	r2, [r7, #13]
 8006898:	4909      	ldr	r1, [pc, #36]	; (80068c0 <UARTEx_SetNbDataToProcess+0x94>)
 800689a:	5c8a      	ldrb	r2, [r1, r2]
 800689c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068a0:	7b7a      	ldrb	r2, [r7, #13]
 80068a2:	4908      	ldr	r1, [pc, #32]	; (80068c4 <UARTEx_SetNbDataToProcess+0x98>)
 80068a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	0800e8ac 	.word	0x0800e8ac
 80068c4:	0800e8b4 	.word	0x0800e8b4

080068c8 <__NVIC_SetPriority>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db0a      	blt.n	80068f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	490c      	ldr	r1, [pc, #48]	; (8006914 <__NVIC_SetPriority+0x4c>)
 80068e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e6:	0112      	lsls	r2, r2, #4
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	440b      	add	r3, r1
 80068ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068f0:	e00a      	b.n	8006908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4908      	ldr	r1, [pc, #32]	; (8006918 <__NVIC_SetPriority+0x50>)
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	3b04      	subs	r3, #4
 8006900:	0112      	lsls	r2, r2, #4
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	440b      	add	r3, r1
 8006906:	761a      	strb	r2, [r3, #24]
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	e000e100 	.word	0xe000e100
 8006918:	e000ed00 	.word	0xe000ed00

0800691c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <SysTick_Handler+0x1c>)
 8006922:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006924:	f002 f998 	bl	8008c58 <xTaskGetSchedulerState>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800692e:	f003 fb3b 	bl	8009fa8 <xPortSysTickHandler>
  }
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	e000e010 	.word	0xe000e010

0800693c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006940:	2100      	movs	r1, #0
 8006942:	f06f 0004 	mvn.w	r0, #4
 8006946:	f7ff ffbf 	bl	80068c8 <__NVIC_SetPriority>
#endif
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006956:	f3ef 8305 	mrs	r3, IPSR
 800695a:	603b      	str	r3, [r7, #0]
  return(result);
 800695c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006962:	f06f 0305 	mvn.w	r3, #5
 8006966:	607b      	str	r3, [r7, #4]
 8006968:	e00c      	b.n	8006984 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <osKernelInitialize+0x44>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d105      	bne.n	800697e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <osKernelInitialize+0x44>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006978:	2300      	movs	r3, #0
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e002      	b.n	8006984 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006984:	687b      	ldr	r3, [r7, #4]
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20019ca8 	.word	0x20019ca8

08006998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800699e:	f3ef 8305 	mrs	r3, IPSR
 80069a2:	603b      	str	r3, [r7, #0]
  return(result);
 80069a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80069aa:	f06f 0305 	mvn.w	r3, #5
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e010      	b.n	80069d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <osKernelStart+0x48>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d109      	bne.n	80069ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069ba:	f7ff ffbf 	bl	800693c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <osKernelStart+0x48>)
 80069c0:	2202      	movs	r2, #2
 80069c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069c4:	f001 fcdc 	bl	8008380 <vTaskStartScheduler>
      stat = osOK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	607b      	str	r3, [r7, #4]
 80069cc:	e002      	b.n	80069d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295
 80069d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20019ca8 	.word	0x20019ca8

080069e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08e      	sub	sp, #56	; 0x38
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f4:	f3ef 8305 	mrs	r3, IPSR
 80069f8:	617b      	str	r3, [r7, #20]
  return(result);
 80069fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d17e      	bne.n	8006afe <osThreadNew+0x11a>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d07b      	beq.n	8006afe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a06:	2380      	movs	r3, #128	; 0x80
 8006a08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a0a:	2318      	movs	r3, #24
 8006a0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a12:	f04f 33ff 	mov.w	r3, #4294967295
 8006a16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d045      	beq.n	8006aaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <osThreadNew+0x48>
        name = attr->name;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <osThreadNew+0x6e>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	2b38      	cmp	r3, #56	; 0x38
 8006a44:	d805      	bhi.n	8006a52 <osThreadNew+0x6e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <osThreadNew+0x72>
        return (NULL);
 8006a52:	2300      	movs	r3, #0
 8006a54:	e054      	b.n	8006b00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <osThreadNew+0xa8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2bbb      	cmp	r3, #187	; 0xbb
 8006a74:	d90a      	bls.n	8006a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d006      	beq.n	8006a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <osThreadNew+0xa8>
        mem = 1;
 8006a86:	2301      	movs	r3, #1
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e010      	b.n	8006aae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10c      	bne.n	8006aae <osThreadNew+0xca>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d108      	bne.n	8006aae <osThreadNew+0xca>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <osThreadNew+0xca>
          mem = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e001      	b.n	8006aae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d110      	bne.n	8006ad6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006abc:	9202      	str	r2, [sp, #8]
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f001 faa0 	bl	8008010 <xTaskCreateStatic>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e013      	b.n	8006afe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f107 0310 	add.w	r3, r7, #16
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 faeb 	bl	80080ca <xTaskCreate>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d001      	beq.n	8006afe <osThreadNew+0x11a>
            hTask = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006afe:	693b      	ldr	r3, [r7, #16]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3728      	adds	r7, #40	; 0x28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <osThreadFlagsSet+0x1a>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da03      	bge.n	8006b2a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8006b22:	f06f 0303 	mvn.w	r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	e035      	b.n	8006b96 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8006b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b30:	f3ef 8305 	mrs	r3, IPSR
 8006b34:	613b      	str	r3, [r7, #16]
  return(result);
 8006b36:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01f      	beq.n	8006b7c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	2300      	movs	r3, #0
 8006b48:	2201      	movs	r2, #1
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6978      	ldr	r0, [r7, #20]
 8006b4e:	f002 fb2b 	bl	80091a8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8006b52:	f107 030c 	add.w	r3, r7, #12
 8006b56:	2200      	movs	r2, #0
 8006b58:	9200      	str	r2, [sp, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6978      	ldr	r0, [r7, #20]
 8006b60:	f002 fb22 	bl	80091a8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d015      	beq.n	8006b96 <osThreadFlagsSet+0x8e>
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <osThreadFlagsSet+0x98>)
 8006b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	e00c      	b.n	8006b96 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2201      	movs	r2, #1
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6978      	ldr	r0, [r7, #20]
 8006b84:	f002 fa52 	bl	800902c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6978      	ldr	r0, [r7, #20]
 8006b92:	f002 fa4b 	bl	800902c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8006b96:	68fb      	ldr	r3, [r7, #12]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08c      	sub	sp, #48	; 0x30
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb0:	f3ef 8305 	mrs	r3, IPSR
 8006bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8006bb6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8006bbc:	f06f 0305 	mvn.w	r3, #5
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc2:	e06b      	b.n	8006c9c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	da03      	bge.n	8006bd2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8006bca:	f06f 0303 	mvn.w	r3, #3
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd0:	e064      	b.n	8006c9c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be0:	e001      	b.n	8006be6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8006bee:	f001 fce3 	bl	80085b8 <xTaskGetTickCount>
 8006bf2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8006bf4:	f107 0210 	add.w	r2, r7, #16
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f002 f9b5 	bl	8008f6c <xTaskNotifyWait>
 8006c02:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d137      	bne.n	8006c7a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8006c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c16:	4313      	orrs	r3, r2
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00c      	beq.n	8006c3e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	4013      	ands	r3, r2
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d032      	beq.n	8006c96 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10f      	bne.n	8006c56 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006c36:	f06f 0302 	mvn.w	r3, #2
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006c3c:	e02e      	b.n	8006c9c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d128      	bne.n	8006c9a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006c4e:	f06f 0302 	mvn.w	r3, #2
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006c54:	e022      	b.n	8006c9c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8006c56:	f001 fcaf 	bl	80085b8 <xTaskGetTickCount>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d902      	bls.n	8006c70 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6e:	e00e      	b.n	8006c8e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8006c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
 8006c78:	e009      	b.n	8006c8e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8006c80:	f06f 0302 	mvn.w	r3, #2
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c86:	e002      	b.n	8006c8e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8006c88:	f06f 0301 	mvn.w	r3, #1
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1af      	bne.n	8006bf4 <osThreadFlagsWait+0x50>
 8006c94:	e002      	b.n	8006c9c <osThreadFlagsWait+0xf8>
            break;
 8006c96:	bf00      	nop
 8006c98:	e000      	b.n	8006c9c <osThreadFlagsWait+0xf8>
            break;
 8006c9a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3730      	adds	r7, #48	; 0x30
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f002 ff9a 	bl	8009be8 <pvTimerGetTimerID>
 8006cb4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	6852      	ldr	r2, [r2, #4]
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ce4:	f3ef 8305 	mrs	r3, IPSR
 8006ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8006cea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d163      	bne.n	8006db8 <osTimerNew+0xe8>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d060      	beq.n	8006db8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006cf6:	2008      	movs	r0, #8
 8006cf8:	f003 f9e6 	bl	800a0c8 <pvPortMalloc>
 8006cfc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d059      	beq.n	8006db8 <osTimerNew+0xe8>
      callb->func = func;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <osTimerNew+0x4c>
        reload = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	e001      	b.n	8006d20 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006d20:	f04f 33ff 	mov.w	r3, #4294967295
 8006d24:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01c      	beq.n	8006d6a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <osTimerNew+0x6e>
          name = attr->name;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d006      	beq.n	8006d54 <osTimerNew+0x84>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8006d4c:	d902      	bls.n	8006d54 <osTimerNew+0x84>
          mem = 1;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	e00c      	b.n	8006d6e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d108      	bne.n	8006d6e <osTimerNew+0x9e>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <osTimerNew+0x9e>
            mem = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	e001      	b.n	8006d6e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d10c      	bne.n	8006d8e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <osTimerNew+0xf4>)
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	2101      	movs	r1, #1
 8006d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d86:	f002 fbb0 	bl	80094ea <xTimerCreateStatic>
 8006d8a:	6238      	str	r0, [r7, #32]
 8006d8c:	e00b      	b.n	8006da6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d108      	bne.n	8006da6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006d94:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <osTimerNew+0xf4>)
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006da0:	f002 fb82 	bl	80094a8 <xTimerCreate>
 8006da4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <osTimerNew+0xe8>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <osTimerNew+0xe8>
        vPortFree (callb);
 8006db2:	6978      	ldr	r0, [r7, #20]
 8006db4:	f003 fa54 	bl	800a260 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006db8:	6a3b      	ldr	r3, [r7, #32]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08006ca7 	.word	0x08006ca7

08006dc8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd6:	f3ef 8305 	mrs	r3, IPSR
 8006dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <osTimerStart+0x22>
    stat = osErrorISR;
 8006de2:	f06f 0305 	mvn.w	r3, #5
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e017      	b.n	8006e1a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <osTimerStart+0x30>
    stat = osErrorParameter;
 8006df0:	f06f 0303 	mvn.w	r3, #3
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e010      	b.n	8006e1a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	2104      	movs	r1, #4
 8006e02:	6938      	ldr	r0, [r7, #16]
 8006e04:	f002 fbea 	bl	80095dc <xTimerGenericCommand>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d102      	bne.n	8006e14 <osTimerStart+0x4c>
      stat = osOK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e002      	b.n	8006e1a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006e14:	f06f 0302 	mvn.w	r3, #2
 8006e18:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006e1a:	697b      	ldr	r3, [r7, #20]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e30:	f3ef 8305 	mrs	r3, IPSR
 8006e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e36:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d174      	bne.n	8006f26 <osMutexNew+0x102>
    if (attr != NULL) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <osMutexNew+0x26>
      type = attr->attr_bits;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e001      	b.n	8006e4e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <osMutexNew+0x3a>
      rmtx = 1U;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e001      	b.n	8006e62 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d15c      	bne.n	8006f26 <osMutexNew+0x102>
      mem = -1;
 8006e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e70:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d015      	beq.n	8006ea4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <osMutexNew+0x6a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b4f      	cmp	r3, #79	; 0x4f
 8006e86:	d902      	bls.n	8006e8e <osMutexNew+0x6a>
          mem = 1;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e00c      	b.n	8006ea8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d108      	bne.n	8006ea8 <osMutexNew+0x84>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d104      	bne.n	8006ea8 <osMutexNew+0x84>
            mem = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	e001      	b.n	8006ea8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d112      	bne.n	8006ed4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	2004      	movs	r0, #4
 8006ebc:	f000 fb17 	bl	80074ee <xQueueCreateMutexStatic>
 8006ec0:	61f8      	str	r0, [r7, #28]
 8006ec2:	e016      	b.n	8006ef2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	2001      	movs	r0, #1
 8006ecc:	f000 fb0f 	bl	80074ee <xQueueCreateMutexStatic>
 8006ed0:	61f8      	str	r0, [r7, #28]
 8006ed2:	e00e      	b.n	8006ef2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006ee0:	2004      	movs	r0, #4
 8006ee2:	f000 faec 	bl	80074be <xQueueCreateMutex>
 8006ee6:	61f8      	str	r0, [r7, #28]
 8006ee8:	e003      	b.n	8006ef2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006eea:	2001      	movs	r0, #1
 8006eec:	f000 fae7 	bl	80074be <xQueueCreateMutex>
 8006ef0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <osMutexNew+0xee>
        if (attr != NULL) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <osMutexNew+0xe2>
          name = attr->name;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e001      	b.n	8006f0a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	69f8      	ldr	r0, [r7, #28]
 8006f0e:	f001 f821 	bl	8007f54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d006      	beq.n	8006f26 <osMutexNew+0x102>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006f26:	69fb      	ldr	r3, [r7, #28]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4e:	f3ef 8305 	mrs	r3, IPSR
 8006f52:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f54:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006f5a:	f06f 0305 	mvn.w	r3, #5
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e02c      	b.n	8006fbc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006f68:	f06f 0303 	mvn.w	r3, #3
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e025      	b.n	8006fbc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d011      	beq.n	8006f9a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6938      	ldr	r0, [r7, #16]
 8006f7a:	f000 fb07 	bl	800758c <xQueueTakeMutexRecursive>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d01b      	beq.n	8006fbc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006f8a:	f06f 0301 	mvn.w	r3, #1
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e014      	b.n	8006fbc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006f92:	f06f 0302 	mvn.w	r3, #2
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e010      	b.n	8006fbc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6938      	ldr	r0, [r7, #16]
 8006f9e:	f000 fda5 	bl	8007aec <xQueueSemaphoreTake>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d009      	beq.n	8006fbc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006fae:	f06f 0301 	mvn.w	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e002      	b.n	8006fbc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006fb6:	f06f 0302 	mvn.w	r3, #2
 8006fba:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006fbc:	697b      	ldr	r3, [r7, #20]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f023 0301 	bic.w	r3, r3, #1
 8006fd4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe2:	f3ef 8305 	mrs	r3, IPSR
 8006fe6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fe8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006fee:	f06f 0305 	mvn.w	r3, #5
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e01f      	b.n	8007036 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006ffc:	f06f 0303 	mvn.w	r3, #3
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	e018      	b.n	8007036 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800700a:	6938      	ldr	r0, [r7, #16]
 800700c:	f000 fa8a 	bl	8007524 <xQueueGiveMutexRecursive>
 8007010:	4603      	mov	r3, r0
 8007012:	2b01      	cmp	r3, #1
 8007014:	d00f      	beq.n	8007036 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007016:	f06f 0302 	mvn.w	r3, #2
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e00b      	b.n	8007036 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800701e:	2300      	movs	r3, #0
 8007020:	2200      	movs	r2, #0
 8007022:	2100      	movs	r1, #0
 8007024:	6938      	ldr	r0, [r7, #16]
 8007026:	f000 fae7 	bl	80075f8 <xQueueGenericSend>
 800702a:	4603      	mov	r3, r0
 800702c:	2b01      	cmp	r3, #1
 800702e:	d002      	beq.n	8007036 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007030:	f06f 0302 	mvn.w	r3, #2
 8007034:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007036:	697b      	ldr	r3, [r7, #20]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4a07      	ldr	r2, [pc, #28]	; (800706c <vApplicationGetIdleTaskMemory+0x2c>)
 8007050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4a06      	ldr	r2, [pc, #24]	; (8007070 <vApplicationGetIdleTaskMemory+0x30>)
 8007056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	601a      	str	r2, [r3, #0]
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20019cac 	.word	0x20019cac
 8007070:	20019d68 	.word	0x20019d68

08007074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a07      	ldr	r2, [pc, #28]	; (80070a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4a06      	ldr	r2, [pc, #24]	; (80070a4 <vApplicationGetTimerTaskMemory+0x30>)
 800708a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20019f68 	.word	0x20019f68
 80070a4:	2001a024 	.word	0x2001a024

080070a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f103 0208 	add.w	r2, r3, #8
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295
 80070c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f103 0208 	add.w	r2, r3, #8
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f103 0208 	add.w	r2, r3, #8
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d103      	bne.n	800716a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e00c      	b.n	8007184 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3308      	adds	r3, #8
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e002      	b.n	8007178 <vListInsert+0x2e>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	429a      	cmp	r2, r3
 8007182:	d2f6      	bcs.n	8007172 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	601a      	str	r2, [r3, #0]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6892      	ldr	r2, [r2, #8]
 80071d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6852      	ldr	r2, [r2, #4]
 80071dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d103      	bne.n	80071f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	1e5a      	subs	r2, r3, #1
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800723a:	f002 fe23 	bl	8009e84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	68f9      	ldr	r1, [r7, #12]
 8007248:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	441a      	add	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	3b01      	subs	r3, #1
 800726c:	68f9      	ldr	r1, [r7, #12]
 800726e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	441a      	add	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	22ff      	movs	r2, #255	; 0xff
 800727e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	22ff      	movs	r2, #255	; 0xff
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d114      	bne.n	80072ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01a      	beq.n	80072ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3310      	adds	r3, #16
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fb09 	bl	80088b4 <xTaskRemoveFromEventList>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d012      	beq.n	80072ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <xQueueGenericReset+0xcc>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	e009      	b.n	80072ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3310      	adds	r3, #16
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff fef2 	bl	80070a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3324      	adds	r3, #36	; 0x24
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff feed 	bl	80070a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072ce:	f002 fe09 	bl	8009ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072d2:	2301      	movs	r3, #1
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	e000ed04 	.word	0xe000ed04

080072e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	; 0x38
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <xQueueGenericCreateStatic+0x52>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <xQueueGenericCreateStatic+0x56>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueGenericCreateStatic+0x58>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	623b      	str	r3, [r7, #32]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <xQueueGenericCreateStatic+0x7e>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <xQueueGenericCreateStatic+0x82>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <xQueueGenericCreateStatic+0x84>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	61fb      	str	r3, [r7, #28]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800737e:	2350      	movs	r3, #80	; 0x50
 8007380:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b50      	cmp	r3, #80	; 0x50
 8007386:	d00a      	beq.n	800739e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61bb      	str	r3, [r7, #24]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800739e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00d      	beq.n	80073c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	4613      	mov	r3, r2
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f83f 	bl	8007444 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3730      	adds	r7, #48	; 0x30
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	613b      	str	r3, [r7, #16]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	fb02 f303 	mul.w	r3, r2, r3
 8007402:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	3350      	adds	r3, #80	; 0x50
 8007408:	4618      	mov	r0, r3
 800740a:	f002 fe5d 	bl	800a0c8 <pvPortMalloc>
 800740e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d011      	beq.n	800743a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	3350      	adds	r3, #80	; 0x50
 800741e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007428:	79fa      	ldrb	r2, [r7, #7]
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	4613      	mov	r3, r2
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f805 	bl	8007444 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800743a:	69bb      	ldr	r3, [r7, #24]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d103      	bne.n	8007460 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e002      	b.n	8007466 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007472:	2101      	movs	r1, #1
 8007474:	69b8      	ldr	r0, [r7, #24]
 8007476:	f7ff fecb 	bl	8007210 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00e      	beq.n	80074b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074aa:	2300      	movs	r3, #0
 80074ac:	2200      	movs	r2, #0
 80074ae:	2100      	movs	r1, #0
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f8a1 	bl	80075f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	4603      	mov	r3, r0
 80074c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074c8:	2301      	movs	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	2300      	movs	r3, #0
 80074ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6939      	ldr	r1, [r7, #16]
 80074d6:	6978      	ldr	r0, [r7, #20]
 80074d8:	f7ff ff7a 	bl	80073d0 <xQueueGenericCreate>
 80074dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff ffd3 	bl	800748a <prvInitialiseMutex>

		return xNewQueue;
 80074e4:	68fb      	ldr	r3, [r7, #12]
	}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b088      	sub	sp, #32
 80074f2:	af02      	add	r7, sp, #8
 80074f4:	4603      	mov	r3, r0
 80074f6:	6039      	str	r1, [r7, #0]
 80074f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074fa:	2301      	movs	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	2300      	movs	r3, #0
 8007500:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2200      	movs	r2, #0
 800750a:	6939      	ldr	r1, [r7, #16]
 800750c:	6978      	ldr	r0, [r7, #20]
 800750e:	f7ff fee7 	bl	80072e0 <xQueueGenericCreateStatic>
 8007512:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff ffb8 	bl	800748a <prvInitialiseMutex>

		return xNewQueue;
 800751a:	68fb      	ldr	r3, [r7, #12]
	}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	689c      	ldr	r4, [r3, #8]
 8007550:	f001 fb72 	bl	8008c38 <xTaskGetCurrentTaskHandle>
 8007554:	4603      	mov	r3, r0
 8007556:	429c      	cmp	r4, r3
 8007558:	d111      	bne.n	800757e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	1e5a      	subs	r2, r3, #1
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800756c:	2300      	movs	r3, #0
 800756e:	2200      	movs	r2, #0
 8007570:	2100      	movs	r1, #0
 8007572:	6938      	ldr	r0, [r7, #16]
 8007574:	f000 f840 	bl	80075f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007578:	2301      	movs	r3, #1
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	e001      	b.n	8007582 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007582:	697b      	ldr	r3, [r7, #20]
	}
 8007584:	4618      	mov	r0, r3
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	bd90      	pop	{r4, r7, pc}

0800758c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800758c:	b590      	push	{r4, r7, lr}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10a      	bne.n	80075b6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	60fb      	str	r3, [r7, #12]
}
 80075b2:	bf00      	nop
 80075b4:	e7fe      	b.n	80075b4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	689c      	ldr	r4, [r3, #8]
 80075ba:	f001 fb3d 	bl	8008c38 <xTaskGetCurrentTaskHandle>
 80075be:	4603      	mov	r3, r0
 80075c0:	429c      	cmp	r4, r3
 80075c2:	d107      	bne.n	80075d4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80075ce:	2301      	movs	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e00c      	b.n	80075ee <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6938      	ldr	r0, [r7, #16]
 80075d8:	f000 fa88 	bl	8007aec <xQueueSemaphoreTake>
 80075dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80075ee:	697b      	ldr	r3, [r7, #20]
	}
 80075f0:	4618      	mov	r0, r3
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd90      	pop	{r4, r7, pc}

080075f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08e      	sub	sp, #56	; 0x38
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007606:	2300      	movs	r3, #0
 8007608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <xQueueGenericSend+0x32>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d103      	bne.n	8007638 <xQueueGenericSend+0x40>
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <xQueueGenericSend+0x44>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <xQueueGenericSend+0x46>
 800763c:	2300      	movs	r3, #0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <xQueueGenericSend+0x60>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d103      	bne.n	8007666 <xQueueGenericSend+0x6e>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <xQueueGenericSend+0x72>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <xQueueGenericSend+0x74>
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <xQueueGenericSend+0x8e>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	623b      	str	r3, [r7, #32]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007686:	f001 fae7 	bl	8008c58 <xTaskGetSchedulerState>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <xQueueGenericSend+0x9e>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <xQueueGenericSend+0xa2>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <xQueueGenericSend+0xa4>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	61fb      	str	r3, [r7, #28]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076b6:	f002 fbe5 	bl	8009e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d302      	bcc.n	80076cc <xQueueGenericSend+0xd4>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d129      	bne.n	8007720 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076d2:	f000 fb2f 	bl	8007d34 <prvCopyDataToQueue>
 80076d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d010      	beq.n	8007702 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	3324      	adds	r3, #36	; 0x24
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 f8e5 	bl	80088b4 <xTaskRemoveFromEventList>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d013      	beq.n	8007718 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076f0:	4b3f      	ldr	r3, [pc, #252]	; (80077f0 <xQueueGenericSend+0x1f8>)
 80076f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	e00a      	b.n	8007718 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007708:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <xQueueGenericSend+0x1f8>)
 800770a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007718:	f002 fbe4 	bl	8009ee4 <vPortExitCritical>
				return pdPASS;
 800771c:	2301      	movs	r3, #1
 800771e:	e063      	b.n	80077e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007726:	f002 fbdd 	bl	8009ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800772a:	2300      	movs	r3, #0
 800772c:	e05c      	b.n	80077e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007734:	f107 0314 	add.w	r3, r7, #20
 8007738:	4618      	mov	r0, r3
 800773a:	f001 f91f 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800773e:	2301      	movs	r3, #1
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007742:	f002 fbcf 	bl	8009ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007746:	f000 fe8b 	bl	8008460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800774a:	f002 fb9b 	bl	8009e84 <vPortEnterCritical>
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007754:	b25b      	sxtb	r3, r3
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d103      	bne.n	8007764 <xQueueGenericSend+0x16c>
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800776a:	b25b      	sxtb	r3, r3
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d103      	bne.n	800777a <xQueueGenericSend+0x182>
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800777a:	f002 fbb3 	bl	8009ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800777e:	1d3a      	adds	r2, r7, #4
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	4611      	mov	r1, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f90e 	bl	80089a8 <xTaskCheckForTimeOut>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d124      	bne.n	80077dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007794:	f000 fbc6 	bl	8007f24 <prvIsQueueFull>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d018      	beq.n	80077d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	3310      	adds	r3, #16
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4611      	mov	r1, r2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 f834 	bl	8008814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077ae:	f000 fb51 	bl	8007e54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077b2:	f000 fe63 	bl	800847c <xTaskResumeAll>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f47f af7c 	bne.w	80076b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <xQueueGenericSend+0x1f8>)
 80077c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	e772      	b.n	80076b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077d2:	f000 fb3f 	bl	8007e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077d6:	f000 fe51 	bl	800847c <xTaskResumeAll>
 80077da:	e76c      	b.n	80076b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077de:	f000 fb39 	bl	8007e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077e2:	f000 fe4b 	bl	800847c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3738      	adds	r7, #56	; 0x38
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b090      	sub	sp, #64	; 0x40
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <xQueueGenericSendFromISR+0x3c>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <xQueueGenericSendFromISR+0x40>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <xQueueGenericSendFromISR+0x42>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d103      	bne.n	800785e <xQueueGenericSendFromISR+0x6a>
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <xQueueGenericSendFromISR+0x6e>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <xQueueGenericSendFromISR+0x70>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	623b      	str	r3, [r7, #32]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800787e:	f002 fbe3 	bl	800a048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007882:	f3ef 8211 	mrs	r2, BASEPRI
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	61fa      	str	r2, [r7, #28]
 8007898:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800789a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <xQueueGenericSendFromISR+0xbc>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d12f      	bne.n	8007910 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078c6:	f000 fa35 	bl	8007d34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d112      	bne.n	80078fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d016      	beq.n	800790a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	3324      	adds	r3, #36	; 0x24
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 ffe7 	bl	80088b4 <xTaskRemoveFromEventList>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00e      	beq.n	800790a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e007      	b.n	800790a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078fe:	3301      	adds	r3, #1
 8007900:	b2db      	uxtb	r3, r3
 8007902:	b25a      	sxtb	r2, r3
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800790a:	2301      	movs	r3, #1
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800790e:	e001      	b.n	8007914 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007910:	2300      	movs	r3, #0
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007916:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800791e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007922:	4618      	mov	r0, r3
 8007924:	3740      	adds	r7, #64	; 0x40
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	; 0x30
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007938:	2300      	movs	r3, #0
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <xQueueReceive+0x30>
	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	623b      	str	r3, [r7, #32]
}
 8007958:	bf00      	nop
 800795a:	e7fe      	b.n	800795a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <xQueueReceive+0x3e>
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <xQueueReceive+0x42>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <xQueueReceive+0x44>
 800796e:	2300      	movs	r3, #0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueReceive+0x5e>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	61fb      	str	r3, [r7, #28]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800798a:	f001 f965 	bl	8008c58 <xTaskGetSchedulerState>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <xQueueReceive+0x6e>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <xQueueReceive+0x72>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <xQueueReceive+0x74>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <xQueueReceive+0x8e>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	61bb      	str	r3, [r7, #24]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079ba:	f002 fa63 	bl	8009e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01f      	beq.n	8007a0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ce:	f000 fa1b 	bl	8007e08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1e5a      	subs	r2, r3, #1
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00f      	beq.n	8007a02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	3310      	adds	r3, #16
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 ff64 	bl	80088b4 <xTaskRemoveFromEventList>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079f2:	4b3d      	ldr	r3, [pc, #244]	; (8007ae8 <xQueueReceive+0x1bc>)
 80079f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a02:	f002 fa6f 	bl	8009ee4 <vPortExitCritical>
				return pdPASS;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e069      	b.n	8007ade <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a10:	f002 fa68 	bl	8009ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e062      	b.n	8007ade <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a1e:	f107 0310 	add.w	r3, r7, #16
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 ffaa 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a2c:	f002 fa5a 	bl	8009ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a30:	f000 fd16 	bl	8008460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a34:	f002 fa26 	bl	8009e84 <vPortEnterCritical>
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a3e:	b25b      	sxtb	r3, r3
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d103      	bne.n	8007a4e <xQueueReceive+0x122>
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d103      	bne.n	8007a64 <xQueueReceive+0x138>
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a64:	f002 fa3e 	bl	8009ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a68:	1d3a      	adds	r2, r7, #4
 8007a6a:	f107 0310 	add.w	r3, r7, #16
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 ff99 	bl	80089a8 <xTaskCheckForTimeOut>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d123      	bne.n	8007ac4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7e:	f000 fa3b 	bl	8007ef8 <prvIsQueueEmpty>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d017      	beq.n	8007ab8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	3324      	adds	r3, #36	; 0x24
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	4611      	mov	r1, r2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 febf 	bl	8008814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a98:	f000 f9dc 	bl	8007e54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a9c:	f000 fcee 	bl	800847c <xTaskResumeAll>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d189      	bne.n	80079ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007aa6:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <xQueueReceive+0x1bc>)
 8007aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	e780      	b.n	80079ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aba:	f000 f9cb 	bl	8007e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007abe:	f000 fcdd 	bl	800847c <xTaskResumeAll>
 8007ac2:	e77a      	b.n	80079ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ac6:	f000 f9c5 	bl	8007e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aca:	f000 fcd7 	bl	800847c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ad0:	f000 fa12 	bl	8007ef8 <prvIsQueueEmpty>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f43f af6f 	beq.w	80079ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007adc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3730      	adds	r7, #48	; 0x30
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08e      	sub	sp, #56	; 0x38
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	623b      	str	r3, [r7, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	61fb      	str	r3, [r7, #28]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b3c:	f001 f88c 	bl	8008c58 <xTaskGetSchedulerState>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <xQueueSemaphoreTake+0x60>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <xQueueSemaphoreTake+0x64>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <xQueueSemaphoreTake+0x66>
 8007b50:	2300      	movs	r3, #0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	61bb      	str	r3, [r7, #24]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b6c:	f002 f98a 	bl	8009e84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d024      	beq.n	8007bc6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	1e5a      	subs	r2, r3, #1
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b8c:	f001 f9da 	bl	8008f44 <pvTaskIncrementMutexHeldCount>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	3310      	adds	r3, #16
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fe86 	bl	80088b4 <xTaskRemoveFromEventList>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bae:	4b54      	ldr	r3, [pc, #336]	; (8007d00 <xQueueSemaphoreTake+0x214>)
 8007bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bbe:	f002 f991 	bl	8009ee4 <vPortExitCritical>
				return pdPASS;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e097      	b.n	8007cf6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d111      	bne.n	8007bf0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	617b      	str	r3, [r7, #20]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007be8:	f002 f97c 	bl	8009ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e082      	b.n	8007cf6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bf6:	f107 030c 	add.w	r3, r7, #12
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 febe 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c04:	f002 f96e 	bl	8009ee4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c08:	f000 fc2a 	bl	8008460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c0c:	f002 f93a 	bl	8009e84 <vPortEnterCritical>
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c16:	b25b      	sxtb	r3, r3
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d103      	bne.n	8007c26 <xQueueSemaphoreTake+0x13a>
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d103      	bne.n	8007c3c <xQueueSemaphoreTake+0x150>
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c3c:	f002 f952 	bl	8009ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c40:	463a      	mov	r2, r7
 8007c42:	f107 030c 	add.w	r3, r7, #12
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fead 	bl	80089a8 <xTaskCheckForTimeOut>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d132      	bne.n	8007cba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c56:	f000 f94f 	bl	8007ef8 <prvIsQueueEmpty>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d026      	beq.n	8007cae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007c68:	f002 f90c 	bl	8009e84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 f80f 	bl	8008c94 <xTaskPriorityInherit>
 8007c76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007c78:	f002 f934 	bl	8009ee4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	3324      	adds	r3, #36	; 0x24
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fdc5 	bl	8008814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c8c:	f000 f8e2 	bl	8007e54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c90:	f000 fbf4 	bl	800847c <xTaskResumeAll>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f47f af68 	bne.w	8007b6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007c9c:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <xQueueSemaphoreTake+0x214>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	e75e      	b.n	8007b6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cb0:	f000 f8d0 	bl	8007e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cb4:	f000 fbe2 	bl	800847c <xTaskResumeAll>
 8007cb8:	e758      	b.n	8007b6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cbc:	f000 f8ca 	bl	8007e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cc0:	f000 fbdc 	bl	800847c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cc6:	f000 f917 	bl	8007ef8 <prvIsQueueEmpty>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f43f af4d 	beq.w	8007b6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00d      	beq.n	8007cf4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007cd8:	f002 f8d4 	bl	8009e84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cde:	f000 f811 	bl	8007d04 <prvGetDisinheritPriorityAfterTimeout>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 f8a8 	bl	8008e40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cf0:	f002 f8f8 	bl	8009ee4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3738      	adds	r7, #56	; 0x38
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	e000ed04 	.word	0xe000ed04

08007d04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d006      	beq.n	8007d22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	e001      	b.n	8007d26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d26:	68fb      	ldr	r3, [r7, #12]
	}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10d      	bne.n	8007d6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d14d      	bne.n	8007df6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 f800 	bl	8008d64 <xTaskPriorityDisinherit>
 8007d64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	609a      	str	r2, [r3, #8]
 8007d6c:	e043      	b.n	8007df6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d119      	bne.n	8007da8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6858      	ldr	r0, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	f002 fcaf 	bl	800a6e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	441a      	add	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d32b      	bcc.n	8007df6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
 8007da6:	e026      	b.n	8007df6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68d8      	ldr	r0, [r3, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	461a      	mov	r2, r3
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	f002 fc95 	bl	800a6e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	425b      	negs	r3, r3
 8007dc2:	441a      	add	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d207      	bcs.n	8007de4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	425b      	negs	r3, r3
 8007dde:	441a      	add	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d105      	bne.n	8007df6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dfe:	697b      	ldr	r3, [r7, #20]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d018      	beq.n	8007e4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	441a      	add	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d303      	bcc.n	8007e3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68d9      	ldr	r1, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	461a      	mov	r2, r3
 8007e46:	6838      	ldr	r0, [r7, #0]
 8007e48:	f002 fc4b 	bl	800a6e2 <memcpy>
	}
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e5c:	f002 f812 	bl	8009e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e68:	e011      	b.n	8007e8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d012      	beq.n	8007e98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3324      	adds	r3, #36	; 0x24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fd1c 	bl	80088b4 <xTaskRemoveFromEventList>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e82:	f000 fdf3 	bl	8008a6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dce9      	bgt.n	8007e6a <prvUnlockQueue+0x16>
 8007e96:	e000      	b.n	8007e9a <prvUnlockQueue+0x46>
					break;
 8007e98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	22ff      	movs	r2, #255	; 0xff
 8007e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ea2:	f002 f81f 	bl	8009ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ea6:	f001 ffed 	bl	8009e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eb2:	e011      	b.n	8007ed8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d012      	beq.n	8007ee2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3310      	adds	r3, #16
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fcf7 	bl	80088b4 <xTaskRemoveFromEventList>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ecc:	f000 fdce 	bl	8008a6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dce9      	bgt.n	8007eb4 <prvUnlockQueue+0x60>
 8007ee0:	e000      	b.n	8007ee4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ee2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007eec:	f001 fffa 	bl	8009ee4 <vPortExitCritical>
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f00:	f001 ffc0 	bl	8009e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e001      	b.n	8007f16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f16:	f001 ffe5 	bl	8009ee4 <vPortExitCritical>

	return xReturn;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f2c:	f001 ffaa 	bl	8009e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d102      	bne.n	8007f42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	e001      	b.n	8007f46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f46:	f001 ffcd 	bl	8009ee4 <vPortExitCritical>

	return xReturn;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	e014      	b.n	8007f8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f64:	4a0f      	ldr	r2, [pc, #60]	; (8007fa4 <vQueueAddToRegistry+0x50>)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f70:	490c      	ldr	r1, [pc, #48]	; (8007fa4 <vQueueAddToRegistry+0x50>)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f7a:	4a0a      	ldr	r2, [pc, #40]	; (8007fa4 <vQueueAddToRegistry+0x50>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f86:	e006      	b.n	8007f96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b07      	cmp	r3, #7
 8007f92:	d9e7      	bls.n	8007f64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	2001a424 	.word	0x2001a424

08007fa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fb8:	f001 ff64 	bl	8009e84 <vPortEnterCritical>
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d103      	bne.n	8007fd2 <vQueueWaitForMessageRestricted+0x2a>
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd8:	b25b      	sxtb	r3, r3
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fde:	d103      	bne.n	8007fe8 <vQueueWaitForMessageRestricted+0x40>
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe8:	f001 ff7c 	bl	8009ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fc2d 	bl	800885c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008002:	6978      	ldr	r0, [r7, #20]
 8008004:	f7ff ff26 	bl	8007e54 <prvUnlockQueue>
	}
 8008008:	bf00      	nop
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af04      	add	r7, sp, #16
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	623b      	str	r3, [r7, #32]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <xTaskCreateStatic+0x46>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	61fb      	str	r3, [r7, #28]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008056:	23bc      	movs	r3, #188	; 0xbc
 8008058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2bbc      	cmp	r3, #188	; 0xbc
 800805e:	d00a      	beq.n	8008076 <xTaskCreateStatic+0x66>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	61bb      	str	r3, [r7, #24]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008076:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01e      	beq.n	80080bc <xTaskCreateStatic+0xac>
 800807e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01b      	beq.n	80080bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800808c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	2202      	movs	r2, #2
 8008092:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008096:	2300      	movs	r3, #0
 8008098:	9303      	str	r3, [sp, #12]
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	9302      	str	r3, [sp, #8]
 800809e:	f107 0314 	add.w	r3, r7, #20
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	68b9      	ldr	r1, [r7, #8]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f850 	bl	8008154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080b6:	f000 f8f3 	bl	80082a0 <prvAddNewTaskToReadyList>
 80080ba:	e001      	b.n	80080c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080c0:	697b      	ldr	r3, [r7, #20]
	}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3728      	adds	r7, #40	; 0x28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b08c      	sub	sp, #48	; 0x30
 80080ce:	af04      	add	r7, sp, #16
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080da:	88fb      	ldrh	r3, [r7, #6]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fff2 	bl	800a0c8 <pvPortMalloc>
 80080e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00e      	beq.n	800810a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080ec:	20bc      	movs	r0, #188	; 0xbc
 80080ee:	f001 ffeb 	bl	800a0c8 <pvPortMalloc>
 80080f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008100:	e005      	b.n	800810e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008102:	6978      	ldr	r0, [r7, #20]
 8008104:	f002 f8ac 	bl	800a260 <vPortFree>
 8008108:	e001      	b.n	800810e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d017      	beq.n	8008144 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800811c:	88fa      	ldrh	r2, [r7, #6]
 800811e:	2300      	movs	r3, #0
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	9302      	str	r3, [sp, #8]
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 f80e 	bl	8008154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008138:	69f8      	ldr	r0, [r7, #28]
 800813a:	f000 f8b1 	bl	80082a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800813e:	2301      	movs	r3, #1
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	e002      	b.n	800814a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800814a:	69bb      	ldr	r3, [r7, #24]
	}
 800814c:	4618      	mov	r0, r3
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	461a      	mov	r2, r3
 800816c:	21a5      	movs	r1, #165	; 0xa5
 800816e:	f002 fac6 	bl	800a6fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800817c:	3b01      	subs	r3, #1
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	617b      	str	r3, [r7, #20]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01f      	beq.n	80081f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	e012      	b.n	80081de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	7819      	ldrb	r1, [r3, #0]
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	3334      	adds	r3, #52	; 0x34
 80081c8:	460a      	mov	r2, r1
 80081ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3301      	adds	r3, #1
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	2b0f      	cmp	r3, #15
 80081e2:	d9e9      	bls.n	80081b8 <prvInitialiseNewTask+0x64>
 80081e4:	e000      	b.n	80081e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80081e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081f0:	e003      	b.n	80081fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	2b37      	cmp	r3, #55	; 0x37
 80081fe:	d901      	bls.n	8008204 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008200:	2337      	movs	r3, #55	; 0x37
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008208:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800820e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	2200      	movs	r2, #0
 8008214:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	3304      	adds	r3, #4
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe ff64 	bl	80070e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	3318      	adds	r3, #24
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe ff5f 	bl	80070e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800822e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	2200      	movs	r2, #0
 800824c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	3354      	adds	r3, #84	; 0x54
 8008254:	2260      	movs	r2, #96	; 0x60
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f002 fa50 	bl	800a6fe <memset>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <prvInitialiseNewTask+0x140>)
 8008262:	659a      	str	r2, [r3, #88]	; 0x58
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <prvInitialiseNewTask+0x144>)
 8008268:	65da      	str	r2, [r3, #92]	; 0x5c
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	4a0b      	ldr	r2, [pc, #44]	; (800829c <prvInitialiseNewTask+0x148>)
 800826e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	69b8      	ldr	r0, [r7, #24]
 8008276:	f001 fcd7 	bl	8009c28 <pxPortInitialiseStack>
 800827a:	4602      	mov	r2, r0
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800828a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800828c:	bf00      	nop
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	0800e8dc 	.word	0x0800e8dc
 8008298:	0800e8fc 	.word	0x0800e8fc
 800829c:	0800e8bc 	.word	0x0800e8bc

080082a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082a8:	f001 fdec 	bl	8009e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082ac:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082b6:	4b2c      	ldr	r3, [pc, #176]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082be:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082c4:	4b27      	ldr	r3, [pc, #156]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d110      	bne.n	80082ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082cc:	f000 fbf2 	bl	8008ab4 <prvInitialiseTaskLists>
 80082d0:	e00d      	b.n	80082ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082d2:	4b26      	ldr	r3, [pc, #152]	; (800836c <prvAddNewTaskToReadyList+0xcc>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082da:	4b23      	ldr	r3, [pc, #140]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d802      	bhi.n	80082ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082e8:	4a1f      	ldr	r2, [pc, #124]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ee:	4b20      	ldr	r3, [pc, #128]	; (8008370 <prvAddNewTaskToReadyList+0xd0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3301      	adds	r3, #1
 80082f4:	4a1e      	ldr	r2, [pc, #120]	; (8008370 <prvAddNewTaskToReadyList+0xd0>)
 80082f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082f8:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <prvAddNewTaskToReadyList+0xd0>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <prvAddNewTaskToReadyList+0xd4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d903      	bls.n	8008314 <prvAddNewTaskToReadyList+0x74>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	4a18      	ldr	r2, [pc, #96]	; (8008374 <prvAddNewTaskToReadyList+0xd4>)
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4a15      	ldr	r2, [pc, #84]	; (8008378 <prvAddNewTaskToReadyList+0xd8>)
 8008322:	441a      	add	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3304      	adds	r3, #4
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f7fe fee9 	bl	8007102 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008330:	f001 fdd8 	bl	8009ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <prvAddNewTaskToReadyList+0xcc>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	429a      	cmp	r2, r3
 8008348:	d207      	bcs.n	800835a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <prvAddNewTaskToReadyList+0xdc>)
 800834c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	2001a938 	.word	0x2001a938
 8008368:	2001a464 	.word	0x2001a464
 800836c:	2001a944 	.word	0x2001a944
 8008370:	2001a954 	.word	0x2001a954
 8008374:	2001a940 	.word	0x2001a940
 8008378:	2001a468 	.word	0x2001a468
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800838e:	463a      	mov	r2, r7
 8008390:	1d39      	adds	r1, r7, #4
 8008392:	f107 0308 	add.w	r3, r7, #8
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fe52 	bl	8007040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	9202      	str	r2, [sp, #8]
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	2300      	movs	r3, #0
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	460a      	mov	r2, r1
 80083ae:	4924      	ldr	r1, [pc, #144]	; (8008440 <vTaskStartScheduler+0xc0>)
 80083b0:	4824      	ldr	r0, [pc, #144]	; (8008444 <vTaskStartScheduler+0xc4>)
 80083b2:	f7ff fe2d 	bl	8008010 <xTaskCreateStatic>
 80083b6:	4603      	mov	r3, r0
 80083b8:	4a23      	ldr	r2, [pc, #140]	; (8008448 <vTaskStartScheduler+0xc8>)
 80083ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083bc:	4b22      	ldr	r3, [pc, #136]	; (8008448 <vTaskStartScheduler+0xc8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083c4:	2301      	movs	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
 80083c8:	e001      	b.n	80083ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d102      	bne.n	80083da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083d4:	f001 f820 	bl	8009418 <xTimerCreateTimerTask>
 80083d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d11b      	bne.n	8008418 <vTaskStartScheduler+0x98>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	613b      	str	r3, [r7, #16]
}
 80083f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083f4:	4b15      	ldr	r3, [pc, #84]	; (800844c <vTaskStartScheduler+0xcc>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3354      	adds	r3, #84	; 0x54
 80083fa:	4a15      	ldr	r2, [pc, #84]	; (8008450 <vTaskStartScheduler+0xd0>)
 80083fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083fe:	4b15      	ldr	r3, [pc, #84]	; (8008454 <vTaskStartScheduler+0xd4>)
 8008400:	f04f 32ff 	mov.w	r2, #4294967295
 8008404:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <vTaskStartScheduler+0xd8>)
 8008408:	2201      	movs	r2, #1
 800840a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800840c:	4b13      	ldr	r3, [pc, #76]	; (800845c <vTaskStartScheduler+0xdc>)
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008412:	f001 fc95 	bl	8009d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008416:	e00e      	b.n	8008436 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d10a      	bne.n	8008436 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <vTaskStartScheduler+0xb4>
}
 8008436:	bf00      	nop
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	0800e7d8 	.word	0x0800e7d8
 8008444:	08008a85 	.word	0x08008a85
 8008448:	2001a95c 	.word	0x2001a95c
 800844c:	2001a464 	.word	0x2001a464
 8008450:	20000010 	.word	0x20000010
 8008454:	2001a958 	.word	0x2001a958
 8008458:	2001a944 	.word	0x2001a944
 800845c:	2001a93c 	.word	0x2001a93c

08008460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008464:	4b04      	ldr	r3, [pc, #16]	; (8008478 <vTaskSuspendAll+0x18>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	4a03      	ldr	r2, [pc, #12]	; (8008478 <vTaskSuspendAll+0x18>)
 800846c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800846e:	bf00      	nop
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	2001a960 	.word	0x2001a960

0800847c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800848a:	4b42      	ldr	r3, [pc, #264]	; (8008594 <xTaskResumeAll+0x118>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	603b      	str	r3, [r7, #0]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084a8:	f001 fcec 	bl	8009e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084ac:	4b39      	ldr	r3, [pc, #228]	; (8008594 <xTaskResumeAll+0x118>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	4a38      	ldr	r2, [pc, #224]	; (8008594 <xTaskResumeAll+0x118>)
 80084b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084b6:	4b37      	ldr	r3, [pc, #220]	; (8008594 <xTaskResumeAll+0x118>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d162      	bne.n	8008584 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084be:	4b36      	ldr	r3, [pc, #216]	; (8008598 <xTaskResumeAll+0x11c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d05e      	beq.n	8008584 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084c6:	e02f      	b.n	8008528 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c8:	4b34      	ldr	r3, [pc, #208]	; (800859c <xTaskResumeAll+0x120>)
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3318      	adds	r3, #24
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fe71 	bl	80071bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3304      	adds	r3, #4
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fe6c 	bl	80071bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <xTaskResumeAll+0x124>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d903      	bls.n	80084f8 <xTaskResumeAll+0x7c>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	4a2a      	ldr	r2, [pc, #168]	; (80085a0 <xTaskResumeAll+0x124>)
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4a27      	ldr	r2, [pc, #156]	; (80085a4 <xTaskResumeAll+0x128>)
 8008506:	441a      	add	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3304      	adds	r3, #4
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f7fe fdf7 	bl	8007102 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008518:	4b23      	ldr	r3, [pc, #140]	; (80085a8 <xTaskResumeAll+0x12c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	429a      	cmp	r2, r3
 8008520:	d302      	bcc.n	8008528 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008522:	4b22      	ldr	r3, [pc, #136]	; (80085ac <xTaskResumeAll+0x130>)
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008528:	4b1c      	ldr	r3, [pc, #112]	; (800859c <xTaskResumeAll+0x120>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1cb      	bne.n	80084c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008536:	f000 fb5f 	bl	8008bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800853a:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <xTaskResumeAll+0x134>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d010      	beq.n	8008568 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008546:	f000 f847 	bl	80085d8 <xTaskIncrementTick>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008550:	4b16      	ldr	r3, [pc, #88]	; (80085ac <xTaskResumeAll+0x130>)
 8008552:	2201      	movs	r2, #1
 8008554:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3b01      	subs	r3, #1
 800855a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f1      	bne.n	8008546 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008562:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <xTaskResumeAll+0x134>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008568:	4b10      	ldr	r3, [pc, #64]	; (80085ac <xTaskResumeAll+0x130>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008570:	2301      	movs	r3, #1
 8008572:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008574:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <xTaskResumeAll+0x138>)
 8008576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008584:	f001 fcae 	bl	8009ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8008588:	68bb      	ldr	r3, [r7, #8]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	2001a960 	.word	0x2001a960
 8008598:	2001a938 	.word	0x2001a938
 800859c:	2001a8f8 	.word	0x2001a8f8
 80085a0:	2001a940 	.word	0x2001a940
 80085a4:	2001a468 	.word	0x2001a468
 80085a8:	2001a464 	.word	0x2001a464
 80085ac:	2001a94c 	.word	0x2001a94c
 80085b0:	2001a948 	.word	0x2001a948
 80085b4:	e000ed04 	.word	0xe000ed04

080085b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085be:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <xTaskGetTickCount+0x1c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085c4:	687b      	ldr	r3, [r7, #4]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	2001a93c 	.word	0x2001a93c

080085d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e2:	4b4f      	ldr	r3, [pc, #316]	; (8008720 <xTaskIncrementTick+0x148>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f040 808f 	bne.w	800870a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085ec:	4b4d      	ldr	r3, [pc, #308]	; (8008724 <xTaskIncrementTick+0x14c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3301      	adds	r3, #1
 80085f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085f4:	4a4b      	ldr	r2, [pc, #300]	; (8008724 <xTaskIncrementTick+0x14c>)
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d120      	bne.n	8008642 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008600:	4b49      	ldr	r3, [pc, #292]	; (8008728 <xTaskIncrementTick+0x150>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <xTaskIncrementTick+0x48>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	603b      	str	r3, [r7, #0]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <xTaskIncrementTick+0x46>
 8008620:	4b41      	ldr	r3, [pc, #260]	; (8008728 <xTaskIncrementTick+0x150>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	4b41      	ldr	r3, [pc, #260]	; (800872c <xTaskIncrementTick+0x154>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a3f      	ldr	r2, [pc, #252]	; (8008728 <xTaskIncrementTick+0x150>)
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	4a3f      	ldr	r2, [pc, #252]	; (800872c <xTaskIncrementTick+0x154>)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	4b3e      	ldr	r3, [pc, #248]	; (8008730 <xTaskIncrementTick+0x158>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <xTaskIncrementTick+0x158>)
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	f000 fadb 	bl	8008bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008642:	4b3c      	ldr	r3, [pc, #240]	; (8008734 <xTaskIncrementTick+0x15c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	429a      	cmp	r2, r3
 800864a:	d349      	bcc.n	80086e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800864c:	4b36      	ldr	r3, [pc, #216]	; (8008728 <xTaskIncrementTick+0x150>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d104      	bne.n	8008660 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008656:	4b37      	ldr	r3, [pc, #220]	; (8008734 <xTaskIncrementTick+0x15c>)
 8008658:	f04f 32ff 	mov.w	r2, #4294967295
 800865c:	601a      	str	r2, [r3, #0]
					break;
 800865e:	e03f      	b.n	80086e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008660:	4b31      	ldr	r3, [pc, #196]	; (8008728 <xTaskIncrementTick+0x150>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d203      	bcs.n	8008680 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008678:	4a2e      	ldr	r2, [pc, #184]	; (8008734 <xTaskIncrementTick+0x15c>)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800867e:	e02f      	b.n	80086e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	3304      	adds	r3, #4
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe fd99 	bl	80071bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	3318      	adds	r3, #24
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fd90 	bl	80071bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	4b25      	ldr	r3, [pc, #148]	; (8008738 <xTaskIncrementTick+0x160>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d903      	bls.n	80086b0 <xTaskIncrementTick+0xd8>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	4a22      	ldr	r2, [pc, #136]	; (8008738 <xTaskIncrementTick+0x160>)
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4a1f      	ldr	r2, [pc, #124]	; (800873c <xTaskIncrementTick+0x164>)
 80086be:	441a      	add	r2, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f7fe fd1b 	bl	8007102 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d0:	4b1b      	ldr	r3, [pc, #108]	; (8008740 <xTaskIncrementTick+0x168>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d3b8      	bcc.n	800864c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086da:	2301      	movs	r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086de:	e7b5      	b.n	800864c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <xTaskIncrementTick+0x168>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	4915      	ldr	r1, [pc, #84]	; (800873c <xTaskIncrementTick+0x164>)
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d901      	bls.n	80086fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086f8:	2301      	movs	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086fc:	4b11      	ldr	r3, [pc, #68]	; (8008744 <xTaskIncrementTick+0x16c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008704:	2301      	movs	r3, #1
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	e004      	b.n	8008714 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800870a:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <xTaskIncrementTick+0x170>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	4a0d      	ldr	r2, [pc, #52]	; (8008748 <xTaskIncrementTick+0x170>)
 8008712:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008714:	697b      	ldr	r3, [r7, #20]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	2001a960 	.word	0x2001a960
 8008724:	2001a93c 	.word	0x2001a93c
 8008728:	2001a8f0 	.word	0x2001a8f0
 800872c:	2001a8f4 	.word	0x2001a8f4
 8008730:	2001a950 	.word	0x2001a950
 8008734:	2001a958 	.word	0x2001a958
 8008738:	2001a940 	.word	0x2001a940
 800873c:	2001a468 	.word	0x2001a468
 8008740:	2001a464 	.word	0x2001a464
 8008744:	2001a94c 	.word	0x2001a94c
 8008748:	2001a948 	.word	0x2001a948

0800874c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008752:	4b2a      	ldr	r3, [pc, #168]	; (80087fc <vTaskSwitchContext+0xb0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800875a:	4b29      	ldr	r3, [pc, #164]	; (8008800 <vTaskSwitchContext+0xb4>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008760:	e046      	b.n	80087f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008762:	4b27      	ldr	r3, [pc, #156]	; (8008800 <vTaskSwitchContext+0xb4>)
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008768:	4b26      	ldr	r3, [pc, #152]	; (8008804 <vTaskSwitchContext+0xb8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	e010      	b.n	8008792 <vTaskSwitchContext+0x46>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <vTaskSwitchContext+0x40>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	607b      	str	r3, [r7, #4]
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <vTaskSwitchContext+0x3e>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3b01      	subs	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	491d      	ldr	r1, [pc, #116]	; (8008808 <vTaskSwitchContext+0xbc>)
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0e4      	beq.n	8008770 <vTaskSwitchContext+0x24>
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4a15      	ldr	r2, [pc, #84]	; (8008808 <vTaskSwitchContext+0xbc>)
 80087b2:	4413      	add	r3, r2
 80087b4:	60bb      	str	r3, [r7, #8]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	605a      	str	r2, [r3, #4]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	3308      	adds	r3, #8
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d104      	bne.n	80087d6 <vTaskSwitchContext+0x8a>
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	605a      	str	r2, [r3, #4]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	4a0b      	ldr	r2, [pc, #44]	; (800880c <vTaskSwitchContext+0xc0>)
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <vTaskSwitchContext+0xb8>)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <vTaskSwitchContext+0xc0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3354      	adds	r3, #84	; 0x54
 80087ec:	4a08      	ldr	r2, [pc, #32]	; (8008810 <vTaskSwitchContext+0xc4>)
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	bf00      	nop
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	2001a960 	.word	0x2001a960
 8008800:	2001a94c 	.word	0x2001a94c
 8008804:	2001a940 	.word	0x2001a940
 8008808:	2001a468 	.word	0x2001a468
 800880c:	2001a464 	.word	0x2001a464
 8008810:	20000010 	.word	0x20000010

08008814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	60fb      	str	r3, [r7, #12]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <vTaskPlaceOnEventList+0x44>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3318      	adds	r3, #24
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fe fc81 	bl	800714a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008848:	2101      	movs	r1, #1
 800884a:	6838      	ldr	r0, [r7, #0]
 800884c:	f000 fd90 	bl	8009370 <prvAddCurrentTaskToDelayedList>
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	2001a464 	.word	0x2001a464

0800885c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3318      	adds	r3, #24
 800888a:	4619      	mov	r1, r3
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7fe fc38 	bl	8007102 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008898:	f04f 33ff 	mov.w	r3, #4294967295
 800889c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 fd65 	bl	8009370 <prvAddCurrentTaskToDelayedList>
	}
 80088a6:	bf00      	nop
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	2001a464 	.word	0x2001a464

080088b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	60fb      	str	r3, [r7, #12]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	3318      	adds	r3, #24
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fc69 	bl	80071bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ea:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <xTaskRemoveFromEventList+0xb0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d11d      	bne.n	800892e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fc60 	bl	80071bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	4b19      	ldr	r3, [pc, #100]	; (8008968 <xTaskRemoveFromEventList+0xb4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d903      	bls.n	8008910 <xTaskRemoveFromEventList+0x5c>
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	4a16      	ldr	r2, [pc, #88]	; (8008968 <xTaskRemoveFromEventList+0xb4>)
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4a13      	ldr	r2, [pc, #76]	; (800896c <xTaskRemoveFromEventList+0xb8>)
 800891e:	441a      	add	r2, r3
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	3304      	adds	r3, #4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7fe fbeb 	bl	8007102 <vListInsertEnd>
 800892c:	e005      	b.n	800893a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	3318      	adds	r3, #24
 8008932:	4619      	mov	r1, r3
 8008934:	480e      	ldr	r0, [pc, #56]	; (8008970 <xTaskRemoveFromEventList+0xbc>)
 8008936:	f7fe fbe4 	bl	8007102 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893e:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <xTaskRemoveFromEventList+0xc0>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	429a      	cmp	r2, r3
 8008946:	d905      	bls.n	8008954 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800894c:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <xTaskRemoveFromEventList+0xc4>)
 800894e:	2201      	movs	r2, #1
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e001      	b.n	8008958 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008958:	697b      	ldr	r3, [r7, #20]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	2001a960 	.word	0x2001a960
 8008968:	2001a940 	.word	0x2001a940
 800896c:	2001a468 	.word	0x2001a468
 8008970:	2001a8f8 	.word	0x2001a8f8
 8008974:	2001a464 	.word	0x2001a464
 8008978:	2001a94c 	.word	0x2001a94c

0800897c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <vTaskInternalSetTimeOutState+0x24>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <vTaskInternalSetTimeOutState+0x28>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	605a      	str	r2, [r3, #4]
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	2001a950 	.word	0x2001a950
 80089a4:	2001a93c 	.word	0x2001a93c

080089a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	613b      	str	r3, [r7, #16]
}
 80089ca:	bf00      	nop
 80089cc:	e7fe      	b.n	80089cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	60fb      	str	r3, [r7, #12]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089ea:	f001 fa4b 	bl	8009e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089ee:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <xTaskCheckForTimeOut+0xbc>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d102      	bne.n	8008a0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61fb      	str	r3, [r7, #28]
 8008a0c:	e023      	b.n	8008a56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <xTaskCheckForTimeOut+0xc0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d007      	beq.n	8008a2a <xTaskCheckForTimeOut+0x82>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d302      	bcc.n	8008a2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	e015      	b.n	8008a56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d20b      	bcs.n	8008a4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	1ad2      	subs	r2, r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff9b 	bl	800897c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e004      	b.n	8008a56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a52:	2301      	movs	r3, #1
 8008a54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a56:	f001 fa45 	bl	8009ee4 <vPortExitCritical>

	return xReturn;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	2001a93c 	.word	0x2001a93c
 8008a68:	2001a950 	.word	0x2001a950

08008a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a70:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <vTaskMissedYield+0x14>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
}
 8008a76:	bf00      	nop
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	2001a94c 	.word	0x2001a94c

08008a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a8c:	f000 f852 	bl	8008b34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a90:	4b06      	ldr	r3, [pc, #24]	; (8008aac <prvIdleTask+0x28>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d9f9      	bls.n	8008a8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <prvIdleTask+0x2c>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008aa8:	e7f0      	b.n	8008a8c <prvIdleTask+0x8>
 8008aaa:	bf00      	nop
 8008aac:	2001a468 	.word	0x2001a468
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aba:	2300      	movs	r3, #0
 8008abc:	607b      	str	r3, [r7, #4]
 8008abe:	e00c      	b.n	8008ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <prvInitialiseTaskLists+0x60>)
 8008acc:	4413      	add	r3, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe faea 	bl	80070a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b37      	cmp	r3, #55	; 0x37
 8008ade:	d9ef      	bls.n	8008ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ae0:	480d      	ldr	r0, [pc, #52]	; (8008b18 <prvInitialiseTaskLists+0x64>)
 8008ae2:	f7fe fae1 	bl	80070a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ae6:	480d      	ldr	r0, [pc, #52]	; (8008b1c <prvInitialiseTaskLists+0x68>)
 8008ae8:	f7fe fade 	bl	80070a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008aec:	480c      	ldr	r0, [pc, #48]	; (8008b20 <prvInitialiseTaskLists+0x6c>)
 8008aee:	f7fe fadb 	bl	80070a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008af2:	480c      	ldr	r0, [pc, #48]	; (8008b24 <prvInitialiseTaskLists+0x70>)
 8008af4:	f7fe fad8 	bl	80070a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008af8:	480b      	ldr	r0, [pc, #44]	; (8008b28 <prvInitialiseTaskLists+0x74>)
 8008afa:	f7fe fad5 	bl	80070a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <prvInitialiseTaskLists+0x78>)
 8008b00:	4a05      	ldr	r2, [pc, #20]	; (8008b18 <prvInitialiseTaskLists+0x64>)
 8008b02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <prvInitialiseTaskLists+0x7c>)
 8008b06:	4a05      	ldr	r2, [pc, #20]	; (8008b1c <prvInitialiseTaskLists+0x68>)
 8008b08:	601a      	str	r2, [r3, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	2001a468 	.word	0x2001a468
 8008b18:	2001a8c8 	.word	0x2001a8c8
 8008b1c:	2001a8dc 	.word	0x2001a8dc
 8008b20:	2001a8f8 	.word	0x2001a8f8
 8008b24:	2001a90c 	.word	0x2001a90c
 8008b28:	2001a924 	.word	0x2001a924
 8008b2c:	2001a8f0 	.word	0x2001a8f0
 8008b30:	2001a8f4 	.word	0x2001a8f4

08008b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b3a:	e019      	b.n	8008b70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b3c:	f001 f9a2 	bl	8009e84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <prvCheckTasksWaitingTermination+0x50>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fb35 	bl	80071bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b52:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <prvCheckTasksWaitingTermination+0x54>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	4a0b      	ldr	r2, [pc, #44]	; (8008b88 <prvCheckTasksWaitingTermination+0x54>)
 8008b5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <prvCheckTasksWaitingTermination+0x58>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	4a0a      	ldr	r2, [pc, #40]	; (8008b8c <prvCheckTasksWaitingTermination+0x58>)
 8008b64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b66:	f001 f9bd 	bl	8009ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f810 	bl	8008b90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <prvCheckTasksWaitingTermination+0x58>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e1      	bne.n	8008b3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b78:	bf00      	nop
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	2001a90c 	.word	0x2001a90c
 8008b88:	2001a938 	.word	0x2001a938
 8008b8c:	2001a920 	.word	0x2001a920

08008b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3354      	adds	r3, #84	; 0x54
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f002 fb39 	bl	800b214 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d108      	bne.n	8008bbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 fb55 	bl	800a260 <vPortFree>
				vPortFree( pxTCB );
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 fb52 	bl	800a260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bbc:	e018      	b.n	8008bf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d103      	bne.n	8008bd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 fb49 	bl	800a260 <vPortFree>
	}
 8008bce:	e00f      	b.n	8008bf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d00a      	beq.n	8008bf0 <prvDeleteTCB+0x60>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	60fb      	str	r3, [r7, #12]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <prvDeleteTCB+0x5e>
	}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bfe:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <prvResetNextTaskUnblockTime+0x38>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c08:	4b0a      	ldr	r3, [pc, #40]	; (8008c34 <prvResetNextTaskUnblockTime+0x3c>)
 8008c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c10:	e008      	b.n	8008c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <prvResetNextTaskUnblockTime+0x38>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a04      	ldr	r2, [pc, #16]	; (8008c34 <prvResetNextTaskUnblockTime+0x3c>)
 8008c22:	6013      	str	r3, [r2, #0]
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	2001a8f0 	.word	0x2001a8f0
 8008c34:	2001a958 	.word	0x2001a958

08008c38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <xTaskGetCurrentTaskHandle+0x1c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008c44:	687b      	ldr	r3, [r7, #4]
	}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	2001a464 	.word	0x2001a464

08008c58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c5e:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <xTaskGetSchedulerState+0x34>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c66:	2301      	movs	r3, #1
 8008c68:	607b      	str	r3, [r7, #4]
 8008c6a:	e008      	b.n	8008c7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c6c:	4b08      	ldr	r3, [pc, #32]	; (8008c90 <xTaskGetSchedulerState+0x38>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c74:	2302      	movs	r3, #2
 8008c76:	607b      	str	r3, [r7, #4]
 8008c78:	e001      	b.n	8008c7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c7e:	687b      	ldr	r3, [r7, #4]
	}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	2001a944 	.word	0x2001a944
 8008c90:	2001a960 	.word	0x2001a960

08008c94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d051      	beq.n	8008d4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cae:	4b2a      	ldr	r3, [pc, #168]	; (8008d58 <xTaskPriorityInherit+0xc4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d241      	bcs.n	8008d3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	db06      	blt.n	8008cce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <xTaskPriorityInherit+0xc4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6959      	ldr	r1, [r3, #20]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4a1f      	ldr	r2, [pc, #124]	; (8008d5c <xTaskPriorityInherit+0xc8>)
 8008ce0:	4413      	add	r3, r2
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	d122      	bne.n	8008d2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fa66 	bl	80071bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cf0:	4b19      	ldr	r3, [pc, #100]	; (8008d58 <xTaskPriorityInherit+0xc4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfe:	4b18      	ldr	r3, [pc, #96]	; (8008d60 <xTaskPriorityInherit+0xcc>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d903      	bls.n	8008d0e <xTaskPriorityInherit+0x7a>
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a15      	ldr	r2, [pc, #84]	; (8008d60 <xTaskPriorityInherit+0xcc>)
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d12:	4613      	mov	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <xTaskPriorityInherit+0xc8>)
 8008d1c:	441a      	add	r2, r3
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f7fe f9ec 	bl	8007102 <vListInsertEnd>
 8008d2a:	e004      	b.n	8008d36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <xTaskPriorityInherit+0xc4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	e008      	b.n	8008d4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d40:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <xTaskPriorityInherit+0xc4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d201      	bcs.n	8008d4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	2001a464 	.word	0x2001a464
 8008d5c:	2001a468 	.word	0x2001a468
 8008d60:	2001a940 	.word	0x2001a940

08008d64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d056      	beq.n	8008e28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d7a:	4b2e      	ldr	r3, [pc, #184]	; (8008e34 <xTaskPriorityDisinherit+0xd0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d00a      	beq.n	8008d9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	60fb      	str	r3, [r7, #12]
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbc:	1e5a      	subs	r2, r3, #1
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d02c      	beq.n	8008e28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d128      	bne.n	8008e28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe f9ee 	bl	80071bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df8:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <xTaskPriorityDisinherit+0xd4>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d903      	bls.n	8008e08 <xTaskPriorityDisinherit+0xa4>
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	4a0c      	ldr	r2, [pc, #48]	; (8008e38 <xTaskPriorityDisinherit+0xd4>)
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4a09      	ldr	r2, [pc, #36]	; (8008e3c <xTaskPriorityDisinherit+0xd8>)
 8008e16:	441a      	add	r2, r3
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	f7fe f96f 	bl	8007102 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e28:	697b      	ldr	r3, [r7, #20]
	}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	2001a464 	.word	0x2001a464
 8008e38:	2001a940 	.word	0x2001a940
 8008e3c:	2001a468 	.word	0x2001a468

08008e40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d06a      	beq.n	8008f2e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	60fb      	str	r3, [r7, #12]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d902      	bls.n	8008e86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	e002      	b.n	8008e8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d04b      	beq.n	8008f2e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d146      	bne.n	8008f2e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ea0:	4b25      	ldr	r3, [pc, #148]	; (8008f38 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d10a      	bne.n	8008ec0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	60bb      	str	r3, [r7, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	db04      	blt.n	8008ede <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	6959      	ldr	r1, [r3, #20]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008eee:	4413      	add	r3, r2
 8008ef0:	4299      	cmp	r1, r3
 8008ef2:	d11c      	bne.n	8008f2e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe f95f 	bl	80071bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f02:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d903      	bls.n	8008f12 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	4a0c      	ldr	r2, [pc, #48]	; (8008f40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4a07      	ldr	r2, [pc, #28]	; (8008f3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f20:	441a      	add	r2, r3
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7fe f8ea 	bl	8007102 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f2e:	bf00      	nop
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	2001a464 	.word	0x2001a464
 8008f3c:	2001a468 	.word	0x2001a468
 8008f40:	2001a940 	.word	0x2001a940

08008f44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d004      	beq.n	8008f5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f56:	3201      	adds	r2, #1
 8008f58:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008f5a:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
	}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	2001a464 	.word	0x2001a464

08008f6c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008f7a:	f000 ff83 	bl	8009e84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008f7e:	4b29      	ldr	r3, [pc, #164]	; (8009024 <xTaskNotifyWait+0xb8>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d01c      	beq.n	8008fc6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008f8c:	4b25      	ldr	r3, [pc, #148]	; (8009024 <xTaskNotifyWait+0xb8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	43d2      	mvns	r2, r2
 8008f98:	400a      	ands	r2, r1
 8008f9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008f9e:	4b21      	ldr	r3, [pc, #132]	; (8009024 <xTaskNotifyWait+0xb8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00b      	beq.n	8008fc6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fae:	2101      	movs	r1, #1
 8008fb0:	6838      	ldr	r0, [r7, #0]
 8008fb2:	f000 f9dd 	bl	8009370 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008fb6:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <xTaskNotifyWait+0xbc>)
 8008fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008fc6:	f000 ff8d 	bl	8009ee4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008fca:	f000 ff5b 	bl	8009e84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d005      	beq.n	8008fe0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008fd4:	4b13      	ldr	r3, [pc, #76]	; (8009024 <xTaskNotifyWait+0xb8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008fe0:	4b10      	ldr	r3, [pc, #64]	; (8009024 <xTaskNotifyWait+0xb8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d002      	beq.n	8008ff4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e00a      	b.n	800900a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008ff4:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <xTaskNotifyWait+0xb8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	43d2      	mvns	r2, r2
 8009000:	400a      	ands	r2, r1
 8009002:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009006:	2301      	movs	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800900a:	4b06      	ldr	r3, [pc, #24]	; (8009024 <xTaskNotifyWait+0xb8>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009014:	f000 ff66 	bl	8009ee4 <vPortExitCritical>

		return xReturn;
 8009018:	697b      	ldr	r3, [r7, #20]
	}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	2001a464 	.word	0x2001a464
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	4613      	mov	r3, r2
 800903a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800903c:	2301      	movs	r3, #1
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10a      	bne.n	800905c <xTaskGenericNotify+0x30>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	61bb      	str	r3, [r7, #24]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009060:	f000 ff10 	bl	8009e84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d004      	beq.n	8009074 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800907a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b04      	cmp	r3, #4
 8009088:	d82d      	bhi.n	80090e6 <xTaskGenericNotify+0xba>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <xTaskGenericNotify+0x64>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	08009109 	.word	0x08009109
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090b7 	.word	0x080090b7
 800909c:	080090c7 	.word	0x080090c7
 80090a0:	080090d1 	.word	0x080090d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	431a      	orrs	r2, r3
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80090b4:	e02b      	b.n	800910e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80090c4:	e023      	b.n	800910e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80090ce:	e01e      	b.n	800910e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80090d0:	7ffb      	ldrb	r3, [r7, #31]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d004      	beq.n	80090e0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80090de:	e016      	b.n	800910e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80090e4:	e013      	b.n	800910e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d00c      	beq.n	800910c <xTaskGenericNotify+0xe0>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	617b      	str	r3, [r7, #20]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <xTaskGenericNotify+0xda>
					break;
 8009108:	bf00      	nop
 800910a:	e000      	b.n	800910e <xTaskGenericNotify+0xe2>

					break;
 800910c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800910e:	7ffb      	ldrb	r3, [r7, #31]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d13a      	bne.n	800918a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	3304      	adds	r3, #4
 8009118:	4618      	mov	r0, r3
 800911a:	f7fe f84f 	bl	80071bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009122:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <xTaskGenericNotify+0x16c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d903      	bls.n	8009132 <xTaskGenericNotify+0x106>
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912e:	4a1a      	ldr	r2, [pc, #104]	; (8009198 <xTaskGenericNotify+0x16c>)
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4a17      	ldr	r2, [pc, #92]	; (800919c <xTaskGenericNotify+0x170>)
 8009140:	441a      	add	r2, r3
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	3304      	adds	r3, #4
 8009146:	4619      	mov	r1, r3
 8009148:	4610      	mov	r0, r2
 800914a:	f7fd ffda 	bl	8007102 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <xTaskGenericNotify+0x140>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	613b      	str	r3, [r7, #16]
}
 8009168:	bf00      	nop
 800916a:	e7fe      	b.n	800916a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <xTaskGenericNotify+0x174>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	429a      	cmp	r2, r3
 8009178:	d907      	bls.n	800918a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800917a:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <xTaskGenericNotify+0x178>)
 800917c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800918a:	f000 feab 	bl	8009ee4 <vPortExitCritical>

		return xReturn;
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009190:	4618      	mov	r0, r3
 8009192:	3728      	adds	r7, #40	; 0x28
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	2001a940 	.word	0x2001a940
 800919c:	2001a468 	.word	0x2001a468
 80091a0:	2001a464 	.word	0x2001a464
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08e      	sub	sp, #56	; 0x38
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80091b8:	2301      	movs	r3, #1
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091d8:	f000 ff36 	bl	800a048 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80091e0:	f3ef 8211 	mrs	r2, BASEPRI
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	623a      	str	r2, [r7, #32]
 80091f6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80091f8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d004      	beq.n	800920c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	2202      	movs	r2, #2
 800921a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	2b04      	cmp	r3, #4
 8009222:	d82f      	bhi.n	8009284 <xTaskGenericNotifyFromISR+0xdc>
 8009224:	a201      	add	r2, pc, #4	; (adr r2, 800922c <xTaskGenericNotifyFromISR+0x84>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	080092a7 	.word	0x080092a7
 8009230:	08009241 	.word	0x08009241
 8009234:	08009253 	.word	0x08009253
 8009238:	08009263 	.word	0x08009263
 800923c:	0800926d 	.word	0x0800926d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	431a      	orrs	r2, r3
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009250:	e02c      	b.n	80092ac <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009260:	e024      	b.n	80092ac <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800926a:	e01f      	b.n	80092ac <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800926c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009270:	2b02      	cmp	r3, #2
 8009272:	d004      	beq.n	800927e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800927c:	e016      	b.n	80092ac <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800927e:	2300      	movs	r3, #0
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009282:	e013      	b.n	80092ac <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928e:	d00c      	beq.n	80092aa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61bb      	str	r3, [r7, #24]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80092a6:	bf00      	nop
 80092a8:	e000      	b.n	80092ac <xTaskGenericNotifyFromISR+0x104>
					break;
 80092aa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80092ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d146      	bne.n	8009342 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	617b      	str	r3, [r7, #20]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092d2:	4b21      	ldr	r3, [pc, #132]	; (8009358 <xTaskGenericNotifyFromISR+0x1b0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d11d      	bne.n	8009316 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	3304      	adds	r3, #4
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fd ff6c 	bl	80071bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	4b1c      	ldr	r3, [pc, #112]	; (800935c <xTaskGenericNotifyFromISR+0x1b4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d903      	bls.n	80092f8 <xTaskGenericNotifyFromISR+0x150>
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4a19      	ldr	r2, [pc, #100]	; (800935c <xTaskGenericNotifyFromISR+0x1b4>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	4613      	mov	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a16      	ldr	r2, [pc, #88]	; (8009360 <xTaskGenericNotifyFromISR+0x1b8>)
 8009306:	441a      	add	r2, r3
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7fd fef7 	bl	8007102 <vListInsertEnd>
 8009314:	e005      	b.n	8009322 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	3318      	adds	r3, #24
 800931a:	4619      	mov	r1, r3
 800931c:	4811      	ldr	r0, [pc, #68]	; (8009364 <xTaskGenericNotifyFromISR+0x1bc>)
 800931e:	f7fd fef0 	bl	8007102 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	4b10      	ldr	r3, [pc, #64]	; (8009368 <xTaskGenericNotifyFromISR+0x1c0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	429a      	cmp	r2, r3
 800932e:	d908      	bls.n	8009342 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009338:	2201      	movs	r2, #1
 800933a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800933c:	4b0b      	ldr	r3, [pc, #44]	; (800936c <xTaskGenericNotifyFromISR+0x1c4>)
 800933e:	2201      	movs	r2, #1
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f383 8811 	msr	BASEPRI, r3
}
 800934c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800934e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009350:	4618      	mov	r0, r3
 8009352:	3738      	adds	r7, #56	; 0x38
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	2001a960 	.word	0x2001a960
 800935c:	2001a940 	.word	0x2001a940
 8009360:	2001a468 	.word	0x2001a468
 8009364:	2001a8f8 	.word	0x2001a8f8
 8009368:	2001a464 	.word	0x2001a464
 800936c:	2001a94c 	.word	0x2001a94c

08009370 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800937a:	4b21      	ldr	r3, [pc, #132]	; (8009400 <prvAddCurrentTaskToDelayedList+0x90>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009380:	4b20      	ldr	r3, [pc, #128]	; (8009404 <prvAddCurrentTaskToDelayedList+0x94>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3304      	adds	r3, #4
 8009386:	4618      	mov	r0, r3
 8009388:	f7fd ff18 	bl	80071bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009392:	d10a      	bne.n	80093aa <prvAddCurrentTaskToDelayedList+0x3a>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d007      	beq.n	80093aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800939a:	4b1a      	ldr	r3, [pc, #104]	; (8009404 <prvAddCurrentTaskToDelayedList+0x94>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3304      	adds	r3, #4
 80093a0:	4619      	mov	r1, r3
 80093a2:	4819      	ldr	r0, [pc, #100]	; (8009408 <prvAddCurrentTaskToDelayedList+0x98>)
 80093a4:	f7fd fead 	bl	8007102 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093a8:	e026      	b.n	80093f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4413      	add	r3, r2
 80093b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093b2:	4b14      	ldr	r3, [pc, #80]	; (8009404 <prvAddCurrentTaskToDelayedList+0x94>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d209      	bcs.n	80093d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093c2:	4b12      	ldr	r3, [pc, #72]	; (800940c <prvAddCurrentTaskToDelayedList+0x9c>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <prvAddCurrentTaskToDelayedList+0x94>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7fd febb 	bl	800714a <vListInsert>
}
 80093d4:	e010      	b.n	80093f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093d6:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <prvAddCurrentTaskToDelayedList+0xa0>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <prvAddCurrentTaskToDelayedList+0x94>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3304      	adds	r3, #4
 80093e0:	4619      	mov	r1, r3
 80093e2:	4610      	mov	r0, r2
 80093e4:	f7fd feb1 	bl	800714a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093e8:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d202      	bcs.n	80093f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80093f2:	4a08      	ldr	r2, [pc, #32]	; (8009414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	6013      	str	r3, [r2, #0]
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	2001a93c 	.word	0x2001a93c
 8009404:	2001a464 	.word	0x2001a464
 8009408:	2001a924 	.word	0x2001a924
 800940c:	2001a8f4 	.word	0x2001a8f4
 8009410:	2001a8f0 	.word	0x2001a8f0
 8009414:	2001a958 	.word	0x2001a958

08009418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08a      	sub	sp, #40	; 0x28
 800941c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800941e:	2300      	movs	r3, #0
 8009420:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009422:	f000 fba1 	bl	8009b68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009426:	4b1c      	ldr	r3, [pc, #112]	; (8009498 <xTimerCreateTimerTask+0x80>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d021      	beq.n	8009472 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009436:	1d3a      	adds	r2, r7, #4
 8009438:	f107 0108 	add.w	r1, r7, #8
 800943c:	f107 030c 	add.w	r3, r7, #12
 8009440:	4618      	mov	r0, r3
 8009442:	f7fd fe17 	bl	8007074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	9202      	str	r2, [sp, #8]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	2302      	movs	r3, #2
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	460a      	mov	r2, r1
 8009458:	4910      	ldr	r1, [pc, #64]	; (800949c <xTimerCreateTimerTask+0x84>)
 800945a:	4811      	ldr	r0, [pc, #68]	; (80094a0 <xTimerCreateTimerTask+0x88>)
 800945c:	f7fe fdd8 	bl	8008010 <xTaskCreateStatic>
 8009460:	4603      	mov	r3, r0
 8009462:	4a10      	ldr	r2, [pc, #64]	; (80094a4 <xTimerCreateTimerTask+0x8c>)
 8009464:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <xTimerCreateTimerTask+0x8c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800946e:	2301      	movs	r3, #1
 8009470:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10a      	bne.n	800948e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	613b      	str	r3, [r7, #16]
}
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800948e:	697b      	ldr	r3, [r7, #20]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	2001a994 	.word	0x2001a994
 800949c:	0800e7e0 	.word	0x0800e7e0
 80094a0:	08009711 	.word	0x08009711
 80094a4:	2001a998 	.word	0x2001a998

080094a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80094b6:	202c      	movs	r0, #44	; 0x2c
 80094b8:	f000 fe06 	bl	800a0c8 <pvPortMalloc>
 80094bc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00d      	beq.n	80094e0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f843 	bl	8009566 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80094e0:	697b      	ldr	r3, [r7, #20]
	}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b08a      	sub	sp, #40	; 0x28
 80094ee:	af02      	add	r7, sp, #8
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80094f8:	232c      	movs	r3, #44	; 0x2c
 80094fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b2c      	cmp	r3, #44	; 0x2c
 8009500:	d00a      	beq.n	8009518 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	61bb      	str	r3, [r7, #24]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009518:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <xTimerCreateStatic+0x4c>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	617b      	str	r3, [r7, #20]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00d      	beq.n	800955c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	68b9      	ldr	r1, [r7, #8]
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f805 	bl	8009566 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800955c:	69fb      	ldr	r3, [r7, #28]
	}
 800955e:	4618      	mov	r0, r3
 8009560:	3720      	adds	r7, #32
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b086      	sub	sp, #24
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	607a      	str	r2, [r7, #4]
 8009572:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10a      	bne.n	8009590 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	617b      	str	r3, [r7, #20]
}
 800958c:	bf00      	nop
 800958e:	e7fe      	b.n	800958e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	2b00      	cmp	r3, #0
 8009594:	d01e      	beq.n	80095d4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009596:	f000 fae7 	bl	8009b68 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	6a3a      	ldr	r2, [r7, #32]
 80095b0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	3304      	adds	r3, #4
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fd fd96 	bl	80070e8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c8:	f043 0304 	orr.w	r3, r3, #4
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80095d4:	bf00      	nop
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xTimerGenericCommand+0x2e>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	623b      	str	r3, [r7, #32]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800960a:	4b1a      	ldr	r3, [pc, #104]	; (8009674 <xTimerGenericCommand+0x98>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d02a      	beq.n	8009668 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2b05      	cmp	r3, #5
 8009622:	dc18      	bgt.n	8009656 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009624:	f7ff fb18 	bl	8008c58 <xTaskGetSchedulerState>
 8009628:	4603      	mov	r3, r0
 800962a:	2b02      	cmp	r3, #2
 800962c:	d109      	bne.n	8009642 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800962e:	4b11      	ldr	r3, [pc, #68]	; (8009674 <xTimerGenericCommand+0x98>)
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f107 0110 	add.w	r1, r7, #16
 8009636:	2300      	movs	r3, #0
 8009638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963a:	f7fd ffdd 	bl	80075f8 <xQueueGenericSend>
 800963e:	6278      	str	r0, [r7, #36]	; 0x24
 8009640:	e012      	b.n	8009668 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009642:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <xTimerGenericCommand+0x98>)
 8009644:	6818      	ldr	r0, [r3, #0]
 8009646:	f107 0110 	add.w	r1, r7, #16
 800964a:	2300      	movs	r3, #0
 800964c:	2200      	movs	r2, #0
 800964e:	f7fd ffd3 	bl	80075f8 <xQueueGenericSend>
 8009652:	6278      	str	r0, [r7, #36]	; 0x24
 8009654:	e008      	b.n	8009668 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009656:	4b07      	ldr	r3, [pc, #28]	; (8009674 <xTimerGenericCommand+0x98>)
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f107 0110 	add.w	r1, r7, #16
 800965e:	2300      	movs	r3, #0
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	f7fe f8c7 	bl	80077f4 <xQueueGenericSendFromISR>
 8009666:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800966a:	4618      	mov	r0, r3
 800966c:	3728      	adds	r7, #40	; 0x28
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	2001a994 	.word	0x2001a994

08009678 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af02      	add	r7, sp, #8
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009682:	4b22      	ldr	r3, [pc, #136]	; (800970c <prvProcessExpiredTimer+0x94>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	3304      	adds	r3, #4
 8009690:	4618      	mov	r0, r3
 8009692:	f7fd fd93 	bl	80071bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d022      	beq.n	80096ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	699a      	ldr	r2, [r3, #24]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	18d1      	adds	r1, r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	6978      	ldr	r0, [r7, #20]
 80096b2:	f000 f8d1 	bl	8009858 <prvInsertTimerInActiveList>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01f      	beq.n	80096fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096bc:	2300      	movs	r3, #0
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	2300      	movs	r3, #0
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	2100      	movs	r1, #0
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	f7ff ff88 	bl	80095dc <xTimerGenericCommand>
 80096cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d113      	bne.n	80096fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	6978      	ldr	r0, [r7, #20]
 8009702:	4798      	blx	r3
}
 8009704:	bf00      	nop
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	2001a98c 	.word	0x2001a98c

08009710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009718:	f107 0308 	add.w	r3, r7, #8
 800971c:	4618      	mov	r0, r3
 800971e:	f000 f857 	bl	80097d0 <prvGetNextExpireTime>
 8009722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4619      	mov	r1, r3
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 f803 	bl	8009734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800972e:	f000 f8d5 	bl	80098dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009732:	e7f1      	b.n	8009718 <prvTimerTask+0x8>

08009734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800973e:	f7fe fe8f 	bl	8008460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009742:	f107 0308 	add.w	r3, r7, #8
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f866 	bl	8009818 <prvSampleTimeNow>
 800974c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d130      	bne.n	80097b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <prvProcessTimerOrBlockTask+0x3c>
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	429a      	cmp	r2, r3
 8009760:	d806      	bhi.n	8009770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009762:	f7fe fe8b 	bl	800847c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ff85 	bl	8009678 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800976e:	e024      	b.n	80097ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009776:	4b13      	ldr	r3, [pc, #76]	; (80097c4 <prvProcessTimerOrBlockTask+0x90>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <prvProcessTimerOrBlockTask+0x50>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <prvProcessTimerOrBlockTask+0x52>
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <prvProcessTimerOrBlockTask+0x94>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4619      	mov	r1, r3
 8009796:	f7fe fc07 	bl	8007fa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800979a:	f7fe fe6f 	bl	800847c <xTaskResumeAll>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <prvProcessTimerOrBlockTask+0x98>)
 80097a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	f3bf 8f6f 	isb	sy
}
 80097b4:	e001      	b.n	80097ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097b6:	f7fe fe61 	bl	800847c <xTaskResumeAll>
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	2001a990 	.word	0x2001a990
 80097c8:	2001a994 	.word	0x2001a994
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097d8:	4b0e      	ldr	r3, [pc, #56]	; (8009814 <prvGetNextExpireTime+0x44>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <prvGetNextExpireTime+0x16>
 80097e2:	2201      	movs	r2, #1
 80097e4:	e000      	b.n	80097e8 <prvGetNextExpireTime+0x18>
 80097e6:	2200      	movs	r2, #0
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d105      	bne.n	8009800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <prvGetNextExpireTime+0x44>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e001      	b.n	8009804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009804:	68fb      	ldr	r3, [r7, #12]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	2001a98c 	.word	0x2001a98c

08009818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009820:	f7fe feca 	bl	80085b8 <xTaskGetTickCount>
 8009824:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <prvSampleTimeNow+0x3c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	429a      	cmp	r2, r3
 800982e:	d205      	bcs.n	800983c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009830:	f000 f936 	bl	8009aa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e002      	b.n	8009842 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009842:	4a04      	ldr	r2, [pc, #16]	; (8009854 <prvSampleTimeNow+0x3c>)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009848:	68fb      	ldr	r3, [r7, #12]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	2001a99c 	.word	0x2001a99c

08009858 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d812      	bhi.n	80098a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	1ad2      	subs	r2, r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	429a      	cmp	r2, r3
 800988a:	d302      	bcc.n	8009892 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	e01b      	b.n	80098ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009892:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <prvInsertTimerInActiveList+0x7c>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3304      	adds	r3, #4
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f7fd fc54 	bl	800714a <vListInsert>
 80098a2:	e012      	b.n	80098ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d206      	bcs.n	80098ba <prvInsertTimerInActiveList+0x62>
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d302      	bcc.n	80098ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e007      	b.n	80098ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098ba:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <prvInsertTimerInActiveList+0x80>)
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3304      	adds	r3, #4
 80098c2:	4619      	mov	r1, r3
 80098c4:	4610      	mov	r0, r2
 80098c6:	f7fd fc40 	bl	800714a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098ca:	697b      	ldr	r3, [r7, #20]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	2001a990 	.word	0x2001a990
 80098d8:	2001a98c 	.word	0x2001a98c

080098dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08e      	sub	sp, #56	; 0x38
 80098e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098e2:	e0ca      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da18      	bge.n	800991c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098ea:	1d3b      	adds	r3, r7, #4
 80098ec:	3304      	adds	r3, #4
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	61fb      	str	r3, [r7, #28]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009912:	6850      	ldr	r0, [r2, #4]
 8009914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009916:	6892      	ldr	r2, [r2, #8]
 8009918:	4611      	mov	r1, r2
 800991a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	f2c0 80aa 	blt.w	8009a78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd fc41 	bl	80071bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800993a:	463b      	mov	r3, r7
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff ff6b 	bl	8009818 <prvSampleTimeNow>
 8009942:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b09      	cmp	r3, #9
 8009948:	f200 8097 	bhi.w	8009a7a <prvProcessReceivedCommands+0x19e>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <prvProcessReceivedCommands+0x78>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	0800997d 	.word	0x0800997d
 8009958:	0800997d 	.word	0x0800997d
 800995c:	0800997d 	.word	0x0800997d
 8009960:	080099f1 	.word	0x080099f1
 8009964:	08009a05 	.word	0x08009a05
 8009968:	08009a4f 	.word	0x08009a4f
 800996c:	0800997d 	.word	0x0800997d
 8009970:	0800997d 	.word	0x0800997d
 8009974:	080099f1 	.word	0x080099f1
 8009978:	08009a05 	.word	0x08009a05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	18d1      	adds	r1, r2, r3
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999c:	f7ff ff5c 	bl	8009858 <prvInsertTimerInActiveList>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d069      	beq.n	8009a7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d05e      	beq.n	8009a7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	441a      	add	r2, r3
 80099c4:	2300      	movs	r3, #0
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	2300      	movs	r3, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ce:	f7ff fe05 	bl	80095dc <xTimerGenericCommand>
 80099d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d14f      	bne.n	8009a7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	61bb      	str	r3, [r7, #24]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a02:	e03a      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	617b      	str	r3, [r7, #20]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	18d1      	adds	r1, r2, r3
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a48:	f7ff ff06 	bl	8009858 <prvInsertTimerInActiveList>
					break;
 8009a4c:	e015      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d103      	bne.n	8009a64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a5e:	f000 fbff 	bl	800a260 <vPortFree>
 8009a62:	e00a      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a6a:	f023 0301 	bic.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a76:	e000      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a7a:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <prvProcessReceivedCommands+0x1c0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	1d39      	adds	r1, r7, #4
 8009a80:	2200      	movs	r2, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fd ff52 	bl	800792c <xQueueReceive>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f47f af2a 	bne.w	80098e4 <prvProcessReceivedCommands+0x8>
	}
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	3730      	adds	r7, #48	; 0x30
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	2001a994 	.word	0x2001a994

08009aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aa6:	e048      	b.n	8009b3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aa8:	4b2d      	ldr	r3, [pc, #180]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab2:	4b2b      	ldr	r3, [pc, #172]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fd fb7b 	bl	80071bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d02e      	beq.n	8009b3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d90e      	bls.n	8009b0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009afa:	4b19      	ldr	r3, [pc, #100]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3304      	adds	r3, #4
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f7fd fb20 	bl	800714a <vListInsert>
 8009b0a:	e016      	b.n	8009b3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	2300      	movs	r3, #0
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	2100      	movs	r1, #0
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fd60 	bl	80095dc <xTimerGenericCommand>
 8009b1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	603b      	str	r3, [r7, #0]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1b1      	bne.n	8009aa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <prvSwitchTimerLists+0xc4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a04      	ldr	r2, [pc, #16]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b52:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <prvSwitchTimerLists+0xc4>)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	6013      	str	r3, [r2, #0]
}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	2001a98c 	.word	0x2001a98c
 8009b64:	2001a990 	.word	0x2001a990

08009b68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b6e:	f000 f989 	bl	8009e84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b72:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d120      	bne.n	8009bbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b7a:	4814      	ldr	r0, [pc, #80]	; (8009bcc <prvCheckForValidListAndQueue+0x64>)
 8009b7c:	f7fd fa94 	bl	80070a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b80:	4813      	ldr	r0, [pc, #76]	; (8009bd0 <prvCheckForValidListAndQueue+0x68>)
 8009b82:	f7fd fa91 	bl	80070a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <prvCheckForValidListAndQueue+0x6c>)
 8009b88:	4a10      	ldr	r2, [pc, #64]	; (8009bcc <prvCheckForValidListAndQueue+0x64>)
 8009b8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b8c:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <prvCheckForValidListAndQueue+0x70>)
 8009b8e:	4a10      	ldr	r2, [pc, #64]	; (8009bd0 <prvCheckForValidListAndQueue+0x68>)
 8009b90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b92:	2300      	movs	r3, #0
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <prvCheckForValidListAndQueue+0x74>)
 8009b98:	4a11      	ldr	r2, [pc, #68]	; (8009be0 <prvCheckForValidListAndQueue+0x78>)
 8009b9a:	2110      	movs	r1, #16
 8009b9c:	200a      	movs	r0, #10
 8009b9e:	f7fd fb9f 	bl	80072e0 <xQueueGenericCreateStatic>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4a08      	ldr	r2, [pc, #32]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009ba6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ba8:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d005      	beq.n	8009bbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	490b      	ldr	r1, [pc, #44]	; (8009be4 <prvCheckForValidListAndQueue+0x7c>)
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe f9cc 	bl	8007f54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bbc:	f000 f992 	bl	8009ee4 <vPortExitCritical>
}
 8009bc0:	bf00      	nop
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	2001a994 	.word	0x2001a994
 8009bcc:	2001a964 	.word	0x2001a964
 8009bd0:	2001a978 	.word	0x2001a978
 8009bd4:	2001a98c 	.word	0x2001a98c
 8009bd8:	2001a990 	.word	0x2001a990
 8009bdc:	2001aa40 	.word	0x2001aa40
 8009be0:	2001a9a0 	.word	0x2001a9a0
 8009be4:	0800e7e8 	.word	0x0800e7e8

08009be8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <pvTimerGetTimerID+0x28>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	60fb      	str	r3, [r7, #12]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009c10:	f000 f938 	bl	8009e84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009c1a:	f000 f963 	bl	8009ee4 <vPortExitCritical>

	return pvReturn;
 8009c1e:	693b      	ldr	r3, [r7, #16]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3b04      	subs	r3, #4
 8009c38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3b04      	subs	r3, #4
 8009c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f023 0201 	bic.w	r2, r3, #1
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <pxPortInitialiseStack+0x64>)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3b14      	subs	r3, #20
 8009c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3b04      	subs	r3, #4
 8009c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f06f 0202 	mvn.w	r2, #2
 8009c76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	3b20      	subs	r3, #32
 8009c7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	08009c91 	.word	0x08009c91

08009c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c9a:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <prvTaskExitError+0x54>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d00a      	beq.n	8009cba <prvTaskExitError+0x2a>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	60fb      	str	r3, [r7, #12]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <prvTaskExitError+0x28>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	60bb      	str	r3, [r7, #8]
}
 8009ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cce:	bf00      	nop
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0fc      	beq.n	8009cd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	bf00      	nop
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	2000000c 	.word	0x2000000c
	...

08009cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <pxCurrentTCBConst2>)
 8009cf2:	6819      	ldr	r1, [r3, #0]
 8009cf4:	6808      	ldr	r0, [r1, #0]
 8009cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfa:	f380 8809 	msr	PSP, r0
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f380 8811 	msr	BASEPRI, r0
 8009d0a:	4770      	bx	lr
 8009d0c:	f3af 8000 	nop.w

08009d10 <pxCurrentTCBConst2>:
 8009d10:	2001a464 	.word	0x2001a464
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop

08009d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d18:	4808      	ldr	r0, [pc, #32]	; (8009d3c <prvPortStartFirstTask+0x24>)
 8009d1a:	6800      	ldr	r0, [r0, #0]
 8009d1c:	6800      	ldr	r0, [r0, #0]
 8009d1e:	f380 8808 	msr	MSP, r0
 8009d22:	f04f 0000 	mov.w	r0, #0
 8009d26:	f380 8814 	msr	CONTROL, r0
 8009d2a:	b662      	cpsie	i
 8009d2c:	b661      	cpsie	f
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	df00      	svc	0
 8009d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d3a:	bf00      	nop
 8009d3c:	e000ed08 	.word	0xe000ed08

08009d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d46:	4b46      	ldr	r3, [pc, #280]	; (8009e60 <xPortStartScheduler+0x120>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a46      	ldr	r2, [pc, #280]	; (8009e64 <xPortStartScheduler+0x124>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10a      	bne.n	8009d66 <xPortStartScheduler+0x26>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	613b      	str	r3, [r7, #16]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d66:	4b3e      	ldr	r3, [pc, #248]	; (8009e60 <xPortStartScheduler+0x120>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a3f      	ldr	r2, [pc, #252]	; (8009e68 <xPortStartScheduler+0x128>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d10a      	bne.n	8009d86 <xPortStartScheduler+0x46>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	60fb      	str	r3, [r7, #12]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d86:	4b39      	ldr	r3, [pc, #228]	; (8009e6c <xPortStartScheduler+0x12c>)
 8009d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	22ff      	movs	r2, #255	; 0xff
 8009d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4b31      	ldr	r3, [pc, #196]	; (8009e70 <xPortStartScheduler+0x130>)
 8009dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dae:	4b31      	ldr	r3, [pc, #196]	; (8009e74 <xPortStartScheduler+0x134>)
 8009db0:	2207      	movs	r2, #7
 8009db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009db4:	e009      	b.n	8009dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009db6:	4b2f      	ldr	r3, [pc, #188]	; (8009e74 <xPortStartScheduler+0x134>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	4a2d      	ldr	r2, [pc, #180]	; (8009e74 <xPortStartScheduler+0x134>)
 8009dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd2:	2b80      	cmp	r3, #128	; 0x80
 8009dd4:	d0ef      	beq.n	8009db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009dd6:	4b27      	ldr	r3, [pc, #156]	; (8009e74 <xPortStartScheduler+0x134>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f1c3 0307 	rsb	r3, r3, #7
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d00a      	beq.n	8009df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	60bb      	str	r3, [r7, #8]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009df8:	4b1e      	ldr	r3, [pc, #120]	; (8009e74 <xPortStartScheduler+0x134>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	4a1d      	ldr	r2, [pc, #116]	; (8009e74 <xPortStartScheduler+0x134>)
 8009e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e02:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <xPortStartScheduler+0x134>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e0a:	4a1a      	ldr	r2, [pc, #104]	; (8009e74 <xPortStartScheduler+0x134>)
 8009e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e16:	4b18      	ldr	r3, [pc, #96]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a17      	ldr	r2, [pc, #92]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e22:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a14      	ldr	r2, [pc, #80]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e2e:	f000 f8dd 	bl	8009fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e32:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <xPortStartScheduler+0x13c>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e38:	f000 f8fc 	bl	800a034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e3c:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <xPortStartScheduler+0x140>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a0f      	ldr	r2, [pc, #60]	; (8009e80 <xPortStartScheduler+0x140>)
 8009e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e48:	f7ff ff66 	bl	8009d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e4c:	f7fe fc7e 	bl	800874c <vTaskSwitchContext>
	prvTaskExitError();
 8009e50:	f7ff ff1e 	bl	8009c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	e000ed00 	.word	0xe000ed00
 8009e64:	410fc271 	.word	0x410fc271
 8009e68:	410fc270 	.word	0x410fc270
 8009e6c:	e000e400 	.word	0xe000e400
 8009e70:	2001aa90 	.word	0x2001aa90
 8009e74:	2001aa94 	.word	0x2001aa94
 8009e78:	e000ed20 	.word	0xe000ed20
 8009e7c:	2000000c 	.word	0x2000000c
 8009e80:	e000ef34 	.word	0xe000ef34

08009e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	607b      	str	r3, [r7, #4]
}
 8009e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e9e:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <vPortEnterCritical+0x58>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a0d      	ldr	r2, [pc, #52]	; (8009edc <vPortEnterCritical+0x58>)
 8009ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <vPortEnterCritical+0x58>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d10f      	bne.n	8009ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009eb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ee0 <vPortEnterCritical+0x5c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00a      	beq.n	8009ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	603b      	str	r3, [r7, #0]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <vPortEnterCritical+0x4a>
	}
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	2000000c 	.word	0x2000000c
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eea:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <vPortExitCritical+0x50>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10a      	bne.n	8009f08 <vPortExitCritical+0x24>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	607b      	str	r3, [r7, #4]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <vPortExitCritical+0x50>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	4a09      	ldr	r2, [pc, #36]	; (8009f34 <vPortExitCritical+0x50>)
 8009f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f12:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <vPortExitCritical+0x50>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d105      	bne.n	8009f26 <vPortExitCritical+0x42>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	f383 8811 	msr	BASEPRI, r3
}
 8009f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	2000000c 	.word	0x2000000c
	...

08009f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f40:	f3ef 8009 	mrs	r0, PSP
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	4b15      	ldr	r3, [pc, #84]	; (8009fa0 <pxCurrentTCBConst>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	f01e 0f10 	tst.w	lr, #16
 8009f50:	bf08      	it	eq
 8009f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	6010      	str	r0, [r2, #0]
 8009f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f64:	f380 8811 	msr	BASEPRI, r0
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f7fe fbec 	bl	800874c <vTaskSwitchContext>
 8009f74:	f04f 0000 	mov.w	r0, #0
 8009f78:	f380 8811 	msr	BASEPRI, r0
 8009f7c:	bc09      	pop	{r0, r3}
 8009f7e:	6819      	ldr	r1, [r3, #0]
 8009f80:	6808      	ldr	r0, [r1, #0]
 8009f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f86:	f01e 0f10 	tst.w	lr, #16
 8009f8a:	bf08      	it	eq
 8009f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f90:	f380 8809 	msr	PSP, r0
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	f3af 8000 	nop.w

08009fa0 <pxCurrentTCBConst>:
 8009fa0:	2001a464 	.word	0x2001a464
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop

08009fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fc2:	f7fe fb09 	bl	80085d8 <xTaskIncrementTick>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fcc:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <xPortSysTickHandler+0x40>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	f383 8811 	msr	BASEPRI, r3
}
 8009fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fe0:	bf00      	nop
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fec:	b480      	push	{r7}
 8009fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <vPortSetupTimerInterrupt+0x34>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <vPortSetupTimerInterrupt+0x38>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ffc:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <vPortSetupTimerInterrupt+0x3c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a0a      	ldr	r2, [pc, #40]	; (800a02c <vPortSetupTimerInterrupt+0x40>)
 800a002:	fba2 2303 	umull	r2, r3, r2, r3
 800a006:	099b      	lsrs	r3, r3, #6
 800a008:	4a09      	ldr	r2, [pc, #36]	; (800a030 <vPortSetupTimerInterrupt+0x44>)
 800a00a:	3b01      	subs	r3, #1
 800a00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a00e:	4b04      	ldr	r3, [pc, #16]	; (800a020 <vPortSetupTimerInterrupt+0x34>)
 800a010:	2207      	movs	r2, #7
 800a012:	601a      	str	r2, [r3, #0]
}
 800a014:	bf00      	nop
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	e000e010 	.word	0xe000e010
 800a024:	e000e018 	.word	0xe000e018
 800a028:	20000000 	.word	0x20000000
 800a02c:	10624dd3 	.word	0x10624dd3
 800a030:	e000e014 	.word	0xe000e014

0800a034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a044 <vPortEnableVFP+0x10>
 800a038:	6801      	ldr	r1, [r0, #0]
 800a03a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a03e:	6001      	str	r1, [r0, #0]
 800a040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a042:	bf00      	nop
 800a044:	e000ed88 	.word	0xe000ed88

0800a048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a04e:	f3ef 8305 	mrs	r3, IPSR
 800a052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2b0f      	cmp	r3, #15
 800a058:	d914      	bls.n	800a084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a05a:	4a17      	ldr	r2, [pc, #92]	; (800a0b8 <vPortValidateInterruptPriority+0x70>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a064:	4b15      	ldr	r3, [pc, #84]	; (800a0bc <vPortValidateInterruptPriority+0x74>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	7afa      	ldrb	r2, [r7, #11]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d20a      	bcs.n	800a084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	607b      	str	r3, [r7, #4]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a084:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <vPortValidateInterruptPriority+0x78>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a08c:	4b0d      	ldr	r3, [pc, #52]	; (800a0c4 <vPortValidateInterruptPriority+0x7c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d90a      	bls.n	800a0aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	603b      	str	r3, [r7, #0]
}
 800a0a6:	bf00      	nop
 800a0a8:	e7fe      	b.n	800a0a8 <vPortValidateInterruptPriority+0x60>
	}
 800a0aa:	bf00      	nop
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	e000e3f0 	.word	0xe000e3f0
 800a0bc:	2001aa90 	.word	0x2001aa90
 800a0c0:	e000ed0c 	.word	0xe000ed0c
 800a0c4:	2001aa94 	.word	0x2001aa94

0800a0c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08a      	sub	sp, #40	; 0x28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0d4:	f7fe f9c4 	bl	8008460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0d8:	4b5b      	ldr	r3, [pc, #364]	; (800a248 <pvPortMalloc+0x180>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0e0:	f000 f920 	bl	800a324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0e4:	4b59      	ldr	r3, [pc, #356]	; (800a24c <pvPortMalloc+0x184>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f040 8093 	bne.w	800a218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01d      	beq.n	800a134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b00      	cmp	r3, #0
 800a108:	d014      	beq.n	800a134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f023 0307 	bic.w	r3, r3, #7
 800a110:	3308      	adds	r3, #8
 800a112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <pvPortMalloc+0x6c>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	617b      	str	r3, [r7, #20]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d06e      	beq.n	800a218 <pvPortMalloc+0x150>
 800a13a:	4b45      	ldr	r3, [pc, #276]	; (800a250 <pvPortMalloc+0x188>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d869      	bhi.n	800a218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a144:	4b43      	ldr	r3, [pc, #268]	; (800a254 <pvPortMalloc+0x18c>)
 800a146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a148:	4b42      	ldr	r3, [pc, #264]	; (800a254 <pvPortMalloc+0x18c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a14e:	e004      	b.n	800a15a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <pvPortMalloc+0xa4>
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1f1      	bne.n	800a150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a16c:	4b36      	ldr	r3, [pc, #216]	; (800a248 <pvPortMalloc+0x180>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a172:	429a      	cmp	r2, r3
 800a174:	d050      	beq.n	800a218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2208      	movs	r2, #8
 800a17c:	4413      	add	r3, r2
 800a17e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	2308      	movs	r3, #8
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	429a      	cmp	r2, r3
 800a196:	d91f      	bls.n	800a1d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4413      	add	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	613b      	str	r3, [r7, #16]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	1ad2      	subs	r2, r2, r3
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1d2:	69b8      	ldr	r0, [r7, #24]
 800a1d4:	f000 f908 	bl	800a3e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1d8:	4b1d      	ldr	r3, [pc, #116]	; (800a250 <pvPortMalloc+0x188>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	4a1b      	ldr	r2, [pc, #108]	; (800a250 <pvPortMalloc+0x188>)
 800a1e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1e6:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <pvPortMalloc+0x188>)
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	4b1b      	ldr	r3, [pc, #108]	; (800a258 <pvPortMalloc+0x190>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d203      	bcs.n	800a1fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1f2:	4b17      	ldr	r3, [pc, #92]	; (800a250 <pvPortMalloc+0x188>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a18      	ldr	r2, [pc, #96]	; (800a258 <pvPortMalloc+0x190>)
 800a1f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <pvPortMalloc+0x184>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	431a      	orrs	r2, r3
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a20e:	4b13      	ldr	r3, [pc, #76]	; (800a25c <pvPortMalloc+0x194>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	4a11      	ldr	r2, [pc, #68]	; (800a25c <pvPortMalloc+0x194>)
 800a216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a218:	f7fe f930 	bl	800847c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <pvPortMalloc+0x174>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	60fb      	str	r3, [r7, #12]
}
 800a238:	bf00      	nop
 800a23a:	e7fe      	b.n	800a23a <pvPortMalloc+0x172>
	return pvReturn;
 800a23c:	69fb      	ldr	r3, [r7, #28]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3728      	adds	r7, #40	; 0x28
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	2001ca40 	.word	0x2001ca40
 800a24c:	2001ca54 	.word	0x2001ca54
 800a250:	2001ca44 	.word	0x2001ca44
 800a254:	2001ca38 	.word	0x2001ca38
 800a258:	2001ca48 	.word	0x2001ca48
 800a25c:	2001ca4c 	.word	0x2001ca4c

0800a260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d04d      	beq.n	800a30e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a272:	2308      	movs	r3, #8
 800a274:	425b      	negs	r3, r3
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4413      	add	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	4b24      	ldr	r3, [pc, #144]	; (800a318 <vPortFree+0xb8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4013      	ands	r3, r2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10a      	bne.n	800a2a4 <vPortFree+0x44>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	60fb      	str	r3, [r7, #12]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <vPortFree+0x62>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	60bb      	str	r3, [r7, #8]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <vPortFree+0xb8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d01e      	beq.n	800a30e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d11a      	bne.n	800a30e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <vPortFree+0xb8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	43db      	mvns	r3, r3
 800a2e2:	401a      	ands	r2, r3
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2e8:	f7fe f8ba 	bl	8008460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	; (800a31c <vPortFree+0xbc>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	4a09      	ldr	r2, [pc, #36]	; (800a31c <vPortFree+0xbc>)
 800a2f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2fa:	6938      	ldr	r0, [r7, #16]
 800a2fc:	f000 f874 	bl	800a3e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <vPortFree+0xc0>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	4a06      	ldr	r2, [pc, #24]	; (800a320 <vPortFree+0xc0>)
 800a308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a30a:	f7fe f8b7 	bl	800847c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a30e:	bf00      	nop
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	2001ca54 	.word	0x2001ca54
 800a31c:	2001ca44 	.word	0x2001ca44
 800a320:	2001ca50 	.word	0x2001ca50

0800a324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a32a:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 800a32e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a330:	4b27      	ldr	r3, [pc, #156]	; (800a3d0 <prvHeapInit+0xac>)
 800a332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00c      	beq.n	800a358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3307      	adds	r3, #7
 800a342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 0307 	bic.w	r3, r3, #7
 800a34a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	4a1f      	ldr	r2, [pc, #124]	; (800a3d0 <prvHeapInit+0xac>)
 800a354:	4413      	add	r3, r2
 800a356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a35c:	4a1d      	ldr	r2, [pc, #116]	; (800a3d4 <prvHeapInit+0xb0>)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a362:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <prvHeapInit+0xb0>)
 800a364:	2200      	movs	r2, #0
 800a366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a370:	2208      	movs	r2, #8
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	1a9b      	subs	r3, r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0307 	bic.w	r3, r3, #7
 800a37e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <prvHeapInit+0xb4>)
 800a384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a386:	4b14      	ldr	r3, [pc, #80]	; (800a3d8 <prvHeapInit+0xb4>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2200      	movs	r2, #0
 800a38c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a38e:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <prvHeapInit+0xb4>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	1ad2      	subs	r2, r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3a4:	4b0c      	ldr	r3, [pc, #48]	; (800a3d8 <prvHeapInit+0xb4>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	4a0a      	ldr	r2, [pc, #40]	; (800a3dc <prvHeapInit+0xb8>)
 800a3b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	4a09      	ldr	r2, [pc, #36]	; (800a3e0 <prvHeapInit+0xbc>)
 800a3ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3bc:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <prvHeapInit+0xc0>)
 800a3be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3c2:	601a      	str	r2, [r3, #0]
}
 800a3c4:	bf00      	nop
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	2001aa98 	.word	0x2001aa98
 800a3d4:	2001ca38 	.word	0x2001ca38
 800a3d8:	2001ca40 	.word	0x2001ca40
 800a3dc:	2001ca48 	.word	0x2001ca48
 800a3e0:	2001ca44 	.word	0x2001ca44
 800a3e4:	2001ca54 	.word	0x2001ca54

0800a3e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3f0:	4b28      	ldr	r3, [pc, #160]	; (800a494 <prvInsertBlockIntoFreeList+0xac>)
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	e002      	b.n	800a3fc <prvInsertBlockIntoFreeList+0x14>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	429a      	cmp	r2, r3
 800a404:	d8f7      	bhi.n	800a3f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	4413      	add	r3, r2
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	429a      	cmp	r2, r3
 800a416:	d108      	bne.n	800a42a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	441a      	add	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	441a      	add	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d118      	bne.n	800a470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	4b15      	ldr	r3, [pc, #84]	; (800a498 <prvInsertBlockIntoFreeList+0xb0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d00d      	beq.n	800a466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	441a      	add	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	e008      	b.n	800a478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a466:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <prvInsertBlockIntoFreeList+0xb0>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	601a      	str	r2, [r3, #0]
 800a46e:	e003      	b.n	800a478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d002      	beq.n	800a486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a486:	bf00      	nop
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	2001ca38 	.word	0x2001ca38
 800a498:	2001ca40 	.word	0x2001ca40

0800a49c <__errno>:
 800a49c:	4b01      	ldr	r3, [pc, #4]	; (800a4a4 <__errno+0x8>)
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000010 	.word	0x20000010

0800a4a8 <std>:
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	b510      	push	{r4, lr}
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a4b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4b6:	6083      	str	r3, [r0, #8]
 800a4b8:	8181      	strh	r1, [r0, #12]
 800a4ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a4bc:	81c2      	strh	r2, [r0, #14]
 800a4be:	6183      	str	r3, [r0, #24]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	2208      	movs	r2, #8
 800a4c4:	305c      	adds	r0, #92	; 0x5c
 800a4c6:	f000 f91a 	bl	800a6fe <memset>
 800a4ca:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <std+0x38>)
 800a4cc:	6263      	str	r3, [r4, #36]	; 0x24
 800a4ce:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <std+0x3c>)
 800a4d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4d2:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <std+0x40>)
 800a4d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4d6:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <std+0x44>)
 800a4d8:	6224      	str	r4, [r4, #32]
 800a4da:	6323      	str	r3, [r4, #48]	; 0x30
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800b2ed 	.word	0x0800b2ed
 800a4e4:	0800b30f 	.word	0x0800b30f
 800a4e8:	0800b347 	.word	0x0800b347
 800a4ec:	0800b36b 	.word	0x0800b36b

0800a4f0 <_cleanup_r>:
 800a4f0:	4901      	ldr	r1, [pc, #4]	; (800a4f8 <_cleanup_r+0x8>)
 800a4f2:	f000 b8af 	b.w	800a654 <_fwalk_reent>
 800a4f6:	bf00      	nop
 800a4f8:	0800c339 	.word	0x0800c339

0800a4fc <__sfmoreglue>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	2268      	movs	r2, #104	; 0x68
 800a500:	1e4d      	subs	r5, r1, #1
 800a502:	4355      	muls	r5, r2
 800a504:	460e      	mov	r6, r1
 800a506:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a50a:	f000 f921 	bl	800a750 <_malloc_r>
 800a50e:	4604      	mov	r4, r0
 800a510:	b140      	cbz	r0, 800a524 <__sfmoreglue+0x28>
 800a512:	2100      	movs	r1, #0
 800a514:	e9c0 1600 	strd	r1, r6, [r0]
 800a518:	300c      	adds	r0, #12
 800a51a:	60a0      	str	r0, [r4, #8]
 800a51c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a520:	f000 f8ed 	bl	800a6fe <memset>
 800a524:	4620      	mov	r0, r4
 800a526:	bd70      	pop	{r4, r5, r6, pc}

0800a528 <__sfp_lock_acquire>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__sfp_lock_acquire+0x8>)
 800a52a:	f000 b8d8 	b.w	800a6de <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	2001ca59 	.word	0x2001ca59

0800a534 <__sfp_lock_release>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__sfp_lock_release+0x8>)
 800a536:	f000 b8d3 	b.w	800a6e0 <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	2001ca59 	.word	0x2001ca59

0800a540 <__sinit_lock_acquire>:
 800a540:	4801      	ldr	r0, [pc, #4]	; (800a548 <__sinit_lock_acquire+0x8>)
 800a542:	f000 b8cc 	b.w	800a6de <__retarget_lock_acquire_recursive>
 800a546:	bf00      	nop
 800a548:	2001ca5a 	.word	0x2001ca5a

0800a54c <__sinit_lock_release>:
 800a54c:	4801      	ldr	r0, [pc, #4]	; (800a554 <__sinit_lock_release+0x8>)
 800a54e:	f000 b8c7 	b.w	800a6e0 <__retarget_lock_release_recursive>
 800a552:	bf00      	nop
 800a554:	2001ca5a 	.word	0x2001ca5a

0800a558 <__sinit>:
 800a558:	b510      	push	{r4, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	f7ff fff0 	bl	800a540 <__sinit_lock_acquire>
 800a560:	69a3      	ldr	r3, [r4, #24]
 800a562:	b11b      	cbz	r3, 800a56c <__sinit+0x14>
 800a564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a568:	f7ff bff0 	b.w	800a54c <__sinit_lock_release>
 800a56c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a570:	6523      	str	r3, [r4, #80]	; 0x50
 800a572:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <__sinit+0x68>)
 800a574:	4a13      	ldr	r2, [pc, #76]	; (800a5c4 <__sinit+0x6c>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	62a2      	str	r2, [r4, #40]	; 0x28
 800a57a:	42a3      	cmp	r3, r4
 800a57c:	bf04      	itt	eq
 800a57e:	2301      	moveq	r3, #1
 800a580:	61a3      	streq	r3, [r4, #24]
 800a582:	4620      	mov	r0, r4
 800a584:	f000 f820 	bl	800a5c8 <__sfp>
 800a588:	6060      	str	r0, [r4, #4]
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 f81c 	bl	800a5c8 <__sfp>
 800a590:	60a0      	str	r0, [r4, #8]
 800a592:	4620      	mov	r0, r4
 800a594:	f000 f818 	bl	800a5c8 <__sfp>
 800a598:	2200      	movs	r2, #0
 800a59a:	60e0      	str	r0, [r4, #12]
 800a59c:	2104      	movs	r1, #4
 800a59e:	6860      	ldr	r0, [r4, #4]
 800a5a0:	f7ff ff82 	bl	800a4a8 <std>
 800a5a4:	68a0      	ldr	r0, [r4, #8]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	2109      	movs	r1, #9
 800a5aa:	f7ff ff7d 	bl	800a4a8 <std>
 800a5ae:	68e0      	ldr	r0, [r4, #12]
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	2112      	movs	r1, #18
 800a5b4:	f7ff ff78 	bl	800a4a8 <std>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	61a3      	str	r3, [r4, #24]
 800a5bc:	e7d2      	b.n	800a564 <__sinit+0xc>
 800a5be:	bf00      	nop
 800a5c0:	0800e91c 	.word	0x0800e91c
 800a5c4:	0800a4f1 	.word	0x0800a4f1

0800a5c8 <__sfp>:
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	4607      	mov	r7, r0
 800a5cc:	f7ff ffac 	bl	800a528 <__sfp_lock_acquire>
 800a5d0:	4b1e      	ldr	r3, [pc, #120]	; (800a64c <__sfp+0x84>)
 800a5d2:	681e      	ldr	r6, [r3, #0]
 800a5d4:	69b3      	ldr	r3, [r6, #24]
 800a5d6:	b913      	cbnz	r3, 800a5de <__sfp+0x16>
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f7ff ffbd 	bl	800a558 <__sinit>
 800a5de:	3648      	adds	r6, #72	; 0x48
 800a5e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	d503      	bpl.n	800a5f0 <__sfp+0x28>
 800a5e8:	6833      	ldr	r3, [r6, #0]
 800a5ea:	b30b      	cbz	r3, 800a630 <__sfp+0x68>
 800a5ec:	6836      	ldr	r6, [r6, #0]
 800a5ee:	e7f7      	b.n	800a5e0 <__sfp+0x18>
 800a5f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5f4:	b9d5      	cbnz	r5, 800a62c <__sfp+0x64>
 800a5f6:	4b16      	ldr	r3, [pc, #88]	; (800a650 <__sfp+0x88>)
 800a5f8:	60e3      	str	r3, [r4, #12]
 800a5fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5fe:	6665      	str	r5, [r4, #100]	; 0x64
 800a600:	f000 f86c 	bl	800a6dc <__retarget_lock_init_recursive>
 800a604:	f7ff ff96 	bl	800a534 <__sfp_lock_release>
 800a608:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a60c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a610:	6025      	str	r5, [r4, #0]
 800a612:	61a5      	str	r5, [r4, #24]
 800a614:	2208      	movs	r2, #8
 800a616:	4629      	mov	r1, r5
 800a618:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a61c:	f000 f86f 	bl	800a6fe <memset>
 800a620:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a624:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a628:	4620      	mov	r0, r4
 800a62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a62c:	3468      	adds	r4, #104	; 0x68
 800a62e:	e7d9      	b.n	800a5e4 <__sfp+0x1c>
 800a630:	2104      	movs	r1, #4
 800a632:	4638      	mov	r0, r7
 800a634:	f7ff ff62 	bl	800a4fc <__sfmoreglue>
 800a638:	4604      	mov	r4, r0
 800a63a:	6030      	str	r0, [r6, #0]
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d1d5      	bne.n	800a5ec <__sfp+0x24>
 800a640:	f7ff ff78 	bl	800a534 <__sfp_lock_release>
 800a644:	230c      	movs	r3, #12
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	e7ee      	b.n	800a628 <__sfp+0x60>
 800a64a:	bf00      	nop
 800a64c:	0800e91c 	.word	0x0800e91c
 800a650:	ffff0001 	.word	0xffff0001

0800a654 <_fwalk_reent>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	4606      	mov	r6, r0
 800a65a:	4688      	mov	r8, r1
 800a65c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a660:	2700      	movs	r7, #0
 800a662:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a666:	f1b9 0901 	subs.w	r9, r9, #1
 800a66a:	d505      	bpl.n	800a678 <_fwalk_reent+0x24>
 800a66c:	6824      	ldr	r4, [r4, #0]
 800a66e:	2c00      	cmp	r4, #0
 800a670:	d1f7      	bne.n	800a662 <_fwalk_reent+0xe>
 800a672:	4638      	mov	r0, r7
 800a674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a678:	89ab      	ldrh	r3, [r5, #12]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d907      	bls.n	800a68e <_fwalk_reent+0x3a>
 800a67e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a682:	3301      	adds	r3, #1
 800a684:	d003      	beq.n	800a68e <_fwalk_reent+0x3a>
 800a686:	4629      	mov	r1, r5
 800a688:	4630      	mov	r0, r6
 800a68a:	47c0      	blx	r8
 800a68c:	4307      	orrs	r7, r0
 800a68e:	3568      	adds	r5, #104	; 0x68
 800a690:	e7e9      	b.n	800a666 <_fwalk_reent+0x12>
	...

0800a694 <__libc_init_array>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	4d0d      	ldr	r5, [pc, #52]	; (800a6cc <__libc_init_array+0x38>)
 800a698:	4c0d      	ldr	r4, [pc, #52]	; (800a6d0 <__libc_init_array+0x3c>)
 800a69a:	1b64      	subs	r4, r4, r5
 800a69c:	10a4      	asrs	r4, r4, #2
 800a69e:	2600      	movs	r6, #0
 800a6a0:	42a6      	cmp	r6, r4
 800a6a2:	d109      	bne.n	800a6b8 <__libc_init_array+0x24>
 800a6a4:	4d0b      	ldr	r5, [pc, #44]	; (800a6d4 <__libc_init_array+0x40>)
 800a6a6:	4c0c      	ldr	r4, [pc, #48]	; (800a6d8 <__libc_init_array+0x44>)
 800a6a8:	f004 f824 	bl	800e6f4 <_init>
 800a6ac:	1b64      	subs	r4, r4, r5
 800a6ae:	10a4      	asrs	r4, r4, #2
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	42a6      	cmp	r6, r4
 800a6b4:	d105      	bne.n	800a6c2 <__libc_init_array+0x2e>
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6bc:	4798      	blx	r3
 800a6be:	3601      	adds	r6, #1
 800a6c0:	e7ee      	b.n	800a6a0 <__libc_init_array+0xc>
 800a6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c6:	4798      	blx	r3
 800a6c8:	3601      	adds	r6, #1
 800a6ca:	e7f2      	b.n	800a6b2 <__libc_init_array+0x1e>
 800a6cc:	0800eea8 	.word	0x0800eea8
 800a6d0:	0800eea8 	.word	0x0800eea8
 800a6d4:	0800eea8 	.word	0x0800eea8
 800a6d8:	0800eeac 	.word	0x0800eeac

0800a6dc <__retarget_lock_init_recursive>:
 800a6dc:	4770      	bx	lr

0800a6de <__retarget_lock_acquire_recursive>:
 800a6de:	4770      	bx	lr

0800a6e0 <__retarget_lock_release_recursive>:
 800a6e0:	4770      	bx	lr

0800a6e2 <memcpy>:
 800a6e2:	440a      	add	r2, r1
 800a6e4:	4291      	cmp	r1, r2
 800a6e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6ea:	d100      	bne.n	800a6ee <memcpy+0xc>
 800a6ec:	4770      	bx	lr
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6f8:	4291      	cmp	r1, r2
 800a6fa:	d1f9      	bne.n	800a6f0 <memcpy+0xe>
 800a6fc:	bd10      	pop	{r4, pc}

0800a6fe <memset>:
 800a6fe:	4402      	add	r2, r0
 800a700:	4603      	mov	r3, r0
 800a702:	4293      	cmp	r3, r2
 800a704:	d100      	bne.n	800a708 <memset+0xa>
 800a706:	4770      	bx	lr
 800a708:	f803 1b01 	strb.w	r1, [r3], #1
 800a70c:	e7f9      	b.n	800a702 <memset+0x4>
	...

0800a710 <sbrk_aligned>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	4e0e      	ldr	r6, [pc, #56]	; (800a74c <sbrk_aligned+0x3c>)
 800a714:	460c      	mov	r4, r1
 800a716:	6831      	ldr	r1, [r6, #0]
 800a718:	4605      	mov	r5, r0
 800a71a:	b911      	cbnz	r1, 800a722 <sbrk_aligned+0x12>
 800a71c:	f000 fdd6 	bl	800b2cc <_sbrk_r>
 800a720:	6030      	str	r0, [r6, #0]
 800a722:	4621      	mov	r1, r4
 800a724:	4628      	mov	r0, r5
 800a726:	f000 fdd1 	bl	800b2cc <_sbrk_r>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d00a      	beq.n	800a744 <sbrk_aligned+0x34>
 800a72e:	1cc4      	adds	r4, r0, #3
 800a730:	f024 0403 	bic.w	r4, r4, #3
 800a734:	42a0      	cmp	r0, r4
 800a736:	d007      	beq.n	800a748 <sbrk_aligned+0x38>
 800a738:	1a21      	subs	r1, r4, r0
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 fdc6 	bl	800b2cc <_sbrk_r>
 800a740:	3001      	adds	r0, #1
 800a742:	d101      	bne.n	800a748 <sbrk_aligned+0x38>
 800a744:	f04f 34ff 	mov.w	r4, #4294967295
 800a748:	4620      	mov	r0, r4
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	2001ca60 	.word	0x2001ca60

0800a750 <_malloc_r>:
 800a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	1ccd      	adds	r5, r1, #3
 800a756:	f025 0503 	bic.w	r5, r5, #3
 800a75a:	3508      	adds	r5, #8
 800a75c:	2d0c      	cmp	r5, #12
 800a75e:	bf38      	it	cc
 800a760:	250c      	movcc	r5, #12
 800a762:	2d00      	cmp	r5, #0
 800a764:	4607      	mov	r7, r0
 800a766:	db01      	blt.n	800a76c <_malloc_r+0x1c>
 800a768:	42a9      	cmp	r1, r5
 800a76a:	d905      	bls.n	800a778 <_malloc_r+0x28>
 800a76c:	230c      	movs	r3, #12
 800a76e:	603b      	str	r3, [r7, #0]
 800a770:	2600      	movs	r6, #0
 800a772:	4630      	mov	r0, r6
 800a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a778:	4e2e      	ldr	r6, [pc, #184]	; (800a834 <_malloc_r+0xe4>)
 800a77a:	f001 fe9d 	bl	800c4b8 <__malloc_lock>
 800a77e:	6833      	ldr	r3, [r6, #0]
 800a780:	461c      	mov	r4, r3
 800a782:	bb34      	cbnz	r4, 800a7d2 <_malloc_r+0x82>
 800a784:	4629      	mov	r1, r5
 800a786:	4638      	mov	r0, r7
 800a788:	f7ff ffc2 	bl	800a710 <sbrk_aligned>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	4604      	mov	r4, r0
 800a790:	d14d      	bne.n	800a82e <_malloc_r+0xde>
 800a792:	6834      	ldr	r4, [r6, #0]
 800a794:	4626      	mov	r6, r4
 800a796:	2e00      	cmp	r6, #0
 800a798:	d140      	bne.n	800a81c <_malloc_r+0xcc>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	4631      	mov	r1, r6
 800a79e:	4638      	mov	r0, r7
 800a7a0:	eb04 0803 	add.w	r8, r4, r3
 800a7a4:	f000 fd92 	bl	800b2cc <_sbrk_r>
 800a7a8:	4580      	cmp	r8, r0
 800a7aa:	d13a      	bne.n	800a822 <_malloc_r+0xd2>
 800a7ac:	6821      	ldr	r1, [r4, #0]
 800a7ae:	3503      	adds	r5, #3
 800a7b0:	1a6d      	subs	r5, r5, r1
 800a7b2:	f025 0503 	bic.w	r5, r5, #3
 800a7b6:	3508      	adds	r5, #8
 800a7b8:	2d0c      	cmp	r5, #12
 800a7ba:	bf38      	it	cc
 800a7bc:	250c      	movcc	r5, #12
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7ff ffa5 	bl	800a710 <sbrk_aligned>
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	d02b      	beq.n	800a822 <_malloc_r+0xd2>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	442b      	add	r3, r5
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	e00e      	b.n	800a7f0 <_malloc_r+0xa0>
 800a7d2:	6822      	ldr	r2, [r4, #0]
 800a7d4:	1b52      	subs	r2, r2, r5
 800a7d6:	d41e      	bmi.n	800a816 <_malloc_r+0xc6>
 800a7d8:	2a0b      	cmp	r2, #11
 800a7da:	d916      	bls.n	800a80a <_malloc_r+0xba>
 800a7dc:	1961      	adds	r1, r4, r5
 800a7de:	42a3      	cmp	r3, r4
 800a7e0:	6025      	str	r5, [r4, #0]
 800a7e2:	bf18      	it	ne
 800a7e4:	6059      	strne	r1, [r3, #4]
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	bf08      	it	eq
 800a7ea:	6031      	streq	r1, [r6, #0]
 800a7ec:	5162      	str	r2, [r4, r5]
 800a7ee:	604b      	str	r3, [r1, #4]
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	f104 060b 	add.w	r6, r4, #11
 800a7f6:	f001 fe65 	bl	800c4c4 <__malloc_unlock>
 800a7fa:	f026 0607 	bic.w	r6, r6, #7
 800a7fe:	1d23      	adds	r3, r4, #4
 800a800:	1af2      	subs	r2, r6, r3
 800a802:	d0b6      	beq.n	800a772 <_malloc_r+0x22>
 800a804:	1b9b      	subs	r3, r3, r6
 800a806:	50a3      	str	r3, [r4, r2]
 800a808:	e7b3      	b.n	800a772 <_malloc_r+0x22>
 800a80a:	6862      	ldr	r2, [r4, #4]
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	bf0c      	ite	eq
 800a810:	6032      	streq	r2, [r6, #0]
 800a812:	605a      	strne	r2, [r3, #4]
 800a814:	e7ec      	b.n	800a7f0 <_malloc_r+0xa0>
 800a816:	4623      	mov	r3, r4
 800a818:	6864      	ldr	r4, [r4, #4]
 800a81a:	e7b2      	b.n	800a782 <_malloc_r+0x32>
 800a81c:	4634      	mov	r4, r6
 800a81e:	6876      	ldr	r6, [r6, #4]
 800a820:	e7b9      	b.n	800a796 <_malloc_r+0x46>
 800a822:	230c      	movs	r3, #12
 800a824:	603b      	str	r3, [r7, #0]
 800a826:	4638      	mov	r0, r7
 800a828:	f001 fe4c 	bl	800c4c4 <__malloc_unlock>
 800a82c:	e7a1      	b.n	800a772 <_malloc_r+0x22>
 800a82e:	6025      	str	r5, [r4, #0]
 800a830:	e7de      	b.n	800a7f0 <_malloc_r+0xa0>
 800a832:	bf00      	nop
 800a834:	2001ca5c 	.word	0x2001ca5c

0800a838 <__cvt>:
 800a838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	ec55 4b10 	vmov	r4, r5, d0
 800a840:	2d00      	cmp	r5, #0
 800a842:	460e      	mov	r6, r1
 800a844:	4619      	mov	r1, r3
 800a846:	462b      	mov	r3, r5
 800a848:	bfbb      	ittet	lt
 800a84a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a84e:	461d      	movlt	r5, r3
 800a850:	2300      	movge	r3, #0
 800a852:	232d      	movlt	r3, #45	; 0x2d
 800a854:	700b      	strb	r3, [r1, #0]
 800a856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a858:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a85c:	4691      	mov	r9, r2
 800a85e:	f023 0820 	bic.w	r8, r3, #32
 800a862:	bfbc      	itt	lt
 800a864:	4622      	movlt	r2, r4
 800a866:	4614      	movlt	r4, r2
 800a868:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a86c:	d005      	beq.n	800a87a <__cvt+0x42>
 800a86e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a872:	d100      	bne.n	800a876 <__cvt+0x3e>
 800a874:	3601      	adds	r6, #1
 800a876:	2102      	movs	r1, #2
 800a878:	e000      	b.n	800a87c <__cvt+0x44>
 800a87a:	2103      	movs	r1, #3
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	ab02      	add	r3, sp, #8
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	ec45 4b10 	vmov	d0, r4, r5
 800a888:	4653      	mov	r3, sl
 800a88a:	4632      	mov	r2, r6
 800a88c:	f000 fee0 	bl	800b650 <_dtoa_r>
 800a890:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a894:	4607      	mov	r7, r0
 800a896:	d102      	bne.n	800a89e <__cvt+0x66>
 800a898:	f019 0f01 	tst.w	r9, #1
 800a89c:	d022      	beq.n	800a8e4 <__cvt+0xac>
 800a89e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8a2:	eb07 0906 	add.w	r9, r7, r6
 800a8a6:	d110      	bne.n	800a8ca <__cvt+0x92>
 800a8a8:	783b      	ldrb	r3, [r7, #0]
 800a8aa:	2b30      	cmp	r3, #48	; 0x30
 800a8ac:	d10a      	bne.n	800a8c4 <__cvt+0x8c>
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7f6 f92f 	bl	8000b18 <__aeabi_dcmpeq>
 800a8ba:	b918      	cbnz	r0, 800a8c4 <__cvt+0x8c>
 800a8bc:	f1c6 0601 	rsb	r6, r6, #1
 800a8c0:	f8ca 6000 	str.w	r6, [sl]
 800a8c4:	f8da 3000 	ldr.w	r3, [sl]
 800a8c8:	4499      	add	r9, r3
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f6 f921 	bl	8000b18 <__aeabi_dcmpeq>
 800a8d6:	b108      	cbz	r0, 800a8dc <__cvt+0xa4>
 800a8d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8dc:	2230      	movs	r2, #48	; 0x30
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	454b      	cmp	r3, r9
 800a8e2:	d307      	bcc.n	800a8f4 <__cvt+0xbc>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8e8:	1bdb      	subs	r3, r3, r7
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	b004      	add	sp, #16
 800a8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f4:	1c59      	adds	r1, r3, #1
 800a8f6:	9103      	str	r1, [sp, #12]
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	e7f0      	b.n	800a8de <__cvt+0xa6>

0800a8fc <__exponent>:
 800a8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fe:	4603      	mov	r3, r0
 800a900:	2900      	cmp	r1, #0
 800a902:	bfb8      	it	lt
 800a904:	4249      	neglt	r1, r1
 800a906:	f803 2b02 	strb.w	r2, [r3], #2
 800a90a:	bfb4      	ite	lt
 800a90c:	222d      	movlt	r2, #45	; 0x2d
 800a90e:	222b      	movge	r2, #43	; 0x2b
 800a910:	2909      	cmp	r1, #9
 800a912:	7042      	strb	r2, [r0, #1]
 800a914:	dd2a      	ble.n	800a96c <__exponent+0x70>
 800a916:	f10d 0407 	add.w	r4, sp, #7
 800a91a:	46a4      	mov	ip, r4
 800a91c:	270a      	movs	r7, #10
 800a91e:	46a6      	mov	lr, r4
 800a920:	460a      	mov	r2, r1
 800a922:	fb91 f6f7 	sdiv	r6, r1, r7
 800a926:	fb07 1516 	mls	r5, r7, r6, r1
 800a92a:	3530      	adds	r5, #48	; 0x30
 800a92c:	2a63      	cmp	r2, #99	; 0x63
 800a92e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a932:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a936:	4631      	mov	r1, r6
 800a938:	dcf1      	bgt.n	800a91e <__exponent+0x22>
 800a93a:	3130      	adds	r1, #48	; 0x30
 800a93c:	f1ae 0502 	sub.w	r5, lr, #2
 800a940:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a944:	1c44      	adds	r4, r0, #1
 800a946:	4629      	mov	r1, r5
 800a948:	4561      	cmp	r1, ip
 800a94a:	d30a      	bcc.n	800a962 <__exponent+0x66>
 800a94c:	f10d 0209 	add.w	r2, sp, #9
 800a950:	eba2 020e 	sub.w	r2, r2, lr
 800a954:	4565      	cmp	r5, ip
 800a956:	bf88      	it	hi
 800a958:	2200      	movhi	r2, #0
 800a95a:	4413      	add	r3, r2
 800a95c:	1a18      	subs	r0, r3, r0
 800a95e:	b003      	add	sp, #12
 800a960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a966:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a96a:	e7ed      	b.n	800a948 <__exponent+0x4c>
 800a96c:	2330      	movs	r3, #48	; 0x30
 800a96e:	3130      	adds	r1, #48	; 0x30
 800a970:	7083      	strb	r3, [r0, #2]
 800a972:	70c1      	strb	r1, [r0, #3]
 800a974:	1d03      	adds	r3, r0, #4
 800a976:	e7f1      	b.n	800a95c <__exponent+0x60>

0800a978 <_printf_float>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	ed2d 8b02 	vpush	{d8}
 800a980:	b08d      	sub	sp, #52	; 0x34
 800a982:	460c      	mov	r4, r1
 800a984:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a988:	4616      	mov	r6, r2
 800a98a:	461f      	mov	r7, r3
 800a98c:	4605      	mov	r5, r0
 800a98e:	f001 fd0f 	bl	800c3b0 <_localeconv_r>
 800a992:	f8d0 a000 	ldr.w	sl, [r0]
 800a996:	4650      	mov	r0, sl
 800a998:	f7f5 fc42 	bl	8000220 <strlen>
 800a99c:	2300      	movs	r3, #0
 800a99e:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	9305      	str	r3, [sp, #20]
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9ac:	3307      	adds	r3, #7
 800a9ae:	f023 0307 	bic.w	r3, r3, #7
 800a9b2:	f103 0208 	add.w	r2, r3, #8
 800a9b6:	f8c8 2000 	str.w	r2, [r8]
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a9c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a9c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9ca:	9307      	str	r3, [sp, #28]
 800a9cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9d0:	ee08 0a10 	vmov	s16, r0
 800a9d4:	4b9f      	ldr	r3, [pc, #636]	; (800ac54 <_printf_float+0x2dc>)
 800a9d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9da:	f04f 32ff 	mov.w	r2, #4294967295
 800a9de:	f7f6 f8cd 	bl	8000b7c <__aeabi_dcmpun>
 800a9e2:	bb88      	cbnz	r0, 800aa48 <_printf_float+0xd0>
 800a9e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9e8:	4b9a      	ldr	r3, [pc, #616]	; (800ac54 <_printf_float+0x2dc>)
 800a9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ee:	f7f6 f8a7 	bl	8000b40 <__aeabi_dcmple>
 800a9f2:	bb48      	cbnz	r0, 800aa48 <_printf_float+0xd0>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	f7f6 f896 	bl	8000b2c <__aeabi_dcmplt>
 800aa00:	b110      	cbz	r0, 800aa08 <_printf_float+0x90>
 800aa02:	232d      	movs	r3, #45	; 0x2d
 800aa04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa08:	4b93      	ldr	r3, [pc, #588]	; (800ac58 <_printf_float+0x2e0>)
 800aa0a:	4894      	ldr	r0, [pc, #592]	; (800ac5c <_printf_float+0x2e4>)
 800aa0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa10:	bf94      	ite	ls
 800aa12:	4698      	movls	r8, r3
 800aa14:	4680      	movhi	r8, r0
 800aa16:	2303      	movs	r3, #3
 800aa18:	6123      	str	r3, [r4, #16]
 800aa1a:	9b05      	ldr	r3, [sp, #20]
 800aa1c:	f023 0204 	bic.w	r2, r3, #4
 800aa20:	6022      	str	r2, [r4, #0]
 800aa22:	f04f 0900 	mov.w	r9, #0
 800aa26:	9700      	str	r7, [sp, #0]
 800aa28:	4633      	mov	r3, r6
 800aa2a:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f000 f9d8 	bl	800ade4 <_printf_common>
 800aa34:	3001      	adds	r0, #1
 800aa36:	f040 8090 	bne.w	800ab5a <_printf_float+0x1e2>
 800aa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3e:	b00d      	add	sp, #52	; 0x34
 800aa40:	ecbd 8b02 	vpop	{d8}
 800aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa48:	4642      	mov	r2, r8
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	4649      	mov	r1, r9
 800aa50:	f7f6 f894 	bl	8000b7c <__aeabi_dcmpun>
 800aa54:	b140      	cbz	r0, 800aa68 <_printf_float+0xf0>
 800aa56:	464b      	mov	r3, r9
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfbc      	itt	lt
 800aa5c:	232d      	movlt	r3, #45	; 0x2d
 800aa5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa62:	487f      	ldr	r0, [pc, #508]	; (800ac60 <_printf_float+0x2e8>)
 800aa64:	4b7f      	ldr	r3, [pc, #508]	; (800ac64 <_printf_float+0x2ec>)
 800aa66:	e7d1      	b.n	800aa0c <_printf_float+0x94>
 800aa68:	6863      	ldr	r3, [r4, #4]
 800aa6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa6e:	9206      	str	r2, [sp, #24]
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	d13f      	bne.n	800aaf4 <_printf_float+0x17c>
 800aa74:	2306      	movs	r3, #6
 800aa76:	6063      	str	r3, [r4, #4]
 800aa78:	9b05      	ldr	r3, [sp, #20]
 800aa7a:	6861      	ldr	r1, [r4, #4]
 800aa7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa80:	2300      	movs	r3, #0
 800aa82:	9303      	str	r3, [sp, #12]
 800aa84:	ab0a      	add	r3, sp, #40	; 0x28
 800aa86:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa8a:	ab09      	add	r3, sp, #36	; 0x24
 800aa8c:	ec49 8b10 	vmov	d0, r8, r9
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	6022      	str	r2, [r4, #0]
 800aa94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7ff fecd 	bl	800a838 <__cvt>
 800aa9e:	9b06      	ldr	r3, [sp, #24]
 800aaa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaa2:	2b47      	cmp	r3, #71	; 0x47
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	d108      	bne.n	800aaba <_printf_float+0x142>
 800aaa8:	1cc8      	adds	r0, r1, #3
 800aaaa:	db02      	blt.n	800aab2 <_printf_float+0x13a>
 800aaac:	6863      	ldr	r3, [r4, #4]
 800aaae:	4299      	cmp	r1, r3
 800aab0:	dd41      	ble.n	800ab36 <_printf_float+0x1be>
 800aab2:	f1ab 0b02 	sub.w	fp, fp, #2
 800aab6:	fa5f fb8b 	uxtb.w	fp, fp
 800aaba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aabe:	d820      	bhi.n	800ab02 <_printf_float+0x18a>
 800aac0:	3901      	subs	r1, #1
 800aac2:	465a      	mov	r2, fp
 800aac4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aac8:	9109      	str	r1, [sp, #36]	; 0x24
 800aaca:	f7ff ff17 	bl	800a8fc <__exponent>
 800aace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aad0:	1813      	adds	r3, r2, r0
 800aad2:	2a01      	cmp	r2, #1
 800aad4:	4681      	mov	r9, r0
 800aad6:	6123      	str	r3, [r4, #16]
 800aad8:	dc02      	bgt.n	800aae0 <_printf_float+0x168>
 800aada:	6822      	ldr	r2, [r4, #0]
 800aadc:	07d2      	lsls	r2, r2, #31
 800aade:	d501      	bpl.n	800aae4 <_printf_float+0x16c>
 800aae0:	3301      	adds	r3, #1
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d09c      	beq.n	800aa26 <_printf_float+0xae>
 800aaec:	232d      	movs	r3, #45	; 0x2d
 800aaee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaf2:	e798      	b.n	800aa26 <_printf_float+0xae>
 800aaf4:	9a06      	ldr	r2, [sp, #24]
 800aaf6:	2a47      	cmp	r2, #71	; 0x47
 800aaf8:	d1be      	bne.n	800aa78 <_printf_float+0x100>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1bc      	bne.n	800aa78 <_printf_float+0x100>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e7b9      	b.n	800aa76 <_printf_float+0xfe>
 800ab02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab06:	d118      	bne.n	800ab3a <_printf_float+0x1c2>
 800ab08:	2900      	cmp	r1, #0
 800ab0a:	6863      	ldr	r3, [r4, #4]
 800ab0c:	dd0b      	ble.n	800ab26 <_printf_float+0x1ae>
 800ab0e:	6121      	str	r1, [r4, #16]
 800ab10:	b913      	cbnz	r3, 800ab18 <_printf_float+0x1a0>
 800ab12:	6822      	ldr	r2, [r4, #0]
 800ab14:	07d0      	lsls	r0, r2, #31
 800ab16:	d502      	bpl.n	800ab1e <_printf_float+0x1a6>
 800ab18:	3301      	adds	r3, #1
 800ab1a:	440b      	add	r3, r1
 800ab1c:	6123      	str	r3, [r4, #16]
 800ab1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab20:	f04f 0900 	mov.w	r9, #0
 800ab24:	e7de      	b.n	800aae4 <_printf_float+0x16c>
 800ab26:	b913      	cbnz	r3, 800ab2e <_printf_float+0x1b6>
 800ab28:	6822      	ldr	r2, [r4, #0]
 800ab2a:	07d2      	lsls	r2, r2, #31
 800ab2c:	d501      	bpl.n	800ab32 <_printf_float+0x1ba>
 800ab2e:	3302      	adds	r3, #2
 800ab30:	e7f4      	b.n	800ab1c <_printf_float+0x1a4>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e7f2      	b.n	800ab1c <_printf_float+0x1a4>
 800ab36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	db05      	blt.n	800ab4c <_printf_float+0x1d4>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	6121      	str	r1, [r4, #16]
 800ab44:	07d8      	lsls	r0, r3, #31
 800ab46:	d5ea      	bpl.n	800ab1e <_printf_float+0x1a6>
 800ab48:	1c4b      	adds	r3, r1, #1
 800ab4a:	e7e7      	b.n	800ab1c <_printf_float+0x1a4>
 800ab4c:	2900      	cmp	r1, #0
 800ab4e:	bfd4      	ite	le
 800ab50:	f1c1 0202 	rsble	r2, r1, #2
 800ab54:	2201      	movgt	r2, #1
 800ab56:	4413      	add	r3, r2
 800ab58:	e7e0      	b.n	800ab1c <_printf_float+0x1a4>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	055a      	lsls	r2, r3, #21
 800ab5e:	d407      	bmi.n	800ab70 <_printf_float+0x1f8>
 800ab60:	6923      	ldr	r3, [r4, #16]
 800ab62:	4642      	mov	r2, r8
 800ab64:	4631      	mov	r1, r6
 800ab66:	4628      	mov	r0, r5
 800ab68:	47b8      	blx	r7
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	d12c      	bne.n	800abc8 <_printf_float+0x250>
 800ab6e:	e764      	b.n	800aa3a <_printf_float+0xc2>
 800ab70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab74:	f240 80e0 	bls.w	800ad38 <_printf_float+0x3c0>
 800ab78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f7f5 ffca 	bl	8000b18 <__aeabi_dcmpeq>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d034      	beq.n	800abf2 <_printf_float+0x27a>
 800ab88:	4a37      	ldr	r2, [pc, #220]	; (800ac68 <_printf_float+0x2f0>)
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b8      	blx	r7
 800ab92:	3001      	adds	r0, #1
 800ab94:	f43f af51 	beq.w	800aa3a <_printf_float+0xc2>
 800ab98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	db02      	blt.n	800aba6 <_printf_float+0x22e>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	07d8      	lsls	r0, r3, #31
 800aba4:	d510      	bpl.n	800abc8 <_printf_float+0x250>
 800aba6:	ee18 3a10 	vmov	r3, s16
 800abaa:	4652      	mov	r2, sl
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
 800abb2:	3001      	adds	r0, #1
 800abb4:	f43f af41 	beq.w	800aa3a <_printf_float+0xc2>
 800abb8:	f04f 0800 	mov.w	r8, #0
 800abbc:	f104 091a 	add.w	r9, r4, #26
 800abc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc2:	3b01      	subs	r3, #1
 800abc4:	4543      	cmp	r3, r8
 800abc6:	dc09      	bgt.n	800abdc <_printf_float+0x264>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	079b      	lsls	r3, r3, #30
 800abcc:	f100 8105 	bmi.w	800adda <_printf_float+0x462>
 800abd0:	68e0      	ldr	r0, [r4, #12]
 800abd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd4:	4298      	cmp	r0, r3
 800abd6:	bfb8      	it	lt
 800abd8:	4618      	movlt	r0, r3
 800abda:	e730      	b.n	800aa3e <_printf_float+0xc6>
 800abdc:	2301      	movs	r3, #1
 800abde:	464a      	mov	r2, r9
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	f43f af27 	beq.w	800aa3a <_printf_float+0xc2>
 800abec:	f108 0801 	add.w	r8, r8, #1
 800abf0:	e7e6      	b.n	800abc0 <_printf_float+0x248>
 800abf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	dc39      	bgt.n	800ac6c <_printf_float+0x2f4>
 800abf8:	4a1b      	ldr	r2, [pc, #108]	; (800ac68 <_printf_float+0x2f0>)
 800abfa:	2301      	movs	r3, #1
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b8      	blx	r7
 800ac02:	3001      	adds	r0, #1
 800ac04:	f43f af19 	beq.w	800aa3a <_printf_float+0xc2>
 800ac08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	d102      	bne.n	800ac16 <_printf_float+0x29e>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	07d9      	lsls	r1, r3, #31
 800ac14:	d5d8      	bpl.n	800abc8 <_printf_float+0x250>
 800ac16:	ee18 3a10 	vmov	r3, s16
 800ac1a:	4652      	mov	r2, sl
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4628      	mov	r0, r5
 800ac20:	47b8      	blx	r7
 800ac22:	3001      	adds	r0, #1
 800ac24:	f43f af09 	beq.w	800aa3a <_printf_float+0xc2>
 800ac28:	f04f 0900 	mov.w	r9, #0
 800ac2c:	f104 0a1a 	add.w	sl, r4, #26
 800ac30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac32:	425b      	negs	r3, r3
 800ac34:	454b      	cmp	r3, r9
 800ac36:	dc01      	bgt.n	800ac3c <_printf_float+0x2c4>
 800ac38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3a:	e792      	b.n	800ab62 <_printf_float+0x1ea>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	4652      	mov	r2, sl
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	f43f aef7 	beq.w	800aa3a <_printf_float+0xc2>
 800ac4c:	f109 0901 	add.w	r9, r9, #1
 800ac50:	e7ee      	b.n	800ac30 <_printf_float+0x2b8>
 800ac52:	bf00      	nop
 800ac54:	7fefffff 	.word	0x7fefffff
 800ac58:	0800e920 	.word	0x0800e920
 800ac5c:	0800e924 	.word	0x0800e924
 800ac60:	0800e92c 	.word	0x0800e92c
 800ac64:	0800e928 	.word	0x0800e928
 800ac68:	0800e930 	.word	0x0800e930
 800ac6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac70:	429a      	cmp	r2, r3
 800ac72:	bfa8      	it	ge
 800ac74:	461a      	movge	r2, r3
 800ac76:	2a00      	cmp	r2, #0
 800ac78:	4691      	mov	r9, r2
 800ac7a:	dc37      	bgt.n	800acec <_printf_float+0x374>
 800ac7c:	f04f 0b00 	mov.w	fp, #0
 800ac80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac84:	f104 021a 	add.w	r2, r4, #26
 800ac88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac8a:	9305      	str	r3, [sp, #20]
 800ac8c:	eba3 0309 	sub.w	r3, r3, r9
 800ac90:	455b      	cmp	r3, fp
 800ac92:	dc33      	bgt.n	800acfc <_printf_float+0x384>
 800ac94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	db3b      	blt.n	800ad14 <_printf_float+0x39c>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	07da      	lsls	r2, r3, #31
 800aca0:	d438      	bmi.n	800ad14 <_printf_float+0x39c>
 800aca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aca4:	9a05      	ldr	r2, [sp, #20]
 800aca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aca8:	1a9a      	subs	r2, r3, r2
 800acaa:	eba3 0901 	sub.w	r9, r3, r1
 800acae:	4591      	cmp	r9, r2
 800acb0:	bfa8      	it	ge
 800acb2:	4691      	movge	r9, r2
 800acb4:	f1b9 0f00 	cmp.w	r9, #0
 800acb8:	dc35      	bgt.n	800ad26 <_printf_float+0x3ae>
 800acba:	f04f 0800 	mov.w	r8, #0
 800acbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acc2:	f104 0a1a 	add.w	sl, r4, #26
 800acc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acca:	1a9b      	subs	r3, r3, r2
 800accc:	eba3 0309 	sub.w	r3, r3, r9
 800acd0:	4543      	cmp	r3, r8
 800acd2:	f77f af79 	ble.w	800abc8 <_printf_float+0x250>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4652      	mov	r2, sl
 800acda:	4631      	mov	r1, r6
 800acdc:	4628      	mov	r0, r5
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	f43f aeaa 	beq.w	800aa3a <_printf_float+0xc2>
 800ace6:	f108 0801 	add.w	r8, r8, #1
 800acea:	e7ec      	b.n	800acc6 <_printf_float+0x34e>
 800acec:	4613      	mov	r3, r2
 800acee:	4631      	mov	r1, r6
 800acf0:	4642      	mov	r2, r8
 800acf2:	4628      	mov	r0, r5
 800acf4:	47b8      	blx	r7
 800acf6:	3001      	adds	r0, #1
 800acf8:	d1c0      	bne.n	800ac7c <_printf_float+0x304>
 800acfa:	e69e      	b.n	800aa3a <_printf_float+0xc2>
 800acfc:	2301      	movs	r3, #1
 800acfe:	4631      	mov	r1, r6
 800ad00:	4628      	mov	r0, r5
 800ad02:	9205      	str	r2, [sp, #20]
 800ad04:	47b8      	blx	r7
 800ad06:	3001      	adds	r0, #1
 800ad08:	f43f ae97 	beq.w	800aa3a <_printf_float+0xc2>
 800ad0c:	9a05      	ldr	r2, [sp, #20]
 800ad0e:	f10b 0b01 	add.w	fp, fp, #1
 800ad12:	e7b9      	b.n	800ac88 <_printf_float+0x310>
 800ad14:	ee18 3a10 	vmov	r3, s16
 800ad18:	4652      	mov	r2, sl
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	47b8      	blx	r7
 800ad20:	3001      	adds	r0, #1
 800ad22:	d1be      	bne.n	800aca2 <_printf_float+0x32a>
 800ad24:	e689      	b.n	800aa3a <_printf_float+0xc2>
 800ad26:	9a05      	ldr	r2, [sp, #20]
 800ad28:	464b      	mov	r3, r9
 800ad2a:	4442      	add	r2, r8
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4628      	mov	r0, r5
 800ad30:	47b8      	blx	r7
 800ad32:	3001      	adds	r0, #1
 800ad34:	d1c1      	bne.n	800acba <_printf_float+0x342>
 800ad36:	e680      	b.n	800aa3a <_printf_float+0xc2>
 800ad38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad3a:	2a01      	cmp	r2, #1
 800ad3c:	dc01      	bgt.n	800ad42 <_printf_float+0x3ca>
 800ad3e:	07db      	lsls	r3, r3, #31
 800ad40:	d538      	bpl.n	800adb4 <_printf_float+0x43c>
 800ad42:	2301      	movs	r3, #1
 800ad44:	4642      	mov	r2, r8
 800ad46:	4631      	mov	r1, r6
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b8      	blx	r7
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	f43f ae74 	beq.w	800aa3a <_printf_float+0xc2>
 800ad52:	ee18 3a10 	vmov	r3, s16
 800ad56:	4652      	mov	r2, sl
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	47b8      	blx	r7
 800ad5e:	3001      	adds	r0, #1
 800ad60:	f43f ae6b 	beq.w	800aa3a <_printf_float+0xc2>
 800ad64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad68:	2200      	movs	r2, #0
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f7f5 fed4 	bl	8000b18 <__aeabi_dcmpeq>
 800ad70:	b9d8      	cbnz	r0, 800adaa <_printf_float+0x432>
 800ad72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad74:	f108 0201 	add.w	r2, r8, #1
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	d10e      	bne.n	800ada2 <_printf_float+0x42a>
 800ad84:	e659      	b.n	800aa3a <_printf_float+0xc2>
 800ad86:	2301      	movs	r3, #1
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	f43f ae52 	beq.w	800aa3a <_printf_float+0xc2>
 800ad96:	f108 0801 	add.w	r8, r8, #1
 800ad9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	4543      	cmp	r3, r8
 800ada0:	dcf1      	bgt.n	800ad86 <_printf_float+0x40e>
 800ada2:	464b      	mov	r3, r9
 800ada4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ada8:	e6dc      	b.n	800ab64 <_printf_float+0x1ec>
 800adaa:	f04f 0800 	mov.w	r8, #0
 800adae:	f104 0a1a 	add.w	sl, r4, #26
 800adb2:	e7f2      	b.n	800ad9a <_printf_float+0x422>
 800adb4:	2301      	movs	r3, #1
 800adb6:	4642      	mov	r2, r8
 800adb8:	e7df      	b.n	800ad7a <_printf_float+0x402>
 800adba:	2301      	movs	r3, #1
 800adbc:	464a      	mov	r2, r9
 800adbe:	4631      	mov	r1, r6
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b8      	blx	r7
 800adc4:	3001      	adds	r0, #1
 800adc6:	f43f ae38 	beq.w	800aa3a <_printf_float+0xc2>
 800adca:	f108 0801 	add.w	r8, r8, #1
 800adce:	68e3      	ldr	r3, [r4, #12]
 800add0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800add2:	1a5b      	subs	r3, r3, r1
 800add4:	4543      	cmp	r3, r8
 800add6:	dcf0      	bgt.n	800adba <_printf_float+0x442>
 800add8:	e6fa      	b.n	800abd0 <_printf_float+0x258>
 800adda:	f04f 0800 	mov.w	r8, #0
 800adde:	f104 0919 	add.w	r9, r4, #25
 800ade2:	e7f4      	b.n	800adce <_printf_float+0x456>

0800ade4 <_printf_common>:
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	4616      	mov	r6, r2
 800adea:	4699      	mov	r9, r3
 800adec:	688a      	ldr	r2, [r1, #8]
 800adee:	690b      	ldr	r3, [r1, #16]
 800adf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adf4:	4293      	cmp	r3, r2
 800adf6:	bfb8      	it	lt
 800adf8:	4613      	movlt	r3, r2
 800adfa:	6033      	str	r3, [r6, #0]
 800adfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae00:	4607      	mov	r7, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	b10a      	cbz	r2, 800ae0a <_printf_common+0x26>
 800ae06:	3301      	adds	r3, #1
 800ae08:	6033      	str	r3, [r6, #0]
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	0699      	lsls	r1, r3, #26
 800ae0e:	bf42      	ittt	mi
 800ae10:	6833      	ldrmi	r3, [r6, #0]
 800ae12:	3302      	addmi	r3, #2
 800ae14:	6033      	strmi	r3, [r6, #0]
 800ae16:	6825      	ldr	r5, [r4, #0]
 800ae18:	f015 0506 	ands.w	r5, r5, #6
 800ae1c:	d106      	bne.n	800ae2c <_printf_common+0x48>
 800ae1e:	f104 0a19 	add.w	sl, r4, #25
 800ae22:	68e3      	ldr	r3, [r4, #12]
 800ae24:	6832      	ldr	r2, [r6, #0]
 800ae26:	1a9b      	subs	r3, r3, r2
 800ae28:	42ab      	cmp	r3, r5
 800ae2a:	dc26      	bgt.n	800ae7a <_printf_common+0x96>
 800ae2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae30:	1e13      	subs	r3, r2, #0
 800ae32:	6822      	ldr	r2, [r4, #0]
 800ae34:	bf18      	it	ne
 800ae36:	2301      	movne	r3, #1
 800ae38:	0692      	lsls	r2, r2, #26
 800ae3a:	d42b      	bmi.n	800ae94 <_printf_common+0xb0>
 800ae3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae40:	4649      	mov	r1, r9
 800ae42:	4638      	mov	r0, r7
 800ae44:	47c0      	blx	r8
 800ae46:	3001      	adds	r0, #1
 800ae48:	d01e      	beq.n	800ae88 <_printf_common+0xa4>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	68e5      	ldr	r5, [r4, #12]
 800ae4e:	6832      	ldr	r2, [r6, #0]
 800ae50:	f003 0306 	and.w	r3, r3, #6
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	bf08      	it	eq
 800ae58:	1aad      	subeq	r5, r5, r2
 800ae5a:	68a3      	ldr	r3, [r4, #8]
 800ae5c:	6922      	ldr	r2, [r4, #16]
 800ae5e:	bf0c      	ite	eq
 800ae60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae64:	2500      	movne	r5, #0
 800ae66:	4293      	cmp	r3, r2
 800ae68:	bfc4      	itt	gt
 800ae6a:	1a9b      	subgt	r3, r3, r2
 800ae6c:	18ed      	addgt	r5, r5, r3
 800ae6e:	2600      	movs	r6, #0
 800ae70:	341a      	adds	r4, #26
 800ae72:	42b5      	cmp	r5, r6
 800ae74:	d11a      	bne.n	800aeac <_printf_common+0xc8>
 800ae76:	2000      	movs	r0, #0
 800ae78:	e008      	b.n	800ae8c <_printf_common+0xa8>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	4652      	mov	r2, sl
 800ae7e:	4649      	mov	r1, r9
 800ae80:	4638      	mov	r0, r7
 800ae82:	47c0      	blx	r8
 800ae84:	3001      	adds	r0, #1
 800ae86:	d103      	bne.n	800ae90 <_printf_common+0xac>
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae90:	3501      	adds	r5, #1
 800ae92:	e7c6      	b.n	800ae22 <_printf_common+0x3e>
 800ae94:	18e1      	adds	r1, r4, r3
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	2030      	movs	r0, #48	; 0x30
 800ae9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae9e:	4422      	add	r2, r4
 800aea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aea8:	3302      	adds	r3, #2
 800aeaa:	e7c7      	b.n	800ae3c <_printf_common+0x58>
 800aeac:	2301      	movs	r3, #1
 800aeae:	4622      	mov	r2, r4
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	47c0      	blx	r8
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d0e6      	beq.n	800ae88 <_printf_common+0xa4>
 800aeba:	3601      	adds	r6, #1
 800aebc:	e7d9      	b.n	800ae72 <_printf_common+0x8e>
	...

0800aec0 <_printf_i>:
 800aec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	7e0f      	ldrb	r7, [r1, #24]
 800aec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aec8:	2f78      	cmp	r7, #120	; 0x78
 800aeca:	4691      	mov	r9, r2
 800aecc:	4680      	mov	r8, r0
 800aece:	460c      	mov	r4, r1
 800aed0:	469a      	mov	sl, r3
 800aed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aed6:	d807      	bhi.n	800aee8 <_printf_i+0x28>
 800aed8:	2f62      	cmp	r7, #98	; 0x62
 800aeda:	d80a      	bhi.n	800aef2 <_printf_i+0x32>
 800aedc:	2f00      	cmp	r7, #0
 800aede:	f000 80d8 	beq.w	800b092 <_printf_i+0x1d2>
 800aee2:	2f58      	cmp	r7, #88	; 0x58
 800aee4:	f000 80a3 	beq.w	800b02e <_printf_i+0x16e>
 800aee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aef0:	e03a      	b.n	800af68 <_printf_i+0xa8>
 800aef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aef6:	2b15      	cmp	r3, #21
 800aef8:	d8f6      	bhi.n	800aee8 <_printf_i+0x28>
 800aefa:	a101      	add	r1, pc, #4	; (adr r1, 800af00 <_printf_i+0x40>)
 800aefc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af00:	0800af59 	.word	0x0800af59
 800af04:	0800af6d 	.word	0x0800af6d
 800af08:	0800aee9 	.word	0x0800aee9
 800af0c:	0800aee9 	.word	0x0800aee9
 800af10:	0800aee9 	.word	0x0800aee9
 800af14:	0800aee9 	.word	0x0800aee9
 800af18:	0800af6d 	.word	0x0800af6d
 800af1c:	0800aee9 	.word	0x0800aee9
 800af20:	0800aee9 	.word	0x0800aee9
 800af24:	0800aee9 	.word	0x0800aee9
 800af28:	0800aee9 	.word	0x0800aee9
 800af2c:	0800b079 	.word	0x0800b079
 800af30:	0800af9d 	.word	0x0800af9d
 800af34:	0800b05b 	.word	0x0800b05b
 800af38:	0800aee9 	.word	0x0800aee9
 800af3c:	0800aee9 	.word	0x0800aee9
 800af40:	0800b09b 	.word	0x0800b09b
 800af44:	0800aee9 	.word	0x0800aee9
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800aee9 	.word	0x0800aee9
 800af50:	0800aee9 	.word	0x0800aee9
 800af54:	0800b063 	.word	0x0800b063
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	602a      	str	r2, [r5, #0]
 800af60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af68:	2301      	movs	r3, #1
 800af6a:	e0a3      	b.n	800b0b4 <_printf_i+0x1f4>
 800af6c:	6820      	ldr	r0, [r4, #0]
 800af6e:	6829      	ldr	r1, [r5, #0]
 800af70:	0606      	lsls	r6, r0, #24
 800af72:	f101 0304 	add.w	r3, r1, #4
 800af76:	d50a      	bpl.n	800af8e <_printf_i+0xce>
 800af78:	680e      	ldr	r6, [r1, #0]
 800af7a:	602b      	str	r3, [r5, #0]
 800af7c:	2e00      	cmp	r6, #0
 800af7e:	da03      	bge.n	800af88 <_printf_i+0xc8>
 800af80:	232d      	movs	r3, #45	; 0x2d
 800af82:	4276      	negs	r6, r6
 800af84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af88:	485e      	ldr	r0, [pc, #376]	; (800b104 <_printf_i+0x244>)
 800af8a:	230a      	movs	r3, #10
 800af8c:	e019      	b.n	800afc2 <_printf_i+0x102>
 800af8e:	680e      	ldr	r6, [r1, #0]
 800af90:	602b      	str	r3, [r5, #0]
 800af92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af96:	bf18      	it	ne
 800af98:	b236      	sxthne	r6, r6
 800af9a:	e7ef      	b.n	800af7c <_printf_i+0xbc>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	6820      	ldr	r0, [r4, #0]
 800afa0:	1d19      	adds	r1, r3, #4
 800afa2:	6029      	str	r1, [r5, #0]
 800afa4:	0601      	lsls	r1, r0, #24
 800afa6:	d501      	bpl.n	800afac <_printf_i+0xec>
 800afa8:	681e      	ldr	r6, [r3, #0]
 800afaa:	e002      	b.n	800afb2 <_printf_i+0xf2>
 800afac:	0646      	lsls	r6, r0, #25
 800afae:	d5fb      	bpl.n	800afa8 <_printf_i+0xe8>
 800afb0:	881e      	ldrh	r6, [r3, #0]
 800afb2:	4854      	ldr	r0, [pc, #336]	; (800b104 <_printf_i+0x244>)
 800afb4:	2f6f      	cmp	r7, #111	; 0x6f
 800afb6:	bf0c      	ite	eq
 800afb8:	2308      	moveq	r3, #8
 800afba:	230a      	movne	r3, #10
 800afbc:	2100      	movs	r1, #0
 800afbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afc2:	6865      	ldr	r5, [r4, #4]
 800afc4:	60a5      	str	r5, [r4, #8]
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	bfa2      	ittt	ge
 800afca:	6821      	ldrge	r1, [r4, #0]
 800afcc:	f021 0104 	bicge.w	r1, r1, #4
 800afd0:	6021      	strge	r1, [r4, #0]
 800afd2:	b90e      	cbnz	r6, 800afd8 <_printf_i+0x118>
 800afd4:	2d00      	cmp	r5, #0
 800afd6:	d04d      	beq.n	800b074 <_printf_i+0x1b4>
 800afd8:	4615      	mov	r5, r2
 800afda:	fbb6 f1f3 	udiv	r1, r6, r3
 800afde:	fb03 6711 	mls	r7, r3, r1, r6
 800afe2:	5dc7      	ldrb	r7, [r0, r7]
 800afe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afe8:	4637      	mov	r7, r6
 800afea:	42bb      	cmp	r3, r7
 800afec:	460e      	mov	r6, r1
 800afee:	d9f4      	bls.n	800afda <_printf_i+0x11a>
 800aff0:	2b08      	cmp	r3, #8
 800aff2:	d10b      	bne.n	800b00c <_printf_i+0x14c>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	07de      	lsls	r6, r3, #31
 800aff8:	d508      	bpl.n	800b00c <_printf_i+0x14c>
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	6861      	ldr	r1, [r4, #4]
 800affe:	4299      	cmp	r1, r3
 800b000:	bfde      	ittt	le
 800b002:	2330      	movle	r3, #48	; 0x30
 800b004:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b00c:	1b52      	subs	r2, r2, r5
 800b00e:	6122      	str	r2, [r4, #16]
 800b010:	f8cd a000 	str.w	sl, [sp]
 800b014:	464b      	mov	r3, r9
 800b016:	aa03      	add	r2, sp, #12
 800b018:	4621      	mov	r1, r4
 800b01a:	4640      	mov	r0, r8
 800b01c:	f7ff fee2 	bl	800ade4 <_printf_common>
 800b020:	3001      	adds	r0, #1
 800b022:	d14c      	bne.n	800b0be <_printf_i+0x1fe>
 800b024:	f04f 30ff 	mov.w	r0, #4294967295
 800b028:	b004      	add	sp, #16
 800b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02e:	4835      	ldr	r0, [pc, #212]	; (800b104 <_printf_i+0x244>)
 800b030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b034:	6829      	ldr	r1, [r5, #0]
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	f851 6b04 	ldr.w	r6, [r1], #4
 800b03c:	6029      	str	r1, [r5, #0]
 800b03e:	061d      	lsls	r5, r3, #24
 800b040:	d514      	bpl.n	800b06c <_printf_i+0x1ac>
 800b042:	07df      	lsls	r7, r3, #31
 800b044:	bf44      	itt	mi
 800b046:	f043 0320 	orrmi.w	r3, r3, #32
 800b04a:	6023      	strmi	r3, [r4, #0]
 800b04c:	b91e      	cbnz	r6, 800b056 <_printf_i+0x196>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	f023 0320 	bic.w	r3, r3, #32
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	2310      	movs	r3, #16
 800b058:	e7b0      	b.n	800afbc <_printf_i+0xfc>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	f043 0320 	orr.w	r3, r3, #32
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	2378      	movs	r3, #120	; 0x78
 800b064:	4828      	ldr	r0, [pc, #160]	; (800b108 <_printf_i+0x248>)
 800b066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b06a:	e7e3      	b.n	800b034 <_printf_i+0x174>
 800b06c:	0659      	lsls	r1, r3, #25
 800b06e:	bf48      	it	mi
 800b070:	b2b6      	uxthmi	r6, r6
 800b072:	e7e6      	b.n	800b042 <_printf_i+0x182>
 800b074:	4615      	mov	r5, r2
 800b076:	e7bb      	b.n	800aff0 <_printf_i+0x130>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	6826      	ldr	r6, [r4, #0]
 800b07c:	6961      	ldr	r1, [r4, #20]
 800b07e:	1d18      	adds	r0, r3, #4
 800b080:	6028      	str	r0, [r5, #0]
 800b082:	0635      	lsls	r5, r6, #24
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	d501      	bpl.n	800b08c <_printf_i+0x1cc>
 800b088:	6019      	str	r1, [r3, #0]
 800b08a:	e002      	b.n	800b092 <_printf_i+0x1d2>
 800b08c:	0670      	lsls	r0, r6, #25
 800b08e:	d5fb      	bpl.n	800b088 <_printf_i+0x1c8>
 800b090:	8019      	strh	r1, [r3, #0]
 800b092:	2300      	movs	r3, #0
 800b094:	6123      	str	r3, [r4, #16]
 800b096:	4615      	mov	r5, r2
 800b098:	e7ba      	b.n	800b010 <_printf_i+0x150>
 800b09a:	682b      	ldr	r3, [r5, #0]
 800b09c:	1d1a      	adds	r2, r3, #4
 800b09e:	602a      	str	r2, [r5, #0]
 800b0a0:	681d      	ldr	r5, [r3, #0]
 800b0a2:	6862      	ldr	r2, [r4, #4]
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f7f5 f8c2 	bl	8000230 <memchr>
 800b0ac:	b108      	cbz	r0, 800b0b2 <_printf_i+0x1f2>
 800b0ae:	1b40      	subs	r0, r0, r5
 800b0b0:	6060      	str	r0, [r4, #4]
 800b0b2:	6863      	ldr	r3, [r4, #4]
 800b0b4:	6123      	str	r3, [r4, #16]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0bc:	e7a8      	b.n	800b010 <_printf_i+0x150>
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	462a      	mov	r2, r5
 800b0c2:	4649      	mov	r1, r9
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	47d0      	blx	sl
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d0ab      	beq.n	800b024 <_printf_i+0x164>
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	079b      	lsls	r3, r3, #30
 800b0d0:	d413      	bmi.n	800b0fa <_printf_i+0x23a>
 800b0d2:	68e0      	ldr	r0, [r4, #12]
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	4298      	cmp	r0, r3
 800b0d8:	bfb8      	it	lt
 800b0da:	4618      	movlt	r0, r3
 800b0dc:	e7a4      	b.n	800b028 <_printf_i+0x168>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	4632      	mov	r2, r6
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	47d0      	blx	sl
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	d09b      	beq.n	800b024 <_printf_i+0x164>
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	68e3      	ldr	r3, [r4, #12]
 800b0f0:	9903      	ldr	r1, [sp, #12]
 800b0f2:	1a5b      	subs	r3, r3, r1
 800b0f4:	42ab      	cmp	r3, r5
 800b0f6:	dcf2      	bgt.n	800b0de <_printf_i+0x21e>
 800b0f8:	e7eb      	b.n	800b0d2 <_printf_i+0x212>
 800b0fa:	2500      	movs	r5, #0
 800b0fc:	f104 0619 	add.w	r6, r4, #25
 800b100:	e7f5      	b.n	800b0ee <_printf_i+0x22e>
 800b102:	bf00      	nop
 800b104:	0800e932 	.word	0x0800e932
 800b108:	0800e943 	.word	0x0800e943

0800b10c <_puts_r>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	460e      	mov	r6, r1
 800b110:	4605      	mov	r5, r0
 800b112:	b118      	cbz	r0, 800b11c <_puts_r+0x10>
 800b114:	6983      	ldr	r3, [r0, #24]
 800b116:	b90b      	cbnz	r3, 800b11c <_puts_r+0x10>
 800b118:	f7ff fa1e 	bl	800a558 <__sinit>
 800b11c:	69ab      	ldr	r3, [r5, #24]
 800b11e:	68ac      	ldr	r4, [r5, #8]
 800b120:	b913      	cbnz	r3, 800b128 <_puts_r+0x1c>
 800b122:	4628      	mov	r0, r5
 800b124:	f7ff fa18 	bl	800a558 <__sinit>
 800b128:	4b2c      	ldr	r3, [pc, #176]	; (800b1dc <_puts_r+0xd0>)
 800b12a:	429c      	cmp	r4, r3
 800b12c:	d120      	bne.n	800b170 <_puts_r+0x64>
 800b12e:	686c      	ldr	r4, [r5, #4]
 800b130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b132:	07db      	lsls	r3, r3, #31
 800b134:	d405      	bmi.n	800b142 <_puts_r+0x36>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	0598      	lsls	r0, r3, #22
 800b13a:	d402      	bmi.n	800b142 <_puts_r+0x36>
 800b13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b13e:	f7ff face 	bl	800a6de <__retarget_lock_acquire_recursive>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	0719      	lsls	r1, r3, #28
 800b146:	d51d      	bpl.n	800b184 <_puts_r+0x78>
 800b148:	6923      	ldr	r3, [r4, #16]
 800b14a:	b1db      	cbz	r3, 800b184 <_puts_r+0x78>
 800b14c:	3e01      	subs	r6, #1
 800b14e:	68a3      	ldr	r3, [r4, #8]
 800b150:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b154:	3b01      	subs	r3, #1
 800b156:	60a3      	str	r3, [r4, #8]
 800b158:	bb39      	cbnz	r1, 800b1aa <_puts_r+0x9e>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	da38      	bge.n	800b1d0 <_puts_r+0xc4>
 800b15e:	4622      	mov	r2, r4
 800b160:	210a      	movs	r1, #10
 800b162:	4628      	mov	r0, r5
 800b164:	f000 f906 	bl	800b374 <__swbuf_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	d011      	beq.n	800b190 <_puts_r+0x84>
 800b16c:	250a      	movs	r5, #10
 800b16e:	e011      	b.n	800b194 <_puts_r+0x88>
 800b170:	4b1b      	ldr	r3, [pc, #108]	; (800b1e0 <_puts_r+0xd4>)
 800b172:	429c      	cmp	r4, r3
 800b174:	d101      	bne.n	800b17a <_puts_r+0x6e>
 800b176:	68ac      	ldr	r4, [r5, #8]
 800b178:	e7da      	b.n	800b130 <_puts_r+0x24>
 800b17a:	4b1a      	ldr	r3, [pc, #104]	; (800b1e4 <_puts_r+0xd8>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	bf08      	it	eq
 800b180:	68ec      	ldreq	r4, [r5, #12]
 800b182:	e7d5      	b.n	800b130 <_puts_r+0x24>
 800b184:	4621      	mov	r1, r4
 800b186:	4628      	mov	r0, r5
 800b188:	f000 f958 	bl	800b43c <__swsetup_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d0dd      	beq.n	800b14c <_puts_r+0x40>
 800b190:	f04f 35ff 	mov.w	r5, #4294967295
 800b194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b196:	07da      	lsls	r2, r3, #31
 800b198:	d405      	bmi.n	800b1a6 <_puts_r+0x9a>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	059b      	lsls	r3, r3, #22
 800b19e:	d402      	bmi.n	800b1a6 <_puts_r+0x9a>
 800b1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1a2:	f7ff fa9d 	bl	800a6e0 <__retarget_lock_release_recursive>
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	bd70      	pop	{r4, r5, r6, pc}
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da04      	bge.n	800b1b8 <_puts_r+0xac>
 800b1ae:	69a2      	ldr	r2, [r4, #24]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	dc06      	bgt.n	800b1c2 <_puts_r+0xb6>
 800b1b4:	290a      	cmp	r1, #10
 800b1b6:	d004      	beq.n	800b1c2 <_puts_r+0xb6>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	6022      	str	r2, [r4, #0]
 800b1be:	7019      	strb	r1, [r3, #0]
 800b1c0:	e7c5      	b.n	800b14e <_puts_r+0x42>
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f000 f8d5 	bl	800b374 <__swbuf_r>
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	d1bf      	bne.n	800b14e <_puts_r+0x42>
 800b1ce:	e7df      	b.n	800b190 <_puts_r+0x84>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	250a      	movs	r5, #10
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	6022      	str	r2, [r4, #0]
 800b1d8:	701d      	strb	r5, [r3, #0]
 800b1da:	e7db      	b.n	800b194 <_puts_r+0x88>
 800b1dc:	0800e8dc 	.word	0x0800e8dc
 800b1e0:	0800e8fc 	.word	0x0800e8fc
 800b1e4:	0800e8bc 	.word	0x0800e8bc

0800b1e8 <puts>:
 800b1e8:	4b02      	ldr	r3, [pc, #8]	; (800b1f4 <puts+0xc>)
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	f7ff bf8d 	b.w	800b10c <_puts_r>
 800b1f2:	bf00      	nop
 800b1f4:	20000010 	.word	0x20000010

0800b1f8 <cleanup_glue>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	6809      	ldr	r1, [r1, #0]
 800b1fe:	4605      	mov	r5, r0
 800b200:	b109      	cbz	r1, 800b206 <cleanup_glue+0xe>
 800b202:	f7ff fff9 	bl	800b1f8 <cleanup_glue>
 800b206:	4621      	mov	r1, r4
 800b208:	4628      	mov	r0, r5
 800b20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b20e:	f001 bcf9 	b.w	800cc04 <_free_r>
	...

0800b214 <_reclaim_reent>:
 800b214:	4b2c      	ldr	r3, [pc, #176]	; (800b2c8 <_reclaim_reent+0xb4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4283      	cmp	r3, r0
 800b21a:	b570      	push	{r4, r5, r6, lr}
 800b21c:	4604      	mov	r4, r0
 800b21e:	d051      	beq.n	800b2c4 <_reclaim_reent+0xb0>
 800b220:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b222:	b143      	cbz	r3, 800b236 <_reclaim_reent+0x22>
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d14a      	bne.n	800b2c0 <_reclaim_reent+0xac>
 800b22a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22c:	6819      	ldr	r1, [r3, #0]
 800b22e:	b111      	cbz	r1, 800b236 <_reclaim_reent+0x22>
 800b230:	4620      	mov	r0, r4
 800b232:	f001 fce7 	bl	800cc04 <_free_r>
 800b236:	6961      	ldr	r1, [r4, #20]
 800b238:	b111      	cbz	r1, 800b240 <_reclaim_reent+0x2c>
 800b23a:	4620      	mov	r0, r4
 800b23c:	f001 fce2 	bl	800cc04 <_free_r>
 800b240:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b242:	b111      	cbz	r1, 800b24a <_reclaim_reent+0x36>
 800b244:	4620      	mov	r0, r4
 800b246:	f001 fcdd 	bl	800cc04 <_free_r>
 800b24a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b24c:	b111      	cbz	r1, 800b254 <_reclaim_reent+0x40>
 800b24e:	4620      	mov	r0, r4
 800b250:	f001 fcd8 	bl	800cc04 <_free_r>
 800b254:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b256:	b111      	cbz	r1, 800b25e <_reclaim_reent+0x4a>
 800b258:	4620      	mov	r0, r4
 800b25a:	f001 fcd3 	bl	800cc04 <_free_r>
 800b25e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b260:	b111      	cbz	r1, 800b268 <_reclaim_reent+0x54>
 800b262:	4620      	mov	r0, r4
 800b264:	f001 fcce 	bl	800cc04 <_free_r>
 800b268:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b26a:	b111      	cbz	r1, 800b272 <_reclaim_reent+0x5e>
 800b26c:	4620      	mov	r0, r4
 800b26e:	f001 fcc9 	bl	800cc04 <_free_r>
 800b272:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b274:	b111      	cbz	r1, 800b27c <_reclaim_reent+0x68>
 800b276:	4620      	mov	r0, r4
 800b278:	f001 fcc4 	bl	800cc04 <_free_r>
 800b27c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b27e:	b111      	cbz	r1, 800b286 <_reclaim_reent+0x72>
 800b280:	4620      	mov	r0, r4
 800b282:	f001 fcbf 	bl	800cc04 <_free_r>
 800b286:	69a3      	ldr	r3, [r4, #24]
 800b288:	b1e3      	cbz	r3, 800b2c4 <_reclaim_reent+0xb0>
 800b28a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b28c:	4620      	mov	r0, r4
 800b28e:	4798      	blx	r3
 800b290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b292:	b1b9      	cbz	r1, 800b2c4 <_reclaim_reent+0xb0>
 800b294:	4620      	mov	r0, r4
 800b296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b29a:	f7ff bfad 	b.w	800b1f8 <cleanup_glue>
 800b29e:	5949      	ldr	r1, [r1, r5]
 800b2a0:	b941      	cbnz	r1, 800b2b4 <_reclaim_reent+0xa0>
 800b2a2:	3504      	adds	r5, #4
 800b2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a6:	2d80      	cmp	r5, #128	; 0x80
 800b2a8:	68d9      	ldr	r1, [r3, #12]
 800b2aa:	d1f8      	bne.n	800b29e <_reclaim_reent+0x8a>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f001 fca9 	bl	800cc04 <_free_r>
 800b2b2:	e7ba      	b.n	800b22a <_reclaim_reent+0x16>
 800b2b4:	680e      	ldr	r6, [r1, #0]
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f001 fca4 	bl	800cc04 <_free_r>
 800b2bc:	4631      	mov	r1, r6
 800b2be:	e7ef      	b.n	800b2a0 <_reclaim_reent+0x8c>
 800b2c0:	2500      	movs	r5, #0
 800b2c2:	e7ef      	b.n	800b2a4 <_reclaim_reent+0x90>
 800b2c4:	bd70      	pop	{r4, r5, r6, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000010 	.word	0x20000010

0800b2cc <_sbrk_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d06      	ldr	r5, [pc, #24]	; (800b2e8 <_sbrk_r+0x1c>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	602b      	str	r3, [r5, #0]
 800b2d8:	f7f6 fe3e 	bl	8001f58 <_sbrk>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_sbrk_r+0x1a>
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_sbrk_r+0x1a>
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	2001ca64 	.word	0x2001ca64

0800b2ec <__sread>:
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f4:	f001 fcd2 	bl	800cc9c <_read_r>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	bfab      	itete	ge
 800b2fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b300:	181b      	addge	r3, r3, r0
 800b302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b306:	bfac      	ite	ge
 800b308:	6563      	strge	r3, [r4, #84]	; 0x54
 800b30a:	81a3      	strhlt	r3, [r4, #12]
 800b30c:	bd10      	pop	{r4, pc}

0800b30e <__swrite>:
 800b30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b312:	461f      	mov	r7, r3
 800b314:	898b      	ldrh	r3, [r1, #12]
 800b316:	05db      	lsls	r3, r3, #23
 800b318:	4605      	mov	r5, r0
 800b31a:	460c      	mov	r4, r1
 800b31c:	4616      	mov	r6, r2
 800b31e:	d505      	bpl.n	800b32c <__swrite+0x1e>
 800b320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b324:	2302      	movs	r3, #2
 800b326:	2200      	movs	r2, #0
 800b328:	f001 f846 	bl	800c3b8 <_lseek_r>
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	4632      	mov	r2, r6
 800b33a:	463b      	mov	r3, r7
 800b33c:	4628      	mov	r0, r5
 800b33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b342:	f000 b869 	b.w	800b418 <_write_r>

0800b346 <__sseek>:
 800b346:	b510      	push	{r4, lr}
 800b348:	460c      	mov	r4, r1
 800b34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34e:	f001 f833 	bl	800c3b8 <_lseek_r>
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	bf15      	itete	ne
 800b358:	6560      	strne	r0, [r4, #84]	; 0x54
 800b35a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b35e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b362:	81a3      	strheq	r3, [r4, #12]
 800b364:	bf18      	it	ne
 800b366:	81a3      	strhne	r3, [r4, #12]
 800b368:	bd10      	pop	{r4, pc}

0800b36a <__sclose>:
 800b36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36e:	f000 b8d3 	b.w	800b518 <_close_r>
	...

0800b374 <__swbuf_r>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	460e      	mov	r6, r1
 800b378:	4614      	mov	r4, r2
 800b37a:	4605      	mov	r5, r0
 800b37c:	b118      	cbz	r0, 800b386 <__swbuf_r+0x12>
 800b37e:	6983      	ldr	r3, [r0, #24]
 800b380:	b90b      	cbnz	r3, 800b386 <__swbuf_r+0x12>
 800b382:	f7ff f8e9 	bl	800a558 <__sinit>
 800b386:	4b21      	ldr	r3, [pc, #132]	; (800b40c <__swbuf_r+0x98>)
 800b388:	429c      	cmp	r4, r3
 800b38a:	d12b      	bne.n	800b3e4 <__swbuf_r+0x70>
 800b38c:	686c      	ldr	r4, [r5, #4]
 800b38e:	69a3      	ldr	r3, [r4, #24]
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	071a      	lsls	r2, r3, #28
 800b396:	d52f      	bpl.n	800b3f8 <__swbuf_r+0x84>
 800b398:	6923      	ldr	r3, [r4, #16]
 800b39a:	b36b      	cbz	r3, 800b3f8 <__swbuf_r+0x84>
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	6820      	ldr	r0, [r4, #0]
 800b3a0:	1ac0      	subs	r0, r0, r3
 800b3a2:	6963      	ldr	r3, [r4, #20]
 800b3a4:	b2f6      	uxtb	r6, r6
 800b3a6:	4283      	cmp	r3, r0
 800b3a8:	4637      	mov	r7, r6
 800b3aa:	dc04      	bgt.n	800b3b6 <__swbuf_r+0x42>
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f000 ffc2 	bl	800c338 <_fflush_r>
 800b3b4:	bb30      	cbnz	r0, 800b404 <__swbuf_r+0x90>
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	60a3      	str	r3, [r4, #8]
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	6022      	str	r2, [r4, #0]
 800b3c2:	701e      	strb	r6, [r3, #0]
 800b3c4:	6963      	ldr	r3, [r4, #20]
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	4283      	cmp	r3, r0
 800b3ca:	d004      	beq.n	800b3d6 <__swbuf_r+0x62>
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	07db      	lsls	r3, r3, #31
 800b3d0:	d506      	bpl.n	800b3e0 <__swbuf_r+0x6c>
 800b3d2:	2e0a      	cmp	r6, #10
 800b3d4:	d104      	bne.n	800b3e0 <__swbuf_r+0x6c>
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f000 ffad 	bl	800c338 <_fflush_r>
 800b3de:	b988      	cbnz	r0, 800b404 <__swbuf_r+0x90>
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	; (800b410 <__swbuf_r+0x9c>)
 800b3e6:	429c      	cmp	r4, r3
 800b3e8:	d101      	bne.n	800b3ee <__swbuf_r+0x7a>
 800b3ea:	68ac      	ldr	r4, [r5, #8]
 800b3ec:	e7cf      	b.n	800b38e <__swbuf_r+0x1a>
 800b3ee:	4b09      	ldr	r3, [pc, #36]	; (800b414 <__swbuf_r+0xa0>)
 800b3f0:	429c      	cmp	r4, r3
 800b3f2:	bf08      	it	eq
 800b3f4:	68ec      	ldreq	r4, [r5, #12]
 800b3f6:	e7ca      	b.n	800b38e <__swbuf_r+0x1a>
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f000 f81e 	bl	800b43c <__swsetup_r>
 800b400:	2800      	cmp	r0, #0
 800b402:	d0cb      	beq.n	800b39c <__swbuf_r+0x28>
 800b404:	f04f 37ff 	mov.w	r7, #4294967295
 800b408:	e7ea      	b.n	800b3e0 <__swbuf_r+0x6c>
 800b40a:	bf00      	nop
 800b40c:	0800e8dc 	.word	0x0800e8dc
 800b410:	0800e8fc 	.word	0x0800e8fc
 800b414:	0800e8bc 	.word	0x0800e8bc

0800b418 <_write_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d07      	ldr	r5, [pc, #28]	; (800b438 <_write_r+0x20>)
 800b41c:	4604      	mov	r4, r0
 800b41e:	4608      	mov	r0, r1
 800b420:	4611      	mov	r1, r2
 800b422:	2200      	movs	r2, #0
 800b424:	602a      	str	r2, [r5, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	f7f6 fa76 	bl	8001918 <_write>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_write_r+0x1e>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_write_r+0x1e>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	2001ca64 	.word	0x2001ca64

0800b43c <__swsetup_r>:
 800b43c:	4b32      	ldr	r3, [pc, #200]	; (800b508 <__swsetup_r+0xcc>)
 800b43e:	b570      	push	{r4, r5, r6, lr}
 800b440:	681d      	ldr	r5, [r3, #0]
 800b442:	4606      	mov	r6, r0
 800b444:	460c      	mov	r4, r1
 800b446:	b125      	cbz	r5, 800b452 <__swsetup_r+0x16>
 800b448:	69ab      	ldr	r3, [r5, #24]
 800b44a:	b913      	cbnz	r3, 800b452 <__swsetup_r+0x16>
 800b44c:	4628      	mov	r0, r5
 800b44e:	f7ff f883 	bl	800a558 <__sinit>
 800b452:	4b2e      	ldr	r3, [pc, #184]	; (800b50c <__swsetup_r+0xd0>)
 800b454:	429c      	cmp	r4, r3
 800b456:	d10f      	bne.n	800b478 <__swsetup_r+0x3c>
 800b458:	686c      	ldr	r4, [r5, #4]
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b460:	0719      	lsls	r1, r3, #28
 800b462:	d42c      	bmi.n	800b4be <__swsetup_r+0x82>
 800b464:	06dd      	lsls	r5, r3, #27
 800b466:	d411      	bmi.n	800b48c <__swsetup_r+0x50>
 800b468:	2309      	movs	r3, #9
 800b46a:	6033      	str	r3, [r6, #0]
 800b46c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b470:	81a3      	strh	r3, [r4, #12]
 800b472:	f04f 30ff 	mov.w	r0, #4294967295
 800b476:	e03e      	b.n	800b4f6 <__swsetup_r+0xba>
 800b478:	4b25      	ldr	r3, [pc, #148]	; (800b510 <__swsetup_r+0xd4>)
 800b47a:	429c      	cmp	r4, r3
 800b47c:	d101      	bne.n	800b482 <__swsetup_r+0x46>
 800b47e:	68ac      	ldr	r4, [r5, #8]
 800b480:	e7eb      	b.n	800b45a <__swsetup_r+0x1e>
 800b482:	4b24      	ldr	r3, [pc, #144]	; (800b514 <__swsetup_r+0xd8>)
 800b484:	429c      	cmp	r4, r3
 800b486:	bf08      	it	eq
 800b488:	68ec      	ldreq	r4, [r5, #12]
 800b48a:	e7e6      	b.n	800b45a <__swsetup_r+0x1e>
 800b48c:	0758      	lsls	r0, r3, #29
 800b48e:	d512      	bpl.n	800b4b6 <__swsetup_r+0x7a>
 800b490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b492:	b141      	cbz	r1, 800b4a6 <__swsetup_r+0x6a>
 800b494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b498:	4299      	cmp	r1, r3
 800b49a:	d002      	beq.n	800b4a2 <__swsetup_r+0x66>
 800b49c:	4630      	mov	r0, r6
 800b49e:	f001 fbb1 	bl	800cc04 <_free_r>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4ac:	81a3      	strh	r3, [r4, #12]
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	6063      	str	r3, [r4, #4]
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	f043 0308 	orr.w	r3, r3, #8
 800b4bc:	81a3      	strh	r3, [r4, #12]
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	b94b      	cbnz	r3, 800b4d6 <__swsetup_r+0x9a>
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4cc:	d003      	beq.n	800b4d6 <__swsetup_r+0x9a>
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f000 ffa9 	bl	800c428 <__smakebuf_r>
 800b4d6:	89a0      	ldrh	r0, [r4, #12]
 800b4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4dc:	f010 0301 	ands.w	r3, r0, #1
 800b4e0:	d00a      	beq.n	800b4f8 <__swsetup_r+0xbc>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60a3      	str	r3, [r4, #8]
 800b4e6:	6963      	ldr	r3, [r4, #20]
 800b4e8:	425b      	negs	r3, r3
 800b4ea:	61a3      	str	r3, [r4, #24]
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	b943      	cbnz	r3, 800b502 <__swsetup_r+0xc6>
 800b4f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4f4:	d1ba      	bne.n	800b46c <__swsetup_r+0x30>
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	0781      	lsls	r1, r0, #30
 800b4fa:	bf58      	it	pl
 800b4fc:	6963      	ldrpl	r3, [r4, #20]
 800b4fe:	60a3      	str	r3, [r4, #8]
 800b500:	e7f4      	b.n	800b4ec <__swsetup_r+0xb0>
 800b502:	2000      	movs	r0, #0
 800b504:	e7f7      	b.n	800b4f6 <__swsetup_r+0xba>
 800b506:	bf00      	nop
 800b508:	20000010 	.word	0x20000010
 800b50c:	0800e8dc 	.word	0x0800e8dc
 800b510:	0800e8fc 	.word	0x0800e8fc
 800b514:	0800e8bc 	.word	0x0800e8bc

0800b518 <_close_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4d06      	ldr	r5, [pc, #24]	; (800b534 <_close_r+0x1c>)
 800b51c:	2300      	movs	r3, #0
 800b51e:	4604      	mov	r4, r0
 800b520:	4608      	mov	r0, r1
 800b522:	602b      	str	r3, [r5, #0]
 800b524:	f7f6 fce3 	bl	8001eee <_close>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d102      	bne.n	800b532 <_close_r+0x1a>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	b103      	cbz	r3, 800b532 <_close_r+0x1a>
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	2001ca64 	.word	0x2001ca64

0800b538 <quorem>:
 800b538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	6903      	ldr	r3, [r0, #16]
 800b53e:	690c      	ldr	r4, [r1, #16]
 800b540:	42a3      	cmp	r3, r4
 800b542:	4607      	mov	r7, r0
 800b544:	f2c0 8081 	blt.w	800b64a <quorem+0x112>
 800b548:	3c01      	subs	r4, #1
 800b54a:	f101 0814 	add.w	r8, r1, #20
 800b54e:	f100 0514 	add.w	r5, r0, #20
 800b552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b55c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b560:	3301      	adds	r3, #1
 800b562:	429a      	cmp	r2, r3
 800b564:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b568:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b56c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b570:	d331      	bcc.n	800b5d6 <quorem+0x9e>
 800b572:	f04f 0e00 	mov.w	lr, #0
 800b576:	4640      	mov	r0, r8
 800b578:	46ac      	mov	ip, r5
 800b57a:	46f2      	mov	sl, lr
 800b57c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b580:	b293      	uxth	r3, r2
 800b582:	fb06 e303 	mla	r3, r6, r3, lr
 800b586:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	ebaa 0303 	sub.w	r3, sl, r3
 800b590:	f8dc a000 	ldr.w	sl, [ip]
 800b594:	0c12      	lsrs	r2, r2, #16
 800b596:	fa13 f38a 	uxtah	r3, r3, sl
 800b59a:	fb06 e202 	mla	r2, r6, r2, lr
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	9b00      	ldr	r3, [sp, #0]
 800b5a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5a6:	b292      	uxth	r2, r2
 800b5a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b5b4:	4581      	cmp	r9, r0
 800b5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5ba:	f84c 3b04 	str.w	r3, [ip], #4
 800b5be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5c2:	d2db      	bcs.n	800b57c <quorem+0x44>
 800b5c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5c8:	b92b      	cbnz	r3, 800b5d6 <quorem+0x9e>
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	3b04      	subs	r3, #4
 800b5ce:	429d      	cmp	r5, r3
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	d32e      	bcc.n	800b632 <quorem+0xfa>
 800b5d4:	613c      	str	r4, [r7, #16]
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f001 f9fc 	bl	800c9d4 <__mcmp>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	db24      	blt.n	800b62a <quorem+0xf2>
 800b5e0:	3601      	adds	r6, #1
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f04f 0c00 	mov.w	ip, #0
 800b5e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5ec:	f8d0 e000 	ldr.w	lr, [r0]
 800b5f0:	b293      	uxth	r3, r2
 800b5f2:	ebac 0303 	sub.w	r3, ip, r3
 800b5f6:	0c12      	lsrs	r2, r2, #16
 800b5f8:	fa13 f38e 	uxtah	r3, r3, lr
 800b5fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b604:	b29b      	uxth	r3, r3
 800b606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b60a:	45c1      	cmp	r9, r8
 800b60c:	f840 3b04 	str.w	r3, [r0], #4
 800b610:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b614:	d2e8      	bcs.n	800b5e8 <quorem+0xb0>
 800b616:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b61a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b61e:	b922      	cbnz	r2, 800b62a <quorem+0xf2>
 800b620:	3b04      	subs	r3, #4
 800b622:	429d      	cmp	r5, r3
 800b624:	461a      	mov	r2, r3
 800b626:	d30a      	bcc.n	800b63e <quorem+0x106>
 800b628:	613c      	str	r4, [r7, #16]
 800b62a:	4630      	mov	r0, r6
 800b62c:	b003      	add	sp, #12
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	6812      	ldr	r2, [r2, #0]
 800b634:	3b04      	subs	r3, #4
 800b636:	2a00      	cmp	r2, #0
 800b638:	d1cc      	bne.n	800b5d4 <quorem+0x9c>
 800b63a:	3c01      	subs	r4, #1
 800b63c:	e7c7      	b.n	800b5ce <quorem+0x96>
 800b63e:	6812      	ldr	r2, [r2, #0]
 800b640:	3b04      	subs	r3, #4
 800b642:	2a00      	cmp	r2, #0
 800b644:	d1f0      	bne.n	800b628 <quorem+0xf0>
 800b646:	3c01      	subs	r4, #1
 800b648:	e7eb      	b.n	800b622 <quorem+0xea>
 800b64a:	2000      	movs	r0, #0
 800b64c:	e7ee      	b.n	800b62c <quorem+0xf4>
	...

0800b650 <_dtoa_r>:
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	ed2d 8b04 	vpush	{d8-d9}
 800b658:	ec57 6b10 	vmov	r6, r7, d0
 800b65c:	b093      	sub	sp, #76	; 0x4c
 800b65e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b660:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b664:	9106      	str	r1, [sp, #24]
 800b666:	ee10 aa10 	vmov	sl, s0
 800b66a:	4604      	mov	r4, r0
 800b66c:	9209      	str	r2, [sp, #36]	; 0x24
 800b66e:	930c      	str	r3, [sp, #48]	; 0x30
 800b670:	46bb      	mov	fp, r7
 800b672:	b975      	cbnz	r5, 800b692 <_dtoa_r+0x42>
 800b674:	2010      	movs	r0, #16
 800b676:	f000 ff17 	bl	800c4a8 <malloc>
 800b67a:	4602      	mov	r2, r0
 800b67c:	6260      	str	r0, [r4, #36]	; 0x24
 800b67e:	b920      	cbnz	r0, 800b68a <_dtoa_r+0x3a>
 800b680:	4ba7      	ldr	r3, [pc, #668]	; (800b920 <_dtoa_r+0x2d0>)
 800b682:	21ea      	movs	r1, #234	; 0xea
 800b684:	48a7      	ldr	r0, [pc, #668]	; (800b924 <_dtoa_r+0x2d4>)
 800b686:	f001 fb1b 	bl	800ccc0 <__assert_func>
 800b68a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b68e:	6005      	str	r5, [r0, #0]
 800b690:	60c5      	str	r5, [r0, #12]
 800b692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b694:	6819      	ldr	r1, [r3, #0]
 800b696:	b151      	cbz	r1, 800b6ae <_dtoa_r+0x5e>
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	604a      	str	r2, [r1, #4]
 800b69c:	2301      	movs	r3, #1
 800b69e:	4093      	lsls	r3, r2
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 ff54 	bl	800c550 <_Bfree>
 800b6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	1e3b      	subs	r3, r7, #0
 800b6b0:	bfaa      	itet	ge
 800b6b2:	2300      	movge	r3, #0
 800b6b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b6b8:	f8c8 3000 	strge.w	r3, [r8]
 800b6bc:	4b9a      	ldr	r3, [pc, #616]	; (800b928 <_dtoa_r+0x2d8>)
 800b6be:	bfbc      	itt	lt
 800b6c0:	2201      	movlt	r2, #1
 800b6c2:	f8c8 2000 	strlt.w	r2, [r8]
 800b6c6:	ea33 030b 	bics.w	r3, r3, fp
 800b6ca:	d11b      	bne.n	800b704 <_dtoa_r+0xb4>
 800b6cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6d8:	4333      	orrs	r3, r6
 800b6da:	f000 8592 	beq.w	800c202 <_dtoa_r+0xbb2>
 800b6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6e0:	b963      	cbnz	r3, 800b6fc <_dtoa_r+0xac>
 800b6e2:	4b92      	ldr	r3, [pc, #584]	; (800b92c <_dtoa_r+0x2dc>)
 800b6e4:	e022      	b.n	800b72c <_dtoa_r+0xdc>
 800b6e6:	4b92      	ldr	r3, [pc, #584]	; (800b930 <_dtoa_r+0x2e0>)
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	9801      	ldr	r0, [sp, #4]
 800b6f2:	b013      	add	sp, #76	; 0x4c
 800b6f4:	ecbd 8b04 	vpop	{d8-d9}
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	4b8b      	ldr	r3, [pc, #556]	; (800b92c <_dtoa_r+0x2dc>)
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	3303      	adds	r3, #3
 800b702:	e7f3      	b.n	800b6ec <_dtoa_r+0x9c>
 800b704:	2200      	movs	r2, #0
 800b706:	2300      	movs	r3, #0
 800b708:	4650      	mov	r0, sl
 800b70a:	4659      	mov	r1, fp
 800b70c:	f7f5 fa04 	bl	8000b18 <__aeabi_dcmpeq>
 800b710:	ec4b ab19 	vmov	d9, sl, fp
 800b714:	4680      	mov	r8, r0
 800b716:	b158      	cbz	r0, 800b730 <_dtoa_r+0xe0>
 800b718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b71a:	2301      	movs	r3, #1
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b720:	2b00      	cmp	r3, #0
 800b722:	f000 856b 	beq.w	800c1fc <_dtoa_r+0xbac>
 800b726:	4883      	ldr	r0, [pc, #524]	; (800b934 <_dtoa_r+0x2e4>)
 800b728:	6018      	str	r0, [r3, #0]
 800b72a:	1e43      	subs	r3, r0, #1
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	e7df      	b.n	800b6f0 <_dtoa_r+0xa0>
 800b730:	ec4b ab10 	vmov	d0, sl, fp
 800b734:	aa10      	add	r2, sp, #64	; 0x40
 800b736:	a911      	add	r1, sp, #68	; 0x44
 800b738:	4620      	mov	r0, r4
 800b73a:	f001 f9f1 	bl	800cb20 <__d2b>
 800b73e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b742:	ee08 0a10 	vmov	s16, r0
 800b746:	2d00      	cmp	r5, #0
 800b748:	f000 8084 	beq.w	800b854 <_dtoa_r+0x204>
 800b74c:	ee19 3a90 	vmov	r3, s19
 800b750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b754:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b758:	4656      	mov	r6, sl
 800b75a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b75e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b762:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b766:	4b74      	ldr	r3, [pc, #464]	; (800b938 <_dtoa_r+0x2e8>)
 800b768:	2200      	movs	r2, #0
 800b76a:	4630      	mov	r0, r6
 800b76c:	4639      	mov	r1, r7
 800b76e:	f7f4 fdb3 	bl	80002d8 <__aeabi_dsub>
 800b772:	a365      	add	r3, pc, #404	; (adr r3, 800b908 <_dtoa_r+0x2b8>)
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f7f4 ff66 	bl	8000648 <__aeabi_dmul>
 800b77c:	a364      	add	r3, pc, #400	; (adr r3, 800b910 <_dtoa_r+0x2c0>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f4 fdab 	bl	80002dc <__adddf3>
 800b786:	4606      	mov	r6, r0
 800b788:	4628      	mov	r0, r5
 800b78a:	460f      	mov	r7, r1
 800b78c:	f7f4 fef2 	bl	8000574 <__aeabi_i2d>
 800b790:	a361      	add	r3, pc, #388	; (adr r3, 800b918 <_dtoa_r+0x2c8>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f7f4 ff57 	bl	8000648 <__aeabi_dmul>
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	f7f4 fd9b 	bl	80002dc <__adddf3>
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460f      	mov	r7, r1
 800b7aa:	f7f5 f9fd 	bl	8000ba8 <__aeabi_d2iz>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	9000      	str	r0, [sp, #0]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	f7f5 f9b8 	bl	8000b2c <__aeabi_dcmplt>
 800b7bc:	b150      	cbz	r0, 800b7d4 <_dtoa_r+0x184>
 800b7be:	9800      	ldr	r0, [sp, #0]
 800b7c0:	f7f4 fed8 	bl	8000574 <__aeabi_i2d>
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	463b      	mov	r3, r7
 800b7c8:	f7f5 f9a6 	bl	8000b18 <__aeabi_dcmpeq>
 800b7cc:	b910      	cbnz	r0, 800b7d4 <_dtoa_r+0x184>
 800b7ce:	9b00      	ldr	r3, [sp, #0]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	9b00      	ldr	r3, [sp, #0]
 800b7d6:	2b16      	cmp	r3, #22
 800b7d8:	d85a      	bhi.n	800b890 <_dtoa_r+0x240>
 800b7da:	9a00      	ldr	r2, [sp, #0]
 800b7dc:	4b57      	ldr	r3, [pc, #348]	; (800b93c <_dtoa_r+0x2ec>)
 800b7de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	ec51 0b19 	vmov	r0, r1, d9
 800b7ea:	f7f5 f99f 	bl	8000b2c <__aeabi_dcmplt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d050      	beq.n	800b894 <_dtoa_r+0x244>
 800b7f2:	9b00      	ldr	r3, [sp, #0]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7fe:	1b5d      	subs	r5, r3, r5
 800b800:	1e6b      	subs	r3, r5, #1
 800b802:	9305      	str	r3, [sp, #20]
 800b804:	bf45      	ittet	mi
 800b806:	f1c5 0301 	rsbmi	r3, r5, #1
 800b80a:	9304      	strmi	r3, [sp, #16]
 800b80c:	2300      	movpl	r3, #0
 800b80e:	2300      	movmi	r3, #0
 800b810:	bf4c      	ite	mi
 800b812:	9305      	strmi	r3, [sp, #20]
 800b814:	9304      	strpl	r3, [sp, #16]
 800b816:	9b00      	ldr	r3, [sp, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	db3d      	blt.n	800b898 <_dtoa_r+0x248>
 800b81c:	9b05      	ldr	r3, [sp, #20]
 800b81e:	9a00      	ldr	r2, [sp, #0]
 800b820:	920a      	str	r2, [sp, #40]	; 0x28
 800b822:	4413      	add	r3, r2
 800b824:	9305      	str	r3, [sp, #20]
 800b826:	2300      	movs	r3, #0
 800b828:	9307      	str	r3, [sp, #28]
 800b82a:	9b06      	ldr	r3, [sp, #24]
 800b82c:	2b09      	cmp	r3, #9
 800b82e:	f200 8089 	bhi.w	800b944 <_dtoa_r+0x2f4>
 800b832:	2b05      	cmp	r3, #5
 800b834:	bfc4      	itt	gt
 800b836:	3b04      	subgt	r3, #4
 800b838:	9306      	strgt	r3, [sp, #24]
 800b83a:	9b06      	ldr	r3, [sp, #24]
 800b83c:	f1a3 0302 	sub.w	r3, r3, #2
 800b840:	bfcc      	ite	gt
 800b842:	2500      	movgt	r5, #0
 800b844:	2501      	movle	r5, #1
 800b846:	2b03      	cmp	r3, #3
 800b848:	f200 8087 	bhi.w	800b95a <_dtoa_r+0x30a>
 800b84c:	e8df f003 	tbb	[pc, r3]
 800b850:	59383a2d 	.word	0x59383a2d
 800b854:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b858:	441d      	add	r5, r3
 800b85a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b85e:	2b20      	cmp	r3, #32
 800b860:	bfc1      	itttt	gt
 800b862:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b866:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b86a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b86e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b872:	bfda      	itte	le
 800b874:	f1c3 0320 	rsble	r3, r3, #32
 800b878:	fa06 f003 	lslle.w	r0, r6, r3
 800b87c:	4318      	orrgt	r0, r3
 800b87e:	f7f4 fe69 	bl	8000554 <__aeabi_ui2d>
 800b882:	2301      	movs	r3, #1
 800b884:	4606      	mov	r6, r0
 800b886:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b88a:	3d01      	subs	r5, #1
 800b88c:	930e      	str	r3, [sp, #56]	; 0x38
 800b88e:	e76a      	b.n	800b766 <_dtoa_r+0x116>
 800b890:	2301      	movs	r3, #1
 800b892:	e7b2      	b.n	800b7fa <_dtoa_r+0x1aa>
 800b894:	900b      	str	r0, [sp, #44]	; 0x2c
 800b896:	e7b1      	b.n	800b7fc <_dtoa_r+0x1ac>
 800b898:	9b04      	ldr	r3, [sp, #16]
 800b89a:	9a00      	ldr	r2, [sp, #0]
 800b89c:	1a9b      	subs	r3, r3, r2
 800b89e:	9304      	str	r3, [sp, #16]
 800b8a0:	4253      	negs	r3, r2
 800b8a2:	9307      	str	r3, [sp, #28]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8a8:	e7bf      	b.n	800b82a <_dtoa_r+0x1da>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9308      	str	r3, [sp, #32]
 800b8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc55      	bgt.n	800b960 <_dtoa_r+0x310>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8be:	e00c      	b.n	800b8da <_dtoa_r+0x28a>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e7f3      	b.n	800b8ac <_dtoa_r+0x25c>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8c8:	9308      	str	r3, [sp, #32]
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	9302      	str	r3, [sp, #8]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	9303      	str	r3, [sp, #12]
 800b8d6:	bfb8      	it	lt
 800b8d8:	2301      	movlt	r3, #1
 800b8da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b8dc:	2200      	movs	r2, #0
 800b8de:	6042      	str	r2, [r0, #4]
 800b8e0:	2204      	movs	r2, #4
 800b8e2:	f102 0614 	add.w	r6, r2, #20
 800b8e6:	429e      	cmp	r6, r3
 800b8e8:	6841      	ldr	r1, [r0, #4]
 800b8ea:	d93d      	bls.n	800b968 <_dtoa_r+0x318>
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fdef 	bl	800c4d0 <_Balloc>
 800b8f2:	9001      	str	r0, [sp, #4]
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d13b      	bne.n	800b970 <_dtoa_r+0x320>
 800b8f8:	4b11      	ldr	r3, [pc, #68]	; (800b940 <_dtoa_r+0x2f0>)
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b900:	e6c0      	b.n	800b684 <_dtoa_r+0x34>
 800b902:	2301      	movs	r3, #1
 800b904:	e7df      	b.n	800b8c6 <_dtoa_r+0x276>
 800b906:	bf00      	nop
 800b908:	636f4361 	.word	0x636f4361
 800b90c:	3fd287a7 	.word	0x3fd287a7
 800b910:	8b60c8b3 	.word	0x8b60c8b3
 800b914:	3fc68a28 	.word	0x3fc68a28
 800b918:	509f79fb 	.word	0x509f79fb
 800b91c:	3fd34413 	.word	0x3fd34413
 800b920:	0800e961 	.word	0x0800e961
 800b924:	0800e978 	.word	0x0800e978
 800b928:	7ff00000 	.word	0x7ff00000
 800b92c:	0800e95d 	.word	0x0800e95d
 800b930:	0800e954 	.word	0x0800e954
 800b934:	0800e931 	.word	0x0800e931
 800b938:	3ff80000 	.word	0x3ff80000
 800b93c:	0800ea68 	.word	0x0800ea68
 800b940:	0800e9d3 	.word	0x0800e9d3
 800b944:	2501      	movs	r5, #1
 800b946:	2300      	movs	r3, #0
 800b948:	9306      	str	r3, [sp, #24]
 800b94a:	9508      	str	r5, [sp, #32]
 800b94c:	f04f 33ff 	mov.w	r3, #4294967295
 800b950:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b954:	2200      	movs	r2, #0
 800b956:	2312      	movs	r3, #18
 800b958:	e7b0      	b.n	800b8bc <_dtoa_r+0x26c>
 800b95a:	2301      	movs	r3, #1
 800b95c:	9308      	str	r3, [sp, #32]
 800b95e:	e7f5      	b.n	800b94c <_dtoa_r+0x2fc>
 800b960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b962:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b966:	e7b8      	b.n	800b8da <_dtoa_r+0x28a>
 800b968:	3101      	adds	r1, #1
 800b96a:	6041      	str	r1, [r0, #4]
 800b96c:	0052      	lsls	r2, r2, #1
 800b96e:	e7b8      	b.n	800b8e2 <_dtoa_r+0x292>
 800b970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b972:	9a01      	ldr	r2, [sp, #4]
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	2b0e      	cmp	r3, #14
 800b97a:	f200 809d 	bhi.w	800bab8 <_dtoa_r+0x468>
 800b97e:	2d00      	cmp	r5, #0
 800b980:	f000 809a 	beq.w	800bab8 <_dtoa_r+0x468>
 800b984:	9b00      	ldr	r3, [sp, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd32      	ble.n	800b9f0 <_dtoa_r+0x3a0>
 800b98a:	4ab7      	ldr	r2, [pc, #732]	; (800bc68 <_dtoa_r+0x618>)
 800b98c:	f003 030f 	and.w	r3, r3, #15
 800b990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b994:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b998:	9b00      	ldr	r3, [sp, #0]
 800b99a:	05d8      	lsls	r0, r3, #23
 800b99c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b9a0:	d516      	bpl.n	800b9d0 <_dtoa_r+0x380>
 800b9a2:	4bb2      	ldr	r3, [pc, #712]	; (800bc6c <_dtoa_r+0x61c>)
 800b9a4:	ec51 0b19 	vmov	r0, r1, d9
 800b9a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9ac:	f7f4 ff76 	bl	800089c <__aeabi_ddiv>
 800b9b0:	f007 070f 	and.w	r7, r7, #15
 800b9b4:	4682      	mov	sl, r0
 800b9b6:	468b      	mov	fp, r1
 800b9b8:	2503      	movs	r5, #3
 800b9ba:	4eac      	ldr	r6, [pc, #688]	; (800bc6c <_dtoa_r+0x61c>)
 800b9bc:	b957      	cbnz	r7, 800b9d4 <_dtoa_r+0x384>
 800b9be:	4642      	mov	r2, r8
 800b9c0:	464b      	mov	r3, r9
 800b9c2:	4650      	mov	r0, sl
 800b9c4:	4659      	mov	r1, fp
 800b9c6:	f7f4 ff69 	bl	800089c <__aeabi_ddiv>
 800b9ca:	4682      	mov	sl, r0
 800b9cc:	468b      	mov	fp, r1
 800b9ce:	e028      	b.n	800ba22 <_dtoa_r+0x3d2>
 800b9d0:	2502      	movs	r5, #2
 800b9d2:	e7f2      	b.n	800b9ba <_dtoa_r+0x36a>
 800b9d4:	07f9      	lsls	r1, r7, #31
 800b9d6:	d508      	bpl.n	800b9ea <_dtoa_r+0x39a>
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4649      	mov	r1, r9
 800b9dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9e0:	f7f4 fe32 	bl	8000648 <__aeabi_dmul>
 800b9e4:	3501      	adds	r5, #1
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4689      	mov	r9, r1
 800b9ea:	107f      	asrs	r7, r7, #1
 800b9ec:	3608      	adds	r6, #8
 800b9ee:	e7e5      	b.n	800b9bc <_dtoa_r+0x36c>
 800b9f0:	f000 809b 	beq.w	800bb2a <_dtoa_r+0x4da>
 800b9f4:	9b00      	ldr	r3, [sp, #0]
 800b9f6:	4f9d      	ldr	r7, [pc, #628]	; (800bc6c <_dtoa_r+0x61c>)
 800b9f8:	425e      	negs	r6, r3
 800b9fa:	4b9b      	ldr	r3, [pc, #620]	; (800bc68 <_dtoa_r+0x618>)
 800b9fc:	f006 020f 	and.w	r2, r6, #15
 800ba00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	ec51 0b19 	vmov	r0, r1, d9
 800ba0c:	f7f4 fe1c 	bl	8000648 <__aeabi_dmul>
 800ba10:	1136      	asrs	r6, r6, #4
 800ba12:	4682      	mov	sl, r0
 800ba14:	468b      	mov	fp, r1
 800ba16:	2300      	movs	r3, #0
 800ba18:	2502      	movs	r5, #2
 800ba1a:	2e00      	cmp	r6, #0
 800ba1c:	d17a      	bne.n	800bb14 <_dtoa_r+0x4c4>
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1d3      	bne.n	800b9ca <_dtoa_r+0x37a>
 800ba22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 8082 	beq.w	800bb2e <_dtoa_r+0x4de>
 800ba2a:	4b91      	ldr	r3, [pc, #580]	; (800bc70 <_dtoa_r+0x620>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	4650      	mov	r0, sl
 800ba30:	4659      	mov	r1, fp
 800ba32:	f7f5 f87b 	bl	8000b2c <__aeabi_dcmplt>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d079      	beq.n	800bb2e <_dtoa_r+0x4de>
 800ba3a:	9b03      	ldr	r3, [sp, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d076      	beq.n	800bb2e <_dtoa_r+0x4de>
 800ba40:	9b02      	ldr	r3, [sp, #8]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	dd36      	ble.n	800bab4 <_dtoa_r+0x464>
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	4650      	mov	r0, sl
 800ba4a:	4659      	mov	r1, fp
 800ba4c:	1e5f      	subs	r7, r3, #1
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4b88      	ldr	r3, [pc, #544]	; (800bc74 <_dtoa_r+0x624>)
 800ba52:	f7f4 fdf9 	bl	8000648 <__aeabi_dmul>
 800ba56:	9e02      	ldr	r6, [sp, #8]
 800ba58:	4682      	mov	sl, r0
 800ba5a:	468b      	mov	fp, r1
 800ba5c:	3501      	adds	r5, #1
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f7f4 fd88 	bl	8000574 <__aeabi_i2d>
 800ba64:	4652      	mov	r2, sl
 800ba66:	465b      	mov	r3, fp
 800ba68:	f7f4 fdee 	bl	8000648 <__aeabi_dmul>
 800ba6c:	4b82      	ldr	r3, [pc, #520]	; (800bc78 <_dtoa_r+0x628>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f7f4 fc34 	bl	80002dc <__adddf3>
 800ba74:	46d0      	mov	r8, sl
 800ba76:	46d9      	mov	r9, fp
 800ba78:	4682      	mov	sl, r0
 800ba7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	d158      	bne.n	800bb34 <_dtoa_r+0x4e4>
 800ba82:	4b7e      	ldr	r3, [pc, #504]	; (800bc7c <_dtoa_r+0x62c>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	4640      	mov	r0, r8
 800ba88:	4649      	mov	r1, r9
 800ba8a:	f7f4 fc25 	bl	80002d8 <__aeabi_dsub>
 800ba8e:	4652      	mov	r2, sl
 800ba90:	465b      	mov	r3, fp
 800ba92:	4680      	mov	r8, r0
 800ba94:	4689      	mov	r9, r1
 800ba96:	f7f5 f867 	bl	8000b68 <__aeabi_dcmpgt>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	f040 8295 	bne.w	800bfca <_dtoa_r+0x97a>
 800baa0:	4652      	mov	r2, sl
 800baa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800baa6:	4640      	mov	r0, r8
 800baa8:	4649      	mov	r1, r9
 800baaa:	f7f5 f83f 	bl	8000b2c <__aeabi_dcmplt>
 800baae:	2800      	cmp	r0, #0
 800bab0:	f040 8289 	bne.w	800bfc6 <_dtoa_r+0x976>
 800bab4:	ec5b ab19 	vmov	sl, fp, d9
 800bab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baba:	2b00      	cmp	r3, #0
 800babc:	f2c0 8148 	blt.w	800bd50 <_dtoa_r+0x700>
 800bac0:	9a00      	ldr	r2, [sp, #0]
 800bac2:	2a0e      	cmp	r2, #14
 800bac4:	f300 8144 	bgt.w	800bd50 <_dtoa_r+0x700>
 800bac8:	4b67      	ldr	r3, [pc, #412]	; (800bc68 <_dtoa_r+0x618>)
 800baca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bace:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f280 80d5 	bge.w	800bc84 <_dtoa_r+0x634>
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f300 80d1 	bgt.w	800bc84 <_dtoa_r+0x634>
 800bae2:	f040 826f 	bne.w	800bfc4 <_dtoa_r+0x974>
 800bae6:	4b65      	ldr	r3, [pc, #404]	; (800bc7c <_dtoa_r+0x62c>)
 800bae8:	2200      	movs	r2, #0
 800baea:	4640      	mov	r0, r8
 800baec:	4649      	mov	r1, r9
 800baee:	f7f4 fdab 	bl	8000648 <__aeabi_dmul>
 800baf2:	4652      	mov	r2, sl
 800baf4:	465b      	mov	r3, fp
 800baf6:	f7f5 f82d 	bl	8000b54 <__aeabi_dcmpge>
 800bafa:	9e03      	ldr	r6, [sp, #12]
 800bafc:	4637      	mov	r7, r6
 800bafe:	2800      	cmp	r0, #0
 800bb00:	f040 8245 	bne.w	800bf8e <_dtoa_r+0x93e>
 800bb04:	9d01      	ldr	r5, [sp, #4]
 800bb06:	2331      	movs	r3, #49	; 0x31
 800bb08:	f805 3b01 	strb.w	r3, [r5], #1
 800bb0c:	9b00      	ldr	r3, [sp, #0]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	e240      	b.n	800bf96 <_dtoa_r+0x946>
 800bb14:	07f2      	lsls	r2, r6, #31
 800bb16:	d505      	bpl.n	800bb24 <_dtoa_r+0x4d4>
 800bb18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb1c:	f7f4 fd94 	bl	8000648 <__aeabi_dmul>
 800bb20:	3501      	adds	r5, #1
 800bb22:	2301      	movs	r3, #1
 800bb24:	1076      	asrs	r6, r6, #1
 800bb26:	3708      	adds	r7, #8
 800bb28:	e777      	b.n	800ba1a <_dtoa_r+0x3ca>
 800bb2a:	2502      	movs	r5, #2
 800bb2c:	e779      	b.n	800ba22 <_dtoa_r+0x3d2>
 800bb2e:	9f00      	ldr	r7, [sp, #0]
 800bb30:	9e03      	ldr	r6, [sp, #12]
 800bb32:	e794      	b.n	800ba5e <_dtoa_r+0x40e>
 800bb34:	9901      	ldr	r1, [sp, #4]
 800bb36:	4b4c      	ldr	r3, [pc, #304]	; (800bc68 <_dtoa_r+0x618>)
 800bb38:	4431      	add	r1, r6
 800bb3a:	910d      	str	r1, [sp, #52]	; 0x34
 800bb3c:	9908      	ldr	r1, [sp, #32]
 800bb3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb46:	2900      	cmp	r1, #0
 800bb48:	d043      	beq.n	800bbd2 <_dtoa_r+0x582>
 800bb4a:	494d      	ldr	r1, [pc, #308]	; (800bc80 <_dtoa_r+0x630>)
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f7f4 fea5 	bl	800089c <__aeabi_ddiv>
 800bb52:	4652      	mov	r2, sl
 800bb54:	465b      	mov	r3, fp
 800bb56:	f7f4 fbbf 	bl	80002d8 <__aeabi_dsub>
 800bb5a:	9d01      	ldr	r5, [sp, #4]
 800bb5c:	4682      	mov	sl, r0
 800bb5e:	468b      	mov	fp, r1
 800bb60:	4649      	mov	r1, r9
 800bb62:	4640      	mov	r0, r8
 800bb64:	f7f5 f820 	bl	8000ba8 <__aeabi_d2iz>
 800bb68:	4606      	mov	r6, r0
 800bb6a:	f7f4 fd03 	bl	8000574 <__aeabi_i2d>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4640      	mov	r0, r8
 800bb74:	4649      	mov	r1, r9
 800bb76:	f7f4 fbaf 	bl	80002d8 <__aeabi_dsub>
 800bb7a:	3630      	adds	r6, #48	; 0x30
 800bb7c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb80:	4652      	mov	r2, sl
 800bb82:	465b      	mov	r3, fp
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	f7f4 ffd0 	bl	8000b2c <__aeabi_dcmplt>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d163      	bne.n	800bc58 <_dtoa_r+0x608>
 800bb90:	4642      	mov	r2, r8
 800bb92:	464b      	mov	r3, r9
 800bb94:	4936      	ldr	r1, [pc, #216]	; (800bc70 <_dtoa_r+0x620>)
 800bb96:	2000      	movs	r0, #0
 800bb98:	f7f4 fb9e 	bl	80002d8 <__aeabi_dsub>
 800bb9c:	4652      	mov	r2, sl
 800bb9e:	465b      	mov	r3, fp
 800bba0:	f7f4 ffc4 	bl	8000b2c <__aeabi_dcmplt>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	f040 80b5 	bne.w	800bd14 <_dtoa_r+0x6c4>
 800bbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbac:	429d      	cmp	r5, r3
 800bbae:	d081      	beq.n	800bab4 <_dtoa_r+0x464>
 800bbb0:	4b30      	ldr	r3, [pc, #192]	; (800bc74 <_dtoa_r+0x624>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	4659      	mov	r1, fp
 800bbb8:	f7f4 fd46 	bl	8000648 <__aeabi_dmul>
 800bbbc:	4b2d      	ldr	r3, [pc, #180]	; (800bc74 <_dtoa_r+0x624>)
 800bbbe:	4682      	mov	sl, r0
 800bbc0:	468b      	mov	fp, r1
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f7f4 fd3e 	bl	8000648 <__aeabi_dmul>
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4689      	mov	r9, r1
 800bbd0:	e7c6      	b.n	800bb60 <_dtoa_r+0x510>
 800bbd2:	4650      	mov	r0, sl
 800bbd4:	4659      	mov	r1, fp
 800bbd6:	f7f4 fd37 	bl	8000648 <__aeabi_dmul>
 800bbda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbdc:	9d01      	ldr	r5, [sp, #4]
 800bbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbe0:	4682      	mov	sl, r0
 800bbe2:	468b      	mov	fp, r1
 800bbe4:	4649      	mov	r1, r9
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f7f4 ffde 	bl	8000ba8 <__aeabi_d2iz>
 800bbec:	4606      	mov	r6, r0
 800bbee:	f7f4 fcc1 	bl	8000574 <__aeabi_i2d>
 800bbf2:	3630      	adds	r6, #48	; 0x30
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4640      	mov	r0, r8
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	f7f4 fb6c 	bl	80002d8 <__aeabi_dsub>
 800bc00:	f805 6b01 	strb.w	r6, [r5], #1
 800bc04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc06:	429d      	cmp	r5, r3
 800bc08:	4680      	mov	r8, r0
 800bc0a:	4689      	mov	r9, r1
 800bc0c:	f04f 0200 	mov.w	r2, #0
 800bc10:	d124      	bne.n	800bc5c <_dtoa_r+0x60c>
 800bc12:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <_dtoa_r+0x630>)
 800bc14:	4650      	mov	r0, sl
 800bc16:	4659      	mov	r1, fp
 800bc18:	f7f4 fb60 	bl	80002dc <__adddf3>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4640      	mov	r0, r8
 800bc22:	4649      	mov	r1, r9
 800bc24:	f7f4 ffa0 	bl	8000b68 <__aeabi_dcmpgt>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d173      	bne.n	800bd14 <_dtoa_r+0x6c4>
 800bc2c:	4652      	mov	r2, sl
 800bc2e:	465b      	mov	r3, fp
 800bc30:	4913      	ldr	r1, [pc, #76]	; (800bc80 <_dtoa_r+0x630>)
 800bc32:	2000      	movs	r0, #0
 800bc34:	f7f4 fb50 	bl	80002d8 <__aeabi_dsub>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4640      	mov	r0, r8
 800bc3e:	4649      	mov	r1, r9
 800bc40:	f7f4 ff74 	bl	8000b2c <__aeabi_dcmplt>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f43f af35 	beq.w	800bab4 <_dtoa_r+0x464>
 800bc4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bc4c:	1e6b      	subs	r3, r5, #1
 800bc4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc54:	2b30      	cmp	r3, #48	; 0x30
 800bc56:	d0f8      	beq.n	800bc4a <_dtoa_r+0x5fa>
 800bc58:	9700      	str	r7, [sp, #0]
 800bc5a:	e049      	b.n	800bcf0 <_dtoa_r+0x6a0>
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <_dtoa_r+0x624>)
 800bc5e:	f7f4 fcf3 	bl	8000648 <__aeabi_dmul>
 800bc62:	4680      	mov	r8, r0
 800bc64:	4689      	mov	r9, r1
 800bc66:	e7bd      	b.n	800bbe4 <_dtoa_r+0x594>
 800bc68:	0800ea68 	.word	0x0800ea68
 800bc6c:	0800ea40 	.word	0x0800ea40
 800bc70:	3ff00000 	.word	0x3ff00000
 800bc74:	40240000 	.word	0x40240000
 800bc78:	401c0000 	.word	0x401c0000
 800bc7c:	40140000 	.word	0x40140000
 800bc80:	3fe00000 	.word	0x3fe00000
 800bc84:	9d01      	ldr	r5, [sp, #4]
 800bc86:	4656      	mov	r6, sl
 800bc88:	465f      	mov	r7, fp
 800bc8a:	4642      	mov	r2, r8
 800bc8c:	464b      	mov	r3, r9
 800bc8e:	4630      	mov	r0, r6
 800bc90:	4639      	mov	r1, r7
 800bc92:	f7f4 fe03 	bl	800089c <__aeabi_ddiv>
 800bc96:	f7f4 ff87 	bl	8000ba8 <__aeabi_d2iz>
 800bc9a:	4682      	mov	sl, r0
 800bc9c:	f7f4 fc6a 	bl	8000574 <__aeabi_i2d>
 800bca0:	4642      	mov	r2, r8
 800bca2:	464b      	mov	r3, r9
 800bca4:	f7f4 fcd0 	bl	8000648 <__aeabi_dmul>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4630      	mov	r0, r6
 800bcae:	4639      	mov	r1, r7
 800bcb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bcb4:	f7f4 fb10 	bl	80002d8 <__aeabi_dsub>
 800bcb8:	f805 6b01 	strb.w	r6, [r5], #1
 800bcbc:	9e01      	ldr	r6, [sp, #4]
 800bcbe:	9f03      	ldr	r7, [sp, #12]
 800bcc0:	1bae      	subs	r6, r5, r6
 800bcc2:	42b7      	cmp	r7, r6
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	d135      	bne.n	800bd36 <_dtoa_r+0x6e6>
 800bcca:	f7f4 fb07 	bl	80002dc <__adddf3>
 800bcce:	4642      	mov	r2, r8
 800bcd0:	464b      	mov	r3, r9
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460f      	mov	r7, r1
 800bcd6:	f7f4 ff47 	bl	8000b68 <__aeabi_dcmpgt>
 800bcda:	b9d0      	cbnz	r0, 800bd12 <_dtoa_r+0x6c2>
 800bcdc:	4642      	mov	r2, r8
 800bcde:	464b      	mov	r3, r9
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 ff18 	bl	8000b18 <__aeabi_dcmpeq>
 800bce8:	b110      	cbz	r0, 800bcf0 <_dtoa_r+0x6a0>
 800bcea:	f01a 0f01 	tst.w	sl, #1
 800bcee:	d110      	bne.n	800bd12 <_dtoa_r+0x6c2>
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	ee18 1a10 	vmov	r1, s16
 800bcf6:	f000 fc2b 	bl	800c550 <_Bfree>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	9800      	ldr	r0, [sp, #0]
 800bcfe:	702b      	strb	r3, [r5, #0]
 800bd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd02:	3001      	adds	r0, #1
 800bd04:	6018      	str	r0, [r3, #0]
 800bd06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f43f acf1 	beq.w	800b6f0 <_dtoa_r+0xa0>
 800bd0e:	601d      	str	r5, [r3, #0]
 800bd10:	e4ee      	b.n	800b6f0 <_dtoa_r+0xa0>
 800bd12:	9f00      	ldr	r7, [sp, #0]
 800bd14:	462b      	mov	r3, r5
 800bd16:	461d      	mov	r5, r3
 800bd18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd1c:	2a39      	cmp	r2, #57	; 0x39
 800bd1e:	d106      	bne.n	800bd2e <_dtoa_r+0x6de>
 800bd20:	9a01      	ldr	r2, [sp, #4]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d1f7      	bne.n	800bd16 <_dtoa_r+0x6c6>
 800bd26:	9901      	ldr	r1, [sp, #4]
 800bd28:	2230      	movs	r2, #48	; 0x30
 800bd2a:	3701      	adds	r7, #1
 800bd2c:	700a      	strb	r2, [r1, #0]
 800bd2e:	781a      	ldrb	r2, [r3, #0]
 800bd30:	3201      	adds	r2, #1
 800bd32:	701a      	strb	r2, [r3, #0]
 800bd34:	e790      	b.n	800bc58 <_dtoa_r+0x608>
 800bd36:	4ba6      	ldr	r3, [pc, #664]	; (800bfd0 <_dtoa_r+0x980>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f7f4 fc85 	bl	8000648 <__aeabi_dmul>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	2300      	movs	r3, #0
 800bd42:	4606      	mov	r6, r0
 800bd44:	460f      	mov	r7, r1
 800bd46:	f7f4 fee7 	bl	8000b18 <__aeabi_dcmpeq>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d09d      	beq.n	800bc8a <_dtoa_r+0x63a>
 800bd4e:	e7cf      	b.n	800bcf0 <_dtoa_r+0x6a0>
 800bd50:	9a08      	ldr	r2, [sp, #32]
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	f000 80d7 	beq.w	800bf06 <_dtoa_r+0x8b6>
 800bd58:	9a06      	ldr	r2, [sp, #24]
 800bd5a:	2a01      	cmp	r2, #1
 800bd5c:	f300 80ba 	bgt.w	800bed4 <_dtoa_r+0x884>
 800bd60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	f000 80b2 	beq.w	800becc <_dtoa_r+0x87c>
 800bd68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd6c:	9e07      	ldr	r6, [sp, #28]
 800bd6e:	9d04      	ldr	r5, [sp, #16]
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	441a      	add	r2, r3
 800bd74:	9204      	str	r2, [sp, #16]
 800bd76:	9a05      	ldr	r2, [sp, #20]
 800bd78:	2101      	movs	r1, #1
 800bd7a:	441a      	add	r2, r3
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	9205      	str	r2, [sp, #20]
 800bd80:	f000 fc9e 	bl	800c6c0 <__i2b>
 800bd84:	4607      	mov	r7, r0
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	dd0c      	ble.n	800bda4 <_dtoa_r+0x754>
 800bd8a:	9b05      	ldr	r3, [sp, #20]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dd09      	ble.n	800bda4 <_dtoa_r+0x754>
 800bd90:	42ab      	cmp	r3, r5
 800bd92:	9a04      	ldr	r2, [sp, #16]
 800bd94:	bfa8      	it	ge
 800bd96:	462b      	movge	r3, r5
 800bd98:	1ad2      	subs	r2, r2, r3
 800bd9a:	9204      	str	r2, [sp, #16]
 800bd9c:	9a05      	ldr	r2, [sp, #20]
 800bd9e:	1aed      	subs	r5, r5, r3
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	9305      	str	r3, [sp, #20]
 800bda4:	9b07      	ldr	r3, [sp, #28]
 800bda6:	b31b      	cbz	r3, 800bdf0 <_dtoa_r+0x7a0>
 800bda8:	9b08      	ldr	r3, [sp, #32]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80af 	beq.w	800bf0e <_dtoa_r+0x8be>
 800bdb0:	2e00      	cmp	r6, #0
 800bdb2:	dd13      	ble.n	800bddc <_dtoa_r+0x78c>
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	4632      	mov	r2, r6
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 fd41 	bl	800c840 <__pow5mult>
 800bdbe:	ee18 2a10 	vmov	r2, s16
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f000 fc90 	bl	800c6ec <__multiply>
 800bdcc:	ee18 1a10 	vmov	r1, s16
 800bdd0:	4680      	mov	r8, r0
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 fbbc 	bl	800c550 <_Bfree>
 800bdd8:	ee08 8a10 	vmov	s16, r8
 800bddc:	9b07      	ldr	r3, [sp, #28]
 800bdde:	1b9a      	subs	r2, r3, r6
 800bde0:	d006      	beq.n	800bdf0 <_dtoa_r+0x7a0>
 800bde2:	ee18 1a10 	vmov	r1, s16
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 fd2a 	bl	800c840 <__pow5mult>
 800bdec:	ee08 0a10 	vmov	s16, r0
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f000 fc64 	bl	800c6c0 <__i2b>
 800bdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	f340 8088 	ble.w	800bf12 <_dtoa_r+0x8c2>
 800be02:	461a      	mov	r2, r3
 800be04:	4601      	mov	r1, r0
 800be06:	4620      	mov	r0, r4
 800be08:	f000 fd1a 	bl	800c840 <__pow5mult>
 800be0c:	9b06      	ldr	r3, [sp, #24]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	4606      	mov	r6, r0
 800be12:	f340 8081 	ble.w	800bf18 <_dtoa_r+0x8c8>
 800be16:	f04f 0800 	mov.w	r8, #0
 800be1a:	6933      	ldr	r3, [r6, #16]
 800be1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be20:	6918      	ldr	r0, [r3, #16]
 800be22:	f000 fbfd 	bl	800c620 <__hi0bits>
 800be26:	f1c0 0020 	rsb	r0, r0, #32
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	4418      	add	r0, r3
 800be2e:	f010 001f 	ands.w	r0, r0, #31
 800be32:	f000 8092 	beq.w	800bf5a <_dtoa_r+0x90a>
 800be36:	f1c0 0320 	rsb	r3, r0, #32
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	f340 808a 	ble.w	800bf54 <_dtoa_r+0x904>
 800be40:	f1c0 001c 	rsb	r0, r0, #28
 800be44:	9b04      	ldr	r3, [sp, #16]
 800be46:	4403      	add	r3, r0
 800be48:	9304      	str	r3, [sp, #16]
 800be4a:	9b05      	ldr	r3, [sp, #20]
 800be4c:	4403      	add	r3, r0
 800be4e:	4405      	add	r5, r0
 800be50:	9305      	str	r3, [sp, #20]
 800be52:	9b04      	ldr	r3, [sp, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd07      	ble.n	800be68 <_dtoa_r+0x818>
 800be58:	ee18 1a10 	vmov	r1, s16
 800be5c:	461a      	mov	r2, r3
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 fd48 	bl	800c8f4 <__lshift>
 800be64:	ee08 0a10 	vmov	s16, r0
 800be68:	9b05      	ldr	r3, [sp, #20]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dd05      	ble.n	800be7a <_dtoa_r+0x82a>
 800be6e:	4631      	mov	r1, r6
 800be70:	461a      	mov	r2, r3
 800be72:	4620      	mov	r0, r4
 800be74:	f000 fd3e 	bl	800c8f4 <__lshift>
 800be78:	4606      	mov	r6, r0
 800be7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d06e      	beq.n	800bf5e <_dtoa_r+0x90e>
 800be80:	ee18 0a10 	vmov	r0, s16
 800be84:	4631      	mov	r1, r6
 800be86:	f000 fda5 	bl	800c9d4 <__mcmp>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	da67      	bge.n	800bf5e <_dtoa_r+0x90e>
 800be8e:	9b00      	ldr	r3, [sp, #0]
 800be90:	3b01      	subs	r3, #1
 800be92:	ee18 1a10 	vmov	r1, s16
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	220a      	movs	r2, #10
 800be9a:	2300      	movs	r3, #0
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fb79 	bl	800c594 <__multadd>
 800bea2:	9b08      	ldr	r3, [sp, #32]
 800bea4:	ee08 0a10 	vmov	s16, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 81b1 	beq.w	800c210 <_dtoa_r+0xbc0>
 800beae:	2300      	movs	r3, #0
 800beb0:	4639      	mov	r1, r7
 800beb2:	220a      	movs	r2, #10
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 fb6d 	bl	800c594 <__multadd>
 800beba:	9b02      	ldr	r3, [sp, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	4607      	mov	r7, r0
 800bec0:	f300 808e 	bgt.w	800bfe0 <_dtoa_r+0x990>
 800bec4:	9b06      	ldr	r3, [sp, #24]
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	dc51      	bgt.n	800bf6e <_dtoa_r+0x91e>
 800beca:	e089      	b.n	800bfe0 <_dtoa_r+0x990>
 800becc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bed2:	e74b      	b.n	800bd6c <_dtoa_r+0x71c>
 800bed4:	9b03      	ldr	r3, [sp, #12]
 800bed6:	1e5e      	subs	r6, r3, #1
 800bed8:	9b07      	ldr	r3, [sp, #28]
 800beda:	42b3      	cmp	r3, r6
 800bedc:	bfbf      	itttt	lt
 800bede:	9b07      	ldrlt	r3, [sp, #28]
 800bee0:	9607      	strlt	r6, [sp, #28]
 800bee2:	1af2      	sublt	r2, r6, r3
 800bee4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bee6:	bfb6      	itet	lt
 800bee8:	189b      	addlt	r3, r3, r2
 800beea:	1b9e      	subge	r6, r3, r6
 800beec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800beee:	9b03      	ldr	r3, [sp, #12]
 800bef0:	bfb8      	it	lt
 800bef2:	2600      	movlt	r6, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bfb7      	itett	lt
 800bef8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800befc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bf00:	1a9d      	sublt	r5, r3, r2
 800bf02:	2300      	movlt	r3, #0
 800bf04:	e734      	b.n	800bd70 <_dtoa_r+0x720>
 800bf06:	9e07      	ldr	r6, [sp, #28]
 800bf08:	9d04      	ldr	r5, [sp, #16]
 800bf0a:	9f08      	ldr	r7, [sp, #32]
 800bf0c:	e73b      	b.n	800bd86 <_dtoa_r+0x736>
 800bf0e:	9a07      	ldr	r2, [sp, #28]
 800bf10:	e767      	b.n	800bde2 <_dtoa_r+0x792>
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	dc18      	bgt.n	800bf4a <_dtoa_r+0x8fa>
 800bf18:	f1ba 0f00 	cmp.w	sl, #0
 800bf1c:	d115      	bne.n	800bf4a <_dtoa_r+0x8fa>
 800bf1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf22:	b993      	cbnz	r3, 800bf4a <_dtoa_r+0x8fa>
 800bf24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf28:	0d1b      	lsrs	r3, r3, #20
 800bf2a:	051b      	lsls	r3, r3, #20
 800bf2c:	b183      	cbz	r3, 800bf50 <_dtoa_r+0x900>
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	3301      	adds	r3, #1
 800bf32:	9304      	str	r3, [sp, #16]
 800bf34:	9b05      	ldr	r3, [sp, #20]
 800bf36:	3301      	adds	r3, #1
 800bf38:	9305      	str	r3, [sp, #20]
 800bf3a:	f04f 0801 	mov.w	r8, #1
 800bf3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f47f af6a 	bne.w	800be1a <_dtoa_r+0x7ca>
 800bf46:	2001      	movs	r0, #1
 800bf48:	e76f      	b.n	800be2a <_dtoa_r+0x7da>
 800bf4a:	f04f 0800 	mov.w	r8, #0
 800bf4e:	e7f6      	b.n	800bf3e <_dtoa_r+0x8ee>
 800bf50:	4698      	mov	r8, r3
 800bf52:	e7f4      	b.n	800bf3e <_dtoa_r+0x8ee>
 800bf54:	f43f af7d 	beq.w	800be52 <_dtoa_r+0x802>
 800bf58:	4618      	mov	r0, r3
 800bf5a:	301c      	adds	r0, #28
 800bf5c:	e772      	b.n	800be44 <_dtoa_r+0x7f4>
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	dc37      	bgt.n	800bfd4 <_dtoa_r+0x984>
 800bf64:	9b06      	ldr	r3, [sp, #24]
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	dd34      	ble.n	800bfd4 <_dtoa_r+0x984>
 800bf6a:	9b03      	ldr	r3, [sp, #12]
 800bf6c:	9302      	str	r3, [sp, #8]
 800bf6e:	9b02      	ldr	r3, [sp, #8]
 800bf70:	b96b      	cbnz	r3, 800bf8e <_dtoa_r+0x93e>
 800bf72:	4631      	mov	r1, r6
 800bf74:	2205      	movs	r2, #5
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 fb0c 	bl	800c594 <__multadd>
 800bf7c:	4601      	mov	r1, r0
 800bf7e:	4606      	mov	r6, r0
 800bf80:	ee18 0a10 	vmov	r0, s16
 800bf84:	f000 fd26 	bl	800c9d4 <__mcmp>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	f73f adbb 	bgt.w	800bb04 <_dtoa_r+0x4b4>
 800bf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf90:	9d01      	ldr	r5, [sp, #4]
 800bf92:	43db      	mvns	r3, r3
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	f04f 0800 	mov.w	r8, #0
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f000 fad7 	bl	800c550 <_Bfree>
 800bfa2:	2f00      	cmp	r7, #0
 800bfa4:	f43f aea4 	beq.w	800bcf0 <_dtoa_r+0x6a0>
 800bfa8:	f1b8 0f00 	cmp.w	r8, #0
 800bfac:	d005      	beq.n	800bfba <_dtoa_r+0x96a>
 800bfae:	45b8      	cmp	r8, r7
 800bfb0:	d003      	beq.n	800bfba <_dtoa_r+0x96a>
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 facb 	bl	800c550 <_Bfree>
 800bfba:	4639      	mov	r1, r7
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f000 fac7 	bl	800c550 <_Bfree>
 800bfc2:	e695      	b.n	800bcf0 <_dtoa_r+0x6a0>
 800bfc4:	2600      	movs	r6, #0
 800bfc6:	4637      	mov	r7, r6
 800bfc8:	e7e1      	b.n	800bf8e <_dtoa_r+0x93e>
 800bfca:	9700      	str	r7, [sp, #0]
 800bfcc:	4637      	mov	r7, r6
 800bfce:	e599      	b.n	800bb04 <_dtoa_r+0x4b4>
 800bfd0:	40240000 	.word	0x40240000
 800bfd4:	9b08      	ldr	r3, [sp, #32]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 80ca 	beq.w	800c170 <_dtoa_r+0xb20>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	9302      	str	r3, [sp, #8]
 800bfe0:	2d00      	cmp	r5, #0
 800bfe2:	dd05      	ble.n	800bff0 <_dtoa_r+0x9a0>
 800bfe4:	4639      	mov	r1, r7
 800bfe6:	462a      	mov	r2, r5
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 fc83 	bl	800c8f4 <__lshift>
 800bfee:	4607      	mov	r7, r0
 800bff0:	f1b8 0f00 	cmp.w	r8, #0
 800bff4:	d05b      	beq.n	800c0ae <_dtoa_r+0xa5e>
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 fa69 	bl	800c4d0 <_Balloc>
 800bffe:	4605      	mov	r5, r0
 800c000:	b928      	cbnz	r0, 800c00e <_dtoa_r+0x9be>
 800c002:	4b87      	ldr	r3, [pc, #540]	; (800c220 <_dtoa_r+0xbd0>)
 800c004:	4602      	mov	r2, r0
 800c006:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c00a:	f7ff bb3b 	b.w	800b684 <_dtoa_r+0x34>
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	3202      	adds	r2, #2
 800c012:	0092      	lsls	r2, r2, #2
 800c014:	f107 010c 	add.w	r1, r7, #12
 800c018:	300c      	adds	r0, #12
 800c01a:	f7fe fb62 	bl	800a6e2 <memcpy>
 800c01e:	2201      	movs	r2, #1
 800c020:	4629      	mov	r1, r5
 800c022:	4620      	mov	r0, r4
 800c024:	f000 fc66 	bl	800c8f4 <__lshift>
 800c028:	9b01      	ldr	r3, [sp, #4]
 800c02a:	f103 0901 	add.w	r9, r3, #1
 800c02e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c032:	4413      	add	r3, r2
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	f00a 0301 	and.w	r3, sl, #1
 800c03a:	46b8      	mov	r8, r7
 800c03c:	9304      	str	r3, [sp, #16]
 800c03e:	4607      	mov	r7, r0
 800c040:	4631      	mov	r1, r6
 800c042:	ee18 0a10 	vmov	r0, s16
 800c046:	f7ff fa77 	bl	800b538 <quorem>
 800c04a:	4641      	mov	r1, r8
 800c04c:	9002      	str	r0, [sp, #8]
 800c04e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c052:	ee18 0a10 	vmov	r0, s16
 800c056:	f000 fcbd 	bl	800c9d4 <__mcmp>
 800c05a:	463a      	mov	r2, r7
 800c05c:	9003      	str	r0, [sp, #12]
 800c05e:	4631      	mov	r1, r6
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fcd3 	bl	800ca0c <__mdiff>
 800c066:	68c2      	ldr	r2, [r0, #12]
 800c068:	f109 3bff 	add.w	fp, r9, #4294967295
 800c06c:	4605      	mov	r5, r0
 800c06e:	bb02      	cbnz	r2, 800c0b2 <_dtoa_r+0xa62>
 800c070:	4601      	mov	r1, r0
 800c072:	ee18 0a10 	vmov	r0, s16
 800c076:	f000 fcad 	bl	800c9d4 <__mcmp>
 800c07a:	4602      	mov	r2, r0
 800c07c:	4629      	mov	r1, r5
 800c07e:	4620      	mov	r0, r4
 800c080:	9207      	str	r2, [sp, #28]
 800c082:	f000 fa65 	bl	800c550 <_Bfree>
 800c086:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c08a:	ea43 0102 	orr.w	r1, r3, r2
 800c08e:	9b04      	ldr	r3, [sp, #16]
 800c090:	430b      	orrs	r3, r1
 800c092:	464d      	mov	r5, r9
 800c094:	d10f      	bne.n	800c0b6 <_dtoa_r+0xa66>
 800c096:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c09a:	d02a      	beq.n	800c0f2 <_dtoa_r+0xaa2>
 800c09c:	9b03      	ldr	r3, [sp, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dd02      	ble.n	800c0a8 <_dtoa_r+0xa58>
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c0a8:	f88b a000 	strb.w	sl, [fp]
 800c0ac:	e775      	b.n	800bf9a <_dtoa_r+0x94a>
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	e7ba      	b.n	800c028 <_dtoa_r+0x9d8>
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	e7e2      	b.n	800c07c <_dtoa_r+0xa2c>
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	db04      	blt.n	800c0c6 <_dtoa_r+0xa76>
 800c0bc:	9906      	ldr	r1, [sp, #24]
 800c0be:	430b      	orrs	r3, r1
 800c0c0:	9904      	ldr	r1, [sp, #16]
 800c0c2:	430b      	orrs	r3, r1
 800c0c4:	d122      	bne.n	800c10c <_dtoa_r+0xabc>
 800c0c6:	2a00      	cmp	r2, #0
 800c0c8:	ddee      	ble.n	800c0a8 <_dtoa_r+0xa58>
 800c0ca:	ee18 1a10 	vmov	r1, s16
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f000 fc0f 	bl	800c8f4 <__lshift>
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	ee08 0a10 	vmov	s16, r0
 800c0dc:	f000 fc7a 	bl	800c9d4 <__mcmp>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	dc03      	bgt.n	800c0ec <_dtoa_r+0xa9c>
 800c0e4:	d1e0      	bne.n	800c0a8 <_dtoa_r+0xa58>
 800c0e6:	f01a 0f01 	tst.w	sl, #1
 800c0ea:	d0dd      	beq.n	800c0a8 <_dtoa_r+0xa58>
 800c0ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0f0:	d1d7      	bne.n	800c0a2 <_dtoa_r+0xa52>
 800c0f2:	2339      	movs	r3, #57	; 0x39
 800c0f4:	f88b 3000 	strb.w	r3, [fp]
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	461d      	mov	r5, r3
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c102:	2a39      	cmp	r2, #57	; 0x39
 800c104:	d071      	beq.n	800c1ea <_dtoa_r+0xb9a>
 800c106:	3201      	adds	r2, #1
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	e746      	b.n	800bf9a <_dtoa_r+0x94a>
 800c10c:	2a00      	cmp	r2, #0
 800c10e:	dd07      	ble.n	800c120 <_dtoa_r+0xad0>
 800c110:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c114:	d0ed      	beq.n	800c0f2 <_dtoa_r+0xaa2>
 800c116:	f10a 0301 	add.w	r3, sl, #1
 800c11a:	f88b 3000 	strb.w	r3, [fp]
 800c11e:	e73c      	b.n	800bf9a <_dtoa_r+0x94a>
 800c120:	9b05      	ldr	r3, [sp, #20]
 800c122:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c126:	4599      	cmp	r9, r3
 800c128:	d047      	beq.n	800c1ba <_dtoa_r+0xb6a>
 800c12a:	ee18 1a10 	vmov	r1, s16
 800c12e:	2300      	movs	r3, #0
 800c130:	220a      	movs	r2, #10
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fa2e 	bl	800c594 <__multadd>
 800c138:	45b8      	cmp	r8, r7
 800c13a:	ee08 0a10 	vmov	s16, r0
 800c13e:	f04f 0300 	mov.w	r3, #0
 800c142:	f04f 020a 	mov.w	r2, #10
 800c146:	4641      	mov	r1, r8
 800c148:	4620      	mov	r0, r4
 800c14a:	d106      	bne.n	800c15a <_dtoa_r+0xb0a>
 800c14c:	f000 fa22 	bl	800c594 <__multadd>
 800c150:	4680      	mov	r8, r0
 800c152:	4607      	mov	r7, r0
 800c154:	f109 0901 	add.w	r9, r9, #1
 800c158:	e772      	b.n	800c040 <_dtoa_r+0x9f0>
 800c15a:	f000 fa1b 	bl	800c594 <__multadd>
 800c15e:	4639      	mov	r1, r7
 800c160:	4680      	mov	r8, r0
 800c162:	2300      	movs	r3, #0
 800c164:	220a      	movs	r2, #10
 800c166:	4620      	mov	r0, r4
 800c168:	f000 fa14 	bl	800c594 <__multadd>
 800c16c:	4607      	mov	r7, r0
 800c16e:	e7f1      	b.n	800c154 <_dtoa_r+0xb04>
 800c170:	9b03      	ldr	r3, [sp, #12]
 800c172:	9302      	str	r3, [sp, #8]
 800c174:	9d01      	ldr	r5, [sp, #4]
 800c176:	ee18 0a10 	vmov	r0, s16
 800c17a:	4631      	mov	r1, r6
 800c17c:	f7ff f9dc 	bl	800b538 <quorem>
 800c180:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c184:	9b01      	ldr	r3, [sp, #4]
 800c186:	f805 ab01 	strb.w	sl, [r5], #1
 800c18a:	1aea      	subs	r2, r5, r3
 800c18c:	9b02      	ldr	r3, [sp, #8]
 800c18e:	4293      	cmp	r3, r2
 800c190:	dd09      	ble.n	800c1a6 <_dtoa_r+0xb56>
 800c192:	ee18 1a10 	vmov	r1, s16
 800c196:	2300      	movs	r3, #0
 800c198:	220a      	movs	r2, #10
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 f9fa 	bl	800c594 <__multadd>
 800c1a0:	ee08 0a10 	vmov	s16, r0
 800c1a4:	e7e7      	b.n	800c176 <_dtoa_r+0xb26>
 800c1a6:	9b02      	ldr	r3, [sp, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bfc8      	it	gt
 800c1ac:	461d      	movgt	r5, r3
 800c1ae:	9b01      	ldr	r3, [sp, #4]
 800c1b0:	bfd8      	it	le
 800c1b2:	2501      	movle	r5, #1
 800c1b4:	441d      	add	r5, r3
 800c1b6:	f04f 0800 	mov.w	r8, #0
 800c1ba:	ee18 1a10 	vmov	r1, s16
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f000 fb97 	bl	800c8f4 <__lshift>
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	ee08 0a10 	vmov	s16, r0
 800c1cc:	f000 fc02 	bl	800c9d4 <__mcmp>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	dc91      	bgt.n	800c0f8 <_dtoa_r+0xaa8>
 800c1d4:	d102      	bne.n	800c1dc <_dtoa_r+0xb8c>
 800c1d6:	f01a 0f01 	tst.w	sl, #1
 800c1da:	d18d      	bne.n	800c0f8 <_dtoa_r+0xaa8>
 800c1dc:	462b      	mov	r3, r5
 800c1de:	461d      	mov	r5, r3
 800c1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1e4:	2a30      	cmp	r2, #48	; 0x30
 800c1e6:	d0fa      	beq.n	800c1de <_dtoa_r+0xb8e>
 800c1e8:	e6d7      	b.n	800bf9a <_dtoa_r+0x94a>
 800c1ea:	9a01      	ldr	r2, [sp, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d184      	bne.n	800c0fa <_dtoa_r+0xaaa>
 800c1f0:	9b00      	ldr	r3, [sp, #0]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	2331      	movs	r3, #49	; 0x31
 800c1f8:	7013      	strb	r3, [r2, #0]
 800c1fa:	e6ce      	b.n	800bf9a <_dtoa_r+0x94a>
 800c1fc:	4b09      	ldr	r3, [pc, #36]	; (800c224 <_dtoa_r+0xbd4>)
 800c1fe:	f7ff ba95 	b.w	800b72c <_dtoa_r+0xdc>
 800c202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c204:	2b00      	cmp	r3, #0
 800c206:	f47f aa6e 	bne.w	800b6e6 <_dtoa_r+0x96>
 800c20a:	4b07      	ldr	r3, [pc, #28]	; (800c228 <_dtoa_r+0xbd8>)
 800c20c:	f7ff ba8e 	b.w	800b72c <_dtoa_r+0xdc>
 800c210:	9b02      	ldr	r3, [sp, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	dcae      	bgt.n	800c174 <_dtoa_r+0xb24>
 800c216:	9b06      	ldr	r3, [sp, #24]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	f73f aea8 	bgt.w	800bf6e <_dtoa_r+0x91e>
 800c21e:	e7a9      	b.n	800c174 <_dtoa_r+0xb24>
 800c220:	0800e9d3 	.word	0x0800e9d3
 800c224:	0800e930 	.word	0x0800e930
 800c228:	0800e954 	.word	0x0800e954

0800c22c <__sflush_r>:
 800c22c:	898a      	ldrh	r2, [r1, #12]
 800c22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c232:	4605      	mov	r5, r0
 800c234:	0710      	lsls	r0, r2, #28
 800c236:	460c      	mov	r4, r1
 800c238:	d458      	bmi.n	800c2ec <__sflush_r+0xc0>
 800c23a:	684b      	ldr	r3, [r1, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dc05      	bgt.n	800c24c <__sflush_r+0x20>
 800c240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c242:	2b00      	cmp	r3, #0
 800c244:	dc02      	bgt.n	800c24c <__sflush_r+0x20>
 800c246:	2000      	movs	r0, #0
 800c248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c24e:	2e00      	cmp	r6, #0
 800c250:	d0f9      	beq.n	800c246 <__sflush_r+0x1a>
 800c252:	2300      	movs	r3, #0
 800c254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c258:	682f      	ldr	r7, [r5, #0]
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	d032      	beq.n	800c2c4 <__sflush_r+0x98>
 800c25e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	075a      	lsls	r2, r3, #29
 800c264:	d505      	bpl.n	800c272 <__sflush_r+0x46>
 800c266:	6863      	ldr	r3, [r4, #4]
 800c268:	1ac0      	subs	r0, r0, r3
 800c26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c26c:	b10b      	cbz	r3, 800c272 <__sflush_r+0x46>
 800c26e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c270:	1ac0      	subs	r0, r0, r3
 800c272:	2300      	movs	r3, #0
 800c274:	4602      	mov	r2, r0
 800c276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c278:	6a21      	ldr	r1, [r4, #32]
 800c27a:	4628      	mov	r0, r5
 800c27c:	47b0      	blx	r6
 800c27e:	1c43      	adds	r3, r0, #1
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	d106      	bne.n	800c292 <__sflush_r+0x66>
 800c284:	6829      	ldr	r1, [r5, #0]
 800c286:	291d      	cmp	r1, #29
 800c288:	d82c      	bhi.n	800c2e4 <__sflush_r+0xb8>
 800c28a:	4a2a      	ldr	r2, [pc, #168]	; (800c334 <__sflush_r+0x108>)
 800c28c:	40ca      	lsrs	r2, r1
 800c28e:	07d6      	lsls	r6, r2, #31
 800c290:	d528      	bpl.n	800c2e4 <__sflush_r+0xb8>
 800c292:	2200      	movs	r2, #0
 800c294:	6062      	str	r2, [r4, #4]
 800c296:	04d9      	lsls	r1, r3, #19
 800c298:	6922      	ldr	r2, [r4, #16]
 800c29a:	6022      	str	r2, [r4, #0]
 800c29c:	d504      	bpl.n	800c2a8 <__sflush_r+0x7c>
 800c29e:	1c42      	adds	r2, r0, #1
 800c2a0:	d101      	bne.n	800c2a6 <__sflush_r+0x7a>
 800c2a2:	682b      	ldr	r3, [r5, #0]
 800c2a4:	b903      	cbnz	r3, 800c2a8 <__sflush_r+0x7c>
 800c2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800c2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2aa:	602f      	str	r7, [r5, #0]
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	d0ca      	beq.n	800c246 <__sflush_r+0x1a>
 800c2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b4:	4299      	cmp	r1, r3
 800c2b6:	d002      	beq.n	800c2be <__sflush_r+0x92>
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f000 fca3 	bl	800cc04 <_free_r>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	6360      	str	r0, [r4, #52]	; 0x34
 800c2c2:	e7c1      	b.n	800c248 <__sflush_r+0x1c>
 800c2c4:	6a21      	ldr	r1, [r4, #32]
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	47b0      	blx	r6
 800c2cc:	1c41      	adds	r1, r0, #1
 800c2ce:	d1c7      	bne.n	800c260 <__sflush_r+0x34>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0c4      	beq.n	800c260 <__sflush_r+0x34>
 800c2d6:	2b1d      	cmp	r3, #29
 800c2d8:	d001      	beq.n	800c2de <__sflush_r+0xb2>
 800c2da:	2b16      	cmp	r3, #22
 800c2dc:	d101      	bne.n	800c2e2 <__sflush_r+0xb6>
 800c2de:	602f      	str	r7, [r5, #0]
 800c2e0:	e7b1      	b.n	800c246 <__sflush_r+0x1a>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	e7ad      	b.n	800c248 <__sflush_r+0x1c>
 800c2ec:	690f      	ldr	r7, [r1, #16]
 800c2ee:	2f00      	cmp	r7, #0
 800c2f0:	d0a9      	beq.n	800c246 <__sflush_r+0x1a>
 800c2f2:	0793      	lsls	r3, r2, #30
 800c2f4:	680e      	ldr	r6, [r1, #0]
 800c2f6:	bf08      	it	eq
 800c2f8:	694b      	ldreq	r3, [r1, #20]
 800c2fa:	600f      	str	r7, [r1, #0]
 800c2fc:	bf18      	it	ne
 800c2fe:	2300      	movne	r3, #0
 800c300:	eba6 0807 	sub.w	r8, r6, r7
 800c304:	608b      	str	r3, [r1, #8]
 800c306:	f1b8 0f00 	cmp.w	r8, #0
 800c30a:	dd9c      	ble.n	800c246 <__sflush_r+0x1a>
 800c30c:	6a21      	ldr	r1, [r4, #32]
 800c30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c310:	4643      	mov	r3, r8
 800c312:	463a      	mov	r2, r7
 800c314:	4628      	mov	r0, r5
 800c316:	47b0      	blx	r6
 800c318:	2800      	cmp	r0, #0
 800c31a:	dc06      	bgt.n	800c32a <__sflush_r+0xfe>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	f04f 30ff 	mov.w	r0, #4294967295
 800c328:	e78e      	b.n	800c248 <__sflush_r+0x1c>
 800c32a:	4407      	add	r7, r0
 800c32c:	eba8 0800 	sub.w	r8, r8, r0
 800c330:	e7e9      	b.n	800c306 <__sflush_r+0xda>
 800c332:	bf00      	nop
 800c334:	20400001 	.word	0x20400001

0800c338 <_fflush_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	690b      	ldr	r3, [r1, #16]
 800c33c:	4605      	mov	r5, r0
 800c33e:	460c      	mov	r4, r1
 800c340:	b913      	cbnz	r3, 800c348 <_fflush_r+0x10>
 800c342:	2500      	movs	r5, #0
 800c344:	4628      	mov	r0, r5
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	b118      	cbz	r0, 800c352 <_fflush_r+0x1a>
 800c34a:	6983      	ldr	r3, [r0, #24]
 800c34c:	b90b      	cbnz	r3, 800c352 <_fflush_r+0x1a>
 800c34e:	f7fe f903 	bl	800a558 <__sinit>
 800c352:	4b14      	ldr	r3, [pc, #80]	; (800c3a4 <_fflush_r+0x6c>)
 800c354:	429c      	cmp	r4, r3
 800c356:	d11b      	bne.n	800c390 <_fflush_r+0x58>
 800c358:	686c      	ldr	r4, [r5, #4]
 800c35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d0ef      	beq.n	800c342 <_fflush_r+0xa>
 800c362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c364:	07d0      	lsls	r0, r2, #31
 800c366:	d404      	bmi.n	800c372 <_fflush_r+0x3a>
 800c368:	0599      	lsls	r1, r3, #22
 800c36a:	d402      	bmi.n	800c372 <_fflush_r+0x3a>
 800c36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c36e:	f7fe f9b6 	bl	800a6de <__retarget_lock_acquire_recursive>
 800c372:	4628      	mov	r0, r5
 800c374:	4621      	mov	r1, r4
 800c376:	f7ff ff59 	bl	800c22c <__sflush_r>
 800c37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c37c:	07da      	lsls	r2, r3, #31
 800c37e:	4605      	mov	r5, r0
 800c380:	d4e0      	bmi.n	800c344 <_fflush_r+0xc>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	059b      	lsls	r3, r3, #22
 800c386:	d4dd      	bmi.n	800c344 <_fflush_r+0xc>
 800c388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c38a:	f7fe f9a9 	bl	800a6e0 <__retarget_lock_release_recursive>
 800c38e:	e7d9      	b.n	800c344 <_fflush_r+0xc>
 800c390:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <_fflush_r+0x70>)
 800c392:	429c      	cmp	r4, r3
 800c394:	d101      	bne.n	800c39a <_fflush_r+0x62>
 800c396:	68ac      	ldr	r4, [r5, #8]
 800c398:	e7df      	b.n	800c35a <_fflush_r+0x22>
 800c39a:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <_fflush_r+0x74>)
 800c39c:	429c      	cmp	r4, r3
 800c39e:	bf08      	it	eq
 800c3a0:	68ec      	ldreq	r4, [r5, #12]
 800c3a2:	e7da      	b.n	800c35a <_fflush_r+0x22>
 800c3a4:	0800e8dc 	.word	0x0800e8dc
 800c3a8:	0800e8fc 	.word	0x0800e8fc
 800c3ac:	0800e8bc 	.word	0x0800e8bc

0800c3b0 <_localeconv_r>:
 800c3b0:	4800      	ldr	r0, [pc, #0]	; (800c3b4 <_localeconv_r+0x4>)
 800c3b2:	4770      	bx	lr
 800c3b4:	20000164 	.word	0x20000164

0800c3b8 <_lseek_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d07      	ldr	r5, [pc, #28]	; (800c3d8 <_lseek_r+0x20>)
 800c3bc:	4604      	mov	r4, r0
 800c3be:	4608      	mov	r0, r1
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	602a      	str	r2, [r5, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f7f5 fdb8 	bl	8001f3c <_lseek>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_lseek_r+0x1e>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_lseek_r+0x1e>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	2001ca64 	.word	0x2001ca64

0800c3dc <__swhatbuf_r>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	460e      	mov	r6, r1
 800c3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	b096      	sub	sp, #88	; 0x58
 800c3e8:	4614      	mov	r4, r2
 800c3ea:	461d      	mov	r5, r3
 800c3ec:	da08      	bge.n	800c400 <__swhatbuf_r+0x24>
 800c3ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	602a      	str	r2, [r5, #0]
 800c3f6:	061a      	lsls	r2, r3, #24
 800c3f8:	d410      	bmi.n	800c41c <__swhatbuf_r+0x40>
 800c3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fe:	e00e      	b.n	800c41e <__swhatbuf_r+0x42>
 800c400:	466a      	mov	r2, sp
 800c402:	f000 fc8d 	bl	800cd20 <_fstat_r>
 800c406:	2800      	cmp	r0, #0
 800c408:	dbf1      	blt.n	800c3ee <__swhatbuf_r+0x12>
 800c40a:	9a01      	ldr	r2, [sp, #4]
 800c40c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c410:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c414:	425a      	negs	r2, r3
 800c416:	415a      	adcs	r2, r3
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	e7ee      	b.n	800c3fa <__swhatbuf_r+0x1e>
 800c41c:	2340      	movs	r3, #64	; 0x40
 800c41e:	2000      	movs	r0, #0
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	b016      	add	sp, #88	; 0x58
 800c424:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c428 <__smakebuf_r>:
 800c428:	898b      	ldrh	r3, [r1, #12]
 800c42a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c42c:	079d      	lsls	r5, r3, #30
 800c42e:	4606      	mov	r6, r0
 800c430:	460c      	mov	r4, r1
 800c432:	d507      	bpl.n	800c444 <__smakebuf_r+0x1c>
 800c434:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	2301      	movs	r3, #1
 800c43e:	6163      	str	r3, [r4, #20]
 800c440:	b002      	add	sp, #8
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	ab01      	add	r3, sp, #4
 800c446:	466a      	mov	r2, sp
 800c448:	f7ff ffc8 	bl	800c3dc <__swhatbuf_r>
 800c44c:	9900      	ldr	r1, [sp, #0]
 800c44e:	4605      	mov	r5, r0
 800c450:	4630      	mov	r0, r6
 800c452:	f7fe f97d 	bl	800a750 <_malloc_r>
 800c456:	b948      	cbnz	r0, 800c46c <__smakebuf_r+0x44>
 800c458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45c:	059a      	lsls	r2, r3, #22
 800c45e:	d4ef      	bmi.n	800c440 <__smakebuf_r+0x18>
 800c460:	f023 0303 	bic.w	r3, r3, #3
 800c464:	f043 0302 	orr.w	r3, r3, #2
 800c468:	81a3      	strh	r3, [r4, #12]
 800c46a:	e7e3      	b.n	800c434 <__smakebuf_r+0xc>
 800c46c:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <__smakebuf_r+0x7c>)
 800c46e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	6020      	str	r0, [r4, #0]
 800c474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	9b00      	ldr	r3, [sp, #0]
 800c47c:	6163      	str	r3, [r4, #20]
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	6120      	str	r0, [r4, #16]
 800c482:	b15b      	cbz	r3, 800c49c <__smakebuf_r+0x74>
 800c484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c488:	4630      	mov	r0, r6
 800c48a:	f000 fc5b 	bl	800cd44 <_isatty_r>
 800c48e:	b128      	cbz	r0, 800c49c <__smakebuf_r+0x74>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	f023 0303 	bic.w	r3, r3, #3
 800c496:	f043 0301 	orr.w	r3, r3, #1
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	89a0      	ldrh	r0, [r4, #12]
 800c49e:	4305      	orrs	r5, r0
 800c4a0:	81a5      	strh	r5, [r4, #12]
 800c4a2:	e7cd      	b.n	800c440 <__smakebuf_r+0x18>
 800c4a4:	0800a4f1 	.word	0x0800a4f1

0800c4a8 <malloc>:
 800c4a8:	4b02      	ldr	r3, [pc, #8]	; (800c4b4 <malloc+0xc>)
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	f7fe b94f 	b.w	800a750 <_malloc_r>
 800c4b2:	bf00      	nop
 800c4b4:	20000010 	.word	0x20000010

0800c4b8 <__malloc_lock>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__malloc_lock+0x8>)
 800c4ba:	f7fe b910 	b.w	800a6de <__retarget_lock_acquire_recursive>
 800c4be:	bf00      	nop
 800c4c0:	2001ca58 	.word	0x2001ca58

0800c4c4 <__malloc_unlock>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__malloc_unlock+0x8>)
 800c4c6:	f7fe b90b 	b.w	800a6e0 <__retarget_lock_release_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	2001ca58 	.word	0x2001ca58

0800c4d0 <_Balloc>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	460d      	mov	r5, r1
 800c4d8:	b976      	cbnz	r6, 800c4f8 <_Balloc+0x28>
 800c4da:	2010      	movs	r0, #16
 800c4dc:	f7ff ffe4 	bl	800c4a8 <malloc>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	6260      	str	r0, [r4, #36]	; 0x24
 800c4e4:	b920      	cbnz	r0, 800c4f0 <_Balloc+0x20>
 800c4e6:	4b18      	ldr	r3, [pc, #96]	; (800c548 <_Balloc+0x78>)
 800c4e8:	4818      	ldr	r0, [pc, #96]	; (800c54c <_Balloc+0x7c>)
 800c4ea:	2166      	movs	r1, #102	; 0x66
 800c4ec:	f000 fbe8 	bl	800ccc0 <__assert_func>
 800c4f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4f4:	6006      	str	r6, [r0, #0]
 800c4f6:	60c6      	str	r6, [r0, #12]
 800c4f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4fa:	68f3      	ldr	r3, [r6, #12]
 800c4fc:	b183      	cbz	r3, 800c520 <_Balloc+0x50>
 800c4fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c506:	b9b8      	cbnz	r0, 800c538 <_Balloc+0x68>
 800c508:	2101      	movs	r1, #1
 800c50a:	fa01 f605 	lsl.w	r6, r1, r5
 800c50e:	1d72      	adds	r2, r6, #5
 800c510:	0092      	lsls	r2, r2, #2
 800c512:	4620      	mov	r0, r4
 800c514:	f000 fb60 	bl	800cbd8 <_calloc_r>
 800c518:	b160      	cbz	r0, 800c534 <_Balloc+0x64>
 800c51a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c51e:	e00e      	b.n	800c53e <_Balloc+0x6e>
 800c520:	2221      	movs	r2, #33	; 0x21
 800c522:	2104      	movs	r1, #4
 800c524:	4620      	mov	r0, r4
 800c526:	f000 fb57 	bl	800cbd8 <_calloc_r>
 800c52a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c52c:	60f0      	str	r0, [r6, #12]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1e4      	bne.n	800c4fe <_Balloc+0x2e>
 800c534:	2000      	movs	r0, #0
 800c536:	bd70      	pop	{r4, r5, r6, pc}
 800c538:	6802      	ldr	r2, [r0, #0]
 800c53a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c53e:	2300      	movs	r3, #0
 800c540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c544:	e7f7      	b.n	800c536 <_Balloc+0x66>
 800c546:	bf00      	nop
 800c548:	0800e961 	.word	0x0800e961
 800c54c:	0800e9e4 	.word	0x0800e9e4

0800c550 <_Bfree>:
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c554:	4605      	mov	r5, r0
 800c556:	460c      	mov	r4, r1
 800c558:	b976      	cbnz	r6, 800c578 <_Bfree+0x28>
 800c55a:	2010      	movs	r0, #16
 800c55c:	f7ff ffa4 	bl	800c4a8 <malloc>
 800c560:	4602      	mov	r2, r0
 800c562:	6268      	str	r0, [r5, #36]	; 0x24
 800c564:	b920      	cbnz	r0, 800c570 <_Bfree+0x20>
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <_Bfree+0x3c>)
 800c568:	4809      	ldr	r0, [pc, #36]	; (800c590 <_Bfree+0x40>)
 800c56a:	218a      	movs	r1, #138	; 0x8a
 800c56c:	f000 fba8 	bl	800ccc0 <__assert_func>
 800c570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c574:	6006      	str	r6, [r0, #0]
 800c576:	60c6      	str	r6, [r0, #12]
 800c578:	b13c      	cbz	r4, 800c58a <_Bfree+0x3a>
 800c57a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c57c:	6862      	ldr	r2, [r4, #4]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c584:	6021      	str	r1, [r4, #0]
 800c586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c58a:	bd70      	pop	{r4, r5, r6, pc}
 800c58c:	0800e961 	.word	0x0800e961
 800c590:	0800e9e4 	.word	0x0800e9e4

0800c594 <__multadd>:
 800c594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c598:	690d      	ldr	r5, [r1, #16]
 800c59a:	4607      	mov	r7, r0
 800c59c:	460c      	mov	r4, r1
 800c59e:	461e      	mov	r6, r3
 800c5a0:	f101 0c14 	add.w	ip, r1, #20
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c5aa:	b299      	uxth	r1, r3
 800c5ac:	fb02 6101 	mla	r1, r2, r1, r6
 800c5b0:	0c1e      	lsrs	r6, r3, #16
 800c5b2:	0c0b      	lsrs	r3, r1, #16
 800c5b4:	fb02 3306 	mla	r3, r2, r6, r3
 800c5b8:	b289      	uxth	r1, r1
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5c0:	4285      	cmp	r5, r0
 800c5c2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5ca:	dcec      	bgt.n	800c5a6 <__multadd+0x12>
 800c5cc:	b30e      	cbz	r6, 800c612 <__multadd+0x7e>
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	42ab      	cmp	r3, r5
 800c5d2:	dc19      	bgt.n	800c608 <__multadd+0x74>
 800c5d4:	6861      	ldr	r1, [r4, #4]
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	3101      	adds	r1, #1
 800c5da:	f7ff ff79 	bl	800c4d0 <_Balloc>
 800c5de:	4680      	mov	r8, r0
 800c5e0:	b928      	cbnz	r0, 800c5ee <__multadd+0x5a>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <__multadd+0x84>)
 800c5e6:	480d      	ldr	r0, [pc, #52]	; (800c61c <__multadd+0x88>)
 800c5e8:	21b5      	movs	r1, #181	; 0xb5
 800c5ea:	f000 fb69 	bl	800ccc0 <__assert_func>
 800c5ee:	6922      	ldr	r2, [r4, #16]
 800c5f0:	3202      	adds	r2, #2
 800c5f2:	f104 010c 	add.w	r1, r4, #12
 800c5f6:	0092      	lsls	r2, r2, #2
 800c5f8:	300c      	adds	r0, #12
 800c5fa:	f7fe f872 	bl	800a6e2 <memcpy>
 800c5fe:	4621      	mov	r1, r4
 800c600:	4638      	mov	r0, r7
 800c602:	f7ff ffa5 	bl	800c550 <_Bfree>
 800c606:	4644      	mov	r4, r8
 800c608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c60c:	3501      	adds	r5, #1
 800c60e:	615e      	str	r6, [r3, #20]
 800c610:	6125      	str	r5, [r4, #16]
 800c612:	4620      	mov	r0, r4
 800c614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c618:	0800e9d3 	.word	0x0800e9d3
 800c61c:	0800e9e4 	.word	0x0800e9e4

0800c620 <__hi0bits>:
 800c620:	0c03      	lsrs	r3, r0, #16
 800c622:	041b      	lsls	r3, r3, #16
 800c624:	b9d3      	cbnz	r3, 800c65c <__hi0bits+0x3c>
 800c626:	0400      	lsls	r0, r0, #16
 800c628:	2310      	movs	r3, #16
 800c62a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c62e:	bf04      	itt	eq
 800c630:	0200      	lsleq	r0, r0, #8
 800c632:	3308      	addeq	r3, #8
 800c634:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c638:	bf04      	itt	eq
 800c63a:	0100      	lsleq	r0, r0, #4
 800c63c:	3304      	addeq	r3, #4
 800c63e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c642:	bf04      	itt	eq
 800c644:	0080      	lsleq	r0, r0, #2
 800c646:	3302      	addeq	r3, #2
 800c648:	2800      	cmp	r0, #0
 800c64a:	db05      	blt.n	800c658 <__hi0bits+0x38>
 800c64c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c650:	f103 0301 	add.w	r3, r3, #1
 800c654:	bf08      	it	eq
 800c656:	2320      	moveq	r3, #32
 800c658:	4618      	mov	r0, r3
 800c65a:	4770      	bx	lr
 800c65c:	2300      	movs	r3, #0
 800c65e:	e7e4      	b.n	800c62a <__hi0bits+0xa>

0800c660 <__lo0bits>:
 800c660:	6803      	ldr	r3, [r0, #0]
 800c662:	f013 0207 	ands.w	r2, r3, #7
 800c666:	4601      	mov	r1, r0
 800c668:	d00b      	beq.n	800c682 <__lo0bits+0x22>
 800c66a:	07da      	lsls	r2, r3, #31
 800c66c:	d423      	bmi.n	800c6b6 <__lo0bits+0x56>
 800c66e:	0798      	lsls	r0, r3, #30
 800c670:	bf49      	itett	mi
 800c672:	085b      	lsrmi	r3, r3, #1
 800c674:	089b      	lsrpl	r3, r3, #2
 800c676:	2001      	movmi	r0, #1
 800c678:	600b      	strmi	r3, [r1, #0]
 800c67a:	bf5c      	itt	pl
 800c67c:	600b      	strpl	r3, [r1, #0]
 800c67e:	2002      	movpl	r0, #2
 800c680:	4770      	bx	lr
 800c682:	b298      	uxth	r0, r3
 800c684:	b9a8      	cbnz	r0, 800c6b2 <__lo0bits+0x52>
 800c686:	0c1b      	lsrs	r3, r3, #16
 800c688:	2010      	movs	r0, #16
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	b90a      	cbnz	r2, 800c692 <__lo0bits+0x32>
 800c68e:	3008      	adds	r0, #8
 800c690:	0a1b      	lsrs	r3, r3, #8
 800c692:	071a      	lsls	r2, r3, #28
 800c694:	bf04      	itt	eq
 800c696:	091b      	lsreq	r3, r3, #4
 800c698:	3004      	addeq	r0, #4
 800c69a:	079a      	lsls	r2, r3, #30
 800c69c:	bf04      	itt	eq
 800c69e:	089b      	lsreq	r3, r3, #2
 800c6a0:	3002      	addeq	r0, #2
 800c6a2:	07da      	lsls	r2, r3, #31
 800c6a4:	d403      	bmi.n	800c6ae <__lo0bits+0x4e>
 800c6a6:	085b      	lsrs	r3, r3, #1
 800c6a8:	f100 0001 	add.w	r0, r0, #1
 800c6ac:	d005      	beq.n	800c6ba <__lo0bits+0x5a>
 800c6ae:	600b      	str	r3, [r1, #0]
 800c6b0:	4770      	bx	lr
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	e7e9      	b.n	800c68a <__lo0bits+0x2a>
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	4770      	bx	lr
 800c6ba:	2020      	movs	r0, #32
 800c6bc:	4770      	bx	lr
	...

0800c6c0 <__i2b>:
 800c6c0:	b510      	push	{r4, lr}
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	f7ff ff03 	bl	800c4d0 <_Balloc>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	b928      	cbnz	r0, 800c6da <__i2b+0x1a>
 800c6ce:	4b05      	ldr	r3, [pc, #20]	; (800c6e4 <__i2b+0x24>)
 800c6d0:	4805      	ldr	r0, [pc, #20]	; (800c6e8 <__i2b+0x28>)
 800c6d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6d6:	f000 faf3 	bl	800ccc0 <__assert_func>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	6144      	str	r4, [r0, #20]
 800c6de:	6103      	str	r3, [r0, #16]
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	bf00      	nop
 800c6e4:	0800e9d3 	.word	0x0800e9d3
 800c6e8:	0800e9e4 	.word	0x0800e9e4

0800c6ec <__multiply>:
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	4691      	mov	r9, r2
 800c6f2:	690a      	ldr	r2, [r1, #16]
 800c6f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	bfb8      	it	lt
 800c6fc:	460b      	movlt	r3, r1
 800c6fe:	460c      	mov	r4, r1
 800c700:	bfbc      	itt	lt
 800c702:	464c      	movlt	r4, r9
 800c704:	4699      	movlt	r9, r3
 800c706:	6927      	ldr	r7, [r4, #16]
 800c708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c70c:	68a3      	ldr	r3, [r4, #8]
 800c70e:	6861      	ldr	r1, [r4, #4]
 800c710:	eb07 060a 	add.w	r6, r7, sl
 800c714:	42b3      	cmp	r3, r6
 800c716:	b085      	sub	sp, #20
 800c718:	bfb8      	it	lt
 800c71a:	3101      	addlt	r1, #1
 800c71c:	f7ff fed8 	bl	800c4d0 <_Balloc>
 800c720:	b930      	cbnz	r0, 800c730 <__multiply+0x44>
 800c722:	4602      	mov	r2, r0
 800c724:	4b44      	ldr	r3, [pc, #272]	; (800c838 <__multiply+0x14c>)
 800c726:	4845      	ldr	r0, [pc, #276]	; (800c83c <__multiply+0x150>)
 800c728:	f240 115d 	movw	r1, #349	; 0x15d
 800c72c:	f000 fac8 	bl	800ccc0 <__assert_func>
 800c730:	f100 0514 	add.w	r5, r0, #20
 800c734:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c738:	462b      	mov	r3, r5
 800c73a:	2200      	movs	r2, #0
 800c73c:	4543      	cmp	r3, r8
 800c73e:	d321      	bcc.n	800c784 <__multiply+0x98>
 800c740:	f104 0314 	add.w	r3, r4, #20
 800c744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c748:	f109 0314 	add.w	r3, r9, #20
 800c74c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c750:	9202      	str	r2, [sp, #8]
 800c752:	1b3a      	subs	r2, r7, r4
 800c754:	3a15      	subs	r2, #21
 800c756:	f022 0203 	bic.w	r2, r2, #3
 800c75a:	3204      	adds	r2, #4
 800c75c:	f104 0115 	add.w	r1, r4, #21
 800c760:	428f      	cmp	r7, r1
 800c762:	bf38      	it	cc
 800c764:	2204      	movcc	r2, #4
 800c766:	9201      	str	r2, [sp, #4]
 800c768:	9a02      	ldr	r2, [sp, #8]
 800c76a:	9303      	str	r3, [sp, #12]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d80c      	bhi.n	800c78a <__multiply+0x9e>
 800c770:	2e00      	cmp	r6, #0
 800c772:	dd03      	ble.n	800c77c <__multiply+0x90>
 800c774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d05a      	beq.n	800c832 <__multiply+0x146>
 800c77c:	6106      	str	r6, [r0, #16]
 800c77e:	b005      	add	sp, #20
 800c780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c784:	f843 2b04 	str.w	r2, [r3], #4
 800c788:	e7d8      	b.n	800c73c <__multiply+0x50>
 800c78a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c78e:	f1ba 0f00 	cmp.w	sl, #0
 800c792:	d024      	beq.n	800c7de <__multiply+0xf2>
 800c794:	f104 0e14 	add.w	lr, r4, #20
 800c798:	46a9      	mov	r9, r5
 800c79a:	f04f 0c00 	mov.w	ip, #0
 800c79e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7a2:	f8d9 1000 	ldr.w	r1, [r9]
 800c7a6:	fa1f fb82 	uxth.w	fp, r2
 800c7aa:	b289      	uxth	r1, r1
 800c7ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7b4:	f8d9 2000 	ldr.w	r2, [r9]
 800c7b8:	4461      	add	r1, ip
 800c7ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7be:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7c6:	b289      	uxth	r1, r1
 800c7c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7cc:	4577      	cmp	r7, lr
 800c7ce:	f849 1b04 	str.w	r1, [r9], #4
 800c7d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7d6:	d8e2      	bhi.n	800c79e <__multiply+0xb2>
 800c7d8:	9a01      	ldr	r2, [sp, #4]
 800c7da:	f845 c002 	str.w	ip, [r5, r2]
 800c7de:	9a03      	ldr	r2, [sp, #12]
 800c7e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	f1b9 0f00 	cmp.w	r9, #0
 800c7ea:	d020      	beq.n	800c82e <__multiply+0x142>
 800c7ec:	6829      	ldr	r1, [r5, #0]
 800c7ee:	f104 0c14 	add.w	ip, r4, #20
 800c7f2:	46ae      	mov	lr, r5
 800c7f4:	f04f 0a00 	mov.w	sl, #0
 800c7f8:	f8bc b000 	ldrh.w	fp, [ip]
 800c7fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c800:	fb09 220b 	mla	r2, r9, fp, r2
 800c804:	4492      	add	sl, r2
 800c806:	b289      	uxth	r1, r1
 800c808:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c80c:	f84e 1b04 	str.w	r1, [lr], #4
 800c810:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c814:	f8be 1000 	ldrh.w	r1, [lr]
 800c818:	0c12      	lsrs	r2, r2, #16
 800c81a:	fb09 1102 	mla	r1, r9, r2, r1
 800c81e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c822:	4567      	cmp	r7, ip
 800c824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c828:	d8e6      	bhi.n	800c7f8 <__multiply+0x10c>
 800c82a:	9a01      	ldr	r2, [sp, #4]
 800c82c:	50a9      	str	r1, [r5, r2]
 800c82e:	3504      	adds	r5, #4
 800c830:	e79a      	b.n	800c768 <__multiply+0x7c>
 800c832:	3e01      	subs	r6, #1
 800c834:	e79c      	b.n	800c770 <__multiply+0x84>
 800c836:	bf00      	nop
 800c838:	0800e9d3 	.word	0x0800e9d3
 800c83c:	0800e9e4 	.word	0x0800e9e4

0800c840 <__pow5mult>:
 800c840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c844:	4615      	mov	r5, r2
 800c846:	f012 0203 	ands.w	r2, r2, #3
 800c84a:	4606      	mov	r6, r0
 800c84c:	460f      	mov	r7, r1
 800c84e:	d007      	beq.n	800c860 <__pow5mult+0x20>
 800c850:	4c25      	ldr	r4, [pc, #148]	; (800c8e8 <__pow5mult+0xa8>)
 800c852:	3a01      	subs	r2, #1
 800c854:	2300      	movs	r3, #0
 800c856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c85a:	f7ff fe9b 	bl	800c594 <__multadd>
 800c85e:	4607      	mov	r7, r0
 800c860:	10ad      	asrs	r5, r5, #2
 800c862:	d03d      	beq.n	800c8e0 <__pow5mult+0xa0>
 800c864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c866:	b97c      	cbnz	r4, 800c888 <__pow5mult+0x48>
 800c868:	2010      	movs	r0, #16
 800c86a:	f7ff fe1d 	bl	800c4a8 <malloc>
 800c86e:	4602      	mov	r2, r0
 800c870:	6270      	str	r0, [r6, #36]	; 0x24
 800c872:	b928      	cbnz	r0, 800c880 <__pow5mult+0x40>
 800c874:	4b1d      	ldr	r3, [pc, #116]	; (800c8ec <__pow5mult+0xac>)
 800c876:	481e      	ldr	r0, [pc, #120]	; (800c8f0 <__pow5mult+0xb0>)
 800c878:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c87c:	f000 fa20 	bl	800ccc0 <__assert_func>
 800c880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c884:	6004      	str	r4, [r0, #0]
 800c886:	60c4      	str	r4, [r0, #12]
 800c888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c88c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c890:	b94c      	cbnz	r4, 800c8a6 <__pow5mult+0x66>
 800c892:	f240 2171 	movw	r1, #625	; 0x271
 800c896:	4630      	mov	r0, r6
 800c898:	f7ff ff12 	bl	800c6c0 <__i2b>
 800c89c:	2300      	movs	r3, #0
 800c89e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	6003      	str	r3, [r0, #0]
 800c8a6:	f04f 0900 	mov.w	r9, #0
 800c8aa:	07eb      	lsls	r3, r5, #31
 800c8ac:	d50a      	bpl.n	800c8c4 <__pow5mult+0x84>
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7ff ff1a 	bl	800c6ec <__multiply>
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	4680      	mov	r8, r0
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7ff fe47 	bl	800c550 <_Bfree>
 800c8c2:	4647      	mov	r7, r8
 800c8c4:	106d      	asrs	r5, r5, #1
 800c8c6:	d00b      	beq.n	800c8e0 <__pow5mult+0xa0>
 800c8c8:	6820      	ldr	r0, [r4, #0]
 800c8ca:	b938      	cbnz	r0, 800c8dc <__pow5mult+0x9c>
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f7ff ff0b 	bl	800c6ec <__multiply>
 800c8d6:	6020      	str	r0, [r4, #0]
 800c8d8:	f8c0 9000 	str.w	r9, [r0]
 800c8dc:	4604      	mov	r4, r0
 800c8de:	e7e4      	b.n	800c8aa <__pow5mult+0x6a>
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e6:	bf00      	nop
 800c8e8:	0800eb30 	.word	0x0800eb30
 800c8ec:	0800e961 	.word	0x0800e961
 800c8f0:	0800e9e4 	.word	0x0800e9e4

0800c8f4 <__lshift>:
 800c8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	6849      	ldr	r1, [r1, #4]
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c902:	68a3      	ldr	r3, [r4, #8]
 800c904:	4607      	mov	r7, r0
 800c906:	4691      	mov	r9, r2
 800c908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c90c:	f108 0601 	add.w	r6, r8, #1
 800c910:	42b3      	cmp	r3, r6
 800c912:	db0b      	blt.n	800c92c <__lshift+0x38>
 800c914:	4638      	mov	r0, r7
 800c916:	f7ff fddb 	bl	800c4d0 <_Balloc>
 800c91a:	4605      	mov	r5, r0
 800c91c:	b948      	cbnz	r0, 800c932 <__lshift+0x3e>
 800c91e:	4602      	mov	r2, r0
 800c920:	4b2a      	ldr	r3, [pc, #168]	; (800c9cc <__lshift+0xd8>)
 800c922:	482b      	ldr	r0, [pc, #172]	; (800c9d0 <__lshift+0xdc>)
 800c924:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c928:	f000 f9ca 	bl	800ccc0 <__assert_func>
 800c92c:	3101      	adds	r1, #1
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	e7ee      	b.n	800c910 <__lshift+0x1c>
 800c932:	2300      	movs	r3, #0
 800c934:	f100 0114 	add.w	r1, r0, #20
 800c938:	f100 0210 	add.w	r2, r0, #16
 800c93c:	4618      	mov	r0, r3
 800c93e:	4553      	cmp	r3, sl
 800c940:	db37      	blt.n	800c9b2 <__lshift+0xbe>
 800c942:	6920      	ldr	r0, [r4, #16]
 800c944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c948:	f104 0314 	add.w	r3, r4, #20
 800c94c:	f019 091f 	ands.w	r9, r9, #31
 800c950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c958:	d02f      	beq.n	800c9ba <__lshift+0xc6>
 800c95a:	f1c9 0e20 	rsb	lr, r9, #32
 800c95e:	468a      	mov	sl, r1
 800c960:	f04f 0c00 	mov.w	ip, #0
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	fa02 f209 	lsl.w	r2, r2, r9
 800c96a:	ea42 020c 	orr.w	r2, r2, ip
 800c96e:	f84a 2b04 	str.w	r2, [sl], #4
 800c972:	f853 2b04 	ldr.w	r2, [r3], #4
 800c976:	4298      	cmp	r0, r3
 800c978:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c97c:	d8f2      	bhi.n	800c964 <__lshift+0x70>
 800c97e:	1b03      	subs	r3, r0, r4
 800c980:	3b15      	subs	r3, #21
 800c982:	f023 0303 	bic.w	r3, r3, #3
 800c986:	3304      	adds	r3, #4
 800c988:	f104 0215 	add.w	r2, r4, #21
 800c98c:	4290      	cmp	r0, r2
 800c98e:	bf38      	it	cc
 800c990:	2304      	movcc	r3, #4
 800c992:	f841 c003 	str.w	ip, [r1, r3]
 800c996:	f1bc 0f00 	cmp.w	ip, #0
 800c99a:	d001      	beq.n	800c9a0 <__lshift+0xac>
 800c99c:	f108 0602 	add.w	r6, r8, #2
 800c9a0:	3e01      	subs	r6, #1
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	612e      	str	r6, [r5, #16]
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	f7ff fdd2 	bl	800c550 <_Bfree>
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	e7c1      	b.n	800c93e <__lshift+0x4a>
 800c9ba:	3904      	subs	r1, #4
 800c9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9c4:	4298      	cmp	r0, r3
 800c9c6:	d8f9      	bhi.n	800c9bc <__lshift+0xc8>
 800c9c8:	e7ea      	b.n	800c9a0 <__lshift+0xac>
 800c9ca:	bf00      	nop
 800c9cc:	0800e9d3 	.word	0x0800e9d3
 800c9d0:	0800e9e4 	.word	0x0800e9e4

0800c9d4 <__mcmp>:
 800c9d4:	b530      	push	{r4, r5, lr}
 800c9d6:	6902      	ldr	r2, [r0, #16]
 800c9d8:	690c      	ldr	r4, [r1, #16]
 800c9da:	1b12      	subs	r2, r2, r4
 800c9dc:	d10e      	bne.n	800c9fc <__mcmp+0x28>
 800c9de:	f100 0314 	add.w	r3, r0, #20
 800c9e2:	3114      	adds	r1, #20
 800c9e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9f4:	42a5      	cmp	r5, r4
 800c9f6:	d003      	beq.n	800ca00 <__mcmp+0x2c>
 800c9f8:	d305      	bcc.n	800ca06 <__mcmp+0x32>
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	bd30      	pop	{r4, r5, pc}
 800ca00:	4283      	cmp	r3, r0
 800ca02:	d3f3      	bcc.n	800c9ec <__mcmp+0x18>
 800ca04:	e7fa      	b.n	800c9fc <__mcmp+0x28>
 800ca06:	f04f 32ff 	mov.w	r2, #4294967295
 800ca0a:	e7f7      	b.n	800c9fc <__mcmp+0x28>

0800ca0c <__mdiff>:
 800ca0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	460c      	mov	r4, r1
 800ca12:	4606      	mov	r6, r0
 800ca14:	4611      	mov	r1, r2
 800ca16:	4620      	mov	r0, r4
 800ca18:	4690      	mov	r8, r2
 800ca1a:	f7ff ffdb 	bl	800c9d4 <__mcmp>
 800ca1e:	1e05      	subs	r5, r0, #0
 800ca20:	d110      	bne.n	800ca44 <__mdiff+0x38>
 800ca22:	4629      	mov	r1, r5
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7ff fd53 	bl	800c4d0 <_Balloc>
 800ca2a:	b930      	cbnz	r0, 800ca3a <__mdiff+0x2e>
 800ca2c:	4b3a      	ldr	r3, [pc, #232]	; (800cb18 <__mdiff+0x10c>)
 800ca2e:	4602      	mov	r2, r0
 800ca30:	f240 2132 	movw	r1, #562	; 0x232
 800ca34:	4839      	ldr	r0, [pc, #228]	; (800cb1c <__mdiff+0x110>)
 800ca36:	f000 f943 	bl	800ccc0 <__assert_func>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca44:	bfa4      	itt	ge
 800ca46:	4643      	movge	r3, r8
 800ca48:	46a0      	movge	r8, r4
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca50:	bfa6      	itte	ge
 800ca52:	461c      	movge	r4, r3
 800ca54:	2500      	movge	r5, #0
 800ca56:	2501      	movlt	r5, #1
 800ca58:	f7ff fd3a 	bl	800c4d0 <_Balloc>
 800ca5c:	b920      	cbnz	r0, 800ca68 <__mdiff+0x5c>
 800ca5e:	4b2e      	ldr	r3, [pc, #184]	; (800cb18 <__mdiff+0x10c>)
 800ca60:	4602      	mov	r2, r0
 800ca62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca66:	e7e5      	b.n	800ca34 <__mdiff+0x28>
 800ca68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca6c:	6926      	ldr	r6, [r4, #16]
 800ca6e:	60c5      	str	r5, [r0, #12]
 800ca70:	f104 0914 	add.w	r9, r4, #20
 800ca74:	f108 0514 	add.w	r5, r8, #20
 800ca78:	f100 0e14 	add.w	lr, r0, #20
 800ca7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca84:	f108 0210 	add.w	r2, r8, #16
 800ca88:	46f2      	mov	sl, lr
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca94:	fa1f f883 	uxth.w	r8, r3
 800ca98:	fa11 f18b 	uxtah	r1, r1, fp
 800ca9c:	0c1b      	lsrs	r3, r3, #16
 800ca9e:	eba1 0808 	sub.w	r8, r1, r8
 800caa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800caa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800caaa:	fa1f f888 	uxth.w	r8, r8
 800caae:	1419      	asrs	r1, r3, #16
 800cab0:	454e      	cmp	r6, r9
 800cab2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cab6:	f84a 3b04 	str.w	r3, [sl], #4
 800caba:	d8e7      	bhi.n	800ca8c <__mdiff+0x80>
 800cabc:	1b33      	subs	r3, r6, r4
 800cabe:	3b15      	subs	r3, #21
 800cac0:	f023 0303 	bic.w	r3, r3, #3
 800cac4:	3304      	adds	r3, #4
 800cac6:	3415      	adds	r4, #21
 800cac8:	42a6      	cmp	r6, r4
 800caca:	bf38      	it	cc
 800cacc:	2304      	movcc	r3, #4
 800cace:	441d      	add	r5, r3
 800cad0:	4473      	add	r3, lr
 800cad2:	469e      	mov	lr, r3
 800cad4:	462e      	mov	r6, r5
 800cad6:	4566      	cmp	r6, ip
 800cad8:	d30e      	bcc.n	800caf8 <__mdiff+0xec>
 800cada:	f10c 0203 	add.w	r2, ip, #3
 800cade:	1b52      	subs	r2, r2, r5
 800cae0:	f022 0203 	bic.w	r2, r2, #3
 800cae4:	3d03      	subs	r5, #3
 800cae6:	45ac      	cmp	ip, r5
 800cae8:	bf38      	it	cc
 800caea:	2200      	movcc	r2, #0
 800caec:	441a      	add	r2, r3
 800caee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800caf2:	b17b      	cbz	r3, 800cb14 <__mdiff+0x108>
 800caf4:	6107      	str	r7, [r0, #16]
 800caf6:	e7a3      	b.n	800ca40 <__mdiff+0x34>
 800caf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800cafc:	fa11 f288 	uxtah	r2, r1, r8
 800cb00:	1414      	asrs	r4, r2, #16
 800cb02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb06:	b292      	uxth	r2, r2
 800cb08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb0c:	f84e 2b04 	str.w	r2, [lr], #4
 800cb10:	1421      	asrs	r1, r4, #16
 800cb12:	e7e0      	b.n	800cad6 <__mdiff+0xca>
 800cb14:	3f01      	subs	r7, #1
 800cb16:	e7ea      	b.n	800caee <__mdiff+0xe2>
 800cb18:	0800e9d3 	.word	0x0800e9d3
 800cb1c:	0800e9e4 	.word	0x0800e9e4

0800cb20 <__d2b>:
 800cb20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	4689      	mov	r9, r1
 800cb26:	2101      	movs	r1, #1
 800cb28:	ec57 6b10 	vmov	r6, r7, d0
 800cb2c:	4690      	mov	r8, r2
 800cb2e:	f7ff fccf 	bl	800c4d0 <_Balloc>
 800cb32:	4604      	mov	r4, r0
 800cb34:	b930      	cbnz	r0, 800cb44 <__d2b+0x24>
 800cb36:	4602      	mov	r2, r0
 800cb38:	4b25      	ldr	r3, [pc, #148]	; (800cbd0 <__d2b+0xb0>)
 800cb3a:	4826      	ldr	r0, [pc, #152]	; (800cbd4 <__d2b+0xb4>)
 800cb3c:	f240 310a 	movw	r1, #778	; 0x30a
 800cb40:	f000 f8be 	bl	800ccc0 <__assert_func>
 800cb44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb4c:	bb35      	cbnz	r5, 800cb9c <__d2b+0x7c>
 800cb4e:	2e00      	cmp	r6, #0
 800cb50:	9301      	str	r3, [sp, #4]
 800cb52:	d028      	beq.n	800cba6 <__d2b+0x86>
 800cb54:	4668      	mov	r0, sp
 800cb56:	9600      	str	r6, [sp, #0]
 800cb58:	f7ff fd82 	bl	800c660 <__lo0bits>
 800cb5c:	9900      	ldr	r1, [sp, #0]
 800cb5e:	b300      	cbz	r0, 800cba2 <__d2b+0x82>
 800cb60:	9a01      	ldr	r2, [sp, #4]
 800cb62:	f1c0 0320 	rsb	r3, r0, #32
 800cb66:	fa02 f303 	lsl.w	r3, r2, r3
 800cb6a:	430b      	orrs	r3, r1
 800cb6c:	40c2      	lsrs	r2, r0
 800cb6e:	6163      	str	r3, [r4, #20]
 800cb70:	9201      	str	r2, [sp, #4]
 800cb72:	9b01      	ldr	r3, [sp, #4]
 800cb74:	61a3      	str	r3, [r4, #24]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bf14      	ite	ne
 800cb7a:	2202      	movne	r2, #2
 800cb7c:	2201      	moveq	r2, #1
 800cb7e:	6122      	str	r2, [r4, #16]
 800cb80:	b1d5      	cbz	r5, 800cbb8 <__d2b+0x98>
 800cb82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb86:	4405      	add	r5, r0
 800cb88:	f8c9 5000 	str.w	r5, [r9]
 800cb8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb90:	f8c8 0000 	str.w	r0, [r8]
 800cb94:	4620      	mov	r0, r4
 800cb96:	b003      	add	sp, #12
 800cb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cba0:	e7d5      	b.n	800cb4e <__d2b+0x2e>
 800cba2:	6161      	str	r1, [r4, #20]
 800cba4:	e7e5      	b.n	800cb72 <__d2b+0x52>
 800cba6:	a801      	add	r0, sp, #4
 800cba8:	f7ff fd5a 	bl	800c660 <__lo0bits>
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	6163      	str	r3, [r4, #20]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	6122      	str	r2, [r4, #16]
 800cbb4:	3020      	adds	r0, #32
 800cbb6:	e7e3      	b.n	800cb80 <__d2b+0x60>
 800cbb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cbc0:	f8c9 0000 	str.w	r0, [r9]
 800cbc4:	6918      	ldr	r0, [r3, #16]
 800cbc6:	f7ff fd2b 	bl	800c620 <__hi0bits>
 800cbca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbce:	e7df      	b.n	800cb90 <__d2b+0x70>
 800cbd0:	0800e9d3 	.word	0x0800e9d3
 800cbd4:	0800e9e4 	.word	0x0800e9e4

0800cbd8 <_calloc_r>:
 800cbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbda:	fba1 2402 	umull	r2, r4, r1, r2
 800cbde:	b94c      	cbnz	r4, 800cbf4 <_calloc_r+0x1c>
 800cbe0:	4611      	mov	r1, r2
 800cbe2:	9201      	str	r2, [sp, #4]
 800cbe4:	f7fd fdb4 	bl	800a750 <_malloc_r>
 800cbe8:	9a01      	ldr	r2, [sp, #4]
 800cbea:	4605      	mov	r5, r0
 800cbec:	b930      	cbnz	r0, 800cbfc <_calloc_r+0x24>
 800cbee:	4628      	mov	r0, r5
 800cbf0:	b003      	add	sp, #12
 800cbf2:	bd30      	pop	{r4, r5, pc}
 800cbf4:	220c      	movs	r2, #12
 800cbf6:	6002      	str	r2, [r0, #0]
 800cbf8:	2500      	movs	r5, #0
 800cbfa:	e7f8      	b.n	800cbee <_calloc_r+0x16>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	f7fd fd7e 	bl	800a6fe <memset>
 800cc02:	e7f4      	b.n	800cbee <_calloc_r+0x16>

0800cc04 <_free_r>:
 800cc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc06:	2900      	cmp	r1, #0
 800cc08:	d044      	beq.n	800cc94 <_free_r+0x90>
 800cc0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc0e:	9001      	str	r0, [sp, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f1a1 0404 	sub.w	r4, r1, #4
 800cc16:	bfb8      	it	lt
 800cc18:	18e4      	addlt	r4, r4, r3
 800cc1a:	f7ff fc4d 	bl	800c4b8 <__malloc_lock>
 800cc1e:	4a1e      	ldr	r2, [pc, #120]	; (800cc98 <_free_r+0x94>)
 800cc20:	9801      	ldr	r0, [sp, #4]
 800cc22:	6813      	ldr	r3, [r2, #0]
 800cc24:	b933      	cbnz	r3, 800cc34 <_free_r+0x30>
 800cc26:	6063      	str	r3, [r4, #4]
 800cc28:	6014      	str	r4, [r2, #0]
 800cc2a:	b003      	add	sp, #12
 800cc2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc30:	f7ff bc48 	b.w	800c4c4 <__malloc_unlock>
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	d908      	bls.n	800cc4a <_free_r+0x46>
 800cc38:	6825      	ldr	r5, [r4, #0]
 800cc3a:	1961      	adds	r1, r4, r5
 800cc3c:	428b      	cmp	r3, r1
 800cc3e:	bf01      	itttt	eq
 800cc40:	6819      	ldreq	r1, [r3, #0]
 800cc42:	685b      	ldreq	r3, [r3, #4]
 800cc44:	1949      	addeq	r1, r1, r5
 800cc46:	6021      	streq	r1, [r4, #0]
 800cc48:	e7ed      	b.n	800cc26 <_free_r+0x22>
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	b10b      	cbz	r3, 800cc54 <_free_r+0x50>
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	d9fa      	bls.n	800cc4a <_free_r+0x46>
 800cc54:	6811      	ldr	r1, [r2, #0]
 800cc56:	1855      	adds	r5, r2, r1
 800cc58:	42a5      	cmp	r5, r4
 800cc5a:	d10b      	bne.n	800cc74 <_free_r+0x70>
 800cc5c:	6824      	ldr	r4, [r4, #0]
 800cc5e:	4421      	add	r1, r4
 800cc60:	1854      	adds	r4, r2, r1
 800cc62:	42a3      	cmp	r3, r4
 800cc64:	6011      	str	r1, [r2, #0]
 800cc66:	d1e0      	bne.n	800cc2a <_free_r+0x26>
 800cc68:	681c      	ldr	r4, [r3, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	6053      	str	r3, [r2, #4]
 800cc6e:	4421      	add	r1, r4
 800cc70:	6011      	str	r1, [r2, #0]
 800cc72:	e7da      	b.n	800cc2a <_free_r+0x26>
 800cc74:	d902      	bls.n	800cc7c <_free_r+0x78>
 800cc76:	230c      	movs	r3, #12
 800cc78:	6003      	str	r3, [r0, #0]
 800cc7a:	e7d6      	b.n	800cc2a <_free_r+0x26>
 800cc7c:	6825      	ldr	r5, [r4, #0]
 800cc7e:	1961      	adds	r1, r4, r5
 800cc80:	428b      	cmp	r3, r1
 800cc82:	bf04      	itt	eq
 800cc84:	6819      	ldreq	r1, [r3, #0]
 800cc86:	685b      	ldreq	r3, [r3, #4]
 800cc88:	6063      	str	r3, [r4, #4]
 800cc8a:	bf04      	itt	eq
 800cc8c:	1949      	addeq	r1, r1, r5
 800cc8e:	6021      	streq	r1, [r4, #0]
 800cc90:	6054      	str	r4, [r2, #4]
 800cc92:	e7ca      	b.n	800cc2a <_free_r+0x26>
 800cc94:	b003      	add	sp, #12
 800cc96:	bd30      	pop	{r4, r5, pc}
 800cc98:	2001ca5c 	.word	0x2001ca5c

0800cc9c <_read_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4d07      	ldr	r5, [pc, #28]	; (800ccbc <_read_r+0x20>)
 800cca0:	4604      	mov	r4, r0
 800cca2:	4608      	mov	r0, r1
 800cca4:	4611      	mov	r1, r2
 800cca6:	2200      	movs	r2, #0
 800cca8:	602a      	str	r2, [r5, #0]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	f7f5 f902 	bl	8001eb4 <_read>
 800ccb0:	1c43      	adds	r3, r0, #1
 800ccb2:	d102      	bne.n	800ccba <_read_r+0x1e>
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	b103      	cbz	r3, 800ccba <_read_r+0x1e>
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	bd38      	pop	{r3, r4, r5, pc}
 800ccbc:	2001ca64 	.word	0x2001ca64

0800ccc0 <__assert_func>:
 800ccc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccc2:	4614      	mov	r4, r2
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	4b09      	ldr	r3, [pc, #36]	; (800ccec <__assert_func+0x2c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4605      	mov	r5, r0
 800cccc:	68d8      	ldr	r0, [r3, #12]
 800ccce:	b14c      	cbz	r4, 800cce4 <__assert_func+0x24>
 800ccd0:	4b07      	ldr	r3, [pc, #28]	; (800ccf0 <__assert_func+0x30>)
 800ccd2:	9100      	str	r1, [sp, #0]
 800ccd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccd8:	4906      	ldr	r1, [pc, #24]	; (800ccf4 <__assert_func+0x34>)
 800ccda:	462b      	mov	r3, r5
 800ccdc:	f000 f80e 	bl	800ccfc <fiprintf>
 800cce0:	f000 f9b9 	bl	800d056 <abort>
 800cce4:	4b04      	ldr	r3, [pc, #16]	; (800ccf8 <__assert_func+0x38>)
 800cce6:	461c      	mov	r4, r3
 800cce8:	e7f3      	b.n	800ccd2 <__assert_func+0x12>
 800ccea:	bf00      	nop
 800ccec:	20000010 	.word	0x20000010
 800ccf0:	0800eb3c 	.word	0x0800eb3c
 800ccf4:	0800eb49 	.word	0x0800eb49
 800ccf8:	0800eb77 	.word	0x0800eb77

0800ccfc <fiprintf>:
 800ccfc:	b40e      	push	{r1, r2, r3}
 800ccfe:	b503      	push	{r0, r1, lr}
 800cd00:	4601      	mov	r1, r0
 800cd02:	ab03      	add	r3, sp, #12
 800cd04:	4805      	ldr	r0, [pc, #20]	; (800cd1c <fiprintf+0x20>)
 800cd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd0a:	6800      	ldr	r0, [r0, #0]
 800cd0c:	9301      	str	r3, [sp, #4]
 800cd0e:	f000 f865 	bl	800cddc <_vfiprintf_r>
 800cd12:	b002      	add	sp, #8
 800cd14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd18:	b003      	add	sp, #12
 800cd1a:	4770      	bx	lr
 800cd1c:	20000010 	.word	0x20000010

0800cd20 <_fstat_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4d07      	ldr	r5, [pc, #28]	; (800cd40 <_fstat_r+0x20>)
 800cd24:	2300      	movs	r3, #0
 800cd26:	4604      	mov	r4, r0
 800cd28:	4608      	mov	r0, r1
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	602b      	str	r3, [r5, #0]
 800cd2e:	f7f5 f8ea 	bl	8001f06 <_fstat>
 800cd32:	1c43      	adds	r3, r0, #1
 800cd34:	d102      	bne.n	800cd3c <_fstat_r+0x1c>
 800cd36:	682b      	ldr	r3, [r5, #0]
 800cd38:	b103      	cbz	r3, 800cd3c <_fstat_r+0x1c>
 800cd3a:	6023      	str	r3, [r4, #0]
 800cd3c:	bd38      	pop	{r3, r4, r5, pc}
 800cd3e:	bf00      	nop
 800cd40:	2001ca64 	.word	0x2001ca64

0800cd44 <_isatty_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4d06      	ldr	r5, [pc, #24]	; (800cd60 <_isatty_r+0x1c>)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	602b      	str	r3, [r5, #0]
 800cd50:	f7f5 f8e9 	bl	8001f26 <_isatty>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_isatty_r+0x1a>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_isatty_r+0x1a>
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	2001ca64 	.word	0x2001ca64

0800cd64 <__ascii_mbtowc>:
 800cd64:	b082      	sub	sp, #8
 800cd66:	b901      	cbnz	r1, 800cd6a <__ascii_mbtowc+0x6>
 800cd68:	a901      	add	r1, sp, #4
 800cd6a:	b142      	cbz	r2, 800cd7e <__ascii_mbtowc+0x1a>
 800cd6c:	b14b      	cbz	r3, 800cd82 <__ascii_mbtowc+0x1e>
 800cd6e:	7813      	ldrb	r3, [r2, #0]
 800cd70:	600b      	str	r3, [r1, #0]
 800cd72:	7812      	ldrb	r2, [r2, #0]
 800cd74:	1e10      	subs	r0, r2, #0
 800cd76:	bf18      	it	ne
 800cd78:	2001      	movne	r0, #1
 800cd7a:	b002      	add	sp, #8
 800cd7c:	4770      	bx	lr
 800cd7e:	4610      	mov	r0, r2
 800cd80:	e7fb      	b.n	800cd7a <__ascii_mbtowc+0x16>
 800cd82:	f06f 0001 	mvn.w	r0, #1
 800cd86:	e7f8      	b.n	800cd7a <__ascii_mbtowc+0x16>

0800cd88 <__sfputc_r>:
 800cd88:	6893      	ldr	r3, [r2, #8]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	b410      	push	{r4}
 800cd90:	6093      	str	r3, [r2, #8]
 800cd92:	da08      	bge.n	800cda6 <__sfputc_r+0x1e>
 800cd94:	6994      	ldr	r4, [r2, #24]
 800cd96:	42a3      	cmp	r3, r4
 800cd98:	db01      	blt.n	800cd9e <__sfputc_r+0x16>
 800cd9a:	290a      	cmp	r1, #10
 800cd9c:	d103      	bne.n	800cda6 <__sfputc_r+0x1e>
 800cd9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cda2:	f7fe bae7 	b.w	800b374 <__swbuf_r>
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	1c58      	adds	r0, r3, #1
 800cdaa:	6010      	str	r0, [r2, #0]
 800cdac:	7019      	strb	r1, [r3, #0]
 800cdae:	4608      	mov	r0, r1
 800cdb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <__sfputs_r>:
 800cdb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb8:	4606      	mov	r6, r0
 800cdba:	460f      	mov	r7, r1
 800cdbc:	4614      	mov	r4, r2
 800cdbe:	18d5      	adds	r5, r2, r3
 800cdc0:	42ac      	cmp	r4, r5
 800cdc2:	d101      	bne.n	800cdc8 <__sfputs_r+0x12>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e007      	b.n	800cdd8 <__sfputs_r+0x22>
 800cdc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdcc:	463a      	mov	r2, r7
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7ff ffda 	bl	800cd88 <__sfputc_r>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d1f3      	bne.n	800cdc0 <__sfputs_r+0xa>
 800cdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cddc <_vfiprintf_r>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	460d      	mov	r5, r1
 800cde2:	b09d      	sub	sp, #116	; 0x74
 800cde4:	4614      	mov	r4, r2
 800cde6:	4698      	mov	r8, r3
 800cde8:	4606      	mov	r6, r0
 800cdea:	b118      	cbz	r0, 800cdf4 <_vfiprintf_r+0x18>
 800cdec:	6983      	ldr	r3, [r0, #24]
 800cdee:	b90b      	cbnz	r3, 800cdf4 <_vfiprintf_r+0x18>
 800cdf0:	f7fd fbb2 	bl	800a558 <__sinit>
 800cdf4:	4b89      	ldr	r3, [pc, #548]	; (800d01c <_vfiprintf_r+0x240>)
 800cdf6:	429d      	cmp	r5, r3
 800cdf8:	d11b      	bne.n	800ce32 <_vfiprintf_r+0x56>
 800cdfa:	6875      	ldr	r5, [r6, #4]
 800cdfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdfe:	07d9      	lsls	r1, r3, #31
 800ce00:	d405      	bmi.n	800ce0e <_vfiprintf_r+0x32>
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	059a      	lsls	r2, r3, #22
 800ce06:	d402      	bmi.n	800ce0e <_vfiprintf_r+0x32>
 800ce08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce0a:	f7fd fc68 	bl	800a6de <__retarget_lock_acquire_recursive>
 800ce0e:	89ab      	ldrh	r3, [r5, #12]
 800ce10:	071b      	lsls	r3, r3, #28
 800ce12:	d501      	bpl.n	800ce18 <_vfiprintf_r+0x3c>
 800ce14:	692b      	ldr	r3, [r5, #16]
 800ce16:	b9eb      	cbnz	r3, 800ce54 <_vfiprintf_r+0x78>
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7fe fb0e 	bl	800b43c <__swsetup_r>
 800ce20:	b1c0      	cbz	r0, 800ce54 <_vfiprintf_r+0x78>
 800ce22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce24:	07dc      	lsls	r4, r3, #31
 800ce26:	d50e      	bpl.n	800ce46 <_vfiprintf_r+0x6a>
 800ce28:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2c:	b01d      	add	sp, #116	; 0x74
 800ce2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce32:	4b7b      	ldr	r3, [pc, #492]	; (800d020 <_vfiprintf_r+0x244>)
 800ce34:	429d      	cmp	r5, r3
 800ce36:	d101      	bne.n	800ce3c <_vfiprintf_r+0x60>
 800ce38:	68b5      	ldr	r5, [r6, #8]
 800ce3a:	e7df      	b.n	800cdfc <_vfiprintf_r+0x20>
 800ce3c:	4b79      	ldr	r3, [pc, #484]	; (800d024 <_vfiprintf_r+0x248>)
 800ce3e:	429d      	cmp	r5, r3
 800ce40:	bf08      	it	eq
 800ce42:	68f5      	ldreq	r5, [r6, #12]
 800ce44:	e7da      	b.n	800cdfc <_vfiprintf_r+0x20>
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	0598      	lsls	r0, r3, #22
 800ce4a:	d4ed      	bmi.n	800ce28 <_vfiprintf_r+0x4c>
 800ce4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce4e:	f7fd fc47 	bl	800a6e0 <__retarget_lock_release_recursive>
 800ce52:	e7e9      	b.n	800ce28 <_vfiprintf_r+0x4c>
 800ce54:	2300      	movs	r3, #0
 800ce56:	9309      	str	r3, [sp, #36]	; 0x24
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce62:	2330      	movs	r3, #48	; 0x30
 800ce64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d028 <_vfiprintf_r+0x24c>
 800ce68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce6c:	f04f 0901 	mov.w	r9, #1
 800ce70:	4623      	mov	r3, r4
 800ce72:	469a      	mov	sl, r3
 800ce74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce78:	b10a      	cbz	r2, 800ce7e <_vfiprintf_r+0xa2>
 800ce7a:	2a25      	cmp	r2, #37	; 0x25
 800ce7c:	d1f9      	bne.n	800ce72 <_vfiprintf_r+0x96>
 800ce7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce82:	d00b      	beq.n	800ce9c <_vfiprintf_r+0xc0>
 800ce84:	465b      	mov	r3, fp
 800ce86:	4622      	mov	r2, r4
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7ff ff93 	bl	800cdb6 <__sfputs_r>
 800ce90:	3001      	adds	r0, #1
 800ce92:	f000 80aa 	beq.w	800cfea <_vfiprintf_r+0x20e>
 800ce96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce98:	445a      	add	r2, fp
 800ce9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 80a2 	beq.w	800cfea <_vfiprintf_r+0x20e>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb0:	f10a 0a01 	add.w	sl, sl, #1
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cebc:	931a      	str	r3, [sp, #104]	; 0x68
 800cebe:	4654      	mov	r4, sl
 800cec0:	2205      	movs	r2, #5
 800cec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec6:	4858      	ldr	r0, [pc, #352]	; (800d028 <_vfiprintf_r+0x24c>)
 800cec8:	f7f3 f9b2 	bl	8000230 <memchr>
 800cecc:	9a04      	ldr	r2, [sp, #16]
 800cece:	b9d8      	cbnz	r0, 800cf08 <_vfiprintf_r+0x12c>
 800ced0:	06d1      	lsls	r1, r2, #27
 800ced2:	bf44      	itt	mi
 800ced4:	2320      	movmi	r3, #32
 800ced6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceda:	0713      	lsls	r3, r2, #28
 800cedc:	bf44      	itt	mi
 800cede:	232b      	movmi	r3, #43	; 0x2b
 800cee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee4:	f89a 3000 	ldrb.w	r3, [sl]
 800cee8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceea:	d015      	beq.n	800cf18 <_vfiprintf_r+0x13c>
 800ceec:	9a07      	ldr	r2, [sp, #28]
 800ceee:	4654      	mov	r4, sl
 800cef0:	2000      	movs	r0, #0
 800cef2:	f04f 0c0a 	mov.w	ip, #10
 800cef6:	4621      	mov	r1, r4
 800cef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cefc:	3b30      	subs	r3, #48	; 0x30
 800cefe:	2b09      	cmp	r3, #9
 800cf00:	d94e      	bls.n	800cfa0 <_vfiprintf_r+0x1c4>
 800cf02:	b1b0      	cbz	r0, 800cf32 <_vfiprintf_r+0x156>
 800cf04:	9207      	str	r2, [sp, #28]
 800cf06:	e014      	b.n	800cf32 <_vfiprintf_r+0x156>
 800cf08:	eba0 0308 	sub.w	r3, r0, r8
 800cf0c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	9304      	str	r3, [sp, #16]
 800cf14:	46a2      	mov	sl, r4
 800cf16:	e7d2      	b.n	800cebe <_vfiprintf_r+0xe2>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	1d19      	adds	r1, r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	9103      	str	r1, [sp, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfbb      	ittet	lt
 800cf24:	425b      	neglt	r3, r3
 800cf26:	f042 0202 	orrlt.w	r2, r2, #2
 800cf2a:	9307      	strge	r3, [sp, #28]
 800cf2c:	9307      	strlt	r3, [sp, #28]
 800cf2e:	bfb8      	it	lt
 800cf30:	9204      	strlt	r2, [sp, #16]
 800cf32:	7823      	ldrb	r3, [r4, #0]
 800cf34:	2b2e      	cmp	r3, #46	; 0x2e
 800cf36:	d10c      	bne.n	800cf52 <_vfiprintf_r+0x176>
 800cf38:	7863      	ldrb	r3, [r4, #1]
 800cf3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf3c:	d135      	bne.n	800cfaa <_vfiprintf_r+0x1ce>
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	1d1a      	adds	r2, r3, #4
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	9203      	str	r2, [sp, #12]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfb8      	it	lt
 800cf4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf4e:	3402      	adds	r4, #2
 800cf50:	9305      	str	r3, [sp, #20]
 800cf52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d038 <_vfiprintf_r+0x25c>
 800cf56:	7821      	ldrb	r1, [r4, #0]
 800cf58:	2203      	movs	r2, #3
 800cf5a:	4650      	mov	r0, sl
 800cf5c:	f7f3 f968 	bl	8000230 <memchr>
 800cf60:	b140      	cbz	r0, 800cf74 <_vfiprintf_r+0x198>
 800cf62:	2340      	movs	r3, #64	; 0x40
 800cf64:	eba0 000a 	sub.w	r0, r0, sl
 800cf68:	fa03 f000 	lsl.w	r0, r3, r0
 800cf6c:	9b04      	ldr	r3, [sp, #16]
 800cf6e:	4303      	orrs	r3, r0
 800cf70:	3401      	adds	r4, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf78:	482c      	ldr	r0, [pc, #176]	; (800d02c <_vfiprintf_r+0x250>)
 800cf7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf7e:	2206      	movs	r2, #6
 800cf80:	f7f3 f956 	bl	8000230 <memchr>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d03f      	beq.n	800d008 <_vfiprintf_r+0x22c>
 800cf88:	4b29      	ldr	r3, [pc, #164]	; (800d030 <_vfiprintf_r+0x254>)
 800cf8a:	bb1b      	cbnz	r3, 800cfd4 <_vfiprintf_r+0x1f8>
 800cf8c:	9b03      	ldr	r3, [sp, #12]
 800cf8e:	3307      	adds	r3, #7
 800cf90:	f023 0307 	bic.w	r3, r3, #7
 800cf94:	3308      	adds	r3, #8
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9a:	443b      	add	r3, r7
 800cf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9e:	e767      	b.n	800ce70 <_vfiprintf_r+0x94>
 800cfa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa4:	460c      	mov	r4, r1
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	e7a5      	b.n	800cef6 <_vfiprintf_r+0x11a>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	3401      	adds	r4, #1
 800cfae:	9305      	str	r3, [sp, #20]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	f04f 0c0a 	mov.w	ip, #10
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfbc:	3a30      	subs	r2, #48	; 0x30
 800cfbe:	2a09      	cmp	r2, #9
 800cfc0:	d903      	bls.n	800cfca <_vfiprintf_r+0x1ee>
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0c5      	beq.n	800cf52 <_vfiprintf_r+0x176>
 800cfc6:	9105      	str	r1, [sp, #20]
 800cfc8:	e7c3      	b.n	800cf52 <_vfiprintf_r+0x176>
 800cfca:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfce:	4604      	mov	r4, r0
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e7f0      	b.n	800cfb6 <_vfiprintf_r+0x1da>
 800cfd4:	ab03      	add	r3, sp, #12
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	462a      	mov	r2, r5
 800cfda:	4b16      	ldr	r3, [pc, #88]	; (800d034 <_vfiprintf_r+0x258>)
 800cfdc:	a904      	add	r1, sp, #16
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7fd fcca 	bl	800a978 <_printf_float>
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	1c78      	adds	r0, r7, #1
 800cfe8:	d1d6      	bne.n	800cf98 <_vfiprintf_r+0x1bc>
 800cfea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfec:	07d9      	lsls	r1, r3, #31
 800cfee:	d405      	bmi.n	800cffc <_vfiprintf_r+0x220>
 800cff0:	89ab      	ldrh	r3, [r5, #12]
 800cff2:	059a      	lsls	r2, r3, #22
 800cff4:	d402      	bmi.n	800cffc <_vfiprintf_r+0x220>
 800cff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff8:	f7fd fb72 	bl	800a6e0 <__retarget_lock_release_recursive>
 800cffc:	89ab      	ldrh	r3, [r5, #12]
 800cffe:	065b      	lsls	r3, r3, #25
 800d000:	f53f af12 	bmi.w	800ce28 <_vfiprintf_r+0x4c>
 800d004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d006:	e711      	b.n	800ce2c <_vfiprintf_r+0x50>
 800d008:	ab03      	add	r3, sp, #12
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	462a      	mov	r2, r5
 800d00e:	4b09      	ldr	r3, [pc, #36]	; (800d034 <_vfiprintf_r+0x258>)
 800d010:	a904      	add	r1, sp, #16
 800d012:	4630      	mov	r0, r6
 800d014:	f7fd ff54 	bl	800aec0 <_printf_i>
 800d018:	e7e4      	b.n	800cfe4 <_vfiprintf_r+0x208>
 800d01a:	bf00      	nop
 800d01c:	0800e8dc 	.word	0x0800e8dc
 800d020:	0800e8fc 	.word	0x0800e8fc
 800d024:	0800e8bc 	.word	0x0800e8bc
 800d028:	0800eb82 	.word	0x0800eb82
 800d02c:	0800eb8c 	.word	0x0800eb8c
 800d030:	0800a979 	.word	0x0800a979
 800d034:	0800cdb7 	.word	0x0800cdb7
 800d038:	0800eb88 	.word	0x0800eb88

0800d03c <__ascii_wctomb>:
 800d03c:	b149      	cbz	r1, 800d052 <__ascii_wctomb+0x16>
 800d03e:	2aff      	cmp	r2, #255	; 0xff
 800d040:	bf85      	ittet	hi
 800d042:	238a      	movhi	r3, #138	; 0x8a
 800d044:	6003      	strhi	r3, [r0, #0]
 800d046:	700a      	strbls	r2, [r1, #0]
 800d048:	f04f 30ff 	movhi.w	r0, #4294967295
 800d04c:	bf98      	it	ls
 800d04e:	2001      	movls	r0, #1
 800d050:	4770      	bx	lr
 800d052:	4608      	mov	r0, r1
 800d054:	4770      	bx	lr

0800d056 <abort>:
 800d056:	b508      	push	{r3, lr}
 800d058:	2006      	movs	r0, #6
 800d05a:	f000 f82b 	bl	800d0b4 <raise>
 800d05e:	2001      	movs	r0, #1
 800d060:	f7f4 ff1e 	bl	8001ea0 <_exit>

0800d064 <_raise_r>:
 800d064:	291f      	cmp	r1, #31
 800d066:	b538      	push	{r3, r4, r5, lr}
 800d068:	4604      	mov	r4, r0
 800d06a:	460d      	mov	r5, r1
 800d06c:	d904      	bls.n	800d078 <_raise_r+0x14>
 800d06e:	2316      	movs	r3, #22
 800d070:	6003      	str	r3, [r0, #0]
 800d072:	f04f 30ff 	mov.w	r0, #4294967295
 800d076:	bd38      	pop	{r3, r4, r5, pc}
 800d078:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d07a:	b112      	cbz	r2, 800d082 <_raise_r+0x1e>
 800d07c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d080:	b94b      	cbnz	r3, 800d096 <_raise_r+0x32>
 800d082:	4620      	mov	r0, r4
 800d084:	f000 f830 	bl	800d0e8 <_getpid_r>
 800d088:	462a      	mov	r2, r5
 800d08a:	4601      	mov	r1, r0
 800d08c:	4620      	mov	r0, r4
 800d08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d092:	f000 b817 	b.w	800d0c4 <_kill_r>
 800d096:	2b01      	cmp	r3, #1
 800d098:	d00a      	beq.n	800d0b0 <_raise_r+0x4c>
 800d09a:	1c59      	adds	r1, r3, #1
 800d09c:	d103      	bne.n	800d0a6 <_raise_r+0x42>
 800d09e:	2316      	movs	r3, #22
 800d0a0:	6003      	str	r3, [r0, #0]
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	e7e7      	b.n	800d076 <_raise_r+0x12>
 800d0a6:	2400      	movs	r4, #0
 800d0a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	4798      	blx	r3
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e7e0      	b.n	800d076 <_raise_r+0x12>

0800d0b4 <raise>:
 800d0b4:	4b02      	ldr	r3, [pc, #8]	; (800d0c0 <raise+0xc>)
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	6818      	ldr	r0, [r3, #0]
 800d0ba:	f7ff bfd3 	b.w	800d064 <_raise_r>
 800d0be:	bf00      	nop
 800d0c0:	20000010 	.word	0x20000010

0800d0c4 <_kill_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	4d07      	ldr	r5, [pc, #28]	; (800d0e4 <_kill_r+0x20>)
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	602b      	str	r3, [r5, #0]
 800d0d2:	f7f4 fed5 	bl	8001e80 <_kill>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	d102      	bne.n	800d0e0 <_kill_r+0x1c>
 800d0da:	682b      	ldr	r3, [r5, #0]
 800d0dc:	b103      	cbz	r3, 800d0e0 <_kill_r+0x1c>
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	bd38      	pop	{r3, r4, r5, pc}
 800d0e2:	bf00      	nop
 800d0e4:	2001ca64 	.word	0x2001ca64

0800d0e8 <_getpid_r>:
 800d0e8:	f7f4 bec2 	b.w	8001e70 <_getpid>

0800d0ec <cexp>:
 800d0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f0:	ed2d 8b06 	vpush	{d8-d10}
 800d0f4:	eeb0 aa40 	vmov.f32	s20, s0
 800d0f8:	eef0 aa60 	vmov.f32	s21, s1
 800d0fc:	eeb0 8a41 	vmov.f32	s16, s2
 800d100:	eef0 8a61 	vmov.f32	s17, s3
 800d104:	f000 f84f 	bl	800d1a6 <creal>
 800d108:	eeb0 1a48 	vmov.f32	s2, s16
 800d10c:	eef0 1a68 	vmov.f32	s3, s17
 800d110:	eeb0 9a40 	vmov.f32	s18, s0
 800d114:	eef0 9a60 	vmov.f32	s19, s1
 800d118:	eeb0 0a4a 	vmov.f32	s0, s20
 800d11c:	eef0 0a6a 	vmov.f32	s1, s21
 800d120:	f000 f83c 	bl	800d19c <cimag>
 800d124:	eeb0 8a40 	vmov.f32	s16, s0
 800d128:	eef0 8a60 	vmov.f32	s17, s1
 800d12c:	eeb0 0a49 	vmov.f32	s0, s18
 800d130:	eef0 0a69 	vmov.f32	s1, s19
 800d134:	f000 f8e4 	bl	800d300 <exp>
 800d138:	ec57 6b10 	vmov	r6, r7, d0
 800d13c:	eeb0 0a48 	vmov.f32	s0, s16
 800d140:	eef0 0a68 	vmov.f32	s1, s17
 800d144:	f000 f884 	bl	800d250 <sin>
 800d148:	4632      	mov	r2, r6
 800d14a:	463b      	mov	r3, r7
 800d14c:	ec51 0b10 	vmov	r0, r1, d0
 800d150:	f7f3 fa7a 	bl	8000648 <__aeabi_dmul>
 800d154:	eeb0 0a48 	vmov.f32	s0, s16
 800d158:	eef0 0a68 	vmov.f32	s1, s17
 800d15c:	4604      	mov	r4, r0
 800d15e:	460d      	mov	r5, r1
 800d160:	f000 f822 	bl	800d1a8 <cos>
 800d164:	4632      	mov	r2, r6
 800d166:	ec51 0b10 	vmov	r0, r1, d0
 800d16a:	463b      	mov	r3, r7
 800d16c:	f7f3 fa6c 	bl	8000648 <__aeabi_dmul>
 800d170:	2200      	movs	r2, #0
 800d172:	4606      	mov	r6, r0
 800d174:	460f      	mov	r7, r1
 800d176:	2300      	movs	r3, #0
 800d178:	4620      	mov	r0, r4
 800d17a:	4629      	mov	r1, r5
 800d17c:	f7f3 fa64 	bl	8000648 <__aeabi_dmul>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 f8a8 	bl	80002dc <__adddf3>
 800d18c:	ecbd 8b06 	vpop	{d8-d10}
 800d190:	ec41 0b10 	vmov	d0, r0, r1
 800d194:	ec45 4b11 	vmov	d1, r4, r5
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d19c <cimag>:
 800d19c:	eeb0 0a41 	vmov.f32	s0, s2
 800d1a0:	eef0 0a61 	vmov.f32	s1, s3
 800d1a4:	4770      	bx	lr

0800d1a6 <creal>:
 800d1a6:	4770      	bx	lr

0800d1a8 <cos>:
 800d1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1aa:	ec53 2b10 	vmov	r2, r3, d0
 800d1ae:	4826      	ldr	r0, [pc, #152]	; (800d248 <cos+0xa0>)
 800d1b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d1b4:	4281      	cmp	r1, r0
 800d1b6:	dc06      	bgt.n	800d1c6 <cos+0x1e>
 800d1b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d240 <cos+0x98>
 800d1bc:	b005      	add	sp, #20
 800d1be:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1c2:	f000 bc75 	b.w	800dab0 <__kernel_cos>
 800d1c6:	4821      	ldr	r0, [pc, #132]	; (800d24c <cos+0xa4>)
 800d1c8:	4281      	cmp	r1, r0
 800d1ca:	dd09      	ble.n	800d1e0 <cos+0x38>
 800d1cc:	ee10 0a10 	vmov	r0, s0
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	f7f3 f881 	bl	80002d8 <__aeabi_dsub>
 800d1d6:	ec41 0b10 	vmov	d0, r0, r1
 800d1da:	b005      	add	sp, #20
 800d1dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1e0:	4668      	mov	r0, sp
 800d1e2:	f000 fa59 	bl	800d698 <__ieee754_rem_pio2>
 800d1e6:	f000 0003 	and.w	r0, r0, #3
 800d1ea:	2801      	cmp	r0, #1
 800d1ec:	d00b      	beq.n	800d206 <cos+0x5e>
 800d1ee:	2802      	cmp	r0, #2
 800d1f0:	d016      	beq.n	800d220 <cos+0x78>
 800d1f2:	b9e0      	cbnz	r0, 800d22e <cos+0x86>
 800d1f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1f8:	ed9d 0b00 	vldr	d0, [sp]
 800d1fc:	f000 fc58 	bl	800dab0 <__kernel_cos>
 800d200:	ec51 0b10 	vmov	r0, r1, d0
 800d204:	e7e7      	b.n	800d1d6 <cos+0x2e>
 800d206:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d20a:	ed9d 0b00 	vldr	d0, [sp]
 800d20e:	f001 f867 	bl	800e2e0 <__kernel_sin>
 800d212:	ec53 2b10 	vmov	r2, r3, d0
 800d216:	ee10 0a10 	vmov	r0, s0
 800d21a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d21e:	e7da      	b.n	800d1d6 <cos+0x2e>
 800d220:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d224:	ed9d 0b00 	vldr	d0, [sp]
 800d228:	f000 fc42 	bl	800dab0 <__kernel_cos>
 800d22c:	e7f1      	b.n	800d212 <cos+0x6a>
 800d22e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d232:	ed9d 0b00 	vldr	d0, [sp]
 800d236:	2001      	movs	r0, #1
 800d238:	f001 f852 	bl	800e2e0 <__kernel_sin>
 800d23c:	e7e0      	b.n	800d200 <cos+0x58>
 800d23e:	bf00      	nop
	...
 800d248:	3fe921fb 	.word	0x3fe921fb
 800d24c:	7fefffff 	.word	0x7fefffff

0800d250 <sin>:
 800d250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d252:	ec53 2b10 	vmov	r2, r3, d0
 800d256:	4828      	ldr	r0, [pc, #160]	; (800d2f8 <sin+0xa8>)
 800d258:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d25c:	4281      	cmp	r1, r0
 800d25e:	dc07      	bgt.n	800d270 <sin+0x20>
 800d260:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d2f0 <sin+0xa0>
 800d264:	2000      	movs	r0, #0
 800d266:	b005      	add	sp, #20
 800d268:	f85d eb04 	ldr.w	lr, [sp], #4
 800d26c:	f001 b838 	b.w	800e2e0 <__kernel_sin>
 800d270:	4822      	ldr	r0, [pc, #136]	; (800d2fc <sin+0xac>)
 800d272:	4281      	cmp	r1, r0
 800d274:	dd09      	ble.n	800d28a <sin+0x3a>
 800d276:	ee10 0a10 	vmov	r0, s0
 800d27a:	4619      	mov	r1, r3
 800d27c:	f7f3 f82c 	bl	80002d8 <__aeabi_dsub>
 800d280:	ec41 0b10 	vmov	d0, r0, r1
 800d284:	b005      	add	sp, #20
 800d286:	f85d fb04 	ldr.w	pc, [sp], #4
 800d28a:	4668      	mov	r0, sp
 800d28c:	f000 fa04 	bl	800d698 <__ieee754_rem_pio2>
 800d290:	f000 0003 	and.w	r0, r0, #3
 800d294:	2801      	cmp	r0, #1
 800d296:	d00c      	beq.n	800d2b2 <sin+0x62>
 800d298:	2802      	cmp	r0, #2
 800d29a:	d011      	beq.n	800d2c0 <sin+0x70>
 800d29c:	b9f0      	cbnz	r0, 800d2dc <sin+0x8c>
 800d29e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2a2:	ed9d 0b00 	vldr	d0, [sp]
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	f001 f81a 	bl	800e2e0 <__kernel_sin>
 800d2ac:	ec51 0b10 	vmov	r0, r1, d0
 800d2b0:	e7e6      	b.n	800d280 <sin+0x30>
 800d2b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2b6:	ed9d 0b00 	vldr	d0, [sp]
 800d2ba:	f000 fbf9 	bl	800dab0 <__kernel_cos>
 800d2be:	e7f5      	b.n	800d2ac <sin+0x5c>
 800d2c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2c4:	ed9d 0b00 	vldr	d0, [sp]
 800d2c8:	2001      	movs	r0, #1
 800d2ca:	f001 f809 	bl	800e2e0 <__kernel_sin>
 800d2ce:	ec53 2b10 	vmov	r2, r3, d0
 800d2d2:	ee10 0a10 	vmov	r0, s0
 800d2d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d2da:	e7d1      	b.n	800d280 <sin+0x30>
 800d2dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2e0:	ed9d 0b00 	vldr	d0, [sp]
 800d2e4:	f000 fbe4 	bl	800dab0 <__kernel_cos>
 800d2e8:	e7f1      	b.n	800d2ce <sin+0x7e>
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w
	...
 800d2f8:	3fe921fb 	.word	0x3fe921fb
 800d2fc:	7fefffff 	.word	0x7fefffff

0800d300 <exp>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	ed2d 8b02 	vpush	{d8}
 800d306:	ec55 4b10 	vmov	r4, r5, d0
 800d30a:	f000 f841 	bl	800d390 <__ieee754_exp>
 800d30e:	eeb0 8a40 	vmov.f32	s16, s0
 800d312:	eef0 8a60 	vmov.f32	s17, s1
 800d316:	ec45 4b10 	vmov	d0, r4, r5
 800d31a:	f001 f8d8 	bl	800e4ce <finite>
 800d31e:	b168      	cbz	r0, 800d33c <exp+0x3c>
 800d320:	a317      	add	r3, pc, #92	; (adr r3, 800d380 <exp+0x80>)
 800d322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d326:	4620      	mov	r0, r4
 800d328:	4629      	mov	r1, r5
 800d32a:	f7f3 fc1d 	bl	8000b68 <__aeabi_dcmpgt>
 800d32e:	b160      	cbz	r0, 800d34a <exp+0x4a>
 800d330:	f7fd f8b4 	bl	800a49c <__errno>
 800d334:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800d370 <exp+0x70>
 800d338:	2322      	movs	r3, #34	; 0x22
 800d33a:	6003      	str	r3, [r0, #0]
 800d33c:	eeb0 0a48 	vmov.f32	s0, s16
 800d340:	eef0 0a68 	vmov.f32	s1, s17
 800d344:	ecbd 8b02 	vpop	{d8}
 800d348:	bd38      	pop	{r3, r4, r5, pc}
 800d34a:	a30f      	add	r3, pc, #60	; (adr r3, 800d388 <exp+0x88>)
 800d34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d350:	4620      	mov	r0, r4
 800d352:	4629      	mov	r1, r5
 800d354:	f7f3 fbea 	bl	8000b2c <__aeabi_dcmplt>
 800d358:	2800      	cmp	r0, #0
 800d35a:	d0ef      	beq.n	800d33c <exp+0x3c>
 800d35c:	f7fd f89e 	bl	800a49c <__errno>
 800d360:	2322      	movs	r3, #34	; 0x22
 800d362:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d378 <exp+0x78>
 800d366:	6003      	str	r3, [r0, #0]
 800d368:	e7e8      	b.n	800d33c <exp+0x3c>
 800d36a:	bf00      	nop
 800d36c:	f3af 8000 	nop.w
 800d370:	00000000 	.word	0x00000000
 800d374:	7ff00000 	.word	0x7ff00000
	...
 800d380:	fefa39ef 	.word	0xfefa39ef
 800d384:	40862e42 	.word	0x40862e42
 800d388:	d52d3051 	.word	0xd52d3051
 800d38c:	c0874910 	.word	0xc0874910

0800d390 <__ieee754_exp>:
 800d390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d394:	ec55 4b10 	vmov	r4, r5, d0
 800d398:	49b5      	ldr	r1, [pc, #724]	; (800d670 <__ieee754_exp+0x2e0>)
 800d39a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d39e:	428b      	cmp	r3, r1
 800d3a0:	ed2d 8b04 	vpush	{d8-d9}
 800d3a4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d3a8:	d93d      	bls.n	800d426 <__ieee754_exp+0x96>
 800d3aa:	49b2      	ldr	r1, [pc, #712]	; (800d674 <__ieee754_exp+0x2e4>)
 800d3ac:	428b      	cmp	r3, r1
 800d3ae:	d918      	bls.n	800d3e2 <__ieee754_exp+0x52>
 800d3b0:	ee10 3a10 	vmov	r3, s0
 800d3b4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	d009      	beq.n	800d3d0 <__ieee754_exp+0x40>
 800d3bc:	ee10 2a10 	vmov	r2, s0
 800d3c0:	462b      	mov	r3, r5
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	f7f2 ff89 	bl	80002dc <__adddf3>
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	460d      	mov	r5, r1
 800d3ce:	e002      	b.n	800d3d6 <__ieee754_exp+0x46>
 800d3d0:	b10e      	cbz	r6, 800d3d6 <__ieee754_exp+0x46>
 800d3d2:	2400      	movs	r4, #0
 800d3d4:	2500      	movs	r5, #0
 800d3d6:	ecbd 8b04 	vpop	{d8-d9}
 800d3da:	ec45 4b10 	vmov	d0, r4, r5
 800d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e2:	a38d      	add	r3, pc, #564	; (adr r3, 800d618 <__ieee754_exp+0x288>)
 800d3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e8:	ee10 0a10 	vmov	r0, s0
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	f7f3 fbbb 	bl	8000b68 <__aeabi_dcmpgt>
 800d3f2:	4607      	mov	r7, r0
 800d3f4:	b130      	cbz	r0, 800d404 <__ieee754_exp+0x74>
 800d3f6:	ecbd 8b04 	vpop	{d8-d9}
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d400:	f001 b853 	b.w	800e4aa <__math_oflow>
 800d404:	a386      	add	r3, pc, #536	; (adr r3, 800d620 <__ieee754_exp+0x290>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	4620      	mov	r0, r4
 800d40c:	4629      	mov	r1, r5
 800d40e:	f7f3 fb8d 	bl	8000b2c <__aeabi_dcmplt>
 800d412:	2800      	cmp	r0, #0
 800d414:	f000 808b 	beq.w	800d52e <__ieee754_exp+0x19e>
 800d418:	ecbd 8b04 	vpop	{d8-d9}
 800d41c:	4638      	mov	r0, r7
 800d41e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d422:	f001 b839 	b.w	800e498 <__math_uflow>
 800d426:	4a94      	ldr	r2, [pc, #592]	; (800d678 <__ieee754_exp+0x2e8>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	f240 80ac 	bls.w	800d586 <__ieee754_exp+0x1f6>
 800d42e:	4a93      	ldr	r2, [pc, #588]	; (800d67c <__ieee754_exp+0x2ec>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d87c      	bhi.n	800d52e <__ieee754_exp+0x19e>
 800d434:	4b92      	ldr	r3, [pc, #584]	; (800d680 <__ieee754_exp+0x2f0>)
 800d436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43e:	ee10 0a10 	vmov	r0, s0
 800d442:	4629      	mov	r1, r5
 800d444:	f7f2 ff48 	bl	80002d8 <__aeabi_dsub>
 800d448:	4b8e      	ldr	r3, [pc, #568]	; (800d684 <__ieee754_exp+0x2f4>)
 800d44a:	00f7      	lsls	r7, r6, #3
 800d44c:	443b      	add	r3, r7
 800d44e:	ed93 7b00 	vldr	d7, [r3]
 800d452:	f1c6 0a01 	rsb	sl, r6, #1
 800d456:	4680      	mov	r8, r0
 800d458:	4689      	mov	r9, r1
 800d45a:	ebaa 0a06 	sub.w	sl, sl, r6
 800d45e:	eeb0 8a47 	vmov.f32	s16, s14
 800d462:	eef0 8a67 	vmov.f32	s17, s15
 800d466:	ec53 2b18 	vmov	r2, r3, d8
 800d46a:	4640      	mov	r0, r8
 800d46c:	4649      	mov	r1, r9
 800d46e:	f7f2 ff33 	bl	80002d8 <__aeabi_dsub>
 800d472:	4604      	mov	r4, r0
 800d474:	460d      	mov	r5, r1
 800d476:	4622      	mov	r2, r4
 800d478:	462b      	mov	r3, r5
 800d47a:	4620      	mov	r0, r4
 800d47c:	4629      	mov	r1, r5
 800d47e:	f7f3 f8e3 	bl	8000648 <__aeabi_dmul>
 800d482:	a369      	add	r3, pc, #420	; (adr r3, 800d628 <__ieee754_exp+0x298>)
 800d484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d488:	4606      	mov	r6, r0
 800d48a:	460f      	mov	r7, r1
 800d48c:	f7f3 f8dc 	bl	8000648 <__aeabi_dmul>
 800d490:	a367      	add	r3, pc, #412	; (adr r3, 800d630 <__ieee754_exp+0x2a0>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 ff1f 	bl	80002d8 <__aeabi_dsub>
 800d49a:	4632      	mov	r2, r6
 800d49c:	463b      	mov	r3, r7
 800d49e:	f7f3 f8d3 	bl	8000648 <__aeabi_dmul>
 800d4a2:	a365      	add	r3, pc, #404	; (adr r3, 800d638 <__ieee754_exp+0x2a8>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f2 ff18 	bl	80002dc <__adddf3>
 800d4ac:	4632      	mov	r2, r6
 800d4ae:	463b      	mov	r3, r7
 800d4b0:	f7f3 f8ca 	bl	8000648 <__aeabi_dmul>
 800d4b4:	a362      	add	r3, pc, #392	; (adr r3, 800d640 <__ieee754_exp+0x2b0>)
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	f7f2 ff0d 	bl	80002d8 <__aeabi_dsub>
 800d4be:	4632      	mov	r2, r6
 800d4c0:	463b      	mov	r3, r7
 800d4c2:	f7f3 f8c1 	bl	8000648 <__aeabi_dmul>
 800d4c6:	a360      	add	r3, pc, #384	; (adr r3, 800d648 <__ieee754_exp+0x2b8>)
 800d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4cc:	f7f2 ff06 	bl	80002dc <__adddf3>
 800d4d0:	4632      	mov	r2, r6
 800d4d2:	463b      	mov	r3, r7
 800d4d4:	f7f3 f8b8 	bl	8000648 <__aeabi_dmul>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	460b      	mov	r3, r1
 800d4dc:	4620      	mov	r0, r4
 800d4de:	4629      	mov	r1, r5
 800d4e0:	f7f2 fefa 	bl	80002d8 <__aeabi_dsub>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4606      	mov	r6, r0
 800d4ea:	460f      	mov	r7, r1
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f7f3 f8aa 	bl	8000648 <__aeabi_dmul>
 800d4f4:	ec41 0b19 	vmov	d9, r0, r1
 800d4f8:	f1ba 0f00 	cmp.w	sl, #0
 800d4fc:	d15d      	bne.n	800d5ba <__ieee754_exp+0x22a>
 800d4fe:	2200      	movs	r2, #0
 800d500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	f7f2 fee6 	bl	80002d8 <__aeabi_dsub>
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	ec51 0b19 	vmov	r0, r1, d9
 800d514:	f7f3 f9c2 	bl	800089c <__aeabi_ddiv>
 800d518:	4622      	mov	r2, r4
 800d51a:	462b      	mov	r3, r5
 800d51c:	f7f2 fedc 	bl	80002d8 <__aeabi_dsub>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	2000      	movs	r0, #0
 800d526:	4958      	ldr	r1, [pc, #352]	; (800d688 <__ieee754_exp+0x2f8>)
 800d528:	f7f2 fed6 	bl	80002d8 <__aeabi_dsub>
 800d52c:	e74d      	b.n	800d3ca <__ieee754_exp+0x3a>
 800d52e:	4857      	ldr	r0, [pc, #348]	; (800d68c <__ieee754_exp+0x2fc>)
 800d530:	a347      	add	r3, pc, #284	; (adr r3, 800d650 <__ieee754_exp+0x2c0>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d53a:	4629      	mov	r1, r5
 800d53c:	4620      	mov	r0, r4
 800d53e:	f7f3 f883 	bl	8000648 <__aeabi_dmul>
 800d542:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d546:	f7f2 fec9 	bl	80002dc <__adddf3>
 800d54a:	f7f3 fb2d 	bl	8000ba8 <__aeabi_d2iz>
 800d54e:	4682      	mov	sl, r0
 800d550:	f7f3 f810 	bl	8000574 <__aeabi_i2d>
 800d554:	a340      	add	r3, pc, #256	; (adr r3, 800d658 <__ieee754_exp+0x2c8>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	4606      	mov	r6, r0
 800d55c:	460f      	mov	r7, r1
 800d55e:	f7f3 f873 	bl	8000648 <__aeabi_dmul>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	4620      	mov	r0, r4
 800d568:	4629      	mov	r1, r5
 800d56a:	f7f2 feb5 	bl	80002d8 <__aeabi_dsub>
 800d56e:	a33c      	add	r3, pc, #240	; (adr r3, 800d660 <__ieee754_exp+0x2d0>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	4680      	mov	r8, r0
 800d576:	4689      	mov	r9, r1
 800d578:	4630      	mov	r0, r6
 800d57a:	4639      	mov	r1, r7
 800d57c:	f7f3 f864 	bl	8000648 <__aeabi_dmul>
 800d580:	ec41 0b18 	vmov	d8, r0, r1
 800d584:	e76f      	b.n	800d466 <__ieee754_exp+0xd6>
 800d586:	4a42      	ldr	r2, [pc, #264]	; (800d690 <__ieee754_exp+0x300>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d811      	bhi.n	800d5b0 <__ieee754_exp+0x220>
 800d58c:	a336      	add	r3, pc, #216	; (adr r3, 800d668 <__ieee754_exp+0x2d8>)
 800d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d592:	ee10 0a10 	vmov	r0, s0
 800d596:	4629      	mov	r1, r5
 800d598:	f7f2 fea0 	bl	80002dc <__adddf3>
 800d59c:	4b3a      	ldr	r3, [pc, #232]	; (800d688 <__ieee754_exp+0x2f8>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f7f3 fae2 	bl	8000b68 <__aeabi_dcmpgt>
 800d5a4:	b138      	cbz	r0, 800d5b6 <__ieee754_exp+0x226>
 800d5a6:	4b38      	ldr	r3, [pc, #224]	; (800d688 <__ieee754_exp+0x2f8>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	e70a      	b.n	800d3c6 <__ieee754_exp+0x36>
 800d5b0:	f04f 0a00 	mov.w	sl, #0
 800d5b4:	e75f      	b.n	800d476 <__ieee754_exp+0xe6>
 800d5b6:	4682      	mov	sl, r0
 800d5b8:	e75d      	b.n	800d476 <__ieee754_exp+0xe6>
 800d5ba:	4632      	mov	r2, r6
 800d5bc:	463b      	mov	r3, r7
 800d5be:	2000      	movs	r0, #0
 800d5c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d5c4:	f7f2 fe88 	bl	80002d8 <__aeabi_dsub>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	ec51 0b19 	vmov	r0, r1, d9
 800d5d0:	f7f3 f964 	bl	800089c <__aeabi_ddiv>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	ec51 0b18 	vmov	r0, r1, d8
 800d5dc:	f7f2 fe7c 	bl	80002d8 <__aeabi_dsub>
 800d5e0:	4642      	mov	r2, r8
 800d5e2:	464b      	mov	r3, r9
 800d5e4:	f7f2 fe78 	bl	80002d8 <__aeabi_dsub>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	4926      	ldr	r1, [pc, #152]	; (800d688 <__ieee754_exp+0x2f8>)
 800d5f0:	f7f2 fe72 	bl	80002d8 <__aeabi_dsub>
 800d5f4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d5f8:	4592      	cmp	sl, r2
 800d5fa:	db02      	blt.n	800d602 <__ieee754_exp+0x272>
 800d5fc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d600:	e6e3      	b.n	800d3ca <__ieee754_exp+0x3a>
 800d602:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d606:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d60a:	2200      	movs	r2, #0
 800d60c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d610:	f7f3 f81a 	bl	8000648 <__aeabi_dmul>
 800d614:	e6d9      	b.n	800d3ca <__ieee754_exp+0x3a>
 800d616:	bf00      	nop
 800d618:	fefa39ef 	.word	0xfefa39ef
 800d61c:	40862e42 	.word	0x40862e42
 800d620:	d52d3051 	.word	0xd52d3051
 800d624:	c0874910 	.word	0xc0874910
 800d628:	72bea4d0 	.word	0x72bea4d0
 800d62c:	3e663769 	.word	0x3e663769
 800d630:	c5d26bf1 	.word	0xc5d26bf1
 800d634:	3ebbbd41 	.word	0x3ebbbd41
 800d638:	af25de2c 	.word	0xaf25de2c
 800d63c:	3f11566a 	.word	0x3f11566a
 800d640:	16bebd93 	.word	0x16bebd93
 800d644:	3f66c16c 	.word	0x3f66c16c
 800d648:	5555553e 	.word	0x5555553e
 800d64c:	3fc55555 	.word	0x3fc55555
 800d650:	652b82fe 	.word	0x652b82fe
 800d654:	3ff71547 	.word	0x3ff71547
 800d658:	fee00000 	.word	0xfee00000
 800d65c:	3fe62e42 	.word	0x3fe62e42
 800d660:	35793c76 	.word	0x35793c76
 800d664:	3dea39ef 	.word	0x3dea39ef
 800d668:	8800759c 	.word	0x8800759c
 800d66c:	7e37e43c 	.word	0x7e37e43c
 800d670:	40862e41 	.word	0x40862e41
 800d674:	7fefffff 	.word	0x7fefffff
 800d678:	3fd62e42 	.word	0x3fd62e42
 800d67c:	3ff0a2b1 	.word	0x3ff0a2b1
 800d680:	0800eca8 	.word	0x0800eca8
 800d684:	0800ecb8 	.word	0x0800ecb8
 800d688:	3ff00000 	.word	0x3ff00000
 800d68c:	0800ec98 	.word	0x0800ec98
 800d690:	3defffff 	.word	0x3defffff
 800d694:	00000000 	.word	0x00000000

0800d698 <__ieee754_rem_pio2>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	ed2d 8b02 	vpush	{d8}
 800d6a0:	ec55 4b10 	vmov	r4, r5, d0
 800d6a4:	4bca      	ldr	r3, [pc, #808]	; (800d9d0 <__ieee754_rem_pio2+0x338>)
 800d6a6:	b08b      	sub	sp, #44	; 0x2c
 800d6a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d6ac:	4598      	cmp	r8, r3
 800d6ae:	4682      	mov	sl, r0
 800d6b0:	9502      	str	r5, [sp, #8]
 800d6b2:	dc08      	bgt.n	800d6c6 <__ieee754_rem_pio2+0x2e>
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	ed80 0b00 	vstr	d0, [r0]
 800d6bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d6c0:	f04f 0b00 	mov.w	fp, #0
 800d6c4:	e028      	b.n	800d718 <__ieee754_rem_pio2+0x80>
 800d6c6:	4bc3      	ldr	r3, [pc, #780]	; (800d9d4 <__ieee754_rem_pio2+0x33c>)
 800d6c8:	4598      	cmp	r8, r3
 800d6ca:	dc78      	bgt.n	800d7be <__ieee754_rem_pio2+0x126>
 800d6cc:	9b02      	ldr	r3, [sp, #8]
 800d6ce:	4ec2      	ldr	r6, [pc, #776]	; (800d9d8 <__ieee754_rem_pio2+0x340>)
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	ee10 0a10 	vmov	r0, s0
 800d6d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800d998 <__ieee754_rem_pio2+0x300>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	4629      	mov	r1, r5
 800d6de:	dd39      	ble.n	800d754 <__ieee754_rem_pio2+0xbc>
 800d6e0:	f7f2 fdfa 	bl	80002d8 <__aeabi_dsub>
 800d6e4:	45b0      	cmp	r8, r6
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	d01b      	beq.n	800d724 <__ieee754_rem_pio2+0x8c>
 800d6ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x308>)
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f7f2 fdf1 	bl	80002d8 <__aeabi_dsub>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	e9ca 2300 	strd	r2, r3, [sl]
 800d6fe:	4620      	mov	r0, r4
 800d700:	4629      	mov	r1, r5
 800d702:	f7f2 fde9 	bl	80002d8 <__aeabi_dsub>
 800d706:	a3a6      	add	r3, pc, #664	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x308>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f2 fde4 	bl	80002d8 <__aeabi_dsub>
 800d710:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d714:	f04f 0b01 	mov.w	fp, #1
 800d718:	4658      	mov	r0, fp
 800d71a:	b00b      	add	sp, #44	; 0x2c
 800d71c:	ecbd 8b02 	vpop	{d8}
 800d720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d724:	a3a0      	add	r3, pc, #640	; (adr r3, 800d9a8 <__ieee754_rem_pio2+0x310>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	f7f2 fdd5 	bl	80002d8 <__aeabi_dsub>
 800d72e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d9b0 <__ieee754_rem_pio2+0x318>)
 800d730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d734:	4604      	mov	r4, r0
 800d736:	460d      	mov	r5, r1
 800d738:	f7f2 fdce 	bl	80002d8 <__aeabi_dsub>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	e9ca 2300 	strd	r2, r3, [sl]
 800d744:	4620      	mov	r0, r4
 800d746:	4629      	mov	r1, r5
 800d748:	f7f2 fdc6 	bl	80002d8 <__aeabi_dsub>
 800d74c:	a398      	add	r3, pc, #608	; (adr r3, 800d9b0 <__ieee754_rem_pio2+0x318>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	e7db      	b.n	800d70c <__ieee754_rem_pio2+0x74>
 800d754:	f7f2 fdc2 	bl	80002dc <__adddf3>
 800d758:	45b0      	cmp	r8, r6
 800d75a:	4604      	mov	r4, r0
 800d75c:	460d      	mov	r5, r1
 800d75e:	d016      	beq.n	800d78e <__ieee754_rem_pio2+0xf6>
 800d760:	a38f      	add	r3, pc, #572	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x308>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	f7f2 fdb9 	bl	80002dc <__adddf3>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	e9ca 2300 	strd	r2, r3, [sl]
 800d772:	4620      	mov	r0, r4
 800d774:	4629      	mov	r1, r5
 800d776:	f7f2 fdaf 	bl	80002d8 <__aeabi_dsub>
 800d77a:	a389      	add	r3, pc, #548	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x308>)
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	f7f2 fdac 	bl	80002dc <__adddf3>
 800d784:	f04f 3bff 	mov.w	fp, #4294967295
 800d788:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d78c:	e7c4      	b.n	800d718 <__ieee754_rem_pio2+0x80>
 800d78e:	a386      	add	r3, pc, #536	; (adr r3, 800d9a8 <__ieee754_rem_pio2+0x310>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f7f2 fda2 	bl	80002dc <__adddf3>
 800d798:	a385      	add	r3, pc, #532	; (adr r3, 800d9b0 <__ieee754_rem_pio2+0x318>)
 800d79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79e:	4604      	mov	r4, r0
 800d7a0:	460d      	mov	r5, r1
 800d7a2:	f7f2 fd9b 	bl	80002dc <__adddf3>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	e9ca 2300 	strd	r2, r3, [sl]
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	f7f2 fd91 	bl	80002d8 <__aeabi_dsub>
 800d7b6:	a37e      	add	r3, pc, #504	; (adr r3, 800d9b0 <__ieee754_rem_pio2+0x318>)
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	e7e0      	b.n	800d780 <__ieee754_rem_pio2+0xe8>
 800d7be:	4b87      	ldr	r3, [pc, #540]	; (800d9dc <__ieee754_rem_pio2+0x344>)
 800d7c0:	4598      	cmp	r8, r3
 800d7c2:	f300 80d9 	bgt.w	800d978 <__ieee754_rem_pio2+0x2e0>
 800d7c6:	f000 fe79 	bl	800e4bc <fabs>
 800d7ca:	ec55 4b10 	vmov	r4, r5, d0
 800d7ce:	ee10 0a10 	vmov	r0, s0
 800d7d2:	a379      	add	r3, pc, #484	; (adr r3, 800d9b8 <__ieee754_rem_pio2+0x320>)
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	4629      	mov	r1, r5
 800d7da:	f7f2 ff35 	bl	8000648 <__aeabi_dmul>
 800d7de:	4b80      	ldr	r3, [pc, #512]	; (800d9e0 <__ieee754_rem_pio2+0x348>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f7f2 fd7b 	bl	80002dc <__adddf3>
 800d7e6:	f7f3 f9df 	bl	8000ba8 <__aeabi_d2iz>
 800d7ea:	4683      	mov	fp, r0
 800d7ec:	f7f2 fec2 	bl	8000574 <__aeabi_i2d>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	ec43 2b18 	vmov	d8, r2, r3
 800d7f8:	a367      	add	r3, pc, #412	; (adr r3, 800d998 <__ieee754_rem_pio2+0x300>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 ff23 	bl	8000648 <__aeabi_dmul>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4620      	mov	r0, r4
 800d808:	4629      	mov	r1, r5
 800d80a:	f7f2 fd65 	bl	80002d8 <__aeabi_dsub>
 800d80e:	a364      	add	r3, pc, #400	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x308>)
 800d810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d814:	4606      	mov	r6, r0
 800d816:	460f      	mov	r7, r1
 800d818:	ec51 0b18 	vmov	r0, r1, d8
 800d81c:	f7f2 ff14 	bl	8000648 <__aeabi_dmul>
 800d820:	f1bb 0f1f 	cmp.w	fp, #31
 800d824:	4604      	mov	r4, r0
 800d826:	460d      	mov	r5, r1
 800d828:	dc0d      	bgt.n	800d846 <__ieee754_rem_pio2+0x1ae>
 800d82a:	4b6e      	ldr	r3, [pc, #440]	; (800d9e4 <__ieee754_rem_pio2+0x34c>)
 800d82c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d834:	4543      	cmp	r3, r8
 800d836:	d006      	beq.n	800d846 <__ieee754_rem_pio2+0x1ae>
 800d838:	4622      	mov	r2, r4
 800d83a:	462b      	mov	r3, r5
 800d83c:	4630      	mov	r0, r6
 800d83e:	4639      	mov	r1, r7
 800d840:	f7f2 fd4a 	bl	80002d8 <__aeabi_dsub>
 800d844:	e00f      	b.n	800d866 <__ieee754_rem_pio2+0x1ce>
 800d846:	462b      	mov	r3, r5
 800d848:	4622      	mov	r2, r4
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f2 fd43 	bl	80002d8 <__aeabi_dsub>
 800d852:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d856:	9303      	str	r3, [sp, #12]
 800d858:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d85c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d860:	f1b8 0f10 	cmp.w	r8, #16
 800d864:	dc02      	bgt.n	800d86c <__ieee754_rem_pio2+0x1d4>
 800d866:	e9ca 0100 	strd	r0, r1, [sl]
 800d86a:	e039      	b.n	800d8e0 <__ieee754_rem_pio2+0x248>
 800d86c:	a34e      	add	r3, pc, #312	; (adr r3, 800d9a8 <__ieee754_rem_pio2+0x310>)
 800d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d872:	ec51 0b18 	vmov	r0, r1, d8
 800d876:	f7f2 fee7 	bl	8000648 <__aeabi_dmul>
 800d87a:	4604      	mov	r4, r0
 800d87c:	460d      	mov	r5, r1
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	4630      	mov	r0, r6
 800d884:	4639      	mov	r1, r7
 800d886:	f7f2 fd27 	bl	80002d8 <__aeabi_dsub>
 800d88a:	4602      	mov	r2, r0
 800d88c:	460b      	mov	r3, r1
 800d88e:	4680      	mov	r8, r0
 800d890:	4689      	mov	r9, r1
 800d892:	4630      	mov	r0, r6
 800d894:	4639      	mov	r1, r7
 800d896:	f7f2 fd1f 	bl	80002d8 <__aeabi_dsub>
 800d89a:	4622      	mov	r2, r4
 800d89c:	462b      	mov	r3, r5
 800d89e:	f7f2 fd1b 	bl	80002d8 <__aeabi_dsub>
 800d8a2:	a343      	add	r3, pc, #268	; (adr r3, 800d9b0 <__ieee754_rem_pio2+0x318>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	460d      	mov	r5, r1
 800d8ac:	ec51 0b18 	vmov	r0, r1, d8
 800d8b0:	f7f2 feca 	bl	8000648 <__aeabi_dmul>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	f7f2 fd0e 	bl	80002d8 <__aeabi_dsub>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	4649      	mov	r1, r9
 800d8c8:	f7f2 fd06 	bl	80002d8 <__aeabi_dsub>
 800d8cc:	9a03      	ldr	r2, [sp, #12]
 800d8ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	2b31      	cmp	r3, #49	; 0x31
 800d8d6:	dc24      	bgt.n	800d922 <__ieee754_rem_pio2+0x28a>
 800d8d8:	e9ca 0100 	strd	r0, r1, [sl]
 800d8dc:	4646      	mov	r6, r8
 800d8de:	464f      	mov	r7, r9
 800d8e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	4642      	mov	r2, r8
 800d8e8:	464b      	mov	r3, r9
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	f7f2 fcf4 	bl	80002d8 <__aeabi_dsub>
 800d8f0:	462b      	mov	r3, r5
 800d8f2:	4622      	mov	r2, r4
 800d8f4:	f7f2 fcf0 	bl	80002d8 <__aeabi_dsub>
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d900:	f6bf af0a 	bge.w	800d718 <__ieee754_rem_pio2+0x80>
 800d904:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d908:	f8ca 3004 	str.w	r3, [sl, #4]
 800d90c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d910:	f8ca 8000 	str.w	r8, [sl]
 800d914:	f8ca 0008 	str.w	r0, [sl, #8]
 800d918:	f8ca 300c 	str.w	r3, [sl, #12]
 800d91c:	f1cb 0b00 	rsb	fp, fp, #0
 800d920:	e6fa      	b.n	800d718 <__ieee754_rem_pio2+0x80>
 800d922:	a327      	add	r3, pc, #156	; (adr r3, 800d9c0 <__ieee754_rem_pio2+0x328>)
 800d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d928:	ec51 0b18 	vmov	r0, r1, d8
 800d92c:	f7f2 fe8c 	bl	8000648 <__aeabi_dmul>
 800d930:	4604      	mov	r4, r0
 800d932:	460d      	mov	r5, r1
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	4640      	mov	r0, r8
 800d93a:	4649      	mov	r1, r9
 800d93c:	f7f2 fccc 	bl	80002d8 <__aeabi_dsub>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	4606      	mov	r6, r0
 800d946:	460f      	mov	r7, r1
 800d948:	4640      	mov	r0, r8
 800d94a:	4649      	mov	r1, r9
 800d94c:	f7f2 fcc4 	bl	80002d8 <__aeabi_dsub>
 800d950:	4622      	mov	r2, r4
 800d952:	462b      	mov	r3, r5
 800d954:	f7f2 fcc0 	bl	80002d8 <__aeabi_dsub>
 800d958:	a31b      	add	r3, pc, #108	; (adr r3, 800d9c8 <__ieee754_rem_pio2+0x330>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	4604      	mov	r4, r0
 800d960:	460d      	mov	r5, r1
 800d962:	ec51 0b18 	vmov	r0, r1, d8
 800d966:	f7f2 fe6f 	bl	8000648 <__aeabi_dmul>
 800d96a:	4622      	mov	r2, r4
 800d96c:	462b      	mov	r3, r5
 800d96e:	f7f2 fcb3 	bl	80002d8 <__aeabi_dsub>
 800d972:	4604      	mov	r4, r0
 800d974:	460d      	mov	r5, r1
 800d976:	e75f      	b.n	800d838 <__ieee754_rem_pio2+0x1a0>
 800d978:	4b1b      	ldr	r3, [pc, #108]	; (800d9e8 <__ieee754_rem_pio2+0x350>)
 800d97a:	4598      	cmp	r8, r3
 800d97c:	dd36      	ble.n	800d9ec <__ieee754_rem_pio2+0x354>
 800d97e:	ee10 2a10 	vmov	r2, s0
 800d982:	462b      	mov	r3, r5
 800d984:	4620      	mov	r0, r4
 800d986:	4629      	mov	r1, r5
 800d988:	f7f2 fca6 	bl	80002d8 <__aeabi_dsub>
 800d98c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d990:	e9ca 0100 	strd	r0, r1, [sl]
 800d994:	e694      	b.n	800d6c0 <__ieee754_rem_pio2+0x28>
 800d996:	bf00      	nop
 800d998:	54400000 	.word	0x54400000
 800d99c:	3ff921fb 	.word	0x3ff921fb
 800d9a0:	1a626331 	.word	0x1a626331
 800d9a4:	3dd0b461 	.word	0x3dd0b461
 800d9a8:	1a600000 	.word	0x1a600000
 800d9ac:	3dd0b461 	.word	0x3dd0b461
 800d9b0:	2e037073 	.word	0x2e037073
 800d9b4:	3ba3198a 	.word	0x3ba3198a
 800d9b8:	6dc9c883 	.word	0x6dc9c883
 800d9bc:	3fe45f30 	.word	0x3fe45f30
 800d9c0:	2e000000 	.word	0x2e000000
 800d9c4:	3ba3198a 	.word	0x3ba3198a
 800d9c8:	252049c1 	.word	0x252049c1
 800d9cc:	397b839a 	.word	0x397b839a
 800d9d0:	3fe921fb 	.word	0x3fe921fb
 800d9d4:	4002d97b 	.word	0x4002d97b
 800d9d8:	3ff921fb 	.word	0x3ff921fb
 800d9dc:	413921fb 	.word	0x413921fb
 800d9e0:	3fe00000 	.word	0x3fe00000
 800d9e4:	0800ecc8 	.word	0x0800ecc8
 800d9e8:	7fefffff 	.word	0x7fefffff
 800d9ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d9f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d9f4:	ee10 0a10 	vmov	r0, s0
 800d9f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d9fc:	ee10 6a10 	vmov	r6, s0
 800da00:	460f      	mov	r7, r1
 800da02:	f7f3 f8d1 	bl	8000ba8 <__aeabi_d2iz>
 800da06:	f7f2 fdb5 	bl	8000574 <__aeabi_i2d>
 800da0a:	4602      	mov	r2, r0
 800da0c:	460b      	mov	r3, r1
 800da0e:	4630      	mov	r0, r6
 800da10:	4639      	mov	r1, r7
 800da12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da16:	f7f2 fc5f 	bl	80002d8 <__aeabi_dsub>
 800da1a:	4b23      	ldr	r3, [pc, #140]	; (800daa8 <__ieee754_rem_pio2+0x410>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	f7f2 fe13 	bl	8000648 <__aeabi_dmul>
 800da22:	460f      	mov	r7, r1
 800da24:	4606      	mov	r6, r0
 800da26:	f7f3 f8bf 	bl	8000ba8 <__aeabi_d2iz>
 800da2a:	f7f2 fda3 	bl	8000574 <__aeabi_i2d>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4630      	mov	r0, r6
 800da34:	4639      	mov	r1, r7
 800da36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da3a:	f7f2 fc4d 	bl	80002d8 <__aeabi_dsub>
 800da3e:	4b1a      	ldr	r3, [pc, #104]	; (800daa8 <__ieee754_rem_pio2+0x410>)
 800da40:	2200      	movs	r2, #0
 800da42:	f7f2 fe01 	bl	8000648 <__aeabi_dmul>
 800da46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da4a:	ad04      	add	r5, sp, #16
 800da4c:	f04f 0803 	mov.w	r8, #3
 800da50:	46a9      	mov	r9, r5
 800da52:	2600      	movs	r6, #0
 800da54:	2700      	movs	r7, #0
 800da56:	4632      	mov	r2, r6
 800da58:	463b      	mov	r3, r7
 800da5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800da5e:	46c3      	mov	fp, r8
 800da60:	3d08      	subs	r5, #8
 800da62:	f108 38ff 	add.w	r8, r8, #4294967295
 800da66:	f7f3 f857 	bl	8000b18 <__aeabi_dcmpeq>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d1f3      	bne.n	800da56 <__ieee754_rem_pio2+0x3be>
 800da6e:	4b0f      	ldr	r3, [pc, #60]	; (800daac <__ieee754_rem_pio2+0x414>)
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	2302      	movs	r3, #2
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	4622      	mov	r2, r4
 800da78:	465b      	mov	r3, fp
 800da7a:	4651      	mov	r1, sl
 800da7c:	4648      	mov	r0, r9
 800da7e:	f000 f8df 	bl	800dc40 <__kernel_rem_pio2>
 800da82:	9b02      	ldr	r3, [sp, #8]
 800da84:	2b00      	cmp	r3, #0
 800da86:	4683      	mov	fp, r0
 800da88:	f6bf ae46 	bge.w	800d718 <__ieee754_rem_pio2+0x80>
 800da8c:	e9da 2100 	ldrd	r2, r1, [sl]
 800da90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da94:	e9ca 2300 	strd	r2, r3, [sl]
 800da98:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800da9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800daa0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800daa4:	e73a      	b.n	800d91c <__ieee754_rem_pio2+0x284>
 800daa6:	bf00      	nop
 800daa8:	41700000 	.word	0x41700000
 800daac:	0800ed48 	.word	0x0800ed48

0800dab0 <__kernel_cos>:
 800dab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	ec57 6b10 	vmov	r6, r7, d0
 800dab8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dabc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dac0:	ed8d 1b00 	vstr	d1, [sp]
 800dac4:	da07      	bge.n	800dad6 <__kernel_cos+0x26>
 800dac6:	ee10 0a10 	vmov	r0, s0
 800daca:	4639      	mov	r1, r7
 800dacc:	f7f3 f86c 	bl	8000ba8 <__aeabi_d2iz>
 800dad0:	2800      	cmp	r0, #0
 800dad2:	f000 8088 	beq.w	800dbe6 <__kernel_cos+0x136>
 800dad6:	4632      	mov	r2, r6
 800dad8:	463b      	mov	r3, r7
 800dada:	4630      	mov	r0, r6
 800dadc:	4639      	mov	r1, r7
 800dade:	f7f2 fdb3 	bl	8000648 <__aeabi_dmul>
 800dae2:	4b51      	ldr	r3, [pc, #324]	; (800dc28 <__kernel_cos+0x178>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	460d      	mov	r5, r1
 800daea:	f7f2 fdad 	bl	8000648 <__aeabi_dmul>
 800daee:	a340      	add	r3, pc, #256	; (adr r3, 800dbf0 <__kernel_cos+0x140>)
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	4682      	mov	sl, r0
 800daf6:	468b      	mov	fp, r1
 800daf8:	4620      	mov	r0, r4
 800dafa:	4629      	mov	r1, r5
 800dafc:	f7f2 fda4 	bl	8000648 <__aeabi_dmul>
 800db00:	a33d      	add	r3, pc, #244	; (adr r3, 800dbf8 <__kernel_cos+0x148>)
 800db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db06:	f7f2 fbe9 	bl	80002dc <__adddf3>
 800db0a:	4622      	mov	r2, r4
 800db0c:	462b      	mov	r3, r5
 800db0e:	f7f2 fd9b 	bl	8000648 <__aeabi_dmul>
 800db12:	a33b      	add	r3, pc, #236	; (adr r3, 800dc00 <__kernel_cos+0x150>)
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	f7f2 fbde 	bl	80002d8 <__aeabi_dsub>
 800db1c:	4622      	mov	r2, r4
 800db1e:	462b      	mov	r3, r5
 800db20:	f7f2 fd92 	bl	8000648 <__aeabi_dmul>
 800db24:	a338      	add	r3, pc, #224	; (adr r3, 800dc08 <__kernel_cos+0x158>)
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	f7f2 fbd7 	bl	80002dc <__adddf3>
 800db2e:	4622      	mov	r2, r4
 800db30:	462b      	mov	r3, r5
 800db32:	f7f2 fd89 	bl	8000648 <__aeabi_dmul>
 800db36:	a336      	add	r3, pc, #216	; (adr r3, 800dc10 <__kernel_cos+0x160>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	f7f2 fbcc 	bl	80002d8 <__aeabi_dsub>
 800db40:	4622      	mov	r2, r4
 800db42:	462b      	mov	r3, r5
 800db44:	f7f2 fd80 	bl	8000648 <__aeabi_dmul>
 800db48:	a333      	add	r3, pc, #204	; (adr r3, 800dc18 <__kernel_cos+0x168>)
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f7f2 fbc5 	bl	80002dc <__adddf3>
 800db52:	4622      	mov	r2, r4
 800db54:	462b      	mov	r3, r5
 800db56:	f7f2 fd77 	bl	8000648 <__aeabi_dmul>
 800db5a:	4622      	mov	r2, r4
 800db5c:	462b      	mov	r3, r5
 800db5e:	f7f2 fd73 	bl	8000648 <__aeabi_dmul>
 800db62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db66:	4604      	mov	r4, r0
 800db68:	460d      	mov	r5, r1
 800db6a:	4630      	mov	r0, r6
 800db6c:	4639      	mov	r1, r7
 800db6e:	f7f2 fd6b 	bl	8000648 <__aeabi_dmul>
 800db72:	460b      	mov	r3, r1
 800db74:	4602      	mov	r2, r0
 800db76:	4629      	mov	r1, r5
 800db78:	4620      	mov	r0, r4
 800db7a:	f7f2 fbad 	bl	80002d8 <__aeabi_dsub>
 800db7e:	4b2b      	ldr	r3, [pc, #172]	; (800dc2c <__kernel_cos+0x17c>)
 800db80:	4598      	cmp	r8, r3
 800db82:	4606      	mov	r6, r0
 800db84:	460f      	mov	r7, r1
 800db86:	dc10      	bgt.n	800dbaa <__kernel_cos+0xfa>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	4650      	mov	r0, sl
 800db8e:	4659      	mov	r1, fp
 800db90:	f7f2 fba2 	bl	80002d8 <__aeabi_dsub>
 800db94:	460b      	mov	r3, r1
 800db96:	4926      	ldr	r1, [pc, #152]	; (800dc30 <__kernel_cos+0x180>)
 800db98:	4602      	mov	r2, r0
 800db9a:	2000      	movs	r0, #0
 800db9c:	f7f2 fb9c 	bl	80002d8 <__aeabi_dsub>
 800dba0:	ec41 0b10 	vmov	d0, r0, r1
 800dba4:	b003      	add	sp, #12
 800dba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbaa:	4b22      	ldr	r3, [pc, #136]	; (800dc34 <__kernel_cos+0x184>)
 800dbac:	4920      	ldr	r1, [pc, #128]	; (800dc30 <__kernel_cos+0x180>)
 800dbae:	4598      	cmp	r8, r3
 800dbb0:	bfcc      	ite	gt
 800dbb2:	4d21      	ldrgt	r5, [pc, #132]	; (800dc38 <__kernel_cos+0x188>)
 800dbb4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dbb8:	2400      	movs	r4, #0
 800dbba:	4622      	mov	r2, r4
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	f7f2 fb8a 	bl	80002d8 <__aeabi_dsub>
 800dbc4:	4622      	mov	r2, r4
 800dbc6:	4680      	mov	r8, r0
 800dbc8:	4689      	mov	r9, r1
 800dbca:	462b      	mov	r3, r5
 800dbcc:	4650      	mov	r0, sl
 800dbce:	4659      	mov	r1, fp
 800dbd0:	f7f2 fb82 	bl	80002d8 <__aeabi_dsub>
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	f7f2 fb7e 	bl	80002d8 <__aeabi_dsub>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	e7da      	b.n	800db9c <__kernel_cos+0xec>
 800dbe6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dc20 <__kernel_cos+0x170>
 800dbea:	e7db      	b.n	800dba4 <__kernel_cos+0xf4>
 800dbec:	f3af 8000 	nop.w
 800dbf0:	be8838d4 	.word	0xbe8838d4
 800dbf4:	bda8fae9 	.word	0xbda8fae9
 800dbf8:	bdb4b1c4 	.word	0xbdb4b1c4
 800dbfc:	3e21ee9e 	.word	0x3e21ee9e
 800dc00:	809c52ad 	.word	0x809c52ad
 800dc04:	3e927e4f 	.word	0x3e927e4f
 800dc08:	19cb1590 	.word	0x19cb1590
 800dc0c:	3efa01a0 	.word	0x3efa01a0
 800dc10:	16c15177 	.word	0x16c15177
 800dc14:	3f56c16c 	.word	0x3f56c16c
 800dc18:	5555554c 	.word	0x5555554c
 800dc1c:	3fa55555 	.word	0x3fa55555
 800dc20:	00000000 	.word	0x00000000
 800dc24:	3ff00000 	.word	0x3ff00000
 800dc28:	3fe00000 	.word	0x3fe00000
 800dc2c:	3fd33332 	.word	0x3fd33332
 800dc30:	3ff00000 	.word	0x3ff00000
 800dc34:	3fe90000 	.word	0x3fe90000
 800dc38:	3fd20000 	.word	0x3fd20000
 800dc3c:	00000000 	.word	0x00000000

0800dc40 <__kernel_rem_pio2>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	ed2d 8b02 	vpush	{d8}
 800dc48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800dc4c:	f112 0f14 	cmn.w	r2, #20
 800dc50:	9308      	str	r3, [sp, #32]
 800dc52:	9101      	str	r1, [sp, #4]
 800dc54:	4bc4      	ldr	r3, [pc, #784]	; (800df68 <__kernel_rem_pio2+0x328>)
 800dc56:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800dc58:	900b      	str	r0, [sp, #44]	; 0x2c
 800dc5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc5e:	9302      	str	r3, [sp, #8]
 800dc60:	9b08      	ldr	r3, [sp, #32]
 800dc62:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc66:	bfa8      	it	ge
 800dc68:	1ed4      	subge	r4, r2, #3
 800dc6a:	9306      	str	r3, [sp, #24]
 800dc6c:	bfb2      	itee	lt
 800dc6e:	2400      	movlt	r4, #0
 800dc70:	2318      	movge	r3, #24
 800dc72:	fb94 f4f3 	sdivge	r4, r4, r3
 800dc76:	f06f 0317 	mvn.w	r3, #23
 800dc7a:	fb04 3303 	mla	r3, r4, r3, r3
 800dc7e:	eb03 0a02 	add.w	sl, r3, r2
 800dc82:	9b02      	ldr	r3, [sp, #8]
 800dc84:	9a06      	ldr	r2, [sp, #24]
 800dc86:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800df58 <__kernel_rem_pio2+0x318>
 800dc8a:	eb03 0802 	add.w	r8, r3, r2
 800dc8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dc90:	1aa7      	subs	r7, r4, r2
 800dc92:	ae22      	add	r6, sp, #136	; 0x88
 800dc94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dc98:	2500      	movs	r5, #0
 800dc9a:	4545      	cmp	r5, r8
 800dc9c:	dd13      	ble.n	800dcc6 <__kernel_rem_pio2+0x86>
 800dc9e:	9b08      	ldr	r3, [sp, #32]
 800dca0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800df58 <__kernel_rem_pio2+0x318>
 800dca4:	aa22      	add	r2, sp, #136	; 0x88
 800dca6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dcaa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800dcae:	f04f 0800 	mov.w	r8, #0
 800dcb2:	9b02      	ldr	r3, [sp, #8]
 800dcb4:	4598      	cmp	r8, r3
 800dcb6:	dc2f      	bgt.n	800dd18 <__kernel_rem_pio2+0xd8>
 800dcb8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dcbc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800dcc0:	462f      	mov	r7, r5
 800dcc2:	2600      	movs	r6, #0
 800dcc4:	e01b      	b.n	800dcfe <__kernel_rem_pio2+0xbe>
 800dcc6:	42ef      	cmn	r7, r5
 800dcc8:	d407      	bmi.n	800dcda <__kernel_rem_pio2+0x9a>
 800dcca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dcce:	f7f2 fc51 	bl	8000574 <__aeabi_i2d>
 800dcd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dcd6:	3501      	adds	r5, #1
 800dcd8:	e7df      	b.n	800dc9a <__kernel_rem_pio2+0x5a>
 800dcda:	ec51 0b18 	vmov	r0, r1, d8
 800dcde:	e7f8      	b.n	800dcd2 <__kernel_rem_pio2+0x92>
 800dce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dce4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dce8:	f7f2 fcae 	bl	8000648 <__aeabi_dmul>
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcf4:	f7f2 faf2 	bl	80002dc <__adddf3>
 800dcf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcfc:	3601      	adds	r6, #1
 800dcfe:	9b06      	ldr	r3, [sp, #24]
 800dd00:	429e      	cmp	r6, r3
 800dd02:	f1a7 0708 	sub.w	r7, r7, #8
 800dd06:	ddeb      	ble.n	800dce0 <__kernel_rem_pio2+0xa0>
 800dd08:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dd0c:	f108 0801 	add.w	r8, r8, #1
 800dd10:	ecab 7b02 	vstmia	fp!, {d7}
 800dd14:	3508      	adds	r5, #8
 800dd16:	e7cc      	b.n	800dcb2 <__kernel_rem_pio2+0x72>
 800dd18:	9b02      	ldr	r3, [sp, #8]
 800dd1a:	aa0e      	add	r2, sp, #56	; 0x38
 800dd1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd20:	930d      	str	r3, [sp, #52]	; 0x34
 800dd22:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dd24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dd28:	9c02      	ldr	r4, [sp, #8]
 800dd2a:	930c      	str	r3, [sp, #48]	; 0x30
 800dd2c:	00e3      	lsls	r3, r4, #3
 800dd2e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd30:	ab9a      	add	r3, sp, #616	; 0x268
 800dd32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dd3a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800dd3e:	ab72      	add	r3, sp, #456	; 0x1c8
 800dd40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800dd44:	46c3      	mov	fp, r8
 800dd46:	46a1      	mov	r9, r4
 800dd48:	f1b9 0f00 	cmp.w	r9, #0
 800dd4c:	f1a5 0508 	sub.w	r5, r5, #8
 800dd50:	dc77      	bgt.n	800de42 <__kernel_rem_pio2+0x202>
 800dd52:	ec47 6b10 	vmov	d0, r6, r7
 800dd56:	4650      	mov	r0, sl
 800dd58:	f000 fc46 	bl	800e5e8 <scalbn>
 800dd5c:	ec57 6b10 	vmov	r6, r7, d0
 800dd60:	2200      	movs	r2, #0
 800dd62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dd66:	ee10 0a10 	vmov	r0, s0
 800dd6a:	4639      	mov	r1, r7
 800dd6c:	f7f2 fc6c 	bl	8000648 <__aeabi_dmul>
 800dd70:	ec41 0b10 	vmov	d0, r0, r1
 800dd74:	f000 fbb8 	bl	800e4e8 <floor>
 800dd78:	4b7c      	ldr	r3, [pc, #496]	; (800df6c <__kernel_rem_pio2+0x32c>)
 800dd7a:	ec51 0b10 	vmov	r0, r1, d0
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f7f2 fc62 	bl	8000648 <__aeabi_dmul>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	f7f2 faa4 	bl	80002d8 <__aeabi_dsub>
 800dd90:	460f      	mov	r7, r1
 800dd92:	4606      	mov	r6, r0
 800dd94:	f7f2 ff08 	bl	8000ba8 <__aeabi_d2iz>
 800dd98:	9004      	str	r0, [sp, #16]
 800dd9a:	f7f2 fbeb 	bl	8000574 <__aeabi_i2d>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	4630      	mov	r0, r6
 800dda4:	4639      	mov	r1, r7
 800dda6:	f7f2 fa97 	bl	80002d8 <__aeabi_dsub>
 800ddaa:	f1ba 0f00 	cmp.w	sl, #0
 800ddae:	4606      	mov	r6, r0
 800ddb0:	460f      	mov	r7, r1
 800ddb2:	dd6d      	ble.n	800de90 <__kernel_rem_pio2+0x250>
 800ddb4:	1e62      	subs	r2, r4, #1
 800ddb6:	ab0e      	add	r3, sp, #56	; 0x38
 800ddb8:	9d04      	ldr	r5, [sp, #16]
 800ddba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ddbe:	f1ca 0118 	rsb	r1, sl, #24
 800ddc2:	fa40 f301 	asr.w	r3, r0, r1
 800ddc6:	441d      	add	r5, r3
 800ddc8:	408b      	lsls	r3, r1
 800ddca:	1ac0      	subs	r0, r0, r3
 800ddcc:	ab0e      	add	r3, sp, #56	; 0x38
 800ddce:	9504      	str	r5, [sp, #16]
 800ddd0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ddd4:	f1ca 0317 	rsb	r3, sl, #23
 800ddd8:	fa40 fb03 	asr.w	fp, r0, r3
 800dddc:	f1bb 0f00 	cmp.w	fp, #0
 800dde0:	dd65      	ble.n	800deae <__kernel_rem_pio2+0x26e>
 800dde2:	9b04      	ldr	r3, [sp, #16]
 800dde4:	2200      	movs	r2, #0
 800dde6:	3301      	adds	r3, #1
 800dde8:	9304      	str	r3, [sp, #16]
 800ddea:	4615      	mov	r5, r2
 800ddec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ddf0:	4294      	cmp	r4, r2
 800ddf2:	f300 809c 	bgt.w	800df2e <__kernel_rem_pio2+0x2ee>
 800ddf6:	f1ba 0f00 	cmp.w	sl, #0
 800ddfa:	dd07      	ble.n	800de0c <__kernel_rem_pio2+0x1cc>
 800ddfc:	f1ba 0f01 	cmp.w	sl, #1
 800de00:	f000 80c0 	beq.w	800df84 <__kernel_rem_pio2+0x344>
 800de04:	f1ba 0f02 	cmp.w	sl, #2
 800de08:	f000 80c6 	beq.w	800df98 <__kernel_rem_pio2+0x358>
 800de0c:	f1bb 0f02 	cmp.w	fp, #2
 800de10:	d14d      	bne.n	800deae <__kernel_rem_pio2+0x26e>
 800de12:	4632      	mov	r2, r6
 800de14:	463b      	mov	r3, r7
 800de16:	4956      	ldr	r1, [pc, #344]	; (800df70 <__kernel_rem_pio2+0x330>)
 800de18:	2000      	movs	r0, #0
 800de1a:	f7f2 fa5d 	bl	80002d8 <__aeabi_dsub>
 800de1e:	4606      	mov	r6, r0
 800de20:	460f      	mov	r7, r1
 800de22:	2d00      	cmp	r5, #0
 800de24:	d043      	beq.n	800deae <__kernel_rem_pio2+0x26e>
 800de26:	4650      	mov	r0, sl
 800de28:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800df60 <__kernel_rem_pio2+0x320>
 800de2c:	f000 fbdc 	bl	800e5e8 <scalbn>
 800de30:	4630      	mov	r0, r6
 800de32:	4639      	mov	r1, r7
 800de34:	ec53 2b10 	vmov	r2, r3, d0
 800de38:	f7f2 fa4e 	bl	80002d8 <__aeabi_dsub>
 800de3c:	4606      	mov	r6, r0
 800de3e:	460f      	mov	r7, r1
 800de40:	e035      	b.n	800deae <__kernel_rem_pio2+0x26e>
 800de42:	4b4c      	ldr	r3, [pc, #304]	; (800df74 <__kernel_rem_pio2+0x334>)
 800de44:	2200      	movs	r2, #0
 800de46:	4630      	mov	r0, r6
 800de48:	4639      	mov	r1, r7
 800de4a:	f7f2 fbfd 	bl	8000648 <__aeabi_dmul>
 800de4e:	f7f2 feab 	bl	8000ba8 <__aeabi_d2iz>
 800de52:	f7f2 fb8f 	bl	8000574 <__aeabi_i2d>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	ec43 2b18 	vmov	d8, r2, r3
 800de5e:	4b46      	ldr	r3, [pc, #280]	; (800df78 <__kernel_rem_pio2+0x338>)
 800de60:	2200      	movs	r2, #0
 800de62:	f7f2 fbf1 	bl	8000648 <__aeabi_dmul>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4630      	mov	r0, r6
 800de6c:	4639      	mov	r1, r7
 800de6e:	f7f2 fa33 	bl	80002d8 <__aeabi_dsub>
 800de72:	f7f2 fe99 	bl	8000ba8 <__aeabi_d2iz>
 800de76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de7a:	f84b 0b04 	str.w	r0, [fp], #4
 800de7e:	ec51 0b18 	vmov	r0, r1, d8
 800de82:	f7f2 fa2b 	bl	80002dc <__adddf3>
 800de86:	f109 39ff 	add.w	r9, r9, #4294967295
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	e75b      	b.n	800dd48 <__kernel_rem_pio2+0x108>
 800de90:	d106      	bne.n	800dea0 <__kernel_rem_pio2+0x260>
 800de92:	1e63      	subs	r3, r4, #1
 800de94:	aa0e      	add	r2, sp, #56	; 0x38
 800de96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800de9a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800de9e:	e79d      	b.n	800dddc <__kernel_rem_pio2+0x19c>
 800dea0:	4b36      	ldr	r3, [pc, #216]	; (800df7c <__kernel_rem_pio2+0x33c>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	f7f2 fe56 	bl	8000b54 <__aeabi_dcmpge>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d13d      	bne.n	800df28 <__kernel_rem_pio2+0x2e8>
 800deac:	4683      	mov	fp, r0
 800deae:	2200      	movs	r2, #0
 800deb0:	2300      	movs	r3, #0
 800deb2:	4630      	mov	r0, r6
 800deb4:	4639      	mov	r1, r7
 800deb6:	f7f2 fe2f 	bl	8000b18 <__aeabi_dcmpeq>
 800deba:	2800      	cmp	r0, #0
 800debc:	f000 80c0 	beq.w	800e040 <__kernel_rem_pio2+0x400>
 800dec0:	1e65      	subs	r5, r4, #1
 800dec2:	462b      	mov	r3, r5
 800dec4:	2200      	movs	r2, #0
 800dec6:	9902      	ldr	r1, [sp, #8]
 800dec8:	428b      	cmp	r3, r1
 800deca:	da6c      	bge.n	800dfa6 <__kernel_rem_pio2+0x366>
 800decc:	2a00      	cmp	r2, #0
 800dece:	f000 8089 	beq.w	800dfe4 <__kernel_rem_pio2+0x3a4>
 800ded2:	ab0e      	add	r3, sp, #56	; 0x38
 800ded4:	f1aa 0a18 	sub.w	sl, sl, #24
 800ded8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f000 80ad 	beq.w	800e03c <__kernel_rem_pio2+0x3fc>
 800dee2:	4650      	mov	r0, sl
 800dee4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800df60 <__kernel_rem_pio2+0x320>
 800dee8:	f000 fb7e 	bl	800e5e8 <scalbn>
 800deec:	ab9a      	add	r3, sp, #616	; 0x268
 800deee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800def2:	ec57 6b10 	vmov	r6, r7, d0
 800def6:	00ec      	lsls	r4, r5, #3
 800def8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800defc:	46aa      	mov	sl, r5
 800defe:	f1ba 0f00 	cmp.w	sl, #0
 800df02:	f280 80d6 	bge.w	800e0b2 <__kernel_rem_pio2+0x472>
 800df06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800df58 <__kernel_rem_pio2+0x318>
 800df0a:	462e      	mov	r6, r5
 800df0c:	2e00      	cmp	r6, #0
 800df0e:	f2c0 8104 	blt.w	800e11a <__kernel_rem_pio2+0x4da>
 800df12:	ab72      	add	r3, sp, #456	; 0x1c8
 800df14:	ed8d 8b06 	vstr	d8, [sp, #24]
 800df18:	f8df a064 	ldr.w	sl, [pc, #100]	; 800df80 <__kernel_rem_pio2+0x340>
 800df1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800df20:	f04f 0800 	mov.w	r8, #0
 800df24:	1baf      	subs	r7, r5, r6
 800df26:	e0ea      	b.n	800e0fe <__kernel_rem_pio2+0x4be>
 800df28:	f04f 0b02 	mov.w	fp, #2
 800df2c:	e759      	b.n	800dde2 <__kernel_rem_pio2+0x1a2>
 800df2e:	f8d8 3000 	ldr.w	r3, [r8]
 800df32:	b955      	cbnz	r5, 800df4a <__kernel_rem_pio2+0x30a>
 800df34:	b123      	cbz	r3, 800df40 <__kernel_rem_pio2+0x300>
 800df36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800df3a:	f8c8 3000 	str.w	r3, [r8]
 800df3e:	2301      	movs	r3, #1
 800df40:	3201      	adds	r2, #1
 800df42:	f108 0804 	add.w	r8, r8, #4
 800df46:	461d      	mov	r5, r3
 800df48:	e752      	b.n	800ddf0 <__kernel_rem_pio2+0x1b0>
 800df4a:	1acb      	subs	r3, r1, r3
 800df4c:	f8c8 3000 	str.w	r3, [r8]
 800df50:	462b      	mov	r3, r5
 800df52:	e7f5      	b.n	800df40 <__kernel_rem_pio2+0x300>
 800df54:	f3af 8000 	nop.w
	...
 800df64:	3ff00000 	.word	0x3ff00000
 800df68:	0800ee90 	.word	0x0800ee90
 800df6c:	40200000 	.word	0x40200000
 800df70:	3ff00000 	.word	0x3ff00000
 800df74:	3e700000 	.word	0x3e700000
 800df78:	41700000 	.word	0x41700000
 800df7c:	3fe00000 	.word	0x3fe00000
 800df80:	0800ee50 	.word	0x0800ee50
 800df84:	1e62      	subs	r2, r4, #1
 800df86:	ab0e      	add	r3, sp, #56	; 0x38
 800df88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800df90:	a90e      	add	r1, sp, #56	; 0x38
 800df92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800df96:	e739      	b.n	800de0c <__kernel_rem_pio2+0x1cc>
 800df98:	1e62      	subs	r2, r4, #1
 800df9a:	ab0e      	add	r3, sp, #56	; 0x38
 800df9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfa0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dfa4:	e7f4      	b.n	800df90 <__kernel_rem_pio2+0x350>
 800dfa6:	a90e      	add	r1, sp, #56	; 0x38
 800dfa8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	430a      	orrs	r2, r1
 800dfb0:	e789      	b.n	800dec6 <__kernel_rem_pio2+0x286>
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dfb8:	2900      	cmp	r1, #0
 800dfba:	d0fa      	beq.n	800dfb2 <__kernel_rem_pio2+0x372>
 800dfbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfbe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800dfc2:	446a      	add	r2, sp
 800dfc4:	3a98      	subs	r2, #152	; 0x98
 800dfc6:	920a      	str	r2, [sp, #40]	; 0x28
 800dfc8:	9a08      	ldr	r2, [sp, #32]
 800dfca:	18e3      	adds	r3, r4, r3
 800dfcc:	18a5      	adds	r5, r4, r2
 800dfce:	aa22      	add	r2, sp, #136	; 0x88
 800dfd0:	f104 0801 	add.w	r8, r4, #1
 800dfd4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800dfd8:	9304      	str	r3, [sp, #16]
 800dfda:	9b04      	ldr	r3, [sp, #16]
 800dfdc:	4543      	cmp	r3, r8
 800dfde:	da04      	bge.n	800dfea <__kernel_rem_pio2+0x3aa>
 800dfe0:	461c      	mov	r4, r3
 800dfe2:	e6a3      	b.n	800dd2c <__kernel_rem_pio2+0xec>
 800dfe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e7e4      	b.n	800dfb4 <__kernel_rem_pio2+0x374>
 800dfea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dff0:	f7f2 fac0 	bl	8000574 <__aeabi_i2d>
 800dff4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800dff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dffa:	46ab      	mov	fp, r5
 800dffc:	461c      	mov	r4, r3
 800dffe:	f04f 0900 	mov.w	r9, #0
 800e002:	2600      	movs	r6, #0
 800e004:	2700      	movs	r7, #0
 800e006:	9b06      	ldr	r3, [sp, #24]
 800e008:	4599      	cmp	r9, r3
 800e00a:	dd06      	ble.n	800e01a <__kernel_rem_pio2+0x3da>
 800e00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e00e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e012:	f108 0801 	add.w	r8, r8, #1
 800e016:	930a      	str	r3, [sp, #40]	; 0x28
 800e018:	e7df      	b.n	800dfda <__kernel_rem_pio2+0x39a>
 800e01a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e01e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e022:	f7f2 fb11 	bl	8000648 <__aeabi_dmul>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	4630      	mov	r0, r6
 800e02c:	4639      	mov	r1, r7
 800e02e:	f7f2 f955 	bl	80002dc <__adddf3>
 800e032:	f109 0901 	add.w	r9, r9, #1
 800e036:	4606      	mov	r6, r0
 800e038:	460f      	mov	r7, r1
 800e03a:	e7e4      	b.n	800e006 <__kernel_rem_pio2+0x3c6>
 800e03c:	3d01      	subs	r5, #1
 800e03e:	e748      	b.n	800ded2 <__kernel_rem_pio2+0x292>
 800e040:	ec47 6b10 	vmov	d0, r6, r7
 800e044:	f1ca 0000 	rsb	r0, sl, #0
 800e048:	f000 face 	bl	800e5e8 <scalbn>
 800e04c:	ec57 6b10 	vmov	r6, r7, d0
 800e050:	4ba0      	ldr	r3, [pc, #640]	; (800e2d4 <__kernel_rem_pio2+0x694>)
 800e052:	ee10 0a10 	vmov	r0, s0
 800e056:	2200      	movs	r2, #0
 800e058:	4639      	mov	r1, r7
 800e05a:	f7f2 fd7b 	bl	8000b54 <__aeabi_dcmpge>
 800e05e:	b1f8      	cbz	r0, 800e0a0 <__kernel_rem_pio2+0x460>
 800e060:	4b9d      	ldr	r3, [pc, #628]	; (800e2d8 <__kernel_rem_pio2+0x698>)
 800e062:	2200      	movs	r2, #0
 800e064:	4630      	mov	r0, r6
 800e066:	4639      	mov	r1, r7
 800e068:	f7f2 faee 	bl	8000648 <__aeabi_dmul>
 800e06c:	f7f2 fd9c 	bl	8000ba8 <__aeabi_d2iz>
 800e070:	4680      	mov	r8, r0
 800e072:	f7f2 fa7f 	bl	8000574 <__aeabi_i2d>
 800e076:	4b97      	ldr	r3, [pc, #604]	; (800e2d4 <__kernel_rem_pio2+0x694>)
 800e078:	2200      	movs	r2, #0
 800e07a:	f7f2 fae5 	bl	8000648 <__aeabi_dmul>
 800e07e:	460b      	mov	r3, r1
 800e080:	4602      	mov	r2, r0
 800e082:	4639      	mov	r1, r7
 800e084:	4630      	mov	r0, r6
 800e086:	f7f2 f927 	bl	80002d8 <__aeabi_dsub>
 800e08a:	f7f2 fd8d 	bl	8000ba8 <__aeabi_d2iz>
 800e08e:	1c65      	adds	r5, r4, #1
 800e090:	ab0e      	add	r3, sp, #56	; 0x38
 800e092:	f10a 0a18 	add.w	sl, sl, #24
 800e096:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e09a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e09e:	e720      	b.n	800dee2 <__kernel_rem_pio2+0x2a2>
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	f7f2 fd80 	bl	8000ba8 <__aeabi_d2iz>
 800e0a8:	ab0e      	add	r3, sp, #56	; 0x38
 800e0aa:	4625      	mov	r5, r4
 800e0ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e0b0:	e717      	b.n	800dee2 <__kernel_rem_pio2+0x2a2>
 800e0b2:	ab0e      	add	r3, sp, #56	; 0x38
 800e0b4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e0b8:	f7f2 fa5c 	bl	8000574 <__aeabi_i2d>
 800e0bc:	4632      	mov	r2, r6
 800e0be:	463b      	mov	r3, r7
 800e0c0:	f7f2 fac2 	bl	8000648 <__aeabi_dmul>
 800e0c4:	4b84      	ldr	r3, [pc, #528]	; (800e2d8 <__kernel_rem_pio2+0x698>)
 800e0c6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	4639      	mov	r1, r7
 800e0d0:	f7f2 faba 	bl	8000648 <__aeabi_dmul>
 800e0d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0d8:	4606      	mov	r6, r0
 800e0da:	460f      	mov	r7, r1
 800e0dc:	e70f      	b.n	800defe <__kernel_rem_pio2+0x2be>
 800e0de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e0e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e0e6:	f7f2 faaf 	bl	8000648 <__aeabi_dmul>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0f2:	f7f2 f8f3 	bl	80002dc <__adddf3>
 800e0f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e0fa:	f108 0801 	add.w	r8, r8, #1
 800e0fe:	9b02      	ldr	r3, [sp, #8]
 800e100:	4598      	cmp	r8, r3
 800e102:	dc01      	bgt.n	800e108 <__kernel_rem_pio2+0x4c8>
 800e104:	45b8      	cmp	r8, r7
 800e106:	ddea      	ble.n	800e0de <__kernel_rem_pio2+0x49e>
 800e108:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e10c:	ab4a      	add	r3, sp, #296	; 0x128
 800e10e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e112:	ed87 7b00 	vstr	d7, [r7]
 800e116:	3e01      	subs	r6, #1
 800e118:	e6f8      	b.n	800df0c <__kernel_rem_pio2+0x2cc>
 800e11a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	dc0b      	bgt.n	800e138 <__kernel_rem_pio2+0x4f8>
 800e120:	2b00      	cmp	r3, #0
 800e122:	dc35      	bgt.n	800e190 <__kernel_rem_pio2+0x550>
 800e124:	d059      	beq.n	800e1da <__kernel_rem_pio2+0x59a>
 800e126:	9b04      	ldr	r3, [sp, #16]
 800e128:	f003 0007 	and.w	r0, r3, #7
 800e12c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e130:	ecbd 8b02 	vpop	{d8}
 800e134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e138:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e13a:	2b03      	cmp	r3, #3
 800e13c:	d1f3      	bne.n	800e126 <__kernel_rem_pio2+0x4e6>
 800e13e:	ab4a      	add	r3, sp, #296	; 0x128
 800e140:	4423      	add	r3, r4
 800e142:	9306      	str	r3, [sp, #24]
 800e144:	461c      	mov	r4, r3
 800e146:	469a      	mov	sl, r3
 800e148:	9502      	str	r5, [sp, #8]
 800e14a:	9b02      	ldr	r3, [sp, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f1aa 0a08 	sub.w	sl, sl, #8
 800e152:	dc6b      	bgt.n	800e22c <__kernel_rem_pio2+0x5ec>
 800e154:	46aa      	mov	sl, r5
 800e156:	f1ba 0f01 	cmp.w	sl, #1
 800e15a:	f1a4 0408 	sub.w	r4, r4, #8
 800e15e:	f300 8085 	bgt.w	800e26c <__kernel_rem_pio2+0x62c>
 800e162:	9c06      	ldr	r4, [sp, #24]
 800e164:	2000      	movs	r0, #0
 800e166:	3408      	adds	r4, #8
 800e168:	2100      	movs	r1, #0
 800e16a:	2d01      	cmp	r5, #1
 800e16c:	f300 809d 	bgt.w	800e2aa <__kernel_rem_pio2+0x66a>
 800e170:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e174:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e178:	f1bb 0f00 	cmp.w	fp, #0
 800e17c:	f040 809b 	bne.w	800e2b6 <__kernel_rem_pio2+0x676>
 800e180:	9b01      	ldr	r3, [sp, #4]
 800e182:	e9c3 5600 	strd	r5, r6, [r3]
 800e186:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e18a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e18e:	e7ca      	b.n	800e126 <__kernel_rem_pio2+0x4e6>
 800e190:	3408      	adds	r4, #8
 800e192:	ab4a      	add	r3, sp, #296	; 0x128
 800e194:	441c      	add	r4, r3
 800e196:	462e      	mov	r6, r5
 800e198:	2000      	movs	r0, #0
 800e19a:	2100      	movs	r1, #0
 800e19c:	2e00      	cmp	r6, #0
 800e19e:	da36      	bge.n	800e20e <__kernel_rem_pio2+0x5ce>
 800e1a0:	f1bb 0f00 	cmp.w	fp, #0
 800e1a4:	d039      	beq.n	800e21a <__kernel_rem_pio2+0x5da>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1ac:	9c01      	ldr	r4, [sp, #4]
 800e1ae:	e9c4 2300 	strd	r2, r3, [r4]
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e1ba:	f7f2 f88d 	bl	80002d8 <__aeabi_dsub>
 800e1be:	ae4c      	add	r6, sp, #304	; 0x130
 800e1c0:	2401      	movs	r4, #1
 800e1c2:	42a5      	cmp	r5, r4
 800e1c4:	da2c      	bge.n	800e220 <__kernel_rem_pio2+0x5e0>
 800e1c6:	f1bb 0f00 	cmp.w	fp, #0
 800e1ca:	d002      	beq.n	800e1d2 <__kernel_rem_pio2+0x592>
 800e1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	9b01      	ldr	r3, [sp, #4]
 800e1d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e1d8:	e7a5      	b.n	800e126 <__kernel_rem_pio2+0x4e6>
 800e1da:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e1de:	eb0d 0403 	add.w	r4, sp, r3
 800e1e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	2d00      	cmp	r5, #0
 800e1ec:	da09      	bge.n	800e202 <__kernel_rem_pio2+0x5c2>
 800e1ee:	f1bb 0f00 	cmp.w	fp, #0
 800e1f2:	d002      	beq.n	800e1fa <__kernel_rem_pio2+0x5ba>
 800e1f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	9b01      	ldr	r3, [sp, #4]
 800e1fc:	e9c3 0100 	strd	r0, r1, [r3]
 800e200:	e791      	b.n	800e126 <__kernel_rem_pio2+0x4e6>
 800e202:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e206:	f7f2 f869 	bl	80002dc <__adddf3>
 800e20a:	3d01      	subs	r5, #1
 800e20c:	e7ed      	b.n	800e1ea <__kernel_rem_pio2+0x5aa>
 800e20e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e212:	f7f2 f863 	bl	80002dc <__adddf3>
 800e216:	3e01      	subs	r6, #1
 800e218:	e7c0      	b.n	800e19c <__kernel_rem_pio2+0x55c>
 800e21a:	4602      	mov	r2, r0
 800e21c:	460b      	mov	r3, r1
 800e21e:	e7c5      	b.n	800e1ac <__kernel_rem_pio2+0x56c>
 800e220:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e224:	f7f2 f85a 	bl	80002dc <__adddf3>
 800e228:	3401      	adds	r4, #1
 800e22a:	e7ca      	b.n	800e1c2 <__kernel_rem_pio2+0x582>
 800e22c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e230:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e234:	9b02      	ldr	r3, [sp, #8]
 800e236:	3b01      	subs	r3, #1
 800e238:	9302      	str	r3, [sp, #8]
 800e23a:	4632      	mov	r2, r6
 800e23c:	463b      	mov	r3, r7
 800e23e:	4640      	mov	r0, r8
 800e240:	4649      	mov	r1, r9
 800e242:	f7f2 f84b 	bl	80002dc <__adddf3>
 800e246:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e24a:	4602      	mov	r2, r0
 800e24c:	460b      	mov	r3, r1
 800e24e:	4640      	mov	r0, r8
 800e250:	4649      	mov	r1, r9
 800e252:	f7f2 f841 	bl	80002d8 <__aeabi_dsub>
 800e256:	4632      	mov	r2, r6
 800e258:	463b      	mov	r3, r7
 800e25a:	f7f2 f83f 	bl	80002dc <__adddf3>
 800e25e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e262:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e266:	ed8a 7b00 	vstr	d7, [sl]
 800e26a:	e76e      	b.n	800e14a <__kernel_rem_pio2+0x50a>
 800e26c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e270:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e274:	4640      	mov	r0, r8
 800e276:	4632      	mov	r2, r6
 800e278:	463b      	mov	r3, r7
 800e27a:	4649      	mov	r1, r9
 800e27c:	f7f2 f82e 	bl	80002dc <__adddf3>
 800e280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	4640      	mov	r0, r8
 800e28a:	4649      	mov	r1, r9
 800e28c:	f7f2 f824 	bl	80002d8 <__aeabi_dsub>
 800e290:	4632      	mov	r2, r6
 800e292:	463b      	mov	r3, r7
 800e294:	f7f2 f822 	bl	80002dc <__adddf3>
 800e298:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e29c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e2a0:	ed84 7b00 	vstr	d7, [r4]
 800e2a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2a8:	e755      	b.n	800e156 <__kernel_rem_pio2+0x516>
 800e2aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e2ae:	f7f2 f815 	bl	80002dc <__adddf3>
 800e2b2:	3d01      	subs	r5, #1
 800e2b4:	e759      	b.n	800e16a <__kernel_rem_pio2+0x52a>
 800e2b6:	9b01      	ldr	r3, [sp, #4]
 800e2b8:	9a01      	ldr	r2, [sp, #4]
 800e2ba:	601d      	str	r5, [r3, #0]
 800e2bc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e2c0:	605c      	str	r4, [r3, #4]
 800e2c2:	609f      	str	r7, [r3, #8]
 800e2c4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e2c8:	60d3      	str	r3, [r2, #12]
 800e2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2ce:	6110      	str	r0, [r2, #16]
 800e2d0:	6153      	str	r3, [r2, #20]
 800e2d2:	e728      	b.n	800e126 <__kernel_rem_pio2+0x4e6>
 800e2d4:	41700000 	.word	0x41700000
 800e2d8:	3e700000 	.word	0x3e700000
 800e2dc:	00000000 	.word	0x00000000

0800e2e0 <__kernel_sin>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	ed2d 8b04 	vpush	{d8-d9}
 800e2e8:	eeb0 8a41 	vmov.f32	s16, s2
 800e2ec:	eef0 8a61 	vmov.f32	s17, s3
 800e2f0:	ec55 4b10 	vmov	r4, r5, d0
 800e2f4:	b083      	sub	sp, #12
 800e2f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e2fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e2fe:	9001      	str	r0, [sp, #4]
 800e300:	da06      	bge.n	800e310 <__kernel_sin+0x30>
 800e302:	ee10 0a10 	vmov	r0, s0
 800e306:	4629      	mov	r1, r5
 800e308:	f7f2 fc4e 	bl	8000ba8 <__aeabi_d2iz>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d051      	beq.n	800e3b4 <__kernel_sin+0xd4>
 800e310:	4622      	mov	r2, r4
 800e312:	462b      	mov	r3, r5
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 f996 	bl	8000648 <__aeabi_dmul>
 800e31c:	4682      	mov	sl, r0
 800e31e:	468b      	mov	fp, r1
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4620      	mov	r0, r4
 800e326:	4629      	mov	r1, r5
 800e328:	f7f2 f98e 	bl	8000648 <__aeabi_dmul>
 800e32c:	a341      	add	r3, pc, #260	; (adr r3, 800e434 <__kernel_sin+0x154>)
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	4680      	mov	r8, r0
 800e334:	4689      	mov	r9, r1
 800e336:	4650      	mov	r0, sl
 800e338:	4659      	mov	r1, fp
 800e33a:	f7f2 f985 	bl	8000648 <__aeabi_dmul>
 800e33e:	a33f      	add	r3, pc, #252	; (adr r3, 800e43c <__kernel_sin+0x15c>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	f7f1 ffc8 	bl	80002d8 <__aeabi_dsub>
 800e348:	4652      	mov	r2, sl
 800e34a:	465b      	mov	r3, fp
 800e34c:	f7f2 f97c 	bl	8000648 <__aeabi_dmul>
 800e350:	a33c      	add	r3, pc, #240	; (adr r3, 800e444 <__kernel_sin+0x164>)
 800e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e356:	f7f1 ffc1 	bl	80002dc <__adddf3>
 800e35a:	4652      	mov	r2, sl
 800e35c:	465b      	mov	r3, fp
 800e35e:	f7f2 f973 	bl	8000648 <__aeabi_dmul>
 800e362:	a33a      	add	r3, pc, #232	; (adr r3, 800e44c <__kernel_sin+0x16c>)
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	f7f1 ffb6 	bl	80002d8 <__aeabi_dsub>
 800e36c:	4652      	mov	r2, sl
 800e36e:	465b      	mov	r3, fp
 800e370:	f7f2 f96a 	bl	8000648 <__aeabi_dmul>
 800e374:	a337      	add	r3, pc, #220	; (adr r3, 800e454 <__kernel_sin+0x174>)
 800e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37a:	f7f1 ffaf 	bl	80002dc <__adddf3>
 800e37e:	9b01      	ldr	r3, [sp, #4]
 800e380:	4606      	mov	r6, r0
 800e382:	460f      	mov	r7, r1
 800e384:	b9eb      	cbnz	r3, 800e3c2 <__kernel_sin+0xe2>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	4650      	mov	r0, sl
 800e38c:	4659      	mov	r1, fp
 800e38e:	f7f2 f95b 	bl	8000648 <__aeabi_dmul>
 800e392:	a325      	add	r3, pc, #148	; (adr r3, 800e428 <__kernel_sin+0x148>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ff9e 	bl	80002d8 <__aeabi_dsub>
 800e39c:	4642      	mov	r2, r8
 800e39e:	464b      	mov	r3, r9
 800e3a0:	f7f2 f952 	bl	8000648 <__aeabi_dmul>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	f7f1 ff96 	bl	80002dc <__adddf3>
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	460d      	mov	r5, r1
 800e3b4:	ec45 4b10 	vmov	d0, r4, r5
 800e3b8:	b003      	add	sp, #12
 800e3ba:	ecbd 8b04 	vpop	{d8-d9}
 800e3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c2:	4b1b      	ldr	r3, [pc, #108]	; (800e430 <__kernel_sin+0x150>)
 800e3c4:	ec51 0b18 	vmov	r0, r1, d8
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f7f2 f93d 	bl	8000648 <__aeabi_dmul>
 800e3ce:	4632      	mov	r2, r6
 800e3d0:	ec41 0b19 	vmov	d9, r0, r1
 800e3d4:	463b      	mov	r3, r7
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	4649      	mov	r1, r9
 800e3da:	f7f2 f935 	bl	8000648 <__aeabi_dmul>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	ec51 0b19 	vmov	r0, r1, d9
 800e3e6:	f7f1 ff77 	bl	80002d8 <__aeabi_dsub>
 800e3ea:	4652      	mov	r2, sl
 800e3ec:	465b      	mov	r3, fp
 800e3ee:	f7f2 f92b 	bl	8000648 <__aeabi_dmul>
 800e3f2:	ec53 2b18 	vmov	r2, r3, d8
 800e3f6:	f7f1 ff6f 	bl	80002d8 <__aeabi_dsub>
 800e3fa:	a30b      	add	r3, pc, #44	; (adr r3, 800e428 <__kernel_sin+0x148>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	4606      	mov	r6, r0
 800e402:	460f      	mov	r7, r1
 800e404:	4640      	mov	r0, r8
 800e406:	4649      	mov	r1, r9
 800e408:	f7f2 f91e 	bl	8000648 <__aeabi_dmul>
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	4630      	mov	r0, r6
 800e412:	4639      	mov	r1, r7
 800e414:	f7f1 ff62 	bl	80002dc <__adddf3>
 800e418:	4602      	mov	r2, r0
 800e41a:	460b      	mov	r3, r1
 800e41c:	4620      	mov	r0, r4
 800e41e:	4629      	mov	r1, r5
 800e420:	f7f1 ff5a 	bl	80002d8 <__aeabi_dsub>
 800e424:	e7c4      	b.n	800e3b0 <__kernel_sin+0xd0>
 800e426:	bf00      	nop
 800e428:	55555549 	.word	0x55555549
 800e42c:	3fc55555 	.word	0x3fc55555
 800e430:	3fe00000 	.word	0x3fe00000
 800e434:	5acfd57c 	.word	0x5acfd57c
 800e438:	3de5d93a 	.word	0x3de5d93a
 800e43c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e440:	3e5ae5e6 	.word	0x3e5ae5e6
 800e444:	57b1fe7d 	.word	0x57b1fe7d
 800e448:	3ec71de3 	.word	0x3ec71de3
 800e44c:	19c161d5 	.word	0x19c161d5
 800e450:	3f2a01a0 	.word	0x3f2a01a0
 800e454:	1110f8a6 	.word	0x1110f8a6
 800e458:	3f811111 	.word	0x3f811111

0800e45c <with_errno>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	4604      	mov	r4, r0
 800e460:	460d      	mov	r5, r1
 800e462:	4616      	mov	r6, r2
 800e464:	f7fc f81a 	bl	800a49c <__errno>
 800e468:	4629      	mov	r1, r5
 800e46a:	6006      	str	r6, [r0, #0]
 800e46c:	4620      	mov	r0, r4
 800e46e:	bd70      	pop	{r4, r5, r6, pc}

0800e470 <xflow>:
 800e470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e472:	4614      	mov	r4, r2
 800e474:	461d      	mov	r5, r3
 800e476:	b108      	cbz	r0, 800e47c <xflow+0xc>
 800e478:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e47c:	e9cd 2300 	strd	r2, r3, [sp]
 800e480:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e484:	4620      	mov	r0, r4
 800e486:	4629      	mov	r1, r5
 800e488:	f7f2 f8de 	bl	8000648 <__aeabi_dmul>
 800e48c:	2222      	movs	r2, #34	; 0x22
 800e48e:	b003      	add	sp, #12
 800e490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e494:	f7ff bfe2 	b.w	800e45c <with_errno>

0800e498 <__math_uflow>:
 800e498:	b508      	push	{r3, lr}
 800e49a:	2200      	movs	r2, #0
 800e49c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e4a0:	f7ff ffe6 	bl	800e470 <xflow>
 800e4a4:	ec41 0b10 	vmov	d0, r0, r1
 800e4a8:	bd08      	pop	{r3, pc}

0800e4aa <__math_oflow>:
 800e4aa:	b508      	push	{r3, lr}
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e4b2:	f7ff ffdd 	bl	800e470 <xflow>
 800e4b6:	ec41 0b10 	vmov	d0, r0, r1
 800e4ba:	bd08      	pop	{r3, pc}

0800e4bc <fabs>:
 800e4bc:	ec51 0b10 	vmov	r0, r1, d0
 800e4c0:	ee10 2a10 	vmov	r2, s0
 800e4c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4c8:	ec43 2b10 	vmov	d0, r2, r3
 800e4cc:	4770      	bx	lr

0800e4ce <finite>:
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	ed8d 0b00 	vstr	d0, [sp]
 800e4d4:	9801      	ldr	r0, [sp, #4]
 800e4d6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e4da:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e4de:	0fc0      	lsrs	r0, r0, #31
 800e4e0:	b002      	add	sp, #8
 800e4e2:	4770      	bx	lr
 800e4e4:	0000      	movs	r0, r0
	...

0800e4e8 <floor>:
 800e4e8:	ec51 0b10 	vmov	r0, r1, d0
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e4f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e4f8:	2e13      	cmp	r6, #19
 800e4fa:	ee10 5a10 	vmov	r5, s0
 800e4fe:	ee10 8a10 	vmov	r8, s0
 800e502:	460c      	mov	r4, r1
 800e504:	dc32      	bgt.n	800e56c <floor+0x84>
 800e506:	2e00      	cmp	r6, #0
 800e508:	da14      	bge.n	800e534 <floor+0x4c>
 800e50a:	a333      	add	r3, pc, #204	; (adr r3, 800e5d8 <floor+0xf0>)
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f7f1 fee4 	bl	80002dc <__adddf3>
 800e514:	2200      	movs	r2, #0
 800e516:	2300      	movs	r3, #0
 800e518:	f7f2 fb26 	bl	8000b68 <__aeabi_dcmpgt>
 800e51c:	b138      	cbz	r0, 800e52e <floor+0x46>
 800e51e:	2c00      	cmp	r4, #0
 800e520:	da57      	bge.n	800e5d2 <floor+0xea>
 800e522:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e526:	431d      	orrs	r5, r3
 800e528:	d001      	beq.n	800e52e <floor+0x46>
 800e52a:	4c2d      	ldr	r4, [pc, #180]	; (800e5e0 <floor+0xf8>)
 800e52c:	2500      	movs	r5, #0
 800e52e:	4621      	mov	r1, r4
 800e530:	4628      	mov	r0, r5
 800e532:	e025      	b.n	800e580 <floor+0x98>
 800e534:	4f2b      	ldr	r7, [pc, #172]	; (800e5e4 <floor+0xfc>)
 800e536:	4137      	asrs	r7, r6
 800e538:	ea01 0307 	and.w	r3, r1, r7
 800e53c:	4303      	orrs	r3, r0
 800e53e:	d01f      	beq.n	800e580 <floor+0x98>
 800e540:	a325      	add	r3, pc, #148	; (adr r3, 800e5d8 <floor+0xf0>)
 800e542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e546:	f7f1 fec9 	bl	80002dc <__adddf3>
 800e54a:	2200      	movs	r2, #0
 800e54c:	2300      	movs	r3, #0
 800e54e:	f7f2 fb0b 	bl	8000b68 <__aeabi_dcmpgt>
 800e552:	2800      	cmp	r0, #0
 800e554:	d0eb      	beq.n	800e52e <floor+0x46>
 800e556:	2c00      	cmp	r4, #0
 800e558:	bfbe      	ittt	lt
 800e55a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e55e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e562:	19a4      	addlt	r4, r4, r6
 800e564:	ea24 0407 	bic.w	r4, r4, r7
 800e568:	2500      	movs	r5, #0
 800e56a:	e7e0      	b.n	800e52e <floor+0x46>
 800e56c:	2e33      	cmp	r6, #51	; 0x33
 800e56e:	dd0b      	ble.n	800e588 <floor+0xa0>
 800e570:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e574:	d104      	bne.n	800e580 <floor+0x98>
 800e576:	ee10 2a10 	vmov	r2, s0
 800e57a:	460b      	mov	r3, r1
 800e57c:	f7f1 feae 	bl	80002dc <__adddf3>
 800e580:	ec41 0b10 	vmov	d0, r0, r1
 800e584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e588:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e58c:	f04f 33ff 	mov.w	r3, #4294967295
 800e590:	fa23 f707 	lsr.w	r7, r3, r7
 800e594:	4207      	tst	r7, r0
 800e596:	d0f3      	beq.n	800e580 <floor+0x98>
 800e598:	a30f      	add	r3, pc, #60	; (adr r3, 800e5d8 <floor+0xf0>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f1 fe9d 	bl	80002dc <__adddf3>
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f7f2 fadf 	bl	8000b68 <__aeabi_dcmpgt>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d0bf      	beq.n	800e52e <floor+0x46>
 800e5ae:	2c00      	cmp	r4, #0
 800e5b0:	da02      	bge.n	800e5b8 <floor+0xd0>
 800e5b2:	2e14      	cmp	r6, #20
 800e5b4:	d103      	bne.n	800e5be <floor+0xd6>
 800e5b6:	3401      	adds	r4, #1
 800e5b8:	ea25 0507 	bic.w	r5, r5, r7
 800e5bc:	e7b7      	b.n	800e52e <floor+0x46>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e5c4:	fa03 f606 	lsl.w	r6, r3, r6
 800e5c8:	4435      	add	r5, r6
 800e5ca:	4545      	cmp	r5, r8
 800e5cc:	bf38      	it	cc
 800e5ce:	18e4      	addcc	r4, r4, r3
 800e5d0:	e7f2      	b.n	800e5b8 <floor+0xd0>
 800e5d2:	2500      	movs	r5, #0
 800e5d4:	462c      	mov	r4, r5
 800e5d6:	e7aa      	b.n	800e52e <floor+0x46>
 800e5d8:	8800759c 	.word	0x8800759c
 800e5dc:	7e37e43c 	.word	0x7e37e43c
 800e5e0:	bff00000 	.word	0xbff00000
 800e5e4:	000fffff 	.word	0x000fffff

0800e5e8 <scalbn>:
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	ec55 4b10 	vmov	r4, r5, d0
 800e5ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	b99a      	cbnz	r2, 800e620 <scalbn+0x38>
 800e5f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e5fc:	4323      	orrs	r3, r4
 800e5fe:	d036      	beq.n	800e66e <scalbn+0x86>
 800e600:	4b39      	ldr	r3, [pc, #228]	; (800e6e8 <scalbn+0x100>)
 800e602:	4629      	mov	r1, r5
 800e604:	ee10 0a10 	vmov	r0, s0
 800e608:	2200      	movs	r2, #0
 800e60a:	f7f2 f81d 	bl	8000648 <__aeabi_dmul>
 800e60e:	4b37      	ldr	r3, [pc, #220]	; (800e6ec <scalbn+0x104>)
 800e610:	429e      	cmp	r6, r3
 800e612:	4604      	mov	r4, r0
 800e614:	460d      	mov	r5, r1
 800e616:	da10      	bge.n	800e63a <scalbn+0x52>
 800e618:	a32b      	add	r3, pc, #172	; (adr r3, 800e6c8 <scalbn+0xe0>)
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	e03a      	b.n	800e696 <scalbn+0xae>
 800e620:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e624:	428a      	cmp	r2, r1
 800e626:	d10c      	bne.n	800e642 <scalbn+0x5a>
 800e628:	ee10 2a10 	vmov	r2, s0
 800e62c:	4620      	mov	r0, r4
 800e62e:	4629      	mov	r1, r5
 800e630:	f7f1 fe54 	bl	80002dc <__adddf3>
 800e634:	4604      	mov	r4, r0
 800e636:	460d      	mov	r5, r1
 800e638:	e019      	b.n	800e66e <scalbn+0x86>
 800e63a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e63e:	460b      	mov	r3, r1
 800e640:	3a36      	subs	r2, #54	; 0x36
 800e642:	4432      	add	r2, r6
 800e644:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e648:	428a      	cmp	r2, r1
 800e64a:	dd08      	ble.n	800e65e <scalbn+0x76>
 800e64c:	2d00      	cmp	r5, #0
 800e64e:	a120      	add	r1, pc, #128	; (adr r1, 800e6d0 <scalbn+0xe8>)
 800e650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e654:	da1c      	bge.n	800e690 <scalbn+0xa8>
 800e656:	a120      	add	r1, pc, #128	; (adr r1, 800e6d8 <scalbn+0xf0>)
 800e658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e65c:	e018      	b.n	800e690 <scalbn+0xa8>
 800e65e:	2a00      	cmp	r2, #0
 800e660:	dd08      	ble.n	800e674 <scalbn+0x8c>
 800e662:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e66a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e66e:	ec45 4b10 	vmov	d0, r4, r5
 800e672:	bd70      	pop	{r4, r5, r6, pc}
 800e674:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e678:	da19      	bge.n	800e6ae <scalbn+0xc6>
 800e67a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e67e:	429e      	cmp	r6, r3
 800e680:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e684:	dd0a      	ble.n	800e69c <scalbn+0xb4>
 800e686:	a112      	add	r1, pc, #72	; (adr r1, 800e6d0 <scalbn+0xe8>)
 800e688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1e2      	bne.n	800e656 <scalbn+0x6e>
 800e690:	a30f      	add	r3, pc, #60	; (adr r3, 800e6d0 <scalbn+0xe8>)
 800e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e696:	f7f1 ffd7 	bl	8000648 <__aeabi_dmul>
 800e69a:	e7cb      	b.n	800e634 <scalbn+0x4c>
 800e69c:	a10a      	add	r1, pc, #40	; (adr r1, 800e6c8 <scalbn+0xe0>)
 800e69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d0b8      	beq.n	800e618 <scalbn+0x30>
 800e6a6:	a10e      	add	r1, pc, #56	; (adr r1, 800e6e0 <scalbn+0xf8>)
 800e6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ac:	e7b4      	b.n	800e618 <scalbn+0x30>
 800e6ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6b2:	3236      	adds	r2, #54	; 0x36
 800e6b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e6bc:	4620      	mov	r0, r4
 800e6be:	4b0c      	ldr	r3, [pc, #48]	; (800e6f0 <scalbn+0x108>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	e7e8      	b.n	800e696 <scalbn+0xae>
 800e6c4:	f3af 8000 	nop.w
 800e6c8:	c2f8f359 	.word	0xc2f8f359
 800e6cc:	01a56e1f 	.word	0x01a56e1f
 800e6d0:	8800759c 	.word	0x8800759c
 800e6d4:	7e37e43c 	.word	0x7e37e43c
 800e6d8:	8800759c 	.word	0x8800759c
 800e6dc:	fe37e43c 	.word	0xfe37e43c
 800e6e0:	c2f8f359 	.word	0xc2f8f359
 800e6e4:	81a56e1f 	.word	0x81a56e1f
 800e6e8:	43500000 	.word	0x43500000
 800e6ec:	ffff3cb0 	.word	0xffff3cb0
 800e6f0:	3c900000 	.word	0x3c900000

0800e6f4 <_init>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	bf00      	nop
 800e6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6fa:	bc08      	pop	{r3}
 800e6fc:	469e      	mov	lr, r3
 800e6fe:	4770      	bx	lr

0800e700 <_fini>:
 800e700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e702:	bf00      	nop
 800e704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e706:	bc08      	pop	{r3}
 800e708:	469e      	mov	lr, r3
 800e70a:	4770      	bx	lr
