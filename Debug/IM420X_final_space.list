
IM420X_final_space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff8c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08010170  08010170  00020170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010938  08010938  000302a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010938  08010938  00020938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010940  08010940  000302a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010940  08010940  00020940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010944  08010944  00020944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08010948  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d64  200002a0  08010be8  000302a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007004  08010be8  00037004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027591  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e2c  00000000  00000000  00057861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  0005c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b48  00000000  00000000  0005e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b75a  00000000  00000000  0005ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f0e  00000000  00000000  0008b682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bca1  00000000  00000000  000af590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bb231  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009348  00000000  00000000  001bb284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a0 	.word	0x200002a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010154 	.word	0x08010154

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a4 	.word	0x200002a4
 800021c:	08010154 	.word	0x08010154

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 bc20 	b.w	80014f0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 fab2 	bl	8001220 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__muldc3>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	ed2d 8b06 	vpush	{d8-d10}
 8000cd0:	eeb0 8a42 	vmov.f32	s16, s4
 8000cd4:	eef0 8a62 	vmov.f32	s17, s5
 8000cd8:	eeb0 aa42 	vmov.f32	s20, s4
 8000cdc:	eef0 aa62 	vmov.f32	s21, s5
 8000ce0:	ec55 4b10 	vmov	r4, r5, d0
 8000ce4:	b08d      	sub	sp, #52	; 0x34
 8000ce6:	ec53 2b12 	vmov	r2, r3, d2
 8000cea:	ee10 0a10 	vmov	r0, s0
 8000cee:	4629      	mov	r1, r5
 8000cf0:	ec5b ab11 	vmov	sl, fp, d1
 8000cf4:	ec57 6b13 	vmov	r6, r7, d3
 8000cf8:	f7ff fca6 	bl	8000648 <__aeabi_dmul>
 8000cfc:	4632      	mov	r2, r6
 8000cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8000d02:	463b      	mov	r3, r7
 8000d04:	4650      	mov	r0, sl
 8000d06:	4659      	mov	r1, fp
 8000d08:	f7ff fc9e 	bl	8000648 <__aeabi_dmul>
 8000d0c:	4632      	mov	r2, r6
 8000d0e:	4680      	mov	r8, r0
 8000d10:	4689      	mov	r9, r1
 8000d12:	463b      	mov	r3, r7
 8000d14:	4620      	mov	r0, r4
 8000d16:	4629      	mov	r1, r5
 8000d18:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000d1c:	f7ff fc94 	bl	8000648 <__aeabi_dmul>
 8000d20:	4652      	mov	r2, sl
 8000d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000d26:	465b      	mov	r3, fp
 8000d28:	ec51 0b18 	vmov	r0, r1, d8
 8000d2c:	f7ff fc8c 	bl	8000648 <__aeabi_dmul>
 8000d30:	4642      	mov	r2, r8
 8000d32:	464b      	mov	r3, r9
 8000d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000d38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000d3c:	f7ff facc 	bl	80002d8 <__aeabi_dsub>
 8000d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000d44:	4680      	mov	r8, r0
 8000d46:	4689      	mov	r9, r1
 8000d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000d4c:	f7ff fac6 	bl	80002dc <__adddf3>
 8000d50:	4642      	mov	r2, r8
 8000d52:	ec41 0b18 	vmov	d8, r0, r1
 8000d56:	464b      	mov	r3, r9
 8000d58:	4640      	mov	r0, r8
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	f7ff ff0e 	bl	8000b7c <__aeabi_dcmpun>
 8000d60:	b950      	cbnz	r0, 8000d78 <__muldc3+0xb0>
 8000d62:	eeb0 1a48 	vmov.f32	s2, s16
 8000d66:	eef0 1a68 	vmov.f32	s3, s17
 8000d6a:	ec49 8b10 	vmov	d0, r8, r9
 8000d6e:	b00d      	add	sp, #52	; 0x34
 8000d70:	ecbd 8b06 	vpop	{d8-d10}
 8000d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d78:	ec53 2b18 	vmov	r2, r3, d8
 8000d7c:	ec51 0b18 	vmov	r0, r1, d8
 8000d80:	f7ff fefc 	bl	8000b7c <__aeabi_dcmpun>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d0ec      	beq.n	8000d62 <__muldc3+0x9a>
 8000d88:	f04f 0301 	mov.w	r3, #1
 8000d8c:	f88d 3020 	strb.w	r3, [sp, #32]
 8000d90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8000d94:	ee09 3a90 	vmov	s19, r3
 8000d98:	ee09 4a10 	vmov	s18, r4
 8000d9c:	4b9b      	ldr	r3, [pc, #620]	; (800100c <__muldc3+0x344>)
 8000d9e:	ec51 0b19 	vmov	r0, r1, d9
 8000da2:	f04f 32ff 	mov.w	r2, #4294967295
 8000da6:	f7ff fee9 	bl	8000b7c <__aeabi_dcmpun>
 8000daa:	b948      	cbnz	r0, 8000dc0 <__muldc3+0xf8>
 8000dac:	4b97      	ldr	r3, [pc, #604]	; (800100c <__muldc3+0x344>)
 8000dae:	ec51 0b19 	vmov	r0, r1, d9
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295
 8000db6:	f7ff fec3 	bl	8000b40 <__aeabi_dcmple>
 8000dba:	b908      	cbnz	r0, 8000dc0 <__muldc3+0xf8>
 8000dbc:	f88d 0020 	strb.w	r0, [sp, #32]
 8000dc0:	9b08      	ldr	r3, [sp, #32]
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8000dca:	ec51 0b19 	vmov	r0, r1, d9
 8000dce:	4b8f      	ldr	r3, [pc, #572]	; (800100c <__muldc3+0x344>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	f7ff fed2 	bl	8000b7c <__aeabi_dcmpun>
 8000dd8:	b948      	cbnz	r0, 8000dee <__muldc3+0x126>
 8000dda:	ec51 0b19 	vmov	r0, r1, d9
 8000dde:	4b8b      	ldr	r3, [pc, #556]	; (800100c <__muldc3+0x344>)
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	f7ff feac 	bl	8000b40 <__aeabi_dcmple>
 8000de8:	2800      	cmp	r0, #0
 8000dea:	f000 80c6 	beq.w	8000f7a <__muldc3+0x2b2>
 8000dee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8000df2:	9309      	str	r3, [sp, #36]	; 0x24
 8000df4:	f8cd a020 	str.w	sl, [sp, #32]
 8000df8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000dfc:	4b83      	ldr	r3, [pc, #524]	; (800100c <__muldc3+0x344>)
 8000dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000e02:	f7ff febb 	bl	8000b7c <__aeabi_dcmpun>
 8000e06:	b948      	cbnz	r0, 8000e1c <__muldc3+0x154>
 8000e08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000e0c:	4b7f      	ldr	r3, [pc, #508]	; (800100c <__muldc3+0x344>)
 8000e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e12:	f7ff fe95 	bl	8000b40 <__aeabi_dcmple>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	f000 80af 	beq.w	8000f7a <__muldc3+0x2b2>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e20:	ec52 1b1a 	vmov	r1, r2, d10
 8000e24:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000e28:	ee09 3a90 	vmov	s19, r3
 8000e2c:	eeb0 9a4a 	vmov.f32	s18, s20
 8000e30:	4b76      	ldr	r3, [pc, #472]	; (800100c <__muldc3+0x344>)
 8000e32:	ec51 0b19 	vmov	r0, r1, d9
 8000e36:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3a:	f7ff fe9f 	bl	8000b7c <__aeabi_dcmpun>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	f040 80e8 	bne.w	8001014 <__muldc3+0x34c>
 8000e44:	4b71      	ldr	r3, [pc, #452]	; (800100c <__muldc3+0x344>)
 8000e46:	ec51 0b19 	vmov	r0, r1, d9
 8000e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4e:	f7ff fe77 	bl	8000b40 <__aeabi_dcmple>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	f040 80de 	bne.w	8001014 <__muldc3+0x34c>
 8000e58:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8000e5c:	9608      	str	r6, [sp, #32]
 8000e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e60:	4b6a      	ldr	r3, [pc, #424]	; (800100c <__muldc3+0x344>)
 8000e62:	ec51 0b19 	vmov	r0, r1, d9
 8000e66:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6a:	f04f 0801 	mov.w	r8, #1
 8000e6e:	f7ff fe85 	bl	8000b7c <__aeabi_dcmpun>
 8000e72:	b940      	cbnz	r0, 8000e86 <__muldc3+0x1be>
 8000e74:	ec51 0b19 	vmov	r0, r1, d9
 8000e78:	4b64      	ldr	r3, [pc, #400]	; (800100c <__muldc3+0x344>)
 8000e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7e:	f7ff fe5f 	bl	8000b40 <__aeabi_dcmple>
 8000e82:	b900      	cbnz	r0, 8000e86 <__muldc3+0x1be>
 8000e84:	4680      	mov	r8, r0
 8000e86:	f088 0001 	eor.w	r0, r8, #1
 8000e8a:	f000 0001 	and.w	r0, r0, #1
 8000e8e:	f7ff fb71 	bl	8000574 <__aeabi_i2d>
 8000e92:	ee1a 3a90 	vmov	r3, s21
 8000e96:	e9cd 0100 	strd	r0, r1, [sp]
 8000e9a:	9a00      	ldr	r2, [sp, #0]
 8000e9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ea0:	f003 4c00 	and.w	ip, r3, #2147483648	; 0x80000000
 8000ea4:	ea41 030c 	orr.w	r3, r1, ip
 8000ea8:	ec43 2b1a 	vmov	d10, r2, r3
 8000eac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000eb0:	4b56      	ldr	r3, [pc, #344]	; (800100c <__muldc3+0x344>)
 8000eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb6:	f04f 0801 	mov.w	r8, #1
 8000eba:	f7ff fe5f 	bl	8000b7c <__aeabi_dcmpun>
 8000ebe:	b940      	cbnz	r0, 8000ed2 <__muldc3+0x20a>
 8000ec0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000ec4:	4b51      	ldr	r3, [pc, #324]	; (800100c <__muldc3+0x344>)
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	f7ff fe39 	bl	8000b40 <__aeabi_dcmple>
 8000ece:	b900      	cbnz	r0, 8000ed2 <__muldc3+0x20a>
 8000ed0:	4680      	mov	r8, r0
 8000ed2:	f088 0001 	eor.w	r0, r8, #1
 8000ed6:	f000 0001 	and.w	r0, r0, #1
 8000eda:	f7ff fb4b 	bl	8000574 <__aeabi_i2d>
 8000ede:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8000ee2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8000ee6:	ea42 0703 	orr.w	r7, r2, r3
 8000eea:	4606      	mov	r6, r0
 8000eec:	4622      	mov	r2, r4
 8000eee:	462b      	mov	r3, r5
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	f7ff fe42 	bl	8000b7c <__aeabi_dcmpun>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	f040 814d 	bne.w	8001198 <__muldc3+0x4d0>
 8000efe:	4652      	mov	r2, sl
 8000f00:	465b      	mov	r3, fp
 8000f02:	4650      	mov	r0, sl
 8000f04:	4659      	mov	r1, fp
 8000f06:	f7ff fe39 	bl	8000b7c <__aeabi_dcmpun>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	f040 8137 	bne.w	800117e <__muldc3+0x4b6>
 8000f10:	ec53 2b1a 	vmov	r2, r3, d10
 8000f14:	4620      	mov	r0, r4
 8000f16:	4629      	mov	r1, r5
 8000f18:	f7ff fb96 	bl	8000648 <__aeabi_dmul>
 8000f1c:	4632      	mov	r2, r6
 8000f1e:	4680      	mov	r8, r0
 8000f20:	4689      	mov	r9, r1
 8000f22:	463b      	mov	r3, r7
 8000f24:	4650      	mov	r0, sl
 8000f26:	4659      	mov	r1, fp
 8000f28:	f7ff fb8e 	bl	8000648 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4640      	mov	r0, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	f7ff f9d0 	bl	80002d8 <__aeabi_dsub>
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <__muldc3+0x348>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f7ff fb84 	bl	8000648 <__aeabi_dmul>
 8000f40:	4632      	mov	r2, r6
 8000f42:	463b      	mov	r3, r7
 8000f44:	4680      	mov	r8, r0
 8000f46:	4689      	mov	r9, r1
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f7ff fb7c 	bl	8000648 <__aeabi_dmul>
 8000f50:	ec53 2b1a 	vmov	r2, r3, d10
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	4650      	mov	r0, sl
 8000f5a:	4659      	mov	r1, fp
 8000f5c:	f7ff fb74 	bl	8000648 <__aeabi_dmul>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4620      	mov	r0, r4
 8000f66:	4629      	mov	r1, r5
 8000f68:	f7ff f9b8 	bl	80002dc <__adddf3>
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <__muldc3+0x348>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f7ff fb6a 	bl	8000648 <__aeabi_dmul>
 8000f74:	ec41 0b18 	vmov	d8, r0, r1
 8000f78:	e6f3      	b.n	8000d62 <__muldc3+0x9a>
 8000f7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000f7c:	f7ff fafa 	bl	8000574 <__aeabi_i2d>
 8000f80:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 8000f84:	f04f 0201 	mov.w	r2, #1
 8000f88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8000f8c:	9409      	str	r4, [sp, #36]	; 0x24
 8000f8e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8000f92:	f8cd a020 	str.w	sl, [sp, #32]
 8000f96:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8000f9a:	ea42 0503 	orr.w	r5, r2, r3
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <__muldc3+0x344>)
 8000fa2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8000faa:	f7ff fde7 	bl	8000b7c <__aeabi_dcmpun>
 8000fae:	b948      	cbnz	r0, 8000fc4 <__muldc3+0x2fc>
 8000fb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <__muldc3+0x344>)
 8000fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fba:	f7ff fdc1 	bl	8000b40 <__aeabi_dcmple>
 8000fbe:	b908      	cbnz	r0, 8000fc4 <__muldc3+0x2fc>
 8000fc0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
 8000fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000fc6:	f083 0001 	eor.w	r0, r3, #1
 8000fca:	f000 0001 	and.w	r0, r0, #1
 8000fce:	f7ff fad1 	bl	8000574 <__aeabi_i2d>
 8000fd2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8000fd6:	4682      	mov	sl, r0
 8000fd8:	ec51 0b1a 	vmov	r0, r1, d10
 8000fdc:	f00b 4300 	and.w	r3, fp, #2147483648	; 0x80000000
 8000fe0:	ea42 0b03 	orr.w	fp, r2, r3
 8000fe4:	ee1a 2a10 	vmov	r2, s20
 8000fe8:	460b      	mov	r3, r1
 8000fea:	f7ff fdc7 	bl	8000b7c <__aeabi_dcmpun>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	f040 80de 	bne.w	80011b0 <__muldc3+0x4e8>
 8000ff4:	4632      	mov	r2, r6
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	4639      	mov	r1, r7
 8000ffc:	f7ff fdbe 	bl	8000b7c <__aeabi_dcmpun>
 8001000:	2800      	cmp	r0, #0
 8001002:	f040 80ad 	bne.w	8001160 <__muldc3+0x498>
 8001006:	2301      	movs	r3, #1
 8001008:	930b      	str	r3, [sp, #44]	; 0x2c
 800100a:	e709      	b.n	8000e20 <__muldc3+0x158>
 800100c:	7fefffff 	.word	0x7fefffff
 8001010:	7ff00000 	.word	0x7ff00000
 8001014:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8001018:	9309      	str	r3, [sp, #36]	; 0x24
 800101a:	9608      	str	r6, [sp, #32]
 800101c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001020:	4b7e      	ldr	r3, [pc, #504]	; (800121c <__muldc3+0x554>)
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	f7ff fda9 	bl	8000b7c <__aeabi_dcmpun>
 800102a:	b948      	cbnz	r0, 8001040 <__muldc3+0x378>
 800102c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001030:	4b7a      	ldr	r3, [pc, #488]	; (800121c <__muldc3+0x554>)
 8001032:	f04f 32ff 	mov.w	r2, #4294967295
 8001036:	f7ff fd83 	bl	8000b40 <__aeabi_dcmple>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f af10 	beq.w	8000e60 <__muldc3+0x198>
 8001040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001042:	2b00      	cmp	r3, #0
 8001044:	f47f af64 	bne.w	8000f10 <__muldc3+0x248>
 8001048:	e9dd 1200 	ldrd	r1, r2, [sp]
 800104c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8001050:	9309      	str	r3, [sp, #36]	; 0x24
 8001052:	9108      	str	r1, [sp, #32]
 8001054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001058:	4b70      	ldr	r3, [pc, #448]	; (800121c <__muldc3+0x554>)
 800105a:	f04f 32ff 	mov.w	r2, #4294967295
 800105e:	f7ff fd8d 	bl	8000b7c <__aeabi_dcmpun>
 8001062:	b940      	cbnz	r0, 8001076 <__muldc3+0x3ae>
 8001064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001068:	4b6c      	ldr	r3, [pc, #432]	; (800121c <__muldc3+0x554>)
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	f7ff fd67 	bl	8000b40 <__aeabi_dcmple>
 8001072:	2800      	cmp	r0, #0
 8001074:	d046      	beq.n	8001104 <__muldc3+0x43c>
 8001076:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800107a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	9100      	str	r1, [sp, #0]
 8001082:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001086:	4b65      	ldr	r3, [pc, #404]	; (800121c <__muldc3+0x554>)
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	f7ff fd76 	bl	8000b7c <__aeabi_dcmpun>
 8001090:	b940      	cbnz	r0, 80010a4 <__muldc3+0x3dc>
 8001092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001096:	4b61      	ldr	r3, [pc, #388]	; (800121c <__muldc3+0x554>)
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	f7ff fd50 	bl	8000b40 <__aeabi_dcmple>
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d02f      	beq.n	8001104 <__muldc3+0x43c>
 80010a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80010a8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	9100      	str	r1, [sp, #0]
 80010b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <__muldc3+0x554>)
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ba:	f7ff fd5f 	bl	8000b7c <__aeabi_dcmpun>
 80010be:	b938      	cbnz	r0, 80010d0 <__muldc3+0x408>
 80010c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <__muldc3+0x554>)
 80010c6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ca:	f7ff fd39 	bl	8000b40 <__aeabi_dcmple>
 80010ce:	b1c8      	cbz	r0, 8001104 <__muldc3+0x43c>
 80010d0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80010d4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	9100      	str	r1, [sp, #0]
 80010dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80010e0:	4b4e      	ldr	r3, [pc, #312]	; (800121c <__muldc3+0x554>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	f7ff fd49 	bl	8000b7c <__aeabi_dcmpun>
 80010ea:	2800      	cmp	r0, #0
 80010ec:	f47f ae39 	bne.w	8000d62 <__muldc3+0x9a>
 80010f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80010f4:	4b49      	ldr	r3, [pc, #292]	; (800121c <__muldc3+0x554>)
 80010f6:	f04f 32ff 	mov.w	r2, #4294967295
 80010fa:	f7ff fd21 	bl	8000b40 <__aeabi_dcmple>
 80010fe:	2800      	cmp	r0, #0
 8001100:	f47f ae2f 	bne.w	8000d62 <__muldc3+0x9a>
 8001104:	4622      	mov	r2, r4
 8001106:	462b      	mov	r3, r5
 8001108:	4620      	mov	r0, r4
 800110a:	4629      	mov	r1, r5
 800110c:	f7ff fd36 	bl	8000b7c <__aeabi_dcmpun>
 8001110:	2800      	cmp	r0, #0
 8001112:	d176      	bne.n	8001202 <__muldc3+0x53a>
 8001114:	4652      	mov	r2, sl
 8001116:	465b      	mov	r3, fp
 8001118:	4650      	mov	r0, sl
 800111a:	4659      	mov	r1, fp
 800111c:	f7ff fd2e 	bl	8000b7c <__aeabi_dcmpun>
 8001120:	2800      	cmp	r0, #0
 8001122:	d161      	bne.n	80011e8 <__muldc3+0x520>
 8001124:	ec51 0b1a 	vmov	r0, r1, d10
 8001128:	ee1a 2a10 	vmov	r2, s20
 800112c:	460b      	mov	r3, r1
 800112e:	f7ff fd25 	bl	8000b7c <__aeabi_dcmpun>
 8001132:	2800      	cmp	r0, #0
 8001134:	d14a      	bne.n	80011cc <__muldc3+0x504>
 8001136:	4632      	mov	r2, r6
 8001138:	463b      	mov	r3, r7
 800113a:	4630      	mov	r0, r6
 800113c:	4639      	mov	r1, r7
 800113e:	f7ff fd1d 	bl	8000b7c <__aeabi_dcmpun>
 8001142:	2800      	cmp	r0, #0
 8001144:	f43f aee4 	beq.w	8000f10 <__muldc3+0x248>
 8001148:	2f00      	cmp	r7, #0
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	bfbc      	itt	lt
 8001154:	2200      	movlt	r2, #0
 8001156:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800115a:	4616      	mov	r6, r2
 800115c:	461f      	mov	r7, r3
 800115e:	e6d7      	b.n	8000f10 <__muldc3+0x248>
 8001160:	2f00      	cmp	r7, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	bfb8      	it	lt
 8001168:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	461f      	mov	r7, r3
 8001172:	bfb8      	it	lt
 8001174:	2200      	movlt	r2, #0
 8001176:	2301      	movs	r3, #1
 8001178:	4616      	mov	r6, r2
 800117a:	930b      	str	r3, [sp, #44]	; 0x2c
 800117c:	e650      	b.n	8000e20 <__muldc3+0x158>
 800117e:	f1bb 0f00 	cmp.w	fp, #0
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	bfbc      	itt	lt
 800118c:	2200      	movlt	r2, #0
 800118e:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001192:	4692      	mov	sl, r2
 8001194:	469b      	mov	fp, r3
 8001196:	e6bb      	b.n	8000f10 <__muldc3+0x248>
 8001198:	2d00      	cmp	r5, #0
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	bfbc      	itt	lt
 80011a4:	2200      	movlt	r2, #0
 80011a6:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011aa:	4614      	mov	r4, r2
 80011ac:	461d      	mov	r5, r3
 80011ae:	e6a6      	b.n	8000efe <__muldc3+0x236>
 80011b0:	ee1a 1a90 	vmov	r1, s21
 80011b4:	2900      	cmp	r1, #0
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	bfbc      	itt	lt
 80011c0:	2200      	movlt	r2, #0
 80011c2:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011c6:	ec43 2b1a 	vmov	d10, r2, r3
 80011ca:	e713      	b.n	8000ff4 <__muldc3+0x32c>
 80011cc:	ee1a 1a90 	vmov	r1, s21
 80011d0:	2900      	cmp	r1, #0
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	bfbc      	itt	lt
 80011dc:	2200      	movlt	r2, #0
 80011de:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011e2:	ec43 2b1a 	vmov	d10, r2, r3
 80011e6:	e7a6      	b.n	8001136 <__muldc3+0x46e>
 80011e8:	f1bb 0f00 	cmp.w	fp, #0
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	bfbc      	itt	lt
 80011f6:	2200      	movlt	r2, #0
 80011f8:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011fc:	4692      	mov	sl, r2
 80011fe:	469b      	mov	fp, r3
 8001200:	e790      	b.n	8001124 <__muldc3+0x45c>
 8001202:	2d00      	cmp	r5, #0
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	bfbc      	itt	lt
 800120e:	2200      	movlt	r2, #0
 8001210:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001214:	4614      	mov	r4, r2
 8001216:	461d      	mov	r5, r3
 8001218:	e77c      	b.n	8001114 <__muldc3+0x44c>
 800121a:	bf00      	nop
 800121c:	7fefffff 	.word	0x7fefffff

08001220 <__udivmoddi4>:
 8001220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001224:	9d08      	ldr	r5, [sp, #32]
 8001226:	4604      	mov	r4, r0
 8001228:	468e      	mov	lr, r1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d14d      	bne.n	80012ca <__udivmoddi4+0xaa>
 800122e:	428a      	cmp	r2, r1
 8001230:	4694      	mov	ip, r2
 8001232:	d969      	bls.n	8001308 <__udivmoddi4+0xe8>
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b152      	cbz	r2, 8001250 <__udivmoddi4+0x30>
 800123a:	fa01 f302 	lsl.w	r3, r1, r2
 800123e:	f1c2 0120 	rsb	r1, r2, #32
 8001242:	fa20 f101 	lsr.w	r1, r0, r1
 8001246:	fa0c fc02 	lsl.w	ip, ip, r2
 800124a:	ea41 0e03 	orr.w	lr, r1, r3
 800124e:	4094      	lsls	r4, r2
 8001250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001254:	0c21      	lsrs	r1, r4, #16
 8001256:	fbbe f6f8 	udiv	r6, lr, r8
 800125a:	fa1f f78c 	uxth.w	r7, ip
 800125e:	fb08 e316 	mls	r3, r8, r6, lr
 8001262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001266:	fb06 f107 	mul.w	r1, r6, r7
 800126a:	4299      	cmp	r1, r3
 800126c:	d90a      	bls.n	8001284 <__udivmoddi4+0x64>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f106 30ff 	add.w	r0, r6, #4294967295
 8001276:	f080 811f 	bcs.w	80014b8 <__udivmoddi4+0x298>
 800127a:	4299      	cmp	r1, r3
 800127c:	f240 811c 	bls.w	80014b8 <__udivmoddi4+0x298>
 8001280:	3e02      	subs	r6, #2
 8001282:	4463      	add	r3, ip
 8001284:	1a5b      	subs	r3, r3, r1
 8001286:	b2a4      	uxth	r4, r4
 8001288:	fbb3 f0f8 	udiv	r0, r3, r8
 800128c:	fb08 3310 	mls	r3, r8, r0, r3
 8001290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001294:	fb00 f707 	mul.w	r7, r0, r7
 8001298:	42a7      	cmp	r7, r4
 800129a:	d90a      	bls.n	80012b2 <__udivmoddi4+0x92>
 800129c:	eb1c 0404 	adds.w	r4, ip, r4
 80012a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80012a4:	f080 810a 	bcs.w	80014bc <__udivmoddi4+0x29c>
 80012a8:	42a7      	cmp	r7, r4
 80012aa:	f240 8107 	bls.w	80014bc <__udivmoddi4+0x29c>
 80012ae:	4464      	add	r4, ip
 80012b0:	3802      	subs	r0, #2
 80012b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012b6:	1be4      	subs	r4, r4, r7
 80012b8:	2600      	movs	r6, #0
 80012ba:	b11d      	cbz	r5, 80012c4 <__udivmoddi4+0xa4>
 80012bc:	40d4      	lsrs	r4, r2
 80012be:	2300      	movs	r3, #0
 80012c0:	e9c5 4300 	strd	r4, r3, [r5]
 80012c4:	4631      	mov	r1, r6
 80012c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ca:	428b      	cmp	r3, r1
 80012cc:	d909      	bls.n	80012e2 <__udivmoddi4+0xc2>
 80012ce:	2d00      	cmp	r5, #0
 80012d0:	f000 80ef 	beq.w	80014b2 <__udivmoddi4+0x292>
 80012d4:	2600      	movs	r6, #0
 80012d6:	e9c5 0100 	strd	r0, r1, [r5]
 80012da:	4630      	mov	r0, r6
 80012dc:	4631      	mov	r1, r6
 80012de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e2:	fab3 f683 	clz	r6, r3
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	d14a      	bne.n	8001380 <__udivmoddi4+0x160>
 80012ea:	428b      	cmp	r3, r1
 80012ec:	d302      	bcc.n	80012f4 <__udivmoddi4+0xd4>
 80012ee:	4282      	cmp	r2, r0
 80012f0:	f200 80f9 	bhi.w	80014e6 <__udivmoddi4+0x2c6>
 80012f4:	1a84      	subs	r4, r0, r2
 80012f6:	eb61 0303 	sbc.w	r3, r1, r3
 80012fa:	2001      	movs	r0, #1
 80012fc:	469e      	mov	lr, r3
 80012fe:	2d00      	cmp	r5, #0
 8001300:	d0e0      	beq.n	80012c4 <__udivmoddi4+0xa4>
 8001302:	e9c5 4e00 	strd	r4, lr, [r5]
 8001306:	e7dd      	b.n	80012c4 <__udivmoddi4+0xa4>
 8001308:	b902      	cbnz	r2, 800130c <__udivmoddi4+0xec>
 800130a:	deff      	udf	#255	; 0xff
 800130c:	fab2 f282 	clz	r2, r2
 8001310:	2a00      	cmp	r2, #0
 8001312:	f040 8092 	bne.w	800143a <__udivmoddi4+0x21a>
 8001316:	eba1 010c 	sub.w	r1, r1, ip
 800131a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800131e:	fa1f fe8c 	uxth.w	lr, ip
 8001322:	2601      	movs	r6, #1
 8001324:	0c20      	lsrs	r0, r4, #16
 8001326:	fbb1 f3f7 	udiv	r3, r1, r7
 800132a:	fb07 1113 	mls	r1, r7, r3, r1
 800132e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001332:	fb0e f003 	mul.w	r0, lr, r3
 8001336:	4288      	cmp	r0, r1
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x12c>
 800133a:	eb1c 0101 	adds.w	r1, ip, r1
 800133e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001342:	d202      	bcs.n	800134a <__udivmoddi4+0x12a>
 8001344:	4288      	cmp	r0, r1
 8001346:	f200 80cb 	bhi.w	80014e0 <__udivmoddi4+0x2c0>
 800134a:	4643      	mov	r3, r8
 800134c:	1a09      	subs	r1, r1, r0
 800134e:	b2a4      	uxth	r4, r4
 8001350:	fbb1 f0f7 	udiv	r0, r1, r7
 8001354:	fb07 1110 	mls	r1, r7, r0, r1
 8001358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800135c:	fb0e fe00 	mul.w	lr, lr, r0
 8001360:	45a6      	cmp	lr, r4
 8001362:	d908      	bls.n	8001376 <__udivmoddi4+0x156>
 8001364:	eb1c 0404 	adds.w	r4, ip, r4
 8001368:	f100 31ff 	add.w	r1, r0, #4294967295
 800136c:	d202      	bcs.n	8001374 <__udivmoddi4+0x154>
 800136e:	45a6      	cmp	lr, r4
 8001370:	f200 80bb 	bhi.w	80014ea <__udivmoddi4+0x2ca>
 8001374:	4608      	mov	r0, r1
 8001376:	eba4 040e 	sub.w	r4, r4, lr
 800137a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800137e:	e79c      	b.n	80012ba <__udivmoddi4+0x9a>
 8001380:	f1c6 0720 	rsb	r7, r6, #32
 8001384:	40b3      	lsls	r3, r6
 8001386:	fa22 fc07 	lsr.w	ip, r2, r7
 800138a:	ea4c 0c03 	orr.w	ip, ip, r3
 800138e:	fa20 f407 	lsr.w	r4, r0, r7
 8001392:	fa01 f306 	lsl.w	r3, r1, r6
 8001396:	431c      	orrs	r4, r3
 8001398:	40f9      	lsrs	r1, r7
 800139a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800139e:	fa00 f306 	lsl.w	r3, r0, r6
 80013a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80013a6:	0c20      	lsrs	r0, r4, #16
 80013a8:	fa1f fe8c 	uxth.w	lr, ip
 80013ac:	fb09 1118 	mls	r1, r9, r8, r1
 80013b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80013b4:	fb08 f00e 	mul.w	r0, r8, lr
 80013b8:	4288      	cmp	r0, r1
 80013ba:	fa02 f206 	lsl.w	r2, r2, r6
 80013be:	d90b      	bls.n	80013d8 <__udivmoddi4+0x1b8>
 80013c0:	eb1c 0101 	adds.w	r1, ip, r1
 80013c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80013c8:	f080 8088 	bcs.w	80014dc <__udivmoddi4+0x2bc>
 80013cc:	4288      	cmp	r0, r1
 80013ce:	f240 8085 	bls.w	80014dc <__udivmoddi4+0x2bc>
 80013d2:	f1a8 0802 	sub.w	r8, r8, #2
 80013d6:	4461      	add	r1, ip
 80013d8:	1a09      	subs	r1, r1, r0
 80013da:	b2a4      	uxth	r4, r4
 80013dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80013e0:	fb09 1110 	mls	r1, r9, r0, r1
 80013e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80013e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80013ec:	458e      	cmp	lr, r1
 80013ee:	d908      	bls.n	8001402 <__udivmoddi4+0x1e2>
 80013f0:	eb1c 0101 	adds.w	r1, ip, r1
 80013f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80013f8:	d26c      	bcs.n	80014d4 <__udivmoddi4+0x2b4>
 80013fa:	458e      	cmp	lr, r1
 80013fc:	d96a      	bls.n	80014d4 <__udivmoddi4+0x2b4>
 80013fe:	3802      	subs	r0, #2
 8001400:	4461      	add	r1, ip
 8001402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001406:	fba0 9402 	umull	r9, r4, r0, r2
 800140a:	eba1 010e 	sub.w	r1, r1, lr
 800140e:	42a1      	cmp	r1, r4
 8001410:	46c8      	mov	r8, r9
 8001412:	46a6      	mov	lr, r4
 8001414:	d356      	bcc.n	80014c4 <__udivmoddi4+0x2a4>
 8001416:	d053      	beq.n	80014c0 <__udivmoddi4+0x2a0>
 8001418:	b15d      	cbz	r5, 8001432 <__udivmoddi4+0x212>
 800141a:	ebb3 0208 	subs.w	r2, r3, r8
 800141e:	eb61 010e 	sbc.w	r1, r1, lr
 8001422:	fa01 f707 	lsl.w	r7, r1, r7
 8001426:	fa22 f306 	lsr.w	r3, r2, r6
 800142a:	40f1      	lsrs	r1, r6
 800142c:	431f      	orrs	r7, r3
 800142e:	e9c5 7100 	strd	r7, r1, [r5]
 8001432:	2600      	movs	r6, #0
 8001434:	4631      	mov	r1, r6
 8001436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143a:	f1c2 0320 	rsb	r3, r2, #32
 800143e:	40d8      	lsrs	r0, r3
 8001440:	fa0c fc02 	lsl.w	ip, ip, r2
 8001444:	fa21 f303 	lsr.w	r3, r1, r3
 8001448:	4091      	lsls	r1, r2
 800144a:	4301      	orrs	r1, r0
 800144c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001450:	fa1f fe8c 	uxth.w	lr, ip
 8001454:	fbb3 f0f7 	udiv	r0, r3, r7
 8001458:	fb07 3610 	mls	r6, r7, r0, r3
 800145c:	0c0b      	lsrs	r3, r1, #16
 800145e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001462:	fb00 f60e 	mul.w	r6, r0, lr
 8001466:	429e      	cmp	r6, r3
 8001468:	fa04 f402 	lsl.w	r4, r4, r2
 800146c:	d908      	bls.n	8001480 <__udivmoddi4+0x260>
 800146e:	eb1c 0303 	adds.w	r3, ip, r3
 8001472:	f100 38ff 	add.w	r8, r0, #4294967295
 8001476:	d22f      	bcs.n	80014d8 <__udivmoddi4+0x2b8>
 8001478:	429e      	cmp	r6, r3
 800147a:	d92d      	bls.n	80014d8 <__udivmoddi4+0x2b8>
 800147c:	3802      	subs	r0, #2
 800147e:	4463      	add	r3, ip
 8001480:	1b9b      	subs	r3, r3, r6
 8001482:	b289      	uxth	r1, r1
 8001484:	fbb3 f6f7 	udiv	r6, r3, r7
 8001488:	fb07 3316 	mls	r3, r7, r6, r3
 800148c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001490:	fb06 f30e 	mul.w	r3, r6, lr
 8001494:	428b      	cmp	r3, r1
 8001496:	d908      	bls.n	80014aa <__udivmoddi4+0x28a>
 8001498:	eb1c 0101 	adds.w	r1, ip, r1
 800149c:	f106 38ff 	add.w	r8, r6, #4294967295
 80014a0:	d216      	bcs.n	80014d0 <__udivmoddi4+0x2b0>
 80014a2:	428b      	cmp	r3, r1
 80014a4:	d914      	bls.n	80014d0 <__udivmoddi4+0x2b0>
 80014a6:	3e02      	subs	r6, #2
 80014a8:	4461      	add	r1, ip
 80014aa:	1ac9      	subs	r1, r1, r3
 80014ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80014b0:	e738      	b.n	8001324 <__udivmoddi4+0x104>
 80014b2:	462e      	mov	r6, r5
 80014b4:	4628      	mov	r0, r5
 80014b6:	e705      	b.n	80012c4 <__udivmoddi4+0xa4>
 80014b8:	4606      	mov	r6, r0
 80014ba:	e6e3      	b.n	8001284 <__udivmoddi4+0x64>
 80014bc:	4618      	mov	r0, r3
 80014be:	e6f8      	b.n	80012b2 <__udivmoddi4+0x92>
 80014c0:	454b      	cmp	r3, r9
 80014c2:	d2a9      	bcs.n	8001418 <__udivmoddi4+0x1f8>
 80014c4:	ebb9 0802 	subs.w	r8, r9, r2
 80014c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80014cc:	3801      	subs	r0, #1
 80014ce:	e7a3      	b.n	8001418 <__udivmoddi4+0x1f8>
 80014d0:	4646      	mov	r6, r8
 80014d2:	e7ea      	b.n	80014aa <__udivmoddi4+0x28a>
 80014d4:	4620      	mov	r0, r4
 80014d6:	e794      	b.n	8001402 <__udivmoddi4+0x1e2>
 80014d8:	4640      	mov	r0, r8
 80014da:	e7d1      	b.n	8001480 <__udivmoddi4+0x260>
 80014dc:	46d0      	mov	r8, sl
 80014de:	e77b      	b.n	80013d8 <__udivmoddi4+0x1b8>
 80014e0:	3b02      	subs	r3, #2
 80014e2:	4461      	add	r1, ip
 80014e4:	e732      	b.n	800134c <__udivmoddi4+0x12c>
 80014e6:	4630      	mov	r0, r6
 80014e8:	e709      	b.n	80012fe <__udivmoddi4+0xde>
 80014ea:	4464      	add	r4, ip
 80014ec:	3802      	subs	r0, #2
 80014ee:	e742      	b.n	8001376 <__udivmoddi4+0x156>

080014f0 <__aeabi_idiv0>:
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spRXPositionMutex */
  spRXPositionMutexHandle = osMutexNew(&spRXPositionMutex_attributes);
 80014f8:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_FREERTOS_Init+0x68>)
 80014fa:	f006 f915 	bl	8007728 <osMutexNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <MX_FREERTOS_Init+0x6c>)
 8001502:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of my22HzTimer */
  my22HzTimerHandle = osTimerNew(my22HzTimerCallback, osTimerPeriodic, NULL, &my22HzTimer_attributes);
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_FREERTOS_Init+0x70>)
 8001506:	2200      	movs	r2, #0
 8001508:	2101      	movs	r1, #1
 800150a:	4817      	ldr	r0, [pc, #92]	; (8001568 <MX_FREERTOS_Init+0x74>)
 800150c:	f006 f862 	bl	80075d4 <osTimerNew>
 8001510:	4603      	mov	r3, r0
 8001512:	4a16      	ldr	r2, [pc, #88]	; (800156c <MX_FREERTOS_Init+0x78>)
 8001514:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osTimerStart(my22HzTimerHandle, (uint16_t) (DATA_SAMPLE_PERIOD * 1000));
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_FREERTOS_Init+0x78>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800151e:	4618      	mov	r0, r3
 8001520:	f006 f8d4 	bl	80076cc <osTimerStart>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of identifyMagneti */
  identifyMagnetiHandle = osThreadNew(startidentifyMagneticFieldTask, NULL, &identifyMagneti_attributes);
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_FREERTOS_Init+0x7c>)
 8001526:	2100      	movs	r1, #0
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_FREERTOS_Init+0x80>)
 800152a:	f005 fedd 	bl	80072e8 <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <MX_FREERTOS_Init+0x84>)
 8001532:	6013      	str	r3, [r2, #0]

  /* creation of estimatePositio */
  estimatePositioHandle = osThreadNew(startEstimatePosition, NULL, &estimatePositio_attributes);
 8001534:	4a11      	ldr	r2, [pc, #68]	; (800157c <MX_FREERTOS_Init+0x88>)
 8001536:	2100      	movs	r1, #0
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <MX_FREERTOS_Init+0x8c>)
 800153a:	f005 fed5 	bl	80072e8 <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <MX_FREERTOS_Init+0x90>)
 8001542:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(startSendData, NULL, &sendData_attributes);
 8001544:	4a10      	ldr	r2, [pc, #64]	; (8001588 <MX_FREERTOS_Init+0x94>)
 8001546:	2100      	movs	r1, #0
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <MX_FREERTOS_Init+0x98>)
 800154a:	f005 fecd 	bl	80072e8 <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <MX_FREERTOS_Init+0x9c>)
 8001552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	initMagnetiFieldISR();
 8001554:	f000 fe8e 	bl	8002274 <initMagnetiFieldISR>

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	080102d4 	.word	0x080102d4
 8001560:	200040c4 	.word	0x200040c4
 8001564:	080102c4 	.word	0x080102c4
 8001568:	080016d5 	.word	0x080016d5
 800156c:	200040c0 	.word	0x200040c0
 8001570:	08010258 	.word	0x08010258
 8001574:	08001595 	.word	0x08001595
 8001578:	200040b4 	.word	0x200040b4
 800157c:	0801027c 	.word	0x0801027c
 8001580:	08001619 	.word	0x08001619
 8001584:	200040b8 	.word	0x200040b8
 8001588:	080102a0 	.word	0x080102a0
 800158c:	08001679 	.word	0x08001679
 8001590:	200040bc 	.word	0x200040bc

08001594 <startidentifyMagneticFieldTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startidentifyMagneticFieldTask */
void startidentifyMagneticFieldTask(void *argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startidentifyMagneticFieldTask */

	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	2100      	movs	r1, #0
 80015a2:	2001      	movs	r0, #1
 80015a4:	f005 ff80 	bl	80074a8 <osThreadFlagsWait>
		stopMagnetiFieldISR();
 80015a8:	f000 fe6e 	bl	8002288 <stopMagnetiFieldISR>

		buffer_index_to_retrive_data = (buffer_index + 1) % 2;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <startidentifyMagneticFieldTask+0x6c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	bfb8      	it	lt
 80015ba:	425b      	neglt	r3, r3
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <startidentifyMagneticFieldTask+0x70>)
 80015c0:	701a      	strb	r2, [r3, #0]

		identifyMagneticField(dc_mf_x[buffer_index_to_retrive_data],
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <startidentifyMagneticFieldTask+0x70>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <startidentifyMagneticFieldTask+0x74>)
 80015d2:	1898      	adds	r0, r3, r2
				dc_mf_y[buffer_index_to_retrive_data],
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <startidentifyMagneticFieldTask+0x70>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <startidentifyMagneticFieldTask+0x78>)
 80015e4:	1899      	adds	r1, r3, r2
				dc_mf_z[buffer_index_to_retrive_data], mf_nodes);
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <startidentifyMagneticFieldTask+0x70>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <startidentifyMagneticFieldTask+0x7c>)
 80015f6:	441a      	add	r2, r3
		identifyMagneticField(dc_mf_x[buffer_index_to_retrive_data],
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <startidentifyMagneticFieldTask+0x80>)
 80015fa:	f000 fc9a 	bl	8001f32 <identifyMagneticField>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80015fe:	e7cd      	b.n	800159c <startidentifyMagneticFieldTask+0x8>
 8001600:	20001768 	.word	0x20001768
 8001604:	20001769 	.word	0x20001769
 8001608:	20001770 	.word	0x20001770
 800160c:	20002530 	.word	0x20002530
 8001610:	200032f0 	.word	0x200032f0
 8001614:	20000000 	.word	0x20000000

08001618 <startEstimatePosition>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startEstimatePosition */
void startEstimatePosition(void *argument)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEstimatePosition */

	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	2100      	movs	r1, #0
 8001626:	2001      	movs	r0, #1
 8001628:	f005 ff3e 	bl	80074a8 <osThreadFlagsWait>
		if (osMutexAcquire(spRXPositionMutexHandle, osWaitForever) == osOK) {
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <startEstimatePosition+0x54>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	4618      	mov	r0, r3
 8001636:	f006 f8fd 	bl	8007834 <osMutexAcquire>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ef      	bne.n	8001620 <startEstimatePosition+0x8>
			sp_rx_position = estimatePoisition(mf_nodes);
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <startEstimatePosition+0x58>)
 8001642:	f000 fce1 	bl	8002008 <estimatePoisition>
 8001646:	eef0 6a40 	vmov.f32	s13, s0
 800164a:	eeb0 7a60 	vmov.f32	s14, s1
 800164e:	eef0 7a41 	vmov.f32	s15, s2
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <startEstimatePosition+0x5c>)
 8001654:	edc3 6a00 	vstr	s13, [r3]
 8001658:	ed83 7a01 	vstr	s14, [r3, #4]
 800165c:	edc3 7a02 	vstr	s15, [r3, #8]

			osMutexRelease(spRXPositionMutexHandle);
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <startEstimatePosition+0x54>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f006 f930 	bl	80078ca <osMutexRelease>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800166a:	e7d9      	b.n	8001620 <startEstimatePosition+0x8>
 800166c:	200040c4 	.word	0x200040c4
 8001670:	20000000 	.word	0x20000000
 8001674:	200002bc 	.word	0x200002bc

08001678 <startSendData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSendData */
void startSendData(void *argument)
{
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af04      	add	r7, sp, #16
 8001680:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSendData */
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001682:	f04f 32ff 	mov.w	r2, #4294967295
 8001686:	2100      	movs	r1, #0
 8001688:	2001      	movs	r0, #1
 800168a:	f005 ff0d 	bl	80074a8 <osThreadFlagsWait>

		printf("EsPos: x=%.2f y=%.2f z=%.2f\r\n", sp_rx_position.x,
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <startSendData+0x54>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff80 	bl	8000598 <__aeabi_f2d>
 8001698:	4680      	mov	r8, r0
 800169a:	4689      	mov	r9, r1
				sp_rx_position.y, sp_rx_position.z);
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <startSendData+0x54>)
 800169e:	685b      	ldr	r3, [r3, #4]
		printf("EsPos: x=%.2f y=%.2f z=%.2f\r\n", sp_rx_position.x,
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff79 	bl	8000598 <__aeabi_f2d>
 80016a6:	4604      	mov	r4, r0
 80016a8:	460d      	mov	r5, r1
				sp_rx_position.y, sp_rx_position.z);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <startSendData+0x54>)
 80016ac:	689b      	ldr	r3, [r3, #8]
		printf("EsPos: x=%.2f y=%.2f z=%.2f\r\n", sp_rx_position.x,
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff72 	bl	8000598 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016bc:	e9cd 4500 	strd	r4, r5, [sp]
 80016c0:	4642      	mov	r2, r8
 80016c2:	464b      	mov	r3, r9
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <startSendData+0x58>)
 80016c6:	f00a f9a1 	bl	800ba0c <iprintf>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80016ca:	e7da      	b.n	8001682 <startSendData+0xa>
 80016cc:	200002bc 	.word	0x200002bc
 80016d0:	080101bc 	.word	0x080101bc

080016d4 <my22HzTimerCallback>:
  /* USER CODE END startSendData */
}

/* my22HzTimerCallback function */
void my22HzTimerCallback(void *argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN my22HzTimerCallback */
	osThreadFlagsSet(estimatePositioHandle, 0x0001U);
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <my22HzTimerCallback+0x28>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 fe92 	bl	800740c <osThreadFlagsSet>
	osThreadFlagsSet(sendDataHandle, 0x0001U);
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <my22HzTimerCallback+0x2c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 fe8c 	bl	800740c <osThreadFlagsSet>
  /* USER CODE END my22HzTimerCallback */
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200040b8 	.word	0x200040b8
 8001700:	200040bc 	.word	0x200040bc

08001704 <sampleMagneticFieldISR>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void sampleMagneticFieldISR(I2C_HandleTypeDef *i2c) {
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	MagneticField mf_sample;

	if (ui16_sample_index == SAMPLE_SIZE) {
 800170c:	4b56      	ldr	r3, [pc, #344]	; (8001868 <sampleMagneticFieldISR+0x164>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	2b6e      	cmp	r3, #110	; 0x6e
 8001712:	d113      	bne.n	800173c <sampleMagneticFieldISR+0x38>
		buffer_index = (buffer_index + 1) % 2;
 8001714:	4b55      	ldr	r3, [pc, #340]	; (800186c <sampleMagneticFieldISR+0x168>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	bfb8      	it	lt
 8001722:	425b      	neglt	r3, r3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b51      	ldr	r3, [pc, #324]	; (800186c <sampleMagneticFieldISR+0x168>)
 8001728:	701a      	strb	r2, [r3, #0]
		ui16_sample_index = 0;
 800172a:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <sampleMagneticFieldISR+0x164>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]

		osThreadFlagsSet(identifyMagnetiHandle, 0x0001U);
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <sampleMagneticFieldISR+0x16c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fe68 	bl	800740c <osThreadFlagsSet>
	}

	mf_sample = sampleMagneticField(readMagnetometerData, i2c);
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	484d      	ldr	r0, [pc, #308]	; (8001874 <sampleMagneticFieldISR+0x170>)
 8001740:	f000 fbb8 	bl	8001eb4 <sampleMagneticField>
 8001744:	eeb0 5a40 	vmov.f32	s10, s0
 8001748:	eef0 5a60 	vmov.f32	s11, s1
 800174c:	eeb0 6a41 	vmov.f32	s12, s2
 8001750:	eef0 6a61 	vmov.f32	s13, s3
 8001754:	eeb0 7a42 	vmov.f32	s14, s4
 8001758:	eef0 7a62 	vmov.f32	s15, s5
 800175c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001760:	ed87 6b04 	vstr	d6, [r7, #16]
 8001764:	ed87 7b06 	vstr	d7, [r7, #24]

	d_mf_x_samples[buffer_index][ui16_sample_index] = mf_sample.x;
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <sampleMagneticFieldISR+0x168>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461d      	mov	r5, r3
 800176e:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <sampleMagneticFieldISR+0x164>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	461c      	mov	r4, r3
 8001774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001778:	483f      	ldr	r0, [pc, #252]	; (8001878 <sampleMagneticFieldISR+0x174>)
 800177a:	216e      	movs	r1, #110	; 0x6e
 800177c:	fb05 f101 	mul.w	r1, r5, r1
 8001780:	4421      	add	r1, r4
 8001782:	00c9      	lsls	r1, r1, #3
 8001784:	4401      	add	r1, r0
 8001786:	e9c1 2300 	strd	r2, r3, [r1]
	d_mf_y_samples[buffer_index][ui16_sample_index] = mf_sample.y;
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <sampleMagneticFieldISR+0x168>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461d      	mov	r5, r3
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <sampleMagneticFieldISR+0x164>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	461c      	mov	r4, r3
 8001796:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800179a:	4838      	ldr	r0, [pc, #224]	; (800187c <sampleMagneticFieldISR+0x178>)
 800179c:	216e      	movs	r1, #110	; 0x6e
 800179e:	fb05 f101 	mul.w	r1, r5, r1
 80017a2:	4421      	add	r1, r4
 80017a4:	00c9      	lsls	r1, r1, #3
 80017a6:	4401      	add	r1, r0
 80017a8:	e9c1 2300 	strd	r2, r3, [r1]
	d_mf_z_samples[buffer_index][ui16_sample_index] = mf_sample.z;
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <sampleMagneticFieldISR+0x168>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461d      	mov	r5, r3
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <sampleMagneticFieldISR+0x164>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	461c      	mov	r4, r3
 80017b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017bc:	4830      	ldr	r0, [pc, #192]	; (8001880 <sampleMagneticFieldISR+0x17c>)
 80017be:	216e      	movs	r1, #110	; 0x6e
 80017c0:	fb05 f101 	mul.w	r1, r5, r1
 80017c4:	4421      	add	r1, r4
 80017c6:	00c9      	lsls	r1, r1, #3
 80017c8:	4401      	add	r1, r0
 80017ca:	e9c1 2300 	strd	r2, r3, [r1]

	computeDFT(mf_sample.x, dc_mf_x[buffer_index], (int) ui16_sample_index,
 80017ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <sampleMagneticFieldISR+0x168>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	4a28      	ldr	r2, [pc, #160]	; (8001884 <sampleMagneticFieldISR+0x180>)
 80017e2:	4413      	add	r3, r2
 80017e4:	4a20      	ldr	r2, [pc, #128]	; (8001868 <sampleMagneticFieldISR+0x164>)
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	4611      	mov	r1, r2
 80017ea:	226e      	movs	r2, #110	; 0x6e
 80017ec:	4618      	mov	r0, r3
 80017ee:	eeb0 0a47 	vmov.f32	s0, s14
 80017f2:	eef0 0a67 	vmov.f32	s1, s15
 80017f6:	f000 f84b 	bl	8001890 <computeDFT>
			SAMPLE_SIZE);
	computeDFT(mf_sample.y, dc_mf_y[buffer_index], (int) ui16_sample_index,
 80017fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <sampleMagneticFieldISR+0x168>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <sampleMagneticFieldISR+0x184>)
 800180e:	4413      	add	r3, r2
 8001810:	4a15      	ldr	r2, [pc, #84]	; (8001868 <sampleMagneticFieldISR+0x164>)
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	226e      	movs	r2, #110	; 0x6e
 8001818:	4618      	mov	r0, r3
 800181a:	eeb0 0a47 	vmov.f32	s0, s14
 800181e:	eef0 0a67 	vmov.f32	s1, s15
 8001822:	f000 f835 	bl	8001890 <computeDFT>
			SAMPLE_SIZE);
	computeDFT(mf_sample.z, dc_mf_z[buffer_index], (int) ui16_sample_index,
 8001826:	ed97 7b06 	vldr	d7, [r7, #24]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <sampleMagneticFieldISR+0x168>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <sampleMagneticFieldISR+0x188>)
 800183a:	4413      	add	r3, r2
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <sampleMagneticFieldISR+0x164>)
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	4611      	mov	r1, r2
 8001842:	226e      	movs	r2, #110	; 0x6e
 8001844:	4618      	mov	r0, r3
 8001846:	eeb0 0a47 	vmov.f32	s0, s14
 800184a:	eef0 0a67 	vmov.f32	s1, s15
 800184e:	f000 f81f 	bl	8001890 <computeDFT>
			SAMPLE_SIZE);

	ui16_sample_index++;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <sampleMagneticFieldISR+0x164>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <sampleMagneticFieldISR+0x164>)
 800185c:	801a      	strh	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}
 8001866:	bf00      	nop
 8001868:	200040b0 	.word	0x200040b0
 800186c:	20001768 	.word	0x20001768
 8001870:	200040b4 	.word	0x200040b4
 8001874:	08002521 	.word	0x08002521
 8001878:	200002c8 	.word	0x200002c8
 800187c:	200009a8 	.word	0x200009a8
 8001880:	20001088 	.word	0x20001088
 8001884:	20001770 	.word	0x20001770
 8001888:	20002530 	.word	0x20002530
 800188c:	200032f0 	.word	0x200032f0

08001890 <computeDFT>:
#include "dft.h"

void computeDFT(const double d_sample, double complex output[restrict], int current_index, size_t n) {
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	ed2d 8b04 	vpush	{d8-d9}
 8001898:	b09b      	sub	sp, #108	; 0x6c
 800189a:	af00      	add	r7, sp, #0
 800189c:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80018a0:	6378      	str	r0, [r7, #52]	; 0x34
 80018a2:	6339      	str	r1, [r7, #48]	; 0x30
 80018a4:	62fa      	str	r2, [r7, #44]	; 0x2c
	double complex dc_angle;

	for (int i = 0; i < current_index; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	657b      	str	r3, [r7, #84]	; 0x54
 80018aa:	e0df      	b.n	8001a6c <computeDFT+0x1dc>
		dc_angle = 2 * I * M_PI * current_index * i / n;
 80018ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018ae:	f7fe fe61 	bl	8000574 <__aeabi_i2d>
 80018b2:	4680      	mov	r8, r0
 80018b4:	4689      	mov	r9, r1
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	4640      	mov	r0, r8
 80018c0:	4649      	mov	r1, r9
 80018c2:	f7fe fec1 	bl	8000648 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4614      	mov	r4, r2
 80018cc:	461d      	mov	r5, r3
 80018ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018d0:	f7fe fe50 	bl	8000574 <__aeabi_i2d>
 80018d4:	4682      	mov	sl, r0
 80018d6:	468b      	mov	fp, r1
 80018d8:	4622      	mov	r2, r4
 80018da:	462b      	mov	r3, r5
 80018dc:	4650      	mov	r0, sl
 80018de:	4659      	mov	r1, fp
 80018e0:	f7fe feb2 	bl	8000648 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	e9c7 2300 	strd	r2, r3, [r7]
 80018ec:	a3e2      	add	r3, pc, #904	; (adr r3, 8001c78 <computeDFT+0x3e8>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	4640      	mov	r0, r8
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fea7 	bl	8000648 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4650      	mov	r0, sl
 8001900:	4659      	mov	r1, fp
 8001902:	f7fe fea1 	bl	8000648 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4690      	mov	r8, r2
 800190c:	4699      	mov	r9, r3
 800190e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001910:	f7fe fe20 	bl	8000554 <__aeabi_ui2d>
 8001914:	4604      	mov	r4, r0
 8001916:	460d      	mov	r5, r1
 8001918:	4622      	mov	r2, r4
 800191a:	462b      	mov	r3, r5
 800191c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001920:	f7fe ffbc 	bl	800089c <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800192c:	4622      	mov	r2, r4
 800192e:	462b      	mov	r3, r5
 8001930:	4640      	mov	r0, r8
 8001932:	4649      	mov	r1, r9
 8001934:	f7fe ffb2 	bl	800089c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001940:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001944:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001948:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 800194c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		output[i] += 2 * (d_sample * cexp( - dc_angle)) / n;
 8001950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001956:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001962:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800196c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001970:	ec41 0b16 	vmov	d6, r0, r1
 8001974:	ec43 2b17 	vmov	d7, r2, r3
 8001978:	eeb0 0a46 	vmov.f32	s0, s12
 800197c:	eef0 0a66 	vmov.f32	s1, s13
 8001980:	eeb0 1a47 	vmov.f32	s2, s14
 8001984:	eef0 1a67 	vmov.f32	s3, s15
 8001988:	f00c f871 	bl	800da6e <cexp>
 800198c:	eeb0 6a40 	vmov.f32	s12, s0
 8001990:	eef0 6a60 	vmov.f32	s13, s1
 8001994:	eeb0 7a41 	vmov.f32	s14, s2
 8001998:	eef0 7a61 	vmov.f32	s15, s3
 800199c:	ec51 0b16 	vmov	r0, r1, d6
 80019a0:	ec55 4b17 	vmov	r4, r5, d7
 80019a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019a8:	f7fe fe4e 	bl	8000648 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
 80019b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	f7fe fe44 	bl	8000648 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
 80019c8:	4642      	mov	r2, r8
 80019ca:	464b      	mov	r3, r9
 80019cc:	4640      	mov	r0, r8
 80019ce:	4649      	mov	r1, r9
 80019d0:	f7fe fc84 	bl	80002dc <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4690      	mov	r8, r2
 80019da:	4699      	mov	r9, r3
 80019dc:	4622      	mov	r2, r4
 80019de:	462b      	mov	r3, r5
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fc7a 	bl	80002dc <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4692      	mov	sl, r2
 80019ee:	469b      	mov	fp, r3
 80019f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019f2:	f7fe fdaf 	bl	8000554 <__aeabi_ui2d>
 80019f6:	4604      	mov	r4, r0
 80019f8:	460d      	mov	r5, r1
 80019fa:	4622      	mov	r2, r4
 80019fc:	462b      	mov	r3, r5
 80019fe:	4640      	mov	r0, r8
 8001a00:	4649      	mov	r1, r9
 8001a02:	f7fe ff4b 	bl	800089c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	e9c7 2300 	strd	r2, r3, [r7]
 8001a0e:	4622      	mov	r2, r4
 8001a10:	462b      	mov	r3, r5
 8001a12:	4650      	mov	r0, sl
 8001a14:	4659      	mov	r1, fp
 8001a16:	f7fe ff41 	bl	800089c <__aeabi_ddiv>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4692      	mov	sl, r2
 8001a20:	469b      	mov	fp, r3
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a28:	4413      	add	r3, r2
 8001a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a2e:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a34:	011a      	lsls	r2, r3, #4
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	189e      	adds	r6, r3, r2
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a42:	f7fe fc4b 	bl	80002dc <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	4642      	mov	r2, r8
 8001a50:	464b      	mov	r3, r9
 8001a52:	4650      	mov	r0, sl
 8001a54:	4659      	mov	r1, fp
 8001a56:	f7fe fc41 	bl	80002dc <__adddf3>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	e9c6 4500 	strd	r4, r5, [r6]
 8001a62:	e9c6 2302 	strd	r2, r3, [r6, #8]
	for (int i = 0; i < current_index; i++) {
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	3301      	adds	r3, #1
 8001a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8001a6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f6ff af1b 	blt.w	80018ac <computeDFT+0x1c>
	}

	for (int i = 0; i < current_index; i++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	653b      	str	r3, [r7, #80]	; 0x50
 8001a7a:	e0ed      	b.n	8001c58 <computeDFT+0x3c8>
		dc_angle = 2 * I * M_PI * current_index * i / n;
 8001a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a7e:	f7fe fd79 	bl	8000574 <__aeabi_i2d>
 8001a82:	4604      	mov	r4, r0
 8001a84:	460d      	mov	r5, r1
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4629      	mov	r1, r5
 8001a92:	f7fe fdd9 	bl	8000648 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4692      	mov	sl, r2
 8001a9c:	469b      	mov	fp, r3
 8001a9e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001aa0:	f7fe fd68 	bl	8000574 <__aeabi_i2d>
 8001aa4:	4680      	mov	r8, r0
 8001aa6:	4689      	mov	r9, r1
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	465b      	mov	r3, fp
 8001aac:	4640      	mov	r0, r8
 8001aae:	4649      	mov	r1, r9
 8001ab0:	f7fe fdca 	bl	8000648 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4692      	mov	sl, r2
 8001aba:	469b      	mov	fp, r3
 8001abc:	a36e      	add	r3, pc, #440	; (adr r3, 8001c78 <computeDFT+0x3e8>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fdbf 	bl	8000648 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fdb9 	bl	8000648 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
 8001ade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ae0:	f7fe fd38 	bl	8000554 <__aeabi_ui2d>
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	460d      	mov	r5, r1
 8001ae8:	4622      	mov	r2, r4
 8001aea:	462b      	mov	r3, r5
 8001aec:	4650      	mov	r0, sl
 8001aee:	4659      	mov	r1, fp
 8001af0:	f7fe fed4 	bl	800089c <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001afc:	4622      	mov	r2, r4
 8001afe:	462b      	mov	r3, r5
 8001b00:	4640      	mov	r0, r8
 8001b02:	4649      	mov	r1, r9
 8001b04:	f7fe feca 	bl	800089c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001b10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b18:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001b1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		output[current_index] += 2 * (output[i] * cexp( - dc_angle)) / n;
 8001b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b26:	4413      	add	r3, r2
 8001b28:	ed93 8b00 	vldr	d8, [r3]
 8001b2c:	ed93 9b02 	vldr	d9, [r3, #8]
 8001b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	ec41 0b16 	vmov	d6, r0, r1
 8001b54:	ec43 2b17 	vmov	d7, r2, r3
 8001b58:	eeb0 0a46 	vmov.f32	s0, s12
 8001b5c:	eef0 0a66 	vmov.f32	s1, s13
 8001b60:	eeb0 1a47 	vmov.f32	s2, s14
 8001b64:	eef0 1a67 	vmov.f32	s3, s15
 8001b68:	f00b ff81 	bl	800da6e <cexp>
 8001b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b70:	eef0 7a60 	vmov.f32	s15, s1
 8001b74:	eeb0 6a41 	vmov.f32	s12, s2
 8001b78:	eef0 6a61 	vmov.f32	s13, s3
 8001b7c:	eeb0 3a46 	vmov.f32	s6, s12
 8001b80:	eef0 3a66 	vmov.f32	s7, s13
 8001b84:	eeb0 2a47 	vmov.f32	s4, s14
 8001b88:	eef0 2a67 	vmov.f32	s5, s15
 8001b8c:	eeb0 1a49 	vmov.f32	s2, s18
 8001b90:	eef0 1a69 	vmov.f32	s3, s19
 8001b94:	eeb0 0a48 	vmov.f32	s0, s16
 8001b98:	eef0 0a68 	vmov.f32	s1, s17
 8001b9c:	f7ff f894 	bl	8000cc8 <__muldc3>
 8001ba0:	eeb0 6a40 	vmov.f32	s12, s0
 8001ba4:	eef0 6a60 	vmov.f32	s13, s1
 8001ba8:	eeb0 7a41 	vmov.f32	s14, s2
 8001bac:	eef0 7a61 	vmov.f32	s15, s3
 8001bb0:	ec51 0b16 	vmov	r0, r1, d6
 8001bb4:	ec55 4b17 	vmov	r4, r5, d7
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	f7fe fb8e 	bl	80002dc <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4692      	mov	sl, r2
 8001bc6:	469b      	mov	fp, r3
 8001bc8:	4622      	mov	r2, r4
 8001bca:	462b      	mov	r3, r5
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb84 	bl	80002dc <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4690      	mov	r8, r2
 8001bda:	4699      	mov	r9, r3
 8001bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bde:	f7fe fcb9 	bl	8000554 <__aeabi_ui2d>
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	4622      	mov	r2, r4
 8001be8:	462b      	mov	r3, r5
 8001bea:	4650      	mov	r0, sl
 8001bec:	4659      	mov	r1, fp
 8001bee:	f7fe fe55 	bl	800089c <__aeabi_ddiv>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	4640      	mov	r0, r8
 8001c00:	4649      	mov	r1, r9
 8001c02:	f7fe fe4b 	bl	800089c <__aeabi_ddiv>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4615      	mov	r5, r2
 8001c0c:	461e      	mov	r6, r3
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c14:	4413      	add	r3, r2
 8001c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c24:	18d4      	adds	r4, r2, r3
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c2e:	f7fe fb55 	bl	80002dc <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	465b      	mov	r3, fp
 8001c3e:	4628      	mov	r0, r5
 8001c40:	4631      	mov	r1, r6
 8001c42:	f7fe fb4b 	bl	80002dc <__adddf3>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	e9c4 8900 	strd	r8, r9, [r4]
 8001c4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	for (int i = 0; i < current_index; i++) {
 8001c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c54:	3301      	adds	r3, #1
 8001c56:	653b      	str	r3, [r7, #80]	; 0x50
 8001c58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f6ff af0d 	blt.w	8001a7c <computeDFT+0x1ec>
	}
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	376c      	adds	r7, #108	; 0x6c
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	ecbd 8b04 	vpop	{d8-d9}
 8001c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c72:	bf00      	nop
 8001c74:	f3af 8000 	nop.w
 8001c78:	54442d18 	.word	0x54442d18
 8001c7c:	401921fb 	.word	0x401921fb

08001c80 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cae:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a31      	ldr	r2, [pc, #196]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <MX_GPIO_Init+0xf8>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfe:	f001 fabb 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4818      	ldr	r0, [pc, #96]	; (8001d7c <MX_GPIO_Init+0xfc>)
 8001d1a:	f001 f92b 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001d1e:	230c      	movs	r3, #12
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f001 f91a 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001d40:	2320      	movs	r3, #32
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5a:	f001 f90b 	bl	8002f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2105      	movs	r1, #5
 8001d62:	2028      	movs	r0, #40	; 0x28
 8001d64:	f001 f81e 	bl	8002da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d68:	2028      	movs	r0, #40	; 0x28
 8001d6a:	f001 f835 	bl	8002dd8 <HAL_NVIC_EnableIRQ>

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000800 	.word	0x48000800

08001d80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <MX_I2C1_Init+0x78>)
 8001d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <MX_I2C1_Init+0x7c>)
 8001d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dba:	480e      	ldr	r0, [pc, #56]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001dbc:	f001 fa97 	bl	80032ee <HAL_I2C_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dc6:	f000 fb03 	bl	80023d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001dce:	f002 f887 	bl	8003ee0 <HAL_I2CEx_ConfigAnalogFilter>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dd8:	f000 fafa 	bl	80023d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_I2C1_Init+0x74>)
 8001de0:	f002 f8c9 	bl	8003f76 <HAL_I2CEx_ConfigDigitalFilter>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dea:	f000 faf1 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200040c8 	.word	0x200040c8
 8001df8:	40005400 	.word	0x40005400
 8001dfc:	30a0a7fb 	.word	0x30a0a7fb

08001e00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b09e      	sub	sp, #120	; 0x78
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	2254      	movs	r2, #84	; 0x54
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f009 f8ec 	bl	800affe <memset>
  if(i2cHandle->Instance==I2C1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_I2C_MspInit+0xa8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d136      	bne.n	8001e9e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 ff01 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e48:	f000 fac2 	bl	80023d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_I2C_MspInit+0xac>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_I2C_MspInit+0xac>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_I2C_MspInit+0xac>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e68:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6a:	2312      	movs	r3, #18
 8001e6c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <HAL_I2C_MspInit+0xb0>)
 8001e82:	f001 f877 	bl	8002f74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_I2C_MspInit+0xac>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_I2C_MspInit+0xac>)
 8001e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_I2C_MspInit+0xac>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3778      	adds	r7, #120	; 0x78
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	48000400 	.word	0x48000400

08001eb4 <sampleMagneticField>:
#include "magnetic_field.h"

MagneticField sampleMagneticField(
		HAL_StatusTypeDef (*readMagneticSensor)(I2C_HandleTypeDef*, double*),
		I2C_HandleTypeDef *i2c) {
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	b09a      	sub	sp, #104	; 0x68
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	61f8      	str	r0, [r7, #28]
 8001ebc:	61b9      	str	r1, [r7, #24]
	MagneticField mf_sample;

	double d_response[3];

	if (HAL_OK == readMagneticSensor(i2c, d_response)) {
 8001ebe:	f107 0220 	add.w	r2, r7, #32
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	69b8      	ldr	r0, [r7, #24]
 8001ec8:	4798      	blx	r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10b      	bne.n	8001ee8 <sampleMagneticField+0x34>

		mf_sample.x = d_response[0];
 8001ed0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		mf_sample.y = d_response[1];
 8001ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001edc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		mf_sample.z = d_response[2];
 8001ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ee4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	return mf_sample;
 8001ee8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001eec:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8001ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ef8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001efc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001f00:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001f08:	ec45 4b15 	vmov	d5, r4, r5
 8001f0c:	ec41 0b16 	vmov	d6, r0, r1
 8001f10:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f14:	eeb0 0a45 	vmov.f32	s0, s10
 8001f18:	eef0 0a65 	vmov.f32	s1, s11
 8001f1c:	eeb0 1a46 	vmov.f32	s2, s12
 8001f20:	eef0 1a66 	vmov.f32	s3, s13
 8001f24:	eeb0 2a47 	vmov.f32	s4, s14
 8001f28:	eef0 2a67 	vmov.f32	s5, s15
 8001f2c:	3768      	adds	r7, #104	; 0x68
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}

08001f32 <identifyMagneticField>:

void identifyMagneticField(double complex *d_mf_x_dft, double complex *d_mf_y_dft, double complex *d_mf_z_dft,
		MagneticFieldSource *mf_nodes) {
 8001f32:	b590      	push	{r4, r7, lr}
 8001f34:	b08b      	sub	sp, #44	; 0x2c
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < 3; i++){
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e02f      	b.n	8001fa6 <identifyMagneticField+0x74>
		int bin = (int) mf_nodes[i].i_frequency / 2;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0fda      	lsrs	r2, r3, #31
 8001f52:	4413      	add	r3, r2
 8001f54:	105b      	asrs	r3, r3, #1
 8001f56:	623b      	str	r3, [r7, #32]

		double complex value = d_mf_z_dft[bin];
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	18d1      	adds	r1, r2, r3
 8001f60:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001f64:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f68:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001f6c:	e9c7 2306 	strd	r2, r3, [r7, #24]

		mf_nodes[i].mf_intensity.z = cabs(value);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	18d4      	adds	r4, r2, r3
 8001f78:	ed97 6b04 	vldr	d6, [r7, #16]
 8001f7c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f80:	eeb0 0a46 	vmov.f32	s0, s12
 8001f84:	eef0 0a66 	vmov.f32	s1, s13
 8001f88:	eeb0 1a47 	vmov.f32	s2, s14
 8001f8c:	eef0 1a67 	vmov.f32	s3, s15
 8001f90:	f00b fd44 	bl	800da1c <cabs>
 8001f94:	eeb0 7a40 	vmov.f32	s14, s0
 8001f98:	eef0 7a60 	vmov.f32	s15, s1
 8001f9c:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
	for(int i = 0; i < 3; i++){
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	ddcc      	ble.n	8001f46 <identifyMagneticField+0x14>
	}
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	372c      	adds	r7, #44	; 0x2c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}

08001fb6 <getDistanceFromRSS>:

double getDistanceFromRSS(MagneticFieldSource node) {
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	f107 0c10 	add.w	ip, r7, #16
 8001fc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	double distance = cbrt(node.d_magnetic_cte / node.mf_intensity.z);
 8001fc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fce:	f7fe fc65 	bl	800089c <__aeabi_ddiv>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	ec43 2b17 	vmov	d7, r2, r3
 8001fda:	eeb0 0a47 	vmov.f32	s0, s14
 8001fde:	eef0 0a67 	vmov.f32	s1, s15
 8001fe2:	f00b fda5 	bl	800db30 <cbrt>
 8001fe6:	ed87 0b00 	vstr	d0, [r7]

	return distance;
 8001fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002002:	b004      	add	sp, #16
 8002004:	4770      	bx	lr
	...

08002008 <estimatePoisition>:

SpacePosition estimatePoisition(MagneticFieldSource *nodes ) {
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	b0a1      	sub	sp, #132	; 0x84
 800200c:	af0c      	add	r7, sp, #48	; 0x30
 800200e:	6178      	str	r0, [r7, #20]
	SpacePosition sp_rx_position;

	double d_distances[3];

	for (int nodeIndex = 0; nodeIndex < 3; nodeIndex++) {
 8002010:	2300      	movs	r3, #0
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002014:	e020      	b.n	8002058 <estimatePoisition+0x50>
		d_distances[nodeIndex] = getDistanceFromRSS(nodes[nodeIndex]);
 8002016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	18d6      	adds	r6, r2, r3
 800201e:	466d      	mov	r5, sp
 8002020:	f106 0410 	add.w	r4, r6, #16
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002030:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002034:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002038:	f7ff ffbd 	bl	8001fb6 <getDistanceFromRSS>
 800203c:	eeb0 7a40 	vmov.f32	s14, s0
 8002040:	eef0 7a60 	vmov.f32	s15, s1
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	3350      	adds	r3, #80	; 0x50
 800204a:	443b      	add	r3, r7
 800204c:	3b38      	subs	r3, #56	; 0x38
 800204e:	ed83 7b00 	vstr	d7, [r3]
	for (int nodeIndex = 0; nodeIndex < 3; nodeIndex++) {
 8002052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002054:	3301      	adds	r3, #1
 8002056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800205a:	2b02      	cmp	r3, #2
 800205c:	dddb      	ble.n	8002016 <estimatePoisition+0xe>
	}

	sp_rx_position.x = (pow(d_distances[0], 2) - pow(d_distances[1], 2)
 800205e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002062:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8002238 <estimatePoisition+0x230>
 8002066:	eeb0 0a47 	vmov.f32	s0, s14
 800206a:	eef0 0a67 	vmov.f32	s1, s15
 800206e:	f00b ff4b 	bl	800df08 <pow>
 8002072:	ec55 4b10 	vmov	r4, r5, d0
 8002076:	ed97 7b08 	vldr	d7, [r7, #32]
 800207a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002238 <estimatePoisition+0x230>
 800207e:	eeb0 0a47 	vmov.f32	s0, s14
 8002082:	eef0 0a67 	vmov.f32	s1, s15
 8002086:	f00b ff3f 	bl	800df08 <pow>
 800208a:	ec53 2b10 	vmov	r2, r3, d0
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe f921 	bl	80002d8 <__aeabi_dsub>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4614      	mov	r4, r2
 800209c:	461d      	mov	r5, r3
			+ pow(nodes[1].sp_position.x, 2)) / (2 * nodes[1].sp_position.x);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3340      	adds	r3, #64	; 0x40
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa77 	bl	8000598 <__aeabi_f2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8002238 <estimatePoisition+0x230>
 80020b2:	ec43 2b10 	vmov	d0, r2, r3
 80020b6:	f00b ff27 	bl	800df08 <pow>
 80020ba:	ec53 2b10 	vmov	r2, r3, d0
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe f90b 	bl	80002dc <__adddf3>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4614      	mov	r4, r2
 80020cc:	461d      	mov	r5, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3340      	adds	r3, #64	; 0x40
 80020d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80020d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020da:	ee17 0a90 	vmov	r0, s15
 80020de:	f7fe fa5b 	bl	8000598 <__aeabi_f2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe fbd7 	bl	800089c <__aeabi_ddiv>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fd7f 	bl	8000bf8 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
	sp_rx_position.x = (pow(d_distances[0], 2) - pow(d_distances[1], 2)
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
	sp_rx_position.y = (pow(d_distances[0], 2) - pow(d_distances[2], 2)
 80020fe:	ed97 7b06 	vldr	d7, [r7, #24]
 8002102:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8002238 <estimatePoisition+0x230>
 8002106:	eeb0 0a47 	vmov.f32	s0, s14
 800210a:	eef0 0a67 	vmov.f32	s1, s15
 800210e:	f00b fefb 	bl	800df08 <pow>
 8002112:	ec55 4b10 	vmov	r4, r5, d0
 8002116:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800211a:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8002238 <estimatePoisition+0x230>
 800211e:	eeb0 0a47 	vmov.f32	s0, s14
 8002122:	eef0 0a67 	vmov.f32	s1, s15
 8002126:	f00b feef 	bl	800df08 <pow>
 800212a:	ec53 2b10 	vmov	r2, r3, d0
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f8d1 	bl	80002d8 <__aeabi_dsub>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4614      	mov	r4, r2
 800213c:	461d      	mov	r5, r3
			+ pow(nodes[2].sp_position.x, 2) + pow(nodes[2].sp_position.y, 2)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3380      	adds	r3, #128	; 0x80
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fa27 	bl	8000598 <__aeabi_f2d>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8002238 <estimatePoisition+0x230>
 8002152:	ec43 2b10 	vmov	d0, r2, r3
 8002156:	f00b fed7 	bl	800df08 <pow>
 800215a:	ec53 2b10 	vmov	r2, r3, d0
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe f8bb 	bl	80002dc <__adddf3>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4614      	mov	r4, r2
 800216c:	461d      	mov	r5, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3380      	adds	r3, #128	; 0x80
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fa0f 	bl	8000598 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8002238 <estimatePoisition+0x230>
 8002182:	ec43 2b10 	vmov	d0, r2, r3
 8002186:	f00b febf 	bl	800df08 <pow>
 800218a:	ec53 2b10 	vmov	r2, r3, d0
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe f8a3 	bl	80002dc <__adddf3>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4614      	mov	r4, r2
 800219c:	461d      	mov	r5, r3
			- 2 * nodes[2].sp_position.x * sp_rx_position.x)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3380      	adds	r3, #128	; 0x80
 80021a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80021a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b2:	ee17 0a90 	vmov	r0, s15
 80021b6:	f7fe f9ef 	bl	8000598 <__aeabi_f2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4620      	mov	r0, r4
 80021c0:	4629      	mov	r1, r5
 80021c2:	f7fe f889 	bl	80002d8 <__aeabi_dsub>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4614      	mov	r4, r2
 80021cc:	461d      	mov	r5, r3
			/ (2 * nodes[2].sp_position.y);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3380      	adds	r3, #128	; 0x80
 80021d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80021d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021da:	ee17 0a90 	vmov	r0, s15
 80021de:	f7fe f9db 	bl	8000598 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4620      	mov	r0, r4
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7fe fb57 	bl	800089c <__aeabi_ddiv>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fcff 	bl	8000bf8 <__aeabi_d2f>
 80021fa:	4603      	mov	r3, r0
	sp_rx_position.y = (pow(d_distances[0], 2) - pow(d_distances[2], 2)
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
	sp_rx_position.z = 0;
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c

	return sp_rx_position;
 8002204:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002208:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800220c:	ca07      	ldmia	r2, {r0, r1, r2}
 800220e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002218:	ee06 1a90 	vmov	s13, r1
 800221c:	ee07 2a10 	vmov	s14, r2
 8002220:	ee07 3a90 	vmov	s15, r3
}
 8002224:	eeb0 0a66 	vmov.f32	s0, s13
 8002228:	eef0 0a47 	vmov.f32	s1, s14
 800222c:	eeb0 1a67 	vmov.f32	s2, s15
 8002230:	3754      	adds	r7, #84	; 0x54
 8002232:	46bd      	mov	sp, r7
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002236:	bf00      	nop
 8002238:	00000000 	.word	0x00000000
 800223c:	40000000 	.word	0x40000000

08002240 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) ptr, len) != HAL_OK) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	4806      	ldr	r0, [pc, #24]	; (8002270 <_write+0x30>)
 8002256:	f003 fbbd 	bl	80059d4 <HAL_UART_Transmit_IT>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <_write+0x24>
		Error_Handler();
 8002260:	f000 f8b6 	bl	80023d0 <Error_Handler>
	}

	return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200041b0 	.word	0x200041b0

08002274 <initMagnetiFieldISR>:

void initMagnetiFieldISR() {
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <initMagnetiFieldISR+0x10>)
 800227a:	f002 ff89 	bl	8005190 <HAL_TIM_Base_Start_IT>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20004164 	.word	0x20004164

08002288 <stopMagnetiFieldISR>:

void stopMagnetiFieldISR() {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <stopMagnetiFieldISR+0x10>)
 800228e:	f002 fff7 	bl	8005280 <HAL_TIM_Base_Stop_IT>
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20004164 	.word	0x20004164

0800229c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a0:	f000 fc6f 	bl	8002b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a4:	f000 f82a 	bl	80022fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022a8:	f7ff fcea 	bl	8001c80 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022ac:	f7ff fd68 	bl	8001d80 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80022b0:	f000 fb92 	bl	80029d8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80022b4:	f000 fb34 	bl	8002920 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	while (initializeLSM303DHLC(&hi2c1) != HAL_OK) {
 80022b8:	e006      	b.n	80022c8 <main+0x2c>
		printf("Trying to connect with sensor. Check wires!\r\n");
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <main+0x54>)
 80022bc:	f009 fc2c 	bl	800bb18 <puts>
		HAL_Delay(1000);
 80022c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022c4:	f000 fc94 	bl	8002bf0 <HAL_Delay>
	while (initializeLSM303DHLC(&hi2c1) != HAL_OK) {
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <main+0x58>)
 80022ca:	f000 f88f 	bl	80023ec <initializeLSM303DHLC>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f2      	bne.n	80022ba <main+0x1e>
	}

	printf("Sensor connected. Success!\r\n");
 80022d4:	4808      	ldr	r0, [pc, #32]	; (80022f8 <main+0x5c>)
 80022d6:	f009 fc1f 	bl	800bb18 <puts>
	HAL_Delay(500);
 80022da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022de:	f000 fc87 	bl	8002bf0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80022e2:	f004 ffb7 	bl	8007254 <osKernelInitialize>
  MX_FREERTOS_Init();
 80022e6:	f7ff f905 	bl	80014f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022ea:	f004 ffd7 	bl	800729c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// Start timer
	while (1) {
 80022ee:	e7fe      	b.n	80022ee <main+0x52>
 80022f0:	080101dc 	.word	0x080101dc
 80022f4:	200040c8 	.word	0x200040c8
 80022f8:	0801020c 	.word	0x0801020c

080022fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b094      	sub	sp, #80	; 0x50
 8002300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	2238      	movs	r2, #56	; 0x38
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f008 fe77 	bl	800affe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800231e:	2000      	movs	r0, #0
 8002320:	f001 fe76 	bl	8004010 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002324:	2302      	movs	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800232e:	2340      	movs	r3, #64	; 0x40
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002332:	2302      	movs	r3, #2
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002336:	2302      	movs	r3, #2
 8002338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800233a:	2304      	movs	r3, #4
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800233e:	2355      	movs	r3, #85	; 0x55
 8002340:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002342:	2302      	movs	r3, #2
 8002344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002346:	2302      	movs	r3, #2
 8002348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800234a:	2302      	movs	r3, #2
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234e:	f107 0318 	add.w	r3, r7, #24
 8002352:	4618      	mov	r0, r3
 8002354:	f001 ff10 	bl	8004178 <HAL_RCC_OscConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800235e:	f000 f837 	bl	80023d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002362:	230f      	movs	r3, #15
 8002364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002366:	2303      	movs	r3, #3
 8002368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2104      	movs	r1, #4
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fa14 	bl	80047a8 <HAL_RCC_ClockConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002386:	f000 f823 	bl	80023d0 <Error_Handler>
  }
}
 800238a:	bf00      	nop
 800238c:	3750      	adds	r7, #80	; 0x50
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023a6:	f000 fc05 	bl	8002bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM6) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d102      	bne.n	80023ba <HAL_TIM_PeriodElapsedCallback+0x26>
		sampleMagneticFieldISR(&hi2c1);
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80023b6:	f7ff f9a5 	bl	8001704 <sampleMagneticFieldISR>
	}

  /* USER CODE END Callback 1 */
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40001400 	.word	0x40001400
 80023c8:	40001000 	.word	0x40001000
 80023cc:	200040c8 	.word	0x200040c8

080023d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d4:	b672      	cpsid	i
}
 80023d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("so far, so bad\r\n");
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <Error_Handler+0x18>)
 80023da:	f009 fb9d 	bl	800bb18 <puts>
		HAL_Delay(1000);
 80023de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e2:	f000 fc05 	bl	8002bf0 <HAL_Delay>
		printf("so far, so bad\r\n");
 80023e6:	e7f7      	b.n	80023d8 <Error_Handler+0x8>
 80023e8:	08010228 	.word	0x08010228

080023ec <initializeLSM303DHLC>:
	        11.16803319,   1.06706581,  -8.39797949,   1.87673398,
	        -8.39797949,   1.06706581,  11.16803319,  -4.74067324,
	         4.11077153,   2.52699216, -10.59071207,   2.27404758,
	        -3.34106226,  -2.0657993 };

HAL_StatusTypeDef initializeLSM303DHLC(I2C_HandleTypeDef *i2c) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	uint8_t ui_init_params[3][2] = { { CRA_REG_M, CRA_REG_M_CONFIG }, {
 80023f4:	4a25      	ldr	r2, [pc, #148]	; (800248c <initializeLSM303DHLC+0xa0>)
 80023f6:	f107 0308 	add.w	r3, r7, #8
 80023fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023fe:	6018      	str	r0, [r3, #0]
 8002400:	3304      	adds	r3, #4
 8002402:	8019      	strh	r1, [r3, #0]
	CRB_REG_M, CRB_REG_M_CONFIG }, { MR_REG_M, MR_REG_M_CONFIG } };

	ret = HAL_I2C_IsDeviceReady(i2c, MY_LSM303DLHC_MAG_ADD, 10, 200);
 8002404:	23c8      	movs	r3, #200	; 0xc8
 8002406:	220a      	movs	r2, #10
 8002408:	213c      	movs	r1, #60	; 0x3c
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f001 f9e8 	bl	80037e0 <HAL_I2C_IsDeviceReady>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <initializeLSM303DHLC+0x32>
		return ret;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	e032      	b.n	8002484 <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[0],
 800241e:	f107 0208 	add.w	r2, r7, #8
 8002422:	23c8      	movs	r3, #200	; 0xc8
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2302      	movs	r3, #2
 8002428:	213c      	movs	r1, #60	; 0x3c
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 ffee 	bl	800340c <HAL_I2C_Master_Transmit>
 8002430:	4603      	mov	r3, r0
 8002432:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <initializeLSM303DHLC+0x52>
		return ret;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	e022      	b.n	8002484 <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[1],
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	23c8      	movs	r3, #200	; 0xc8
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2302      	movs	r3, #2
 800244a:	213c      	movs	r1, #60	; 0x3c
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 ffdd 	bl	800340c <HAL_I2C_Master_Transmit>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <initializeLSM303DHLC+0x74>
		return ret;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	e011      	b.n	8002484 <initializeLSM303DHLC+0x98>
	}

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, ui_init_params[2],
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	1d1a      	adds	r2, r3, #4
 8002466:	23c8      	movs	r3, #200	; 0xc8
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2302      	movs	r3, #2
 800246c:	213c      	movs	r1, #60	; 0x3c
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 ffcc 	bl	800340c <HAL_I2C_Master_Transmit>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
			2, 200);
	if (ret != HAL_OK) {
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <initializeLSM303DHLC+0x96>
		return ret;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	e000      	b.n	8002484 <initializeLSM303DHLC+0x98>
	}

	return ret;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	08010238 	.word	0x08010238

08002490 <readRawMagnetometerData>:

HAL_StatusTypeDef readRawMagnetometerData(I2C_HandleTypeDef *i2c,
		int16_t *i16_raw_response, uint8_t *ui8_buf_response) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;

	uint8_t reg = OUT_X_H_M;
 800249c:	2303      	movs	r3, #3
 800249e:	77bb      	strb	r3, [r7, #30]
	uint8_t ui_lsm_response[6];
	union_ui8_ui16 ui8_16_aux;

	ret = HAL_I2C_Master_Transmit(i2c, MY_LSM303DLHC_MAG_ADD, &reg, 1,
 80024a0:	f107 021e 	add.w	r2, r7, #30
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	213c      	movs	r1, #60	; 0x3c
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 ffac 	bl	800340c <HAL_I2C_Master_Transmit>
 80024b4:	4603      	mov	r3, r0
 80024b6:	77fb      	strb	r3, [r7, #31]
	HAL_MAX_DELAY);
	if (ret == HAL_OK) {
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d129      	bne.n	8002512 <readRawMagnetometerData+0x82>
		ret = HAL_I2C_Master_Receive(i2c, MY_LSM303DLHC_MAG_ADD,
 80024be:	f107 0218 	add.w	r2, r7, #24
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2306      	movs	r3, #6
 80024ca:	213c      	movs	r1, #60	; 0x3c
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f001 f891 	bl	80035f4 <HAL_I2C_Master_Receive>
 80024d2:	4603      	mov	r3, r0
 80024d4:	77fb      	strb	r3, [r7, #31]
				ui_lsm_response, 6, HAL_MAX_DELAY);

		if (ret == HAL_OK) {
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d11a      	bne.n	8002512 <readRawMagnetometerData+0x82>
			ui8_16_aux.ui8[0] = ui_lsm_response[1];
 80024dc:	7e7b      	ldrb	r3, [r7, #25]
 80024de:	743b      	strb	r3, [r7, #16]
			ui8_16_aux.ui8[1] = ui_lsm_response[0];
 80024e0:	7e3b      	ldrb	r3, [r7, #24]
 80024e2:	747b      	strb	r3, [r7, #17]

			ui8_16_aux.ui8[2] = ui_lsm_response[3];
 80024e4:	7efb      	ldrb	r3, [r7, #27]
 80024e6:	74bb      	strb	r3, [r7, #18]
			ui8_16_aux.ui8[3] = ui_lsm_response[2];
 80024e8:	7ebb      	ldrb	r3, [r7, #26]
 80024ea:	74fb      	strb	r3, [r7, #19]

			ui8_16_aux.ui8[4] = ui_lsm_response[5];
 80024ec:	7f7b      	ldrb	r3, [r7, #29]
 80024ee:	753b      	strb	r3, [r7, #20]
			ui8_16_aux.ui8[5] = ui_lsm_response[4];
 80024f0:	7f3b      	ldrb	r3, [r7, #28]
 80024f2:	757b      	strb	r3, [r7, #21]

			memcpy(i16_raw_response, ui8_16_aux.i16, 3);
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	2203      	movs	r2, #3
 80024fa:	4619      	mov	r1, r3
 80024fc:	68b8      	ldr	r0, [r7, #8]
 80024fe:	f008 fd70 	bl	800afe2 <memcpy>
			memcpy(ui8_buf_response, ui8_16_aux.ui8, 6);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	461a      	mov	r2, r3
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	6010      	str	r0, [r2, #0]
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	8093      	strh	r3, [r2, #4]
		}
	}

	return ret;
 8002512:	7ffb      	ldrb	r3, [r7, #31]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	0000      	movs	r0, r0
	...

08002520 <readMagnetometerData>:

HAL_StatusTypeDef readMagnetometerData(I2C_HandleTypeDef *i2c,
		double *d_response) {
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	int16_t i16_raw_response[3];
	uint8_t ui8_raw_response[6];

	ret = readRawMagnetometerData(i2c, i16_raw_response, ui8_raw_response);
 800252a:	f107 0208 	add.w	r2, r7, #8
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ffab 	bl	8002490 <readRawMagnetometerData>
 800253a:	4603      	mov	r3, r0
 800253c:	75fb      	strb	r3, [r7, #23]
	if (ret == HAL_OK) {
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d14b      	bne.n	80025dc <readMagnetometerData+0xbc>
		d_response[2] = mocked_values_z[mock_value_index] * 0.000001;

		mock_value_index = (mock_value_index + 1) % MOCK_SIZE;
#else
		// X conversion
		d_response[0] = i16_raw_response[0] / (double) X_Y_GAIN;
 8002544:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f813 	bl	8000574 <__aeabi_i2d>
 800254e:	a328      	add	r3, pc, #160	; (adr r3, 80025f0 <readMagnetometerData+0xd0>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fe f9a2 	bl	800089c <__aeabi_ddiv>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <readMagnetometerData+0xd8>)
 8002566:	f7fe f999 	bl	800089c <__aeabi_ddiv>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	e9c1 2300 	strd	r2, r3, [r1]
		// Z conversion
		d_response[1] = i16_raw_response[1] / (double) Z_GAIN;
 8002574:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fffb 	bl	8000574 <__aeabi_i2d>
 800257e:	a31a      	add	r3, pc, #104	; (adr r3, 80025e8 <readMagnetometerData+0xc8>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fe f98a 	bl	800089c <__aeabi_ddiv>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f103 0408 	add.w	r4, r3, #8
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <readMagnetometerData+0xd8>)
 800259c:	f7fe f97e 	bl	800089c <__aeabi_ddiv>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	e9c4 2300 	strd	r2, r3, [r4]

		// Y conversion
		d_response[2] = i16_raw_response[2] / (double) X_Y_GAIN;
 80025a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffe1 	bl	8000574 <__aeabi_i2d>
 80025b2:	a30f      	add	r3, pc, #60	; (adr r3, 80025f0 <readMagnetometerData+0xd0>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fe f970 	bl	800089c <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f103 0410 	add.w	r4, r3, #16
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <readMagnetometerData+0xd8>)
 80025d0:	f7fe f964 	bl	800089c <__aeabi_ddiv>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	e9c4 2300 	strd	r2, r3, [r4]
#endif

	}

	return ret;
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	00000000 	.word	0x00000000
 80025ec:	4069a000 	.word	0x4069a000
 80025f0:	00000000 	.word	0x00000000
 80025f4:	406cc000 	.word	0x406cc000
 80025f8:	40590000 	.word	0x40590000

080025fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_MspInit+0x50>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_MspInit+0x50>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6613      	str	r3, [r2, #96]	; 0x60
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_MspInit+0x50>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_MspInit+0x50>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_MspInit+0x50>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_MspInit+0x50>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	f06f 0001 	mvn.w	r0, #1
 800263a:	f000 fbb3 	bl	8002da4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800263e:	f001 fd8b 	bl	8004158 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002666:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_InitTick+0xcc>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	4a2c      	ldr	r2, [pc, #176]	; (800271c <HAL_InitTick+0xcc>)
 800266c:	f043 0320 	orr.w	r3, r3, #32
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_InitTick+0xcc>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800267e:	f107 020c 	add.w	r2, r7, #12
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f002 fa63 	bl	8004b54 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800268e:	f002 fa35 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8002692:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_InitTick+0xd0>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	0c9b      	lsrs	r3, r3, #18
 800269e:	3b01      	subs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_InitTick+0xd4>)
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <HAL_InitTick+0xd8>)
 80026a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_InitTick+0xd4>)
 80026aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ae:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_InitTick+0xd4>)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_InitTick+0xd4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_InitTick+0xd4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80026c2:	4818      	ldr	r0, [pc, #96]	; (8002724 <HAL_InitTick+0xd4>)
 80026c4:	f002 fd0c 	bl	80050e0 <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80026ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11b      	bne.n	800270e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80026d6:	4813      	ldr	r0, [pc, #76]	; (8002724 <HAL_InitTick+0xd4>)
 80026d8:	f002 fd5a 	bl	8005190 <HAL_TIM_Base_Start_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80026e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d111      	bne.n	800270e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80026ea:	2037      	movs	r0, #55	; 0x37
 80026ec:	f000 fb74 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d808      	bhi.n	8002708 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 80026f6:	2200      	movs	r2, #0
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	2037      	movs	r0, #55	; 0x37
 80026fc:	f000 fb52 	bl	8002da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_InitTick+0xdc>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e002      	b.n	800270e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800270e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002712:	4618      	mov	r0, r3
 8002714:	3730      	adds	r7, #48	; 0x30
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	431bde83 	.word	0x431bde83
 8002724:	20004114 	.word	0x20004114
 8002728:	40001400 	.word	0x40001400
 800272c:	200000c4 	.word	0x200000c4

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <MemManage_Handler+0x4>

08002742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler+0x4>

0800274e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <USART1_IRQHandler+0x10>)
 8002762:	f003 f9df 	bl	8005b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200041b0 	.word	0x200041b0

08002770 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002774:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002778:	f000 fd96 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM6_DAC_IRQHandler+0x10>)
 8002786:	f002 fdaa 	bl	80052de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20004164 	.word	0x20004164

08002794 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <TIM7_DAC_IRQHandler+0x10>)
 800279a:	f002 fda0 	bl	80052de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20004114 	.word	0x20004114

080027a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
	return 1;
 80027ac:	2301      	movs	r3, #1
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_kill>:

int _kill(int pid, int sig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027c2:	f008 faeb 	bl	800ad9c <__errno>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2216      	movs	r2, #22
 80027ca:	601a      	str	r2, [r3, #0]
	return -1;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_exit>:

void _exit (int status)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffe7 	bl	80027b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ea:	e7fe      	b.n	80027ea <_exit+0x12>

080027ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e00a      	b.n	8002814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027fe:	f3af 8000 	nop.w
 8002802:	4601      	mov	r1, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3301      	adds	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	dbf0      	blt.n	80027fe <_read+0x12>
	}

return len;
 800281c:	687b      	ldr	r3, [r7, #4]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	return -1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800284e:	605a      	str	r2, [r3, #4]
	return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_isatty>:

int _isatty(int file)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
	return 1;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
	return 0;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <_sbrk+0x5c>)
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <_sbrk+0x60>)
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <_sbrk+0x64>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <_sbrk+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c0:	f008 fa6c 	bl	800ad9c <__errno>
 80028c4:	4603      	mov	r3, r0
 80028c6:	220c      	movs	r2, #12
 80028c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e009      	b.n	80028e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <_sbrk+0x64>)
 80028e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20020000 	.word	0x20020000
 80028f0:	00000400 	.word	0x00000400
 80028f4:	20004160 	.word	0x20004160
 80028f8:	20007008 	.word	0x20007008

080028fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <SystemInit+0x20>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <SystemInit+0x20>)
 8002908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800290c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <MX_TIM6_Init+0x64>)
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <MX_TIM6_Init+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7727 - 1;
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <MX_TIM6_Init+0x64>)
 8002938:	f641 622e 	movw	r2, #7726	; 0x1e2e
 800293c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_TIM6_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <MX_TIM6_Init+0x64>)
 8002946:	2263      	movs	r2, #99	; 0x63
 8002948:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_TIM6_Init+0x64>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <MX_TIM6_Init+0x64>)
 8002952:	f002 fbc5 	bl	80050e0 <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800295c:	f7ff fd38 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_TIM6_Init+0x64>)
 800296e:	f002 ff05 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002978:	f7ff fd2a 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20004164 	.word	0x20004164
 8002988:	40001000 	.word	0x40001000

0800298c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_TIM_Base_MspInit+0x44>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d113      	bne.n	80029c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_TIM_Base_MspInit+0x48>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_TIM_Base_MspInit+0x48>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6593      	str	r3, [r2, #88]	; 0x58
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_TIM_Base_MspInit+0x48>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2105      	movs	r1, #5
 80029ba:	2036      	movs	r0, #54	; 0x36
 80029bc:	f000 f9f2 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029c0:	2036      	movs	r0, #54	; 0x36
 80029c2:	f000 fa09 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40001000 	.word	0x40001000
 80029d4:	40021000 	.word	0x40021000

080029d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029dc:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 80029de:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 80029e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 80029e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ea:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 80029fe:	220c      	movs	r2, #12
 8002a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a20:	4811      	ldr	r0, [pc, #68]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a22:	f002 ff87 	bl	8005934 <HAL_UART_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a2c:	f7ff fcd0 	bl	80023d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a30:	2100      	movs	r1, #0
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a34:	f004 faff 	bl	8007036 <HAL_UARTEx_SetTxFifoThreshold>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a3e:	f7ff fcc7 	bl	80023d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a42:	2100      	movs	r1, #0
 8002a44:	4808      	ldr	r0, [pc, #32]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a46:	f004 fb34 	bl	80070b2 <HAL_UARTEx_SetRxFifoThreshold>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a50:	f7ff fcbe 	bl	80023d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a54:	4804      	ldr	r0, [pc, #16]	; (8002a68 <MX_USART1_UART_Init+0x90>)
 8002a56:	f004 fab5 	bl	8006fc4 <HAL_UARTEx_DisableFifoMode>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a60:	f7ff fcb6 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200041b0 	.word	0x200041b0
 8002a6c:	40013800 	.word	0x40013800

08002a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b09e      	sub	sp, #120	; 0x78
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	2254      	movs	r2, #84	; 0x54
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f008 fab4 	bl	800affe <memset>
  if(uartHandle->Instance==USART1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <HAL_UART_MspInit+0xb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d13d      	bne.n	8002b1c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 f8c9 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ab8:	f7ff fc8a 	bl	80023d0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_UART_MspInit+0xb8>)
 8002abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_UART_MspInit+0xb8>)
 8002ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_UART_MspInit+0xb8>)
 8002aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_UART_MspInit+0xb8>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <HAL_UART_MspInit+0xb8>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_UART_MspInit+0xb8>)
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002aec:	2330      	movs	r3, #48	; 0x30
 8002aee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002afc:	2307      	movs	r3, #7
 8002afe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b04:	4619      	mov	r1, r3
 8002b06:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_UART_MspInit+0xbc>)
 8002b08:	f000 fa34 	bl	8002f74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2105      	movs	r1, #5
 8002b10:	2025      	movs	r0, #37	; 0x25
 8002b12:	f000 f947 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b16:	2025      	movs	r0, #37	; 0x25
 8002b18:	f000 f95e 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3778      	adds	r7, #120	; 0x78
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	48000800 	.word	0x48000800

08002b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b34:	480d      	ldr	r0, [pc, #52]	; (8002b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b36:	490e      	ldr	r1, [pc, #56]	; (8002b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b38:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <LoopForever+0xe>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b3c:	e002      	b.n	8002b44 <LoopCopyDataInit>

08002b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b42:	3304      	adds	r3, #4

08002b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b48:	d3f9      	bcc.n	8002b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4a:	4a0b      	ldr	r2, [pc, #44]	; (8002b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b4c:	4c0b      	ldr	r4, [pc, #44]	; (8002b7c <LoopForever+0x16>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b50:	e001      	b.n	8002b56 <LoopFillZerobss>

08002b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b54:	3204      	adds	r2, #4

08002b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b58:	d3fb      	bcc.n	8002b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b5a:	f7ff fecf 	bl	80028fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5e:	f008 fa19 	bl	800af94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b62:	f7ff fb9b 	bl	800229c <main>

08002b66 <LoopForever>:

LoopForever:
    b LoopForever
 8002b66:	e7fe      	b.n	8002b66 <LoopForever>
  ldr   r0, =_estack
 8002b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b70:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8002b74:	08010948 	.word	0x08010948
  ldr r2, =_sbss
 8002b78:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8002b7c:	20007004 	.word	0x20007004

08002b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_2_IRQHandler>

08002b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 f8fe 	bl	8002d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b92:	200f      	movs	r0, #15
 8002b94:	f7ff fd5c 	bl	8002650 <HAL_InitTick>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	71fb      	strb	r3, [r7, #7]
 8002ba2:	e001      	b.n	8002ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ba4:	f7ff fd2a 	bl	80025fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ba8:	79fb      	ldrb	r3, [r7, #7]

}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_IncTick+0x1c>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <HAL_IncTick+0x1c>)
 8002bc4:	6013      	str	r3, [r2, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	20004240 	.word	0x20004240
 8002bd4:	200000c8 	.word	0x200000c8

08002bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return uwTick;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_GetTick+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20004240 	.word	0x20004240

08002bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff ffee 	bl	8002bd8 <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d004      	beq.n	8002c14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_Delay+0x40>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c14:	bf00      	nop
 8002c16:	f7ff ffdf 	bl	8002bd8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d8f7      	bhi.n	8002c16 <HAL_Delay+0x26>
  {
  }
}
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200000c8 	.word	0x200000c8

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	; (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
         );
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff4c 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db2:	f7ff ff63 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002db6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	6978      	ldr	r0, [r7, #20]
 8002dbe:	f7ff ffb3 	bl	8002d28 <NVIC_EncodePriority>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff82 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff56 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d005      	beq.n	8002e18 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e037      	b.n	8002e88 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 020e 	bic.w	r2, r2, #14
 8002e26:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e36:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e64:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e86:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d00d      	beq.n	8002eda <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e047      	b.n	8002f6a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 020e 	bic.w	r2, r2, #14
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00c      	beq.n	8002f4a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
    }
  }
  return status;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f82:	e15a      	b.n	800323a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 814c 	beq.w	8003234 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d005      	beq.n	8002fb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d130      	bne.n	8003016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fea:	2201      	movs	r2, #1
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 0201 	and.w	r2, r3, #1
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d017      	beq.n	8003052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d123      	bne.n	80030a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	220f      	movs	r2, #15
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	08da      	lsrs	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3208      	adds	r2, #8
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0203 	and.w	r2, r3, #3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80a6 	beq.w	8003234 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e8:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <HAL_GPIO_Init+0x2e4>)
 80030ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ec:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <HAL_GPIO_Init+0x2e4>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6613      	str	r3, [r2, #96]	; 0x60
 80030f4:	4b58      	ldr	r3, [pc, #352]	; (8003258 <HAL_GPIO_Init+0x2e4>)
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003100:	4a56      	ldr	r2, [pc, #344]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800312a:	d01f      	beq.n	800316c <HAL_GPIO_Init+0x1f8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_GPIO_Init+0x2ec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d019      	beq.n	8003168 <HAL_GPIO_Init+0x1f4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <HAL_GPIO_Init+0x2f0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_GPIO_Init+0x1f0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a4a      	ldr	r2, [pc, #296]	; (8003268 <HAL_GPIO_Init+0x2f4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00d      	beq.n	8003160 <HAL_GPIO_Init+0x1ec>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a49      	ldr	r2, [pc, #292]	; (800326c <HAL_GPIO_Init+0x2f8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d007      	beq.n	800315c <HAL_GPIO_Init+0x1e8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a48      	ldr	r2, [pc, #288]	; (8003270 <HAL_GPIO_Init+0x2fc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_GPIO_Init+0x1e4>
 8003154:	2305      	movs	r3, #5
 8003156:	e00a      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003158:	2306      	movs	r3, #6
 800315a:	e008      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 800315c:	2304      	movs	r3, #4
 800315e:	e006      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003160:	2303      	movs	r3, #3
 8003162:	e004      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003164:	2302      	movs	r3, #2
 8003166:	e002      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_GPIO_Init+0x1fa>
 800316c:	2300      	movs	r3, #0
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317e:	4937      	ldr	r1, [pc, #220]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_GPIO_Init+0x300>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b0:	4a30      	ldr	r2, [pc, #192]	; (8003274 <HAL_GPIO_Init+0x300>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_GPIO_Init+0x300>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031da:	4a26      	ldr	r2, [pc, #152]	; (8003274 <HAL_GPIO_Init+0x300>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_GPIO_Init+0x300>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003204:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <HAL_GPIO_Init+0x300>)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <HAL_GPIO_Init+0x300>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800322e:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_GPIO_Init+0x300>)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f ae9d 	bne.w	8002f84 <HAL_GPIO_Init+0x10>
  }
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000
 8003260:	48000400 	.word	0x48000400
 8003264:	48000800 	.word	0x48000800
 8003268:	48000c00 	.word	0x48000c00
 800326c:	48001000 	.word	0x48001000
 8003270:	48001400 	.word	0x48001400
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003294:	e002      	b.n	800329c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f806 	bl	80032d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40010400 	.word	0x40010400

080032d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e081      	b.n	8003404 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fe fd73 	bl	8001e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2224      	movs	r2, #36	; 0x24
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800333e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	e006      	b.n	8003376 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003374:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d104      	bne.n	8003388 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003386:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69d9      	ldr	r1, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	461a      	mov	r2, r3
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
 800341c:	4613      	mov	r3, r2
 800341e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b20      	cmp	r3, #32
 800342a:	f040 80da 	bne.w	80035e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2C_Master_Transmit+0x30>
 8003438:	2302      	movs	r3, #2
 800343a:	e0d3      	b.n	80035e4 <HAL_I2C_Master_Transmit+0x1d8>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003444:	f7ff fbc8 	bl	8002bd8 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2319      	movs	r3, #25
 8003450:	2201      	movs	r2, #1
 8003452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 faed 	bl	8003a36 <I2C_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0be      	b.n	80035e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2221      	movs	r2, #33	; 0x21
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2210      	movs	r2, #16
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	893a      	ldrh	r2, [r7, #8]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	2bff      	cmp	r3, #255	; 0xff
 8003496:	d90e      	bls.n	80034b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_I2C_Master_Transmit+0x1e0>)
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fce4 	bl	8003e7c <I2C_TransferConfig>
 80034b4:	e06c      	b.n	8003590 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8979      	ldrh	r1, [r7, #10]
 80034c8:	4b48      	ldr	r3, [pc, #288]	; (80035ec <HAL_I2C_Master_Transmit+0x1e0>)
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fcd3 	bl	8003e7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80034d6:	e05b      	b.n	8003590 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	6a39      	ldr	r1, [r7, #32]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 faea 	bl	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e07b      	b.n	80035e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d034      	beq.n	8003590 <HAL_I2C_Master_Transmit+0x184>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d130      	bne.n	8003590 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fa7c 	bl	8003a36 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e04d      	b.n	80035e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2bff      	cmp	r3, #255	; 0xff
 8003550:	d90e      	bls.n	8003570 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	22ff      	movs	r2, #255	; 0xff
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	b2da      	uxtb	r2, r3
 800355e:	8979      	ldrh	r1, [r7, #10]
 8003560:	2300      	movs	r3, #0
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fc87 	bl	8003e7c <I2C_TransferConfig>
 800356e:	e00f      	b.n	8003590 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	b2da      	uxtb	r2, r3
 8003580:	8979      	ldrh	r1, [r7, #10]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fc76 	bl	8003e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d19e      	bne.n	80034d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	6a39      	ldr	r1, [r7, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fac9 	bl	8003b36 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e01a      	b.n	80035e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	80002000 	.word	0x80002000
 80035f0:	fe00e800 	.word	0xfe00e800

080035f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	461a      	mov	r2, r3
 8003600:	460b      	mov	r3, r1
 8003602:	817b      	strh	r3, [r7, #10]
 8003604:	4613      	mov	r3, r2
 8003606:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b20      	cmp	r3, #32
 8003612:	f040 80db 	bne.w	80037cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_I2C_Master_Receive+0x30>
 8003620:	2302      	movs	r3, #2
 8003622:	e0d4      	b.n	80037ce <HAL_I2C_Master_Receive+0x1da>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800362c:	f7ff fad4 	bl	8002bd8 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2319      	movs	r3, #25
 8003638:	2201      	movs	r2, #1
 800363a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f9f9 	bl	8003a36 <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0bf      	b.n	80037ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2222      	movs	r2, #34	; 0x22
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2210      	movs	r2, #16
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	893a      	ldrh	r2, [r7, #8]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2bff      	cmp	r3, #255	; 0xff
 800367e:	d90e      	bls.n	800369e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	22ff      	movs	r2, #255	; 0xff
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	b2da      	uxtb	r2, r3
 800368c:	8979      	ldrh	r1, [r7, #10]
 800368e:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <HAL_I2C_Master_Receive+0x1e4>)
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fbf0 	bl	8003e7c <I2C_TransferConfig>
 800369c:	e06d      	b.n	800377a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	8979      	ldrh	r1, [r7, #10]
 80036b0:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <HAL_I2C_Master_Receive+0x1e4>)
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fbdf 	bl	8003e7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80036be:	e05c      	b.n	800377a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	6a39      	ldr	r1, [r7, #32]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fa73 	bl	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e07c      	b.n	80037ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d034      	beq.n	800377a <HAL_I2C_Master_Receive+0x186>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d130      	bne.n	800377a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2200      	movs	r2, #0
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f987 	bl	8003a36 <I2C_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e04d      	b.n	80037ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	2bff      	cmp	r3, #255	; 0xff
 800373a:	d90e      	bls.n	800375a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	22ff      	movs	r2, #255	; 0xff
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	b2da      	uxtb	r2, r3
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb92 	bl	8003e7c <I2C_TransferConfig>
 8003758:	e00f      	b.n	800377a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	b2da      	uxtb	r2, r3
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb81 	bl	8003e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d19d      	bne.n	80036c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	6a39      	ldr	r1, [r7, #32]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f9d4 	bl	8003b36 <I2C_WaitOnSTOPFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e01a      	b.n	80037ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <HAL_I2C_Master_Receive+0x1e8>)
 80037ac:	400b      	ands	r3, r1
 80037ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	80002400 	.word	0x80002400
 80037dc:	fe00e800 	.word	0xfe00e800

080037e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	460b      	mov	r3, r1
 80037ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	f040 80f1 	bne.w	80039e4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d101      	bne.n	8003816 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	e0e7      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_I2C_IsDeviceReady+0x44>
 8003820:	2302      	movs	r3, #2
 8003822:	e0e0      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_I2C_IsDeviceReady+0x72>
 8003842:	897b      	ldrh	r3, [r7, #10]
 8003844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800384c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003850:	e004      	b.n	800385c <HAL_I2C_IsDeviceReady+0x7c>
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003862:	f7ff f9b9 	bl	8002bd8 <HAL_GetTick>
 8003866:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b20      	cmp	r3, #32
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b10      	cmp	r3, #16
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003894:	e034      	b.n	8003900 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d01a      	beq.n	80038d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7ff f99b 	bl	8002bd8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <HAL_I2C_IsDeviceReady+0xd4>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e088      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003900:	7ffb      	ldrb	r3, [r7, #31]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_I2C_IsDeviceReady+0x12c>
 8003906:	7fbb      	ldrb	r3, [r7, #30]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0c4      	beq.n	8003896 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b10      	cmp	r3, #16
 8003918:	d01a      	beq.n	8003950 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2200      	movs	r2, #0
 8003922:	2120      	movs	r1, #32
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f886 	bl	8003a36 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e058      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2220      	movs	r2, #32
 800393a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e04a      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	2120      	movs	r1, #32
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f86b 	bl	8003a36 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e03d      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2220      	movs	r2, #32
 8003978:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	d118      	bne.n	80039b4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003990:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2200      	movs	r2, #0
 800399a:	2120      	movs	r1, #32
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f84a 	bl	8003a36 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e01c      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2220      	movs	r2, #32
 80039b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	f63f af3b 	bhi.w	800383a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d103      	bne.n	8003a0c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d007      	beq.n	8003a2a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	619a      	str	r2, [r3, #24]
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a46:	e022      	b.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d01e      	beq.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	f7ff f8c2 	bl	8002bd8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d113      	bne.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00f      	b.n	8003aae <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d0cd      	beq.n	8003a48 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac2:	e02c      	b.n	8003b1e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f8eb 	bl	8003ca4 <I2C_IsErrorOccurred>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e02a      	b.n	8003b2e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d01e      	beq.n	8003b1e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae0:	f7ff f87a 	bl	8002bd8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d302      	bcc.n	8003af6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e007      	b.n	8003b2e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d1cb      	bne.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b42:	e028      	b.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f8ab 	bl	8003ca4 <I2C_IsErrorOccurred>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e026      	b.n	8003ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7ff f83e 	bl	8002bd8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d113      	bne.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e007      	b.n	8003ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d1cf      	bne.n	8003b44 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bbc:	e064      	b.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f86e 	bl	8003ca4 <I2C_IsErrorOccurred>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e062      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d138      	bne.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d105      	bne.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e04e      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d107      	bne.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2204      	movs	r2, #4
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
 8003c16:	e002      	b.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2220      	movs	r2, #32
 8003c24:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c32:	400b      	ands	r3, r1
 8003c34:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e022      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fe ffc1 	bl	8002bd8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10f      	bne.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e007      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d193      	bne.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	fe00e800 	.word	0xfe00e800

08003ca4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d075      	beq.n	8003dbc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cd8:	e056      	b.n	8003d88 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d052      	beq.n	8003d88 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe ff79 	bl	8002bd8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_IsErrorOccurred+0x54>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d147      	bne.n	8003d88 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1a:	d12e      	bne.n	8003d7a <I2C_IsErrorOccurred+0xd6>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d22:	d02a      	beq.n	8003d7a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d027      	beq.n	8003d7a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d38:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d3a:	f7fe ff4d 	bl	8002bd8 <HAL_GetTick>
 8003d3e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d40:	e01b      	b.n	8003d7a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d42:	f7fe ff49 	bl	8002bd8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b19      	cmp	r3, #25
 8003d4e:	d914      	bls.n	8003d7a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d1dc      	bne.n	8003d42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d003      	beq.n	8003d9e <I2C_IsErrorOccurred+0xfa>
 8003d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d09d      	beq.n	8003cda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2220      	movs	r2, #32
 8003dac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f043 0308 	orr.w	r3, r3, #8
 8003df6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01c      	beq.n	8003e6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fddb 	bl	80039ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <I2C_IsErrorOccurred+0x1d4>)
 8003e44:	400b      	ands	r3, r1
 8003e46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3728      	adds	r7, #40	; 0x28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	fe00e800 	.word	0xfe00e800

08003e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	817b      	strh	r3, [r7, #10]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e94:	7a7b      	ldrb	r3, [r7, #9]
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e9c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eaa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	0d5b      	lsrs	r3, r3, #21
 8003eb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <I2C_TransferConfig+0x60>)
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	ea02 0103 	and.w	r1, r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	03ff63ff 	.word	0x03ff63ff

08003ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d138      	bne.n	8003f68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e032      	b.n	8003f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2224      	movs	r2, #36	; 0x24
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d139      	bne.n	8004000 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e033      	b.n	8004002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2224      	movs	r2, #36	; 0x24
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d141      	bne.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800401e:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d131      	bne.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800402c:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	4a46      	ldr	r2, [pc, #280]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800403c:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004044:	4a41      	ldr	r2, [pc, #260]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800404a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800404c:	4b40      	ldr	r3, [pc, #256]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2232      	movs	r2, #50	; 0x32
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	4a3f      	ldr	r2, [pc, #252]	; (8004154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	0c9b      	lsrs	r3, r3, #18
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004062:	e002      	b.n	800406a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b01      	subs	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800406a:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d102      	bne.n	800407e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f2      	bne.n	8004064 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800407e:	4b33      	ldr	r3, [pc, #204]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408a:	d158      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e057      	b.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004090:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004096:	4a2d      	ldr	r2, [pc, #180]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040a0:	e04d      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d141      	bne.n	800412e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040aa:	4b28      	ldr	r3, [pc, #160]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b6:	d131      	bne.n	800411c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b8:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040be:	4a23      	ldr	r2, [pc, #140]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d0:	4a1e      	ldr	r2, [pc, #120]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040d8:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2232      	movs	r2, #50	; 0x32
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	0c9b      	lsrs	r3, r3, #18
 80040ea:	3301      	adds	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ee:	e002      	b.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d102      	bne.n	800410a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f2      	bne.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004116:	d112      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e011      	b.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800412c:	e007      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004138:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800413c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40007000 	.word	0x40007000
 8004150:	200000c0 	.word	0x200000c0
 8004154:	431bde83 	.word	0x431bde83

08004158 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004166:	6093      	str	r3, [r2, #8]
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40007000 	.word	0x40007000

08004178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e306      	b.n	8004798 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d075      	beq.n	8004282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	4b97      	ldr	r3, [pc, #604]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a0:	4b94      	ldr	r3, [pc, #592]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d102      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3e>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_OscConfig+0x44>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	4b8d      	ldr	r3, [pc, #564]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05b      	beq.n	8004280 <HAL_RCC_OscConfig+0x108>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d157      	bne.n	8004280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e2e1      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x74>
 80041de:	4b85      	ldr	r3, [pc, #532]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a84      	ldr	r2, [pc, #528]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e01d      	b.n	8004228 <HAL_RCC_OscConfig+0xb0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x98>
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7e      	ldr	r2, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80041fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7b      	ldr	r2, [pc, #492]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0xb0>
 8004210:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a74      	ldr	r2, [pc, #464]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fe fcd2 	bl	8002bd8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fe fcce 	bl	8002bd8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e2a6      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0xc0>
 8004256:	e014      	b.n	8004282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe fcbe 	bl	8002bd8 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fe fcba 	bl	8002bd8 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e292      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004272:	4b60      	ldr	r3, [pc, #384]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0xe8>
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d075      	beq.n	800437a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428e:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004298:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	d102      	bne.n	80042ae <HAL_RCC_OscConfig+0x136>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_OscConfig+0x13c>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d11f      	bne.n	80042f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b4:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_OscConfig+0x154>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e265      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	4946      	ldr	r1, [pc, #280]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042e0:	4b45      	ldr	r3, [pc, #276]	; (80043f8 <HAL_RCC_OscConfig+0x280>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe f9b3 	bl	8002650 <HAL_InitTick>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d043      	beq.n	8004378 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e251      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d023      	beq.n	8004344 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3c      	ldr	r2, [pc, #240]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fc66 	bl	8002bd8 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7fe fc62 	bl	8002bd8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e23a      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004322:	4b34      	ldr	r3, [pc, #208]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	492d      	ldr	r1, [pc, #180]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
 8004342:	e01a      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800434a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe fc42 	bl	8002bd8 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7fe fc3e 	bl	8002bd8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e216      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x1e0>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d041      	beq.n	800440a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004394:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fe fc1b 	bl	8002bd8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a6:	f7fe fc17 	bl	8002bd8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e1ef      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ef      	beq.n	80043a6 <HAL_RCC_OscConfig+0x22e>
 80043c6:	e020      	b.n	800440a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fe fbfe 	bl	8002bd8 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043de:	e00d      	b.n	80043fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fe fbfa 	bl	8002bd8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d906      	bls.n	80043fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1d2      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043fc:	4b8c      	ldr	r3, [pc, #560]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ea      	bne.n	80043e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80a6 	beq.w	8004564 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800441c:	4b84      	ldr	r3, [pc, #528]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x2b4>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x2b6>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b7f      	ldr	r3, [pc, #508]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	4a7e      	ldr	r2, [pc, #504]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6593      	str	r3, [r2, #88]	; 0x58
 800443e:	4b7c      	ldr	r3, [pc, #496]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444e:	4b79      	ldr	r3, [pc, #484]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fe fbb7 	bl	8002bd8 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fe fbb3 	bl	8002bd8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e18b      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x4bc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d108      	bne.n	80044a6 <HAL_RCC_OscConfig+0x32e>
 8004494:	4b66      	ldr	r3, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	4a65      	ldr	r2, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a4:	e024      	b.n	80044f0 <HAL_RCC_OscConfig+0x378>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d110      	bne.n	80044d0 <HAL_RCC_OscConfig+0x358>
 80044ae:	4b60      	ldr	r3, [pc, #384]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	4a5e      	ldr	r2, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	4a5a      	ldr	r2, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ce:	e00f      	b.n	80044f0 <HAL_RCC_OscConfig+0x378>
 80044d0:	4b57      	ldr	r3, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	4a56      	ldr	r2, [pc, #344]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	4a52      	ldr	r2, [pc, #328]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f023 0304 	bic.w	r3, r3, #4
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d016      	beq.n	8004526 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fe fb6e 	bl	8002bd8 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fe fb6a 	bl	8002bd8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e140      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ed      	beq.n	8004500 <HAL_RCC_OscConfig+0x388>
 8004524:	e015      	b.n	8004552 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fe fb57 	bl	8002bd8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fe fb53 	bl	8002bd8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e129      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004544:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ed      	bne.n	800452e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004552:	7ffb      	ldrb	r3, [r7, #31]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b35      	ldr	r3, [pc, #212]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004562:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d03c      	beq.n	80045ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01c      	beq.n	80045b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457e:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fe fb26 	bl	8002bd8 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004590:	f7fe fb22 	bl	8002bd8 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e0fa      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045a2:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ef      	beq.n	8004590 <HAL_RCC_OscConfig+0x418>
 80045b0:	e01b      	b.n	80045ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b8:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fe fb09 	bl	8002bd8 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ca:	f7fe fb05 	bl	8002bd8 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0dd      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ef      	bne.n	80045ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80d1 	beq.w	8004796 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	f000 808b 	beq.w	8004718 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d15e      	bne.n	80046c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <HAL_RCC_OscConfig+0x4b8>)
 8004610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fe fadf 	bl	8002bd8 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	e00c      	b.n	8004638 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe fadb 	bl	8002bd8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d905      	bls.n	8004638 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0b3      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ec      	bne.n	800461e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004644:	4b56      	ldr	r3, [pc, #344]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	4b56      	ldr	r3, [pc, #344]	; (80047a4 <HAL_RCC_OscConfig+0x62c>)
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6a11      	ldr	r1, [r2, #32]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004654:	3a01      	subs	r2, #1
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	4311      	orrs	r1, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800465e:	0212      	lsls	r2, r2, #8
 8004660:	4311      	orrs	r1, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004666:	0852      	lsrs	r2, r2, #1
 8004668:	3a01      	subs	r2, #1
 800466a:	0552      	lsls	r2, r2, #21
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004672:	0852      	lsrs	r2, r2, #1
 8004674:	3a01      	subs	r2, #1
 8004676:	0652      	lsls	r2, r2, #25
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800467e:	06d2      	lsls	r2, r2, #27
 8004680:	430a      	orrs	r2, r1
 8004682:	4947      	ldr	r1, [pc, #284]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 8004684:	4313      	orrs	r3, r2
 8004686:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b45      	ldr	r3, [pc, #276]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a44      	ldr	r2, [pc, #272]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004694:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 800469a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fa9a 	bl	8002bd8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fe fa96 	bl	8002bd8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e06e      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x530>
 80046c6:	e066      	b.n	8004796 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a31      	ldr	r2, [pc, #196]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046e0:	4b2f      	ldr	r3, [pc, #188]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a2e      	ldr	r2, [pc, #184]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 80046e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fe fa72 	bl	8002bd8 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fa6e 	bl	8002bd8 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e046      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470a:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x580>
 8004716:	e03e      	b.n	8004796 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e039      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	429a      	cmp	r2, r3
 8004736:	d12c      	bne.n	8004792 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	3b01      	subs	r3, #1
 8004744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d123      	bne.n	8004792 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d11b      	bne.n	8004792 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d113      	bne.n	8004792 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	3b01      	subs	r3, #1
 8004778:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d109      	bne.n	8004792 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	019f800c 	.word	0x019f800c

080047a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e11e      	b.n	80049fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b91      	ldr	r3, [pc, #580]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b8e      	ldr	r3, [pc, #568]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 020f 	bic.w	r2, r3, #15
 80047d6:	498c      	ldr	r1, [pc, #560]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b8a      	ldr	r3, [pc, #552]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e106      	b.n	80049fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d073      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d129      	bne.n	8004858 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004804:	4b81      	ldr	r3, [pc, #516]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0f4      	b.n	80049fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004814:	f000 f9d0 	bl	8004bb8 <RCC_GetSysClockFreqFromPLLSource>
 8004818:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4a7c      	ldr	r2, [pc, #496]	; (8004a10 <HAL_RCC_ClockConfig+0x268>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d93f      	bls.n	80048a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004822:	4b7a      	ldr	r3, [pc, #488]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004836:	2b00      	cmp	r3, #0
 8004838:	d033      	beq.n	80048a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800483e:	2b00      	cmp	r3, #0
 8004840:	d12f      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004842:	4b72      	ldr	r3, [pc, #456]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484a:	4a70      	ldr	r2, [pc, #448]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 800484c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004850:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004852:	2380      	movs	r3, #128	; 0x80
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e024      	b.n	80048a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d107      	bne.n	8004870 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004860:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0c6      	b.n	80049fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004870:	4b66      	ldr	r3, [pc, #408]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0be      	b.n	80049fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004880:	f000 f8ce 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 8004884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4a61      	ldr	r2, [pc, #388]	; (8004a10 <HAL_RCC_ClockConfig+0x268>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d909      	bls.n	80048a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800488e:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004896:	4a5d      	ldr	r2, [pc, #372]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048a2:	4b5a      	ldr	r3, [pc, #360]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f023 0203 	bic.w	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4957      	ldr	r1, [pc, #348]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fe f990 	bl	8002bd8 <HAL_GetTick>
 80048b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048bc:	f7fe f98c 	bl	8002bd8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e095      	b.n	80049fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	4b4e      	ldr	r3, [pc, #312]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 020c 	and.w	r2, r3, #12
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d1eb      	bne.n	80048bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d023      	beq.n	8004938 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048fc:	4b43      	ldr	r3, [pc, #268]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4a42      	ldr	r2, [pc, #264]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004906:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004914:	4b3d      	ldr	r3, [pc, #244]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800491c:	4a3b      	ldr	r2, [pc, #236]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 800491e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004922:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004924:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4936      	ldr	r1, [pc, #216]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
 8004936:	e008      	b.n	800494a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d105      	bne.n	800494a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800493e:	4b33      	ldr	r3, [pc, #204]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4a32      	ldr	r2, [pc, #200]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 8004944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004948:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800494a:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d21d      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 020f 	bic.w	r2, r3, #15
 8004960:	4929      	ldr	r1, [pc, #164]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	4313      	orrs	r3, r2
 8004966:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004968:	f7fe f936 	bl	8002bd8 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fe f932 	bl	8002bd8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	; 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e03b      	b.n	80049fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d1ed      	bne.n	8004970 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4917      	ldr	r1, [pc, #92]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	490f      	ldr	r1, [pc, #60]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d2:	f000 f825 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	490c      	ldr	r1, [pc, #48]	; (8004a14 <HAL_RCC_ClockConfig+0x26c>)
 80049e4:	5ccb      	ldrb	r3, [r1, r3]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_RCC_ClockConfig+0x270>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x274>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fe2a 	bl	8002650 <HAL_InitTick>
 80049fc:	4603      	mov	r3, r0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	04c4b400 	.word	0x04c4b400
 8004a14:	080102e4 	.word	0x080102e4
 8004a18:	200000c0 	.word	0x200000c0
 8004a1c:	200000c4 	.word	0x200000c4

08004a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a26:	4b2c      	ldr	r3, [pc, #176]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d102      	bne.n	8004a38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a32:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	e047      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a38:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d102      	bne.n	8004a4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	e03e      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b0c      	cmp	r3, #12
 8004a54:	d136      	bne.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d10c      	bne.n	8004a8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a74:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a7e:	68d2      	ldr	r2, [r2, #12]
 8004a80:	0a12      	lsrs	r2, r2, #8
 8004a82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	617b      	str	r3, [r7, #20]
      break;
 8004a8c:	e00c      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	4a10      	ldr	r2, [pc, #64]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a98:	68d2      	ldr	r2, [r2, #12]
 8004a9a:	0a12      	lsrs	r2, r2, #8
 8004a9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aa0:	fb02 f303 	mul.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
      break;
 8004aa6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	0e5b      	lsrs	r3, r3, #25
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e001      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ac8:	693b      	ldr	r3, [r7, #16]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	016e3600 	.word	0x016e3600

08004ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	200000c0 	.word	0x200000c0

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b00:	f7ff fff0 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4904      	ldr	r1, [pc, #16]	; (8004b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000
 8004b24:	080102f4 	.word	0x080102f4

08004b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b2c:	f7ff ffda 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0adb      	lsrs	r3, r3, #11
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4904      	ldr	r1, [pc, #16]	; (8004b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	080102f4 	.word	0x080102f4

08004b54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	220f      	movs	r2, #15
 8004b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0203 	and.w	r2, r3, #3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	08db      	lsrs	r3, r3, #3
 8004b8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <HAL_RCC_GetClockConfig+0x60>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 020f 	and.w	r2, r3, #15
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	601a      	str	r2, [r3, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40022000 	.word	0x40022000

08004bb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d10c      	bne.n	8004bf6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bdc:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004be6:	68d2      	ldr	r2, [r2, #12]
 8004be8:	0a12      	lsrs	r2, r2, #8
 8004bea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	617b      	str	r3, [r7, #20]
    break;
 8004bf4:	e00c      	b.n	8004c10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bf6:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c00:	68d2      	ldr	r2, [r2, #12]
 8004c02:	0a12      	lsrs	r2, r2, #8
 8004c04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c08:	fb02 f303 	mul.w	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]
    break;
 8004c0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	0e5b      	lsrs	r3, r3, #25
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c2a:	687b      	ldr	r3, [r7, #4]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	016e3600 	.word	0x016e3600
 8004c40:	00f42400 	.word	0x00f42400

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c50:	2300      	movs	r3, #0
 8004c52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8098 	beq.w	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c66:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10d      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c72:	4b40      	ldr	r3, [pc, #256]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	4a3f      	ldr	r2, [pc, #252]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c8e:	4b3a      	ldr	r3, [pc, #232]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a39      	ldr	r2, [pc, #228]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c9a:	f7fd ff9d 	bl	8002bd8 <HAL_GetTick>
 8004c9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ca0:	e009      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fd ff99 	bl	8002bd8 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d902      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	74fb      	strb	r3, [r7, #19]
        break;
 8004cb4:	e005      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0ef      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d159      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cc8:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d01e      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d019      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ce4:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cf0:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d10:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fd ff59 	bl	8002bd8 <HAL_GetTick>
 8004d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d28:	e00b      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fd ff55 	bl	8002bd8 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d902      	bls.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d40:	e006      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ec      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d64:	4903      	ldr	r1, [pc, #12]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d6c:	e008      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	74bb      	strb	r3, [r7, #18]
 8004d72:	e005      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d80:	7c7b      	ldrb	r3, [r7, #17]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4ba7      	ldr	r3, [pc, #668]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	4aa6      	ldr	r2, [pc, #664]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d9e:	4ba1      	ldr	r3, [pc, #644]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f023 0203 	bic.w	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	499d      	ldr	r1, [pc, #628]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dc0:	4b98      	ldr	r3, [pc, #608]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f023 020c 	bic.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4995      	ldr	r1, [pc, #596]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004de2:	4b90      	ldr	r3, [pc, #576]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	498c      	ldr	r1, [pc, #560]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e04:	4b87      	ldr	r3, [pc, #540]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	4984      	ldr	r1, [pc, #528]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e26:	4b7f      	ldr	r3, [pc, #508]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	497b      	ldr	r1, [pc, #492]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e48:	4b76      	ldr	r3, [pc, #472]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	4973      	ldr	r1, [pc, #460]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e6a:	4b6e      	ldr	r3, [pc, #440]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	496a      	ldr	r1, [pc, #424]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e8c:	4b65      	ldr	r3, [pc, #404]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	4962      	ldr	r1, [pc, #392]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eae:	4b5d      	ldr	r3, [pc, #372]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	4959      	ldr	r1, [pc, #356]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ed0:	4b54      	ldr	r3, [pc, #336]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	4951      	ldr	r1, [pc, #324]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ef2:	4b4c      	ldr	r3, [pc, #304]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	4948      	ldr	r1, [pc, #288]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4940      	ldr	r1, [pc, #256]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f32:	d105      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b3b      	ldr	r3, [pc, #236]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a3a      	ldr	r2, [pc, #232]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f4c:	4b35      	ldr	r3, [pc, #212]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	4932      	ldr	r1, [pc, #200]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f84:	4b27      	ldr	r3, [pc, #156]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	4924      	ldr	r1, [pc, #144]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fbc:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fca:	4916      	ldr	r1, [pc, #88]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a10      	ldr	r2, [pc, #64]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d019      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	4908      	ldr	r1, [pc, #32]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005014:	4b03      	ldr	r3, [pc, #12]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a02      	ldr	r2, [pc, #8]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501e:	60d3      	str	r3, [r2, #12]
 8005020:	e002      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	4926      	ldr	r1, [pc, #152]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005054:	4b21      	ldr	r3, [pc, #132]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a20      	ldr	r2, [pc, #128]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800505a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507a:	4918      	ldr	r1, [pc, #96]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d105      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800508c:	4b13      	ldr	r3, [pc, #76]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a12      	ldr	r2, [pc, #72]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005096:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	490a      	ldr	r1, [pc, #40]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a04      	ldr	r2, [pc, #16]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e049      	b.n	8005186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fd fc40 	bl	800298c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fa84 	bl	800562c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e054      	b.n	8005252 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a26      	ldr	r2, [pc, #152]	; (8005260 <HAL_TIM_Base_Start_IT+0xd0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d022      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d01d      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a22      	ldr	r2, [pc, #136]	; (8005264 <HAL_TIM_Base_Start_IT+0xd4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d018      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a21      	ldr	r2, [pc, #132]	; (8005268 <HAL_TIM_Base_Start_IT+0xd8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_TIM_Base_Start_IT+0xdc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <HAL_TIM_Base_Start_IT+0xe0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d009      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <HAL_TIM_Base_Start_IT+0xe4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <HAL_TIM_Base_Start_IT+0xe8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d115      	bne.n	800523c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	4b19      	ldr	r3, [pc, #100]	; (800527c <HAL_TIM_Base_Start_IT+0xec>)
 8005218:	4013      	ands	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b06      	cmp	r3, #6
 8005220:	d015      	beq.n	800524e <HAL_TIM_Base_Start_IT+0xbe>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005228:	d011      	beq.n	800524e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523a:	e008      	b.n	800524e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e000      	b.n	8005250 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40013400 	.word	0x40013400
 8005274:	40014000 	.word	0x40014000
 8005278:	40015000 	.word	0x40015000
 800527c:	00010007 	.word	0x00010007

08005280 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	f241 1311 	movw	r3, #4369	; 0x1111
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10f      	bne.n	80052c8 <HAL_TIM_Base_Stop_IT+0x48>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	f244 4344 	movw	r3, #17476	; 0x4444
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d107      	bne.n	80052c8 <HAL_TIM_Base_Stop_IT+0x48>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d122      	bne.n	800533a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d11b      	bne.n	800533a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0202 	mvn.w	r2, #2
 800530a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f965 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 8005326:	e005      	b.n	8005334 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f957 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f968 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b04      	cmp	r3, #4
 8005346:	d122      	bne.n	800538e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d11b      	bne.n	800538e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0204 	mvn.w	r2, #4
 800535e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f93b 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 800537a:	e005      	b.n	8005388 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f92d 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f93e 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d122      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d11b      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0208 	mvn.w	r2, #8
 80053b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2204      	movs	r2, #4
 80053b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f911 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 80053ce:	e005      	b.n	80053dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f903 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f914 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d122      	bne.n	8005436 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d11b      	bne.n	8005436 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0210 	mvn.w	r2, #16
 8005406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2208      	movs	r2, #8
 800540c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8e7 	bl	80055f0 <HAL_TIM_IC_CaptureCallback>
 8005422:	e005      	b.n	8005430 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8d9 	bl	80055dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8ea 	bl	8005604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10e      	bne.n	8005462 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f06f 0201 	mvn.w	r2, #1
 800545a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fc ff99 	bl	8002394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b80      	cmp	r3, #128	; 0x80
 800546e:	d10e      	bne.n	800548e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d107      	bne.n	800548e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fa17 	bl	80058bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549c:	d10e      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d107      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa0a 	bl	80058d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d10e      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f898 	bl	8005618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d10e      	bne.n	8005514 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d107      	bne.n	8005514 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0220 	mvn.w	r2, #32
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9ca 	bl	80058a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005522:	d10f      	bne.n	8005544 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9d0 	bl	80058e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800554e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005552:	d10f      	bne.n	8005574 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9c2 	bl	80058f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005582:	d10f      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9b4 	bl	800590c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b2:	d10f      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9a6 	bl	8005920 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a46      	ldr	r2, [pc, #280]	; (8005758 <TIM_Base_SetConfig+0x12c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d017      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564a:	d013      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a43      	ldr	r2, [pc, #268]	; (800575c <TIM_Base_SetConfig+0x130>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a42      	ldr	r2, [pc, #264]	; (8005760 <TIM_Base_SetConfig+0x134>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a41      	ldr	r2, [pc, #260]	; (8005764 <TIM_Base_SetConfig+0x138>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a40      	ldr	r2, [pc, #256]	; (8005768 <TIM_Base_SetConfig+0x13c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3f      	ldr	r2, [pc, #252]	; (800576c <TIM_Base_SetConfig+0x140>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a33      	ldr	r2, [pc, #204]	; (8005758 <TIM_Base_SetConfig+0x12c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d023      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005694:	d01f      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a30      	ldr	r2, [pc, #192]	; (800575c <TIM_Base_SetConfig+0x130>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01b      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2f      	ldr	r2, [pc, #188]	; (8005760 <TIM_Base_SetConfig+0x134>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d017      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2e      	ldr	r2, [pc, #184]	; (8005764 <TIM_Base_SetConfig+0x138>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2d      	ldr	r2, [pc, #180]	; (8005768 <TIM_Base_SetConfig+0x13c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2d      	ldr	r2, [pc, #180]	; (8005770 <TIM_Base_SetConfig+0x144>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2c      	ldr	r2, [pc, #176]	; (8005774 <TIM_Base_SetConfig+0x148>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <TIM_Base_SetConfig+0x14c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a26      	ldr	r2, [pc, #152]	; (800576c <TIM_Base_SetConfig+0x140>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d108      	bne.n	80056e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <TIM_Base_SetConfig+0x12c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a14      	ldr	r2, [pc, #80]	; (8005768 <TIM_Base_SetConfig+0x13c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00f      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_Base_SetConfig+0x144>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00b      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <TIM_Base_SetConfig+0x148>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <TIM_Base_SetConfig+0x14c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0d      	ldr	r2, [pc, #52]	; (800576c <TIM_Base_SetConfig+0x140>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d103      	bne.n	8005744 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	615a      	str	r2, [r3, #20]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40015000 	.word	0x40015000
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005790:	2302      	movs	r3, #2
 8005792:	e074      	b.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a34      	ldr	r2, [pc, #208]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a33      	ldr	r2, [pc, #204]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a31      	ldr	r2, [pc, #196]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a21      	ldr	r2, [pc, #132]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005814:	d01d      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1d      	ldr	r2, [pc, #116]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a15      	ldr	r2, [pc, #84]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10c      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4313      	orrs	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40015000 	.word	0x40015000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40014000 	.word	0x40014000

080058a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e042      	b.n	80059cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fd f889 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2224      	movs	r2, #36	; 0x24
 8005962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc0c 	bl	8006194 <UART_SetConfig>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e022      	b.n	80059cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fefc 	bl	800678c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 ff83 	bl	80068d0 <UART_CheckIdleState>
 80059ca:	4603      	mov	r3, r0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b091      	sub	sp, #68	; 0x44
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	f040 808c 	bne.w	8005b06 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_UART_Transmit_IT+0x26>
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e084      	b.n	8005b08 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Transmit_IT+0x38>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e07d      	b.n	8005b08 <HAL_UART_Transmit_IT+0x134>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	88fa      	ldrh	r2, [r7, #6]
 8005a26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2221      	movs	r2, #33	; 0x21
 8005a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a48:	d12e      	bne.n	8005aa8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d107      	bne.n	8005a64 <HAL_UART_Transmit_IT+0x90>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <HAL_UART_Transmit_IT+0x140>)
 8005a60:	675a      	str	r2, [r3, #116]	; 0x74
 8005a62:	e002      	b.n	8005a6a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	; (8005b18 <HAL_UART_Transmit_IT+0x144>)
 8005a68:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a92:	637a      	str	r2, [r7, #52]	; 0x34
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <HAL_UART_Transmit_IT+0x9e>
 8005aa6:	e02c      	b.n	8005b02 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab0:	d107      	bne.n	8005ac2 <HAL_UART_Transmit_IT+0xee>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <HAL_UART_Transmit_IT+0x148>)
 8005abe:	675a      	str	r2, [r3, #116]	; 0x74
 8005ac0:	e002      	b.n	8005ac8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <HAL_UART_Transmit_IT+0x14c>)
 8005ac6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	623b      	str	r3, [r7, #32]
 8005af0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	69f9      	ldr	r1, [r7, #28]
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e6      	bne.n	8005ad0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3744      	adds	r7, #68	; 0x44
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	08006e49 	.word	0x08006e49
 8005b18:	08006d69 	.word	0x08006d69
 8005b1c:	08006ca7 	.word	0x08006ca7
 8005b20:	08006bef 	.word	0x08006bef

08005b24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b0ba      	sub	sp, #232	; 0xe8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b52:	4013      	ands	r3, r2
 8005b54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d11b      	bne.n	8005b98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d015      	beq.n	8005b98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 82d6 	beq.w	800613a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
      }
      return;
 8005b96:	e2d0      	b.n	800613a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 811f 	beq.w	8005de0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ba2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ba6:	4b8b      	ldr	r3, [pc, #556]	; (8005dd4 <HAL_UART_IRQHandler+0x2b0>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bb2:	4b89      	ldr	r3, [pc, #548]	; (8005dd8 <HAL_UART_IRQHandler+0x2b4>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8112 	beq.w	8005de0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d011      	beq.n	8005bec <HAL_UART_IRQHandler+0xc8>
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	f043 0201 	orr.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d011      	beq.n	8005c1c <HAL_UART_IRQHandler+0xf8>
 8005bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c12:	f043 0204 	orr.w	r2, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d011      	beq.n	8005c4c <HAL_UART_IRQHandler+0x128>
 8005c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2204      	movs	r2, #4
 8005c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c42:	f043 0202 	orr.w	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d017      	beq.n	8005c88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c68:	4b5a      	ldr	r3, [pc, #360]	; (8005dd4 <HAL_UART_IRQHandler+0x2b0>)
 8005c6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2208      	movs	r2, #8
 8005c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c7e:	f043 0208 	orr.w	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <HAL_UART_IRQHandler+0x196>
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb0:	f043 0220 	orr.w	r2, r3, #32
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 823c 	beq.w	800613e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d013      	beq.n	8005cfa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d005      	beq.n	8005d1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d04f      	beq.n	8005dbe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fee9 	bl	8006af6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d141      	bne.n	8005db6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1d9      	bne.n	8005d32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d013      	beq.n	8005dae <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d8a:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <HAL_UART_IRQHandler+0x2b8>)
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fd f887 	bl	8002ea6 <HAL_DMA_Abort_IT>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d017      	beq.n	8005dce <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	e00f      	b.n	8005dce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9da 	bl	8006168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	e00b      	b.n	8005dce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9d6 	bl	8006168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	e007      	b.n	8005dce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f9d2 	bl	8006168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005dcc:	e1b7      	b.n	800613e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dce:	bf00      	nop
    return;
 8005dd0:	e1b5      	b.n	800613e <HAL_UART_IRQHandler+0x61a>
 8005dd2:	bf00      	nop
 8005dd4:	10000001 	.word	0x10000001
 8005dd8:	04000120 	.word	0x04000120
 8005ddc:	08006bc3 	.word	0x08006bc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	f040 814a 	bne.w	800607e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8143 	beq.w	800607e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 813c 	beq.w	800607e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2210      	movs	r2, #16
 8005e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	f040 80b5 	bne.w	8005f88 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8187 	beq.w	8006142 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	f080 817f 	bcs.w	8006142 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 8086 	bne.w	8005f6c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1da      	bne.n	8005e60 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e1      	bne.n	8005eaa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e3      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e4      	bne.n	8005f2c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fc ff44 	bl	8002df4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f8fb 	bl	800617c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f86:	e0dc      	b.n	8006142 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80ce 	beq.w	8006146 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80c9 	beq.w	8006146 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e4      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006012:	633a      	str	r2, [r7, #48]	; 0x30
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e1      	bne.n	8005fea <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	60fb      	str	r3, [r7, #12]
   return(result);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0310 	bic.w	r3, r3, #16
 800604e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	617b      	str	r3, [r7, #20]
   return(result);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e4      	bne.n	800603a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f880 	bl	800617c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800607c:	e063      	b.n	8006146 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00e      	beq.n	80060a8 <HAL_UART_IRQHandler+0x584>
 800608a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800609e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 ff71 	bl	8006f88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060a6:	e051      	b.n	800614c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d014      	beq.n	80060de <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d03a      	beq.n	800614a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
    }
    return;
 80060dc:	e035      	b.n	800614a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d009      	beq.n	80060fe <HAL_UART_IRQHandler+0x5da>
 80060ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 ff1b 	bl	8006f32 <UART_EndTransmit_IT>
    return;
 80060fc:	e026      	b.n	800614c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_UART_IRQHandler+0x5fa>
 800610a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 ff4a 	bl	8006fb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800611c:	e016      	b.n	800614c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d010      	beq.n	800614c <HAL_UART_IRQHandler+0x628>
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612e:	2b00      	cmp	r3, #0
 8006130:	da0c      	bge.n	800614c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 ff32 	bl	8006f9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006138:	e008      	b.n	800614c <HAL_UART_IRQHandler+0x628>
      return;
 800613a:	bf00      	nop
 800613c:	e006      	b.n	800614c <HAL_UART_IRQHandler+0x628>
    return;
 800613e:	bf00      	nop
 8006140:	e004      	b.n	800614c <HAL_UART_IRQHandler+0x628>
      return;
 8006142:	bf00      	nop
 8006144:	e002      	b.n	800614c <HAL_UART_IRQHandler+0x628>
      return;
 8006146:	bf00      	nop
 8006148:	e000      	b.n	800614c <HAL_UART_IRQHandler+0x628>
    return;
 800614a:	bf00      	nop
  }
}
 800614c:	37e8      	adds	r7, #232	; 0xe8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop

08006154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006198:	b08c      	sub	sp, #48	; 0x30
 800619a:	af00      	add	r7, sp, #0
 800619c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4baa      	ldr	r3, [pc, #680]	; (800646c <UART_SetConfig+0x2d8>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a9f      	ldr	r2, [pc, #636]	; (8006470 <UART_SetConfig+0x2dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fc:	4313      	orrs	r3, r2
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800620a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006214:	430b      	orrs	r3, r1
 8006216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	f023 010f 	bic.w	r1, r3, #15
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a90      	ldr	r2, [pc, #576]	; (8006474 <UART_SetConfig+0x2e0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d125      	bne.n	8006284 <UART_SetConfig+0xf0>
 8006238:	4b8f      	ldr	r3, [pc, #572]	; (8006478 <UART_SetConfig+0x2e4>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b03      	cmp	r3, #3
 8006244:	d81a      	bhi.n	800627c <UART_SetConfig+0xe8>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <UART_SetConfig+0xb8>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	0800625d 	.word	0x0800625d
 8006250:	0800626d 	.word	0x0800626d
 8006254:	08006265 	.word	0x08006265
 8006258:	08006275 	.word	0x08006275
 800625c:	2301      	movs	r3, #1
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006262:	e116      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006264:	2302      	movs	r3, #2
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626a:	e112      	b.n	8006492 <UART_SetConfig+0x2fe>
 800626c:	2304      	movs	r3, #4
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006272:	e10e      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006274:	2308      	movs	r3, #8
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627a:	e10a      	b.n	8006492 <UART_SetConfig+0x2fe>
 800627c:	2310      	movs	r3, #16
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006282:	e106      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a7c      	ldr	r2, [pc, #496]	; (800647c <UART_SetConfig+0x2e8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d138      	bne.n	8006300 <UART_SetConfig+0x16c>
 800628e:	4b7a      	ldr	r3, [pc, #488]	; (8006478 <UART_SetConfig+0x2e4>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	2b0c      	cmp	r3, #12
 800629a:	d82d      	bhi.n	80062f8 <UART_SetConfig+0x164>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0x110>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080062f9 	.word	0x080062f9
 80062ac:	080062f9 	.word	0x080062f9
 80062b0:	080062f9 	.word	0x080062f9
 80062b4:	080062e9 	.word	0x080062e9
 80062b8:	080062f9 	.word	0x080062f9
 80062bc:	080062f9 	.word	0x080062f9
 80062c0:	080062f9 	.word	0x080062f9
 80062c4:	080062e1 	.word	0x080062e1
 80062c8:	080062f9 	.word	0x080062f9
 80062cc:	080062f9 	.word	0x080062f9
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	080062f1 	.word	0x080062f1
 80062d8:	2300      	movs	r3, #0
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062de:	e0d8      	b.n	8006492 <UART_SetConfig+0x2fe>
 80062e0:	2302      	movs	r3, #2
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e6:	e0d4      	b.n	8006492 <UART_SetConfig+0x2fe>
 80062e8:	2304      	movs	r3, #4
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ee:	e0d0      	b.n	8006492 <UART_SetConfig+0x2fe>
 80062f0:	2308      	movs	r3, #8
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f6:	e0cc      	b.n	8006492 <UART_SetConfig+0x2fe>
 80062f8:	2310      	movs	r3, #16
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062fe:	e0c8      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a5e      	ldr	r2, [pc, #376]	; (8006480 <UART_SetConfig+0x2ec>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d125      	bne.n	8006356 <UART_SetConfig+0x1c2>
 800630a:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <UART_SetConfig+0x2e4>)
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006314:	2b30      	cmp	r3, #48	; 0x30
 8006316:	d016      	beq.n	8006346 <UART_SetConfig+0x1b2>
 8006318:	2b30      	cmp	r3, #48	; 0x30
 800631a:	d818      	bhi.n	800634e <UART_SetConfig+0x1ba>
 800631c:	2b20      	cmp	r3, #32
 800631e:	d00a      	beq.n	8006336 <UART_SetConfig+0x1a2>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d814      	bhi.n	800634e <UART_SetConfig+0x1ba>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <UART_SetConfig+0x19a>
 8006328:	2b10      	cmp	r3, #16
 800632a:	d008      	beq.n	800633e <UART_SetConfig+0x1aa>
 800632c:	e00f      	b.n	800634e <UART_SetConfig+0x1ba>
 800632e:	2300      	movs	r3, #0
 8006330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006334:	e0ad      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006336:	2302      	movs	r3, #2
 8006338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633c:	e0a9      	b.n	8006492 <UART_SetConfig+0x2fe>
 800633e:	2304      	movs	r3, #4
 8006340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006344:	e0a5      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006346:	2308      	movs	r3, #8
 8006348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800634c:	e0a1      	b.n	8006492 <UART_SetConfig+0x2fe>
 800634e:	2310      	movs	r3, #16
 8006350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006354:	e09d      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4a      	ldr	r2, [pc, #296]	; (8006484 <UART_SetConfig+0x2f0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d125      	bne.n	80063ac <UART_SetConfig+0x218>
 8006360:	4b45      	ldr	r3, [pc, #276]	; (8006478 <UART_SetConfig+0x2e4>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800636a:	2bc0      	cmp	r3, #192	; 0xc0
 800636c:	d016      	beq.n	800639c <UART_SetConfig+0x208>
 800636e:	2bc0      	cmp	r3, #192	; 0xc0
 8006370:	d818      	bhi.n	80063a4 <UART_SetConfig+0x210>
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d00a      	beq.n	800638c <UART_SetConfig+0x1f8>
 8006376:	2b80      	cmp	r3, #128	; 0x80
 8006378:	d814      	bhi.n	80063a4 <UART_SetConfig+0x210>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <UART_SetConfig+0x1f0>
 800637e:	2b40      	cmp	r3, #64	; 0x40
 8006380:	d008      	beq.n	8006394 <UART_SetConfig+0x200>
 8006382:	e00f      	b.n	80063a4 <UART_SetConfig+0x210>
 8006384:	2300      	movs	r3, #0
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638a:	e082      	b.n	8006492 <UART_SetConfig+0x2fe>
 800638c:	2302      	movs	r3, #2
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006392:	e07e      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006394:	2304      	movs	r3, #4
 8006396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639a:	e07a      	b.n	8006492 <UART_SetConfig+0x2fe>
 800639c:	2308      	movs	r3, #8
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a2:	e076      	b.n	8006492 <UART_SetConfig+0x2fe>
 80063a4:	2310      	movs	r3, #16
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063aa:	e072      	b.n	8006492 <UART_SetConfig+0x2fe>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a35      	ldr	r2, [pc, #212]	; (8006488 <UART_SetConfig+0x2f4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d12a      	bne.n	800640c <UART_SetConfig+0x278>
 80063b6:	4b30      	ldr	r3, [pc, #192]	; (8006478 <UART_SetConfig+0x2e4>)
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c4:	d01a      	beq.n	80063fc <UART_SetConfig+0x268>
 80063c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ca:	d81b      	bhi.n	8006404 <UART_SetConfig+0x270>
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d00c      	beq.n	80063ec <UART_SetConfig+0x258>
 80063d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d6:	d815      	bhi.n	8006404 <UART_SetConfig+0x270>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <UART_SetConfig+0x250>
 80063dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e0:	d008      	beq.n	80063f4 <UART_SetConfig+0x260>
 80063e2:	e00f      	b.n	8006404 <UART_SetConfig+0x270>
 80063e4:	2300      	movs	r3, #0
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e052      	b.n	8006492 <UART_SetConfig+0x2fe>
 80063ec:	2302      	movs	r3, #2
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f2:	e04e      	b.n	8006492 <UART_SetConfig+0x2fe>
 80063f4:	2304      	movs	r3, #4
 80063f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fa:	e04a      	b.n	8006492 <UART_SetConfig+0x2fe>
 80063fc:	2308      	movs	r3, #8
 80063fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006402:	e046      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006404:	2310      	movs	r3, #16
 8006406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800640a:	e042      	b.n	8006492 <UART_SetConfig+0x2fe>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a17      	ldr	r2, [pc, #92]	; (8006470 <UART_SetConfig+0x2dc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d13a      	bne.n	800648c <UART_SetConfig+0x2f8>
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <UART_SetConfig+0x2e4>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006424:	d01a      	beq.n	800645c <UART_SetConfig+0x2c8>
 8006426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800642a:	d81b      	bhi.n	8006464 <UART_SetConfig+0x2d0>
 800642c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006430:	d00c      	beq.n	800644c <UART_SetConfig+0x2b8>
 8006432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006436:	d815      	bhi.n	8006464 <UART_SetConfig+0x2d0>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <UART_SetConfig+0x2b0>
 800643c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006440:	d008      	beq.n	8006454 <UART_SetConfig+0x2c0>
 8006442:	e00f      	b.n	8006464 <UART_SetConfig+0x2d0>
 8006444:	2300      	movs	r3, #0
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644a:	e022      	b.n	8006492 <UART_SetConfig+0x2fe>
 800644c:	2302      	movs	r3, #2
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006452:	e01e      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006454:	2304      	movs	r3, #4
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645a:	e01a      	b.n	8006492 <UART_SetConfig+0x2fe>
 800645c:	2308      	movs	r3, #8
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006462:	e016      	b.n	8006492 <UART_SetConfig+0x2fe>
 8006464:	2310      	movs	r3, #16
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646a:	e012      	b.n	8006492 <UART_SetConfig+0x2fe>
 800646c:	cfff69f3 	.word	0xcfff69f3
 8006470:	40008000 	.word	0x40008000
 8006474:	40013800 	.word	0x40013800
 8006478:	40021000 	.word	0x40021000
 800647c:	40004400 	.word	0x40004400
 8006480:	40004800 	.word	0x40004800
 8006484:	40004c00 	.word	0x40004c00
 8006488:	40005000 	.word	0x40005000
 800648c:	2310      	movs	r3, #16
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4aae      	ldr	r2, [pc, #696]	; (8006750 <UART_SetConfig+0x5bc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	f040 8097 	bne.w	80065cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800649e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d823      	bhi.n	80064ee <UART_SetConfig+0x35a>
 80064a6:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <UART_SetConfig+0x318>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064ef 	.word	0x080064ef
 80064b4:	080064d9 	.word	0x080064d9
 80064b8:	080064ef 	.word	0x080064ef
 80064bc:	080064df 	.word	0x080064df
 80064c0:	080064ef 	.word	0x080064ef
 80064c4:	080064ef 	.word	0x080064ef
 80064c8:	080064ef 	.word	0x080064ef
 80064cc:	080064e7 	.word	0x080064e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d0:	f7fe fb14 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 80064d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064d6:	e010      	b.n	80064fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d8:	4b9e      	ldr	r3, [pc, #632]	; (8006754 <UART_SetConfig+0x5c0>)
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064dc:	e00d      	b.n	80064fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064de:	f7fe fa9f 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80064e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064e4:	e009      	b.n	80064fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064ec:	e005      	b.n	80064fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8130 	beq.w	8006762 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	4a94      	ldr	r2, [pc, #592]	; (8006758 <UART_SetConfig+0x5c4>)
 8006508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650c:	461a      	mov	r2, r3
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	fbb3 f3f2 	udiv	r3, r3, r2
 8006514:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4413      	add	r3, r2
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	429a      	cmp	r2, r3
 8006524:	d305      	bcc.n	8006532 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	429a      	cmp	r2, r3
 8006530:	d903      	bls.n	800653a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006538:	e113      	b.n	8006762 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	2200      	movs	r2, #0
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	60fa      	str	r2, [r7, #12]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	4a84      	ldr	r2, [pc, #528]	; (8006758 <UART_SetConfig+0x5c4>)
 8006548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800654c:	b29b      	uxth	r3, r3
 800654e:	2200      	movs	r2, #0
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006558:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800655c:	f7fa fb9c 	bl	8000c98 <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4610      	mov	r0, r2
 8006566:	4619      	mov	r1, r3
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	020b      	lsls	r3, r1, #8
 8006572:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006576:	0202      	lsls	r2, r0, #8
 8006578:	6979      	ldr	r1, [r7, #20]
 800657a:	6849      	ldr	r1, [r1, #4]
 800657c:	0849      	lsrs	r1, r1, #1
 800657e:	2000      	movs	r0, #0
 8006580:	460c      	mov	r4, r1
 8006582:	4605      	mov	r5, r0
 8006584:	eb12 0804 	adds.w	r8, r2, r4
 8006588:	eb43 0905 	adc.w	r9, r3, r5
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	469a      	mov	sl, r3
 8006594:	4693      	mov	fp, r2
 8006596:	4652      	mov	r2, sl
 8006598:	465b      	mov	r3, fp
 800659a:	4640      	mov	r0, r8
 800659c:	4649      	mov	r1, r9
 800659e:	f7fa fb7b 	bl	8000c98 <__aeabi_uldivmod>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4613      	mov	r3, r2
 80065a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065b0:	d308      	bcc.n	80065c4 <UART_SetConfig+0x430>
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b8:	d204      	bcs.n	80065c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6a3a      	ldr	r2, [r7, #32]
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	e0ce      	b.n	8006762 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065ca:	e0ca      	b.n	8006762 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d166      	bne.n	80066a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80065d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d827      	bhi.n	800662e <UART_SetConfig+0x49a>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x450>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	0800662f 	.word	0x0800662f
 80065f4:	0800661f 	.word	0x0800661f
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	0800662f 	.word	0x0800662f
 8006600:	0800662f 	.word	0x0800662f
 8006604:	08006627 	.word	0x08006627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fe fa78 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 800660c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800660e:	e014      	b.n	800663a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006610:	f7fe fa8a 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006616:	e010      	b.n	800663a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006618:	4b4e      	ldr	r3, [pc, #312]	; (8006754 <UART_SetConfig+0x5c0>)
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800661c:	e00d      	b.n	800663a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661e:	f7fe f9ff 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 8006622:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006624:	e009      	b.n	800663a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800662c:	e005      	b.n	800663a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006638:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8090 	beq.w	8006762 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	4a44      	ldr	r2, [pc, #272]	; (8006758 <UART_SetConfig+0x5c4>)
 8006648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800664c:	461a      	mov	r2, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	fbb3 f3f2 	udiv	r3, r3, r2
 8006654:	005a      	lsls	r2, r3, #1
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	441a      	add	r2, r3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b0f      	cmp	r3, #15
 800666c:	d916      	bls.n	800669c <UART_SetConfig+0x508>
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d212      	bcs.n	800669c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f023 030f 	bic.w	r3, r3, #15
 800667e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	b29a      	uxth	r2, r3
 800668c:	8bfb      	ldrh	r3, [r7, #30]
 800668e:	4313      	orrs	r3, r2
 8006690:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	8bfa      	ldrh	r2, [r7, #30]
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	e062      	b.n	8006762 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066a2:	e05e      	b.n	8006762 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d828      	bhi.n	80066fe <UART_SetConfig+0x56a>
 80066ac:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0x520>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	080066ff 	.word	0x080066ff
 80066c4:	080066ef 	.word	0x080066ef
 80066c8:	080066ff 	.word	0x080066ff
 80066cc:	080066ff 	.word	0x080066ff
 80066d0:	080066ff 	.word	0x080066ff
 80066d4:	080066f7 	.word	0x080066f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d8:	f7fe fa10 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 80066dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066de:	e014      	b.n	800670a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e0:	f7fe fa22 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 80066e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066e6:	e010      	b.n	800670a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e8:	4b1a      	ldr	r3, [pc, #104]	; (8006754 <UART_SetConfig+0x5c0>)
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066ec:	e00d      	b.n	800670a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ee:	f7fe f997 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066f4:	e009      	b.n	800670a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066fc:	e005      	b.n	800670a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006708:	bf00      	nop
    }

    if (pclk != 0U)
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d028      	beq.n	8006762 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	4a10      	ldr	r2, [pc, #64]	; (8006758 <UART_SetConfig+0x5c4>)
 8006716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800671a:	461a      	mov	r2, r3
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	441a      	add	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006732:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	2b0f      	cmp	r3, #15
 8006738:	d910      	bls.n	800675c <UART_SetConfig+0x5c8>
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006740:	d20c      	bcs.n	800675c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	b29a      	uxth	r2, r3
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60da      	str	r2, [r3, #12]
 800674c:	e009      	b.n	8006762 <UART_SetConfig+0x5ce>
 800674e:	bf00      	nop
 8006750:	40008000 	.word	0x40008000
 8006754:	00f42400 	.word	0x00f42400
 8006758:	080102fc 	.word	0x080102fc
      }
      else
      {
        ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2201      	movs	r2, #1
 8006766:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2201      	movs	r2, #1
 800676e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2200      	movs	r2, #0
 8006776:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2200      	movs	r2, #0
 800677c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800677e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006782:	4618      	mov	r0, r3
 8006784:	3730      	adds	r7, #48	; 0x30
 8006786:	46bd      	mov	sp, r7
 8006788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800678c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688a:	d10a      	bne.n	80068a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068e0:	f7fc f97a 	bl	8002bd8 <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d10e      	bne.n	8006912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f82f 	bl	8006966 <UART_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e025      	b.n	800695e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b04      	cmp	r3, #4
 800691e:	d10e      	bne.n	800693e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f819 	bl	8006966 <UART_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e00f      	b.n	800695e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b09c      	sub	sp, #112	; 0x70
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006976:	e0a9      	b.n	8006acc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	f000 80a5 	beq.w	8006acc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006982:	f7fc f929 	bl	8002bd8 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800698e:	429a      	cmp	r2, r3
 8006990:	d302      	bcc.n	8006998 <UART_WaitOnFlagUntilTimeout+0x32>
 8006992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006994:	2b00      	cmp	r3, #0
 8006996:	d140      	bne.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069ac:	667b      	str	r3, [r7, #100]	; 0x64
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e6      	bne.n	8006998 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	663b      	str	r3, [r7, #96]	; 0x60
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e5      	bne.n	80069ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e069      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d051      	beq.n	8006acc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a36:	d149      	bne.n	8006acc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34
 8006a62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e6      	bne.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	613b      	str	r3, [r7, #16]
   return(result);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a94:	623a      	str	r2, [r7, #32]
 8006a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	69f9      	ldr	r1, [r7, #28]
 8006a9a:	6a3a      	ldr	r2, [r7, #32]
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e5      	bne.n	8006a74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e010      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69da      	ldr	r2, [r3, #28]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	bf0c      	ite	eq
 8006adc:	2301      	moveq	r3, #1
 8006ade:	2300      	movne	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	f43f af46 	beq.w	8006978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3770      	adds	r7, #112	; 0x70
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b095      	sub	sp, #84	; 0x54
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e3      	bne.n	8006b30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d118      	bne.n	8006ba2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 0310 	bic.w	r3, r3, #16
 8006b84:	647b      	str	r3, [r7, #68]	; 0x44
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6979      	ldr	r1, [r7, #20]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e6      	bne.n	8006b70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006bb6:	bf00      	nop
 8006bb8:	3754      	adds	r7, #84	; 0x54
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff fac1 	bl	8006168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b08f      	sub	sp, #60	; 0x3c
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfc:	2b21      	cmp	r3, #33	; 0x21
 8006bfe:	d14c      	bne.n	8006c9a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d132      	bne.n	8006c72 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006c70:	e013      	b.n	8006c9a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	781a      	ldrb	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006c9a:	bf00      	nop
 8006c9c:	373c      	adds	r7, #60	; 0x3c
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b091      	sub	sp, #68	; 0x44
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb4:	2b21      	cmp	r3, #33	; 0x21
 8006cb6:	d151      	bne.n	8006d5c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d132      	bne.n	8006d2a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e6      	bne.n	8006cc4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	69b9      	ldr	r1, [r7, #24]
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	617b      	str	r3, [r7, #20]
   return(result);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006d28:	e018      	b.n	8006d5c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	1c9a      	adds	r2, r3, #2
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006d5c:	bf00      	nop
 8006d5e:	3744      	adds	r7, #68	; 0x44
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b091      	sub	sp, #68	; 0x44
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d76:	2b21      	cmp	r3, #33	; 0x21
 8006d78:	d160      	bne.n	8006e3c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d82:	e057      	b.n	8006e34 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d133      	bne.n	8006df8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3308      	adds	r3, #8
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db0:	633a      	str	r2, [r7, #48]	; 0x30
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e5      	bne.n	8006d90 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	69b9      	ldr	r1, [r7, #24]
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	617b      	str	r3, [r7, #20]
   return(result);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006df6:	e021      	b.n	8006e3c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d013      	beq.n	8006e2e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006e2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e30:	3b01      	subs	r3, #1
 8006e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006e34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1a4      	bne.n	8006d84 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006e3a:	e7ff      	b.n	8006e3c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006e3c:	bf00      	nop
 8006e3e:	3744      	adds	r7, #68	; 0x44
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b091      	sub	sp, #68	; 0x44
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e56:	2b21      	cmp	r3, #33	; 0x21
 8006e58:	d165      	bne.n	8006f26 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006e62:	e05c      	b.n	8006f1e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d133      	bne.n	8006ed8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e86:	637b      	str	r3, [r7, #52]	; 0x34
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e5      	bne.n	8006e70 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e6      	bne.n	8006ea4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006ed6:	e026      	b.n	8006f26 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d018      	beq.n	8006f18 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006efa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	1c9a      	adds	r2, r3, #2
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d19f      	bne.n	8006e64 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006f24:	e7ff      	b.n	8006f26 <UART_TxISR_16BIT_FIFOEN+0xde>
 8006f26:	bf00      	nop
 8006f28:	3744      	adds	r7, #68	; 0x44
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b088      	sub	sp, #32
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6979      	ldr	r1, [r7, #20]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	613b      	str	r3, [r7, #16]
   return(result);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e6      	bne.n	8006f3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff f8ea 	bl	8006154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f80:	bf00      	nop
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UARTEx_DisableFifoMode+0x16>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e027      	b.n	800702a <HAL_UARTEx_DisableFifoMode+0x66>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	; 0x24
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0201 	bic.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800704a:	2302      	movs	r3, #2
 800704c:	e02d      	b.n	80070aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2224      	movs	r2, #36	; 0x24
 800705a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0201 	bic.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f850 	bl	8007130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e02d      	b.n	8007126 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2224      	movs	r2, #36	; 0x24
 80070d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0201 	bic.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f812 	bl	8007130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800713c:	2b00      	cmp	r3, #0
 800713e:	d108      	bne.n	8007152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007150:	e031      	b.n	80071b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007152:	2308      	movs	r3, #8
 8007154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007156:	2308      	movs	r3, #8
 8007158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	0e5b      	lsrs	r3, r3, #25
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	0f5b      	lsrs	r3, r3, #29
 8007172:	b2db      	uxtb	r3, r3
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	7b3a      	ldrb	r2, [r7, #12]
 800717e:	4911      	ldr	r1, [pc, #68]	; (80071c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007180:	5c8a      	ldrb	r2, [r1, r2]
 8007182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007186:	7b3a      	ldrb	r2, [r7, #12]
 8007188:	490f      	ldr	r1, [pc, #60]	; (80071c8 <UARTEx_SetNbDataToProcess+0x98>)
 800718a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800718c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007190:	b29a      	uxth	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	7b7a      	ldrb	r2, [r7, #13]
 800719c:	4909      	ldr	r1, [pc, #36]	; (80071c4 <UARTEx_SetNbDataToProcess+0x94>)
 800719e:	5c8a      	ldrb	r2, [r1, r2]
 80071a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071a4:	7b7a      	ldrb	r2, [r7, #13]
 80071a6:	4908      	ldr	r1, [pc, #32]	; (80071c8 <UARTEx_SetNbDataToProcess+0x98>)
 80071a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	08010314 	.word	0x08010314
 80071c8:	0801031c 	.word	0x0801031c

080071cc <__NVIC_SetPriority>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	db0a      	blt.n	80071f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	490c      	ldr	r1, [pc, #48]	; (8007218 <__NVIC_SetPriority+0x4c>)
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	0112      	lsls	r2, r2, #4
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	440b      	add	r3, r1
 80071f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071f4:	e00a      	b.n	800720c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	4908      	ldr	r1, [pc, #32]	; (800721c <__NVIC_SetPriority+0x50>)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	3b04      	subs	r3, #4
 8007204:	0112      	lsls	r2, r2, #4
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	440b      	add	r3, r1
 800720a:	761a      	strb	r2, [r3, #24]
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	e000e100 	.word	0xe000e100
 800721c:	e000ed00 	.word	0xe000ed00

08007220 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <SysTick_Handler+0x1c>)
 8007226:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007228:	f002 f998 	bl	800955c <xTaskGetSchedulerState>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d001      	beq.n	8007236 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007232:	f003 fb39 	bl	800a8a8 <xPortSysTickHandler>
  }
}
 8007236:	bf00      	nop
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	e000e010 	.word	0xe000e010

08007240 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007244:	2100      	movs	r1, #0
 8007246:	f06f 0004 	mvn.w	r0, #4
 800724a:	f7ff ffbf 	bl	80071cc <__NVIC_SetPriority>
#endif
}
 800724e:	bf00      	nop
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800725a:	f3ef 8305 	mrs	r3, IPSR
 800725e:	603b      	str	r3, [r7, #0]
  return(result);
 8007260:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007266:	f06f 0305 	mvn.w	r3, #5
 800726a:	607b      	str	r3, [r7, #4]
 800726c:	e00c      	b.n	8007288 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <osKernelInitialize+0x44>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d105      	bne.n	8007282 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007276:	4b08      	ldr	r3, [pc, #32]	; (8007298 <osKernelInitialize+0x44>)
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800727c:	2300      	movs	r3, #0
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	e002      	b.n	8007288 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007288:	687b      	ldr	r3, [r7, #4]
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20004244 	.word	0x20004244

0800729c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a2:	f3ef 8305 	mrs	r3, IPSR
 80072a6:	603b      	str	r3, [r7, #0]
  return(result);
 80072a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80072ae:	f06f 0305 	mvn.w	r3, #5
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	e010      	b.n	80072d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <osKernelStart+0x48>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d109      	bne.n	80072d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072be:	f7ff ffbf 	bl	8007240 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <osKernelStart+0x48>)
 80072c4:	2202      	movs	r2, #2
 80072c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072c8:	f001 fcdc 	bl	8008c84 <vTaskStartScheduler>
      stat = osOK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	607b      	str	r3, [r7, #4]
 80072d0:	e002      	b.n	80072d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295
 80072d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072d8:	687b      	ldr	r3, [r7, #4]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20004244 	.word	0x20004244

080072e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08e      	sub	sp, #56	; 0x38
 80072ec:	af04      	add	r7, sp, #16
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f8:	f3ef 8305 	mrs	r3, IPSR
 80072fc:	617b      	str	r3, [r7, #20]
  return(result);
 80072fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007300:	2b00      	cmp	r3, #0
 8007302:	d17e      	bne.n	8007402 <osThreadNew+0x11a>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d07b      	beq.n	8007402 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800730a:	2380      	movs	r3, #128	; 0x80
 800730c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800730e:	2318      	movs	r3, #24
 8007310:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d045      	beq.n	80073ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <osThreadNew+0x48>
        name = attr->name;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <osThreadNew+0x6e>
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	2b38      	cmp	r3, #56	; 0x38
 8007348:	d805      	bhi.n	8007356 <osThreadNew+0x6e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <osThreadNew+0x72>
        return (NULL);
 8007356:	2300      	movs	r3, #0
 8007358:	e054      	b.n	8007404 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	089b      	lsrs	r3, r3, #2
 8007368:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <osThreadNew+0xa8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2bbb      	cmp	r3, #187	; 0xbb
 8007378:	d90a      	bls.n	8007390 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <osThreadNew+0xa8>
        mem = 1;
 800738a:	2301      	movs	r3, #1
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e010      	b.n	80073b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10c      	bne.n	80073b2 <osThreadNew+0xca>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d108      	bne.n	80073b2 <osThreadNew+0xca>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <osThreadNew+0xca>
          mem = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	e001      	b.n	80073b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d110      	bne.n	80073da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073c0:	9202      	str	r2, [sp, #8]
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f001 faa0 	bl	8008914 <xTaskCreateStatic>
 80073d4:	4603      	mov	r3, r0
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	e013      	b.n	8007402 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d110      	bne.n	8007402 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f107 0310 	add.w	r3, r7, #16
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f001 faeb 	bl	80089ce <xTaskCreate>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d001      	beq.n	8007402 <osThreadNew+0x11a>
            hTask = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007402:	693b      	ldr	r3, [r7, #16]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3728      	adds	r7, #40	; 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af02      	add	r7, sp, #8
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <osThreadFlagsSet+0x1a>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da03      	bge.n	800742e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8007426:	f06f 0303 	mvn.w	r3, #3
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e035      	b.n	800749a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800742e:	f04f 33ff 	mov.w	r3, #4294967295
 8007432:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007434:	f3ef 8305 	mrs	r3, IPSR
 8007438:	613b      	str	r3, [r7, #16]
  return(result);
 800743a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01f      	beq.n	8007480 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007440:	2300      	movs	r3, #0
 8007442:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007444:	f107 0308 	add.w	r3, r7, #8
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	2201      	movs	r2, #1
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6978      	ldr	r0, [r7, #20]
 8007452:	f002 fb2b 	bl	8009aac <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007456:	f107 030c 	add.w	r3, r7, #12
 800745a:	2200      	movs	r2, #0
 800745c:	9200      	str	r2, [sp, #0]
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	6978      	ldr	r0, [r7, #20]
 8007464:	f002 fb22 	bl	8009aac <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d015      	beq.n	800749a <osThreadFlagsSet+0x8e>
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <osThreadFlagsSet+0x98>)
 8007470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	e00c      	b.n	800749a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007480:	2300      	movs	r3, #0
 8007482:	2201      	movs	r2, #1
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6978      	ldr	r0, [r7, #20]
 8007488:	f002 fa52 	bl	8009930 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800748c:	f107 030c 	add.w	r3, r7, #12
 8007490:	2200      	movs	r2, #0
 8007492:	2100      	movs	r1, #0
 8007494:	6978      	ldr	r0, [r7, #20]
 8007496:	f002 fa4b 	bl	8009930 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800749a:	68fb      	ldr	r3, [r7, #12]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08c      	sub	sp, #48	; 0x30
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b4:	f3ef 8305 	mrs	r3, IPSR
 80074b8:	617b      	str	r3, [r7, #20]
  return(result);
 80074ba:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80074c0:	f06f 0305 	mvn.w	r3, #5
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074c6:	e06b      	b.n	80075a0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da03      	bge.n	80074d6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80074ce:	f06f 0303 	mvn.w	r3, #3
 80074d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074d4:	e064      	b.n	80075a0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074e4:	e001      	b.n	80074ea <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80074f2:	f001 fce3 	bl	8008ebc <xTaskGetTickCount>
 80074f6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80074f8:	f107 0210 	add.w	r2, r7, #16
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007500:	2000      	movs	r0, #0
 8007502:	f002 f9b5 	bl	8009870 <xTaskNotifyWait>
 8007506:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d137      	bne.n	800757e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800750e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4013      	ands	r3, r2
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800751a:	4313      	orrs	r3, r2
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00c      	beq.n	8007542 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	4013      	ands	r3, r2
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	429a      	cmp	r2, r3
 8007532:	d032      	beq.n	800759a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10f      	bne.n	800755a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800753a:	f06f 0302 	mvn.w	r3, #2
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8007540:	e02e      	b.n	80075a0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d128      	bne.n	800759e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007552:	f06f 0302 	mvn.w	r3, #2
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8007558:	e022      	b.n	80075a0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800755a:	f001 fcaf 	bl	8008ebc <xTaskGetTickCount>
 800755e:	4602      	mov	r2, r0
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	429a      	cmp	r2, r3
 800756c:	d902      	bls.n	8007574 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
 8007572:	e00e      	b.n	8007592 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8007574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
 800757c:	e009      	b.n	8007592 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8007584:	f06f 0302 	mvn.w	r3, #2
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800758a:	e002      	b.n	8007592 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800758c:	f06f 0301 	mvn.w	r3, #1
 8007590:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1af      	bne.n	80074f8 <osThreadFlagsWait+0x50>
 8007598:	e002      	b.n	80075a0 <osThreadFlagsWait+0xf8>
            break;
 800759a:	bf00      	nop
 800759c:	e000      	b.n	80075a0 <osThreadFlagsWait+0xf8>
            break;
 800759e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3730      	adds	r7, #48	; 0x30
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f002 ff9a 	bl	800a4ec <pvTimerGetTimerID>
 80075b8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <TimerCallback+0x22>
    callb->func (callb->arg);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	6852      	ldr	r2, [r2, #4]
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
  }
}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08c      	sub	sp, #48	; 0x30
 80075d8:	af02      	add	r7, sp, #8
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	460b      	mov	r3, r1
 80075e2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e8:	f3ef 8305 	mrs	r3, IPSR
 80075ec:	613b      	str	r3, [r7, #16]
  return(result);
 80075ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d163      	bne.n	80076bc <osTimerNew+0xe8>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d060      	beq.n	80076bc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80075fa:	2008      	movs	r0, #8
 80075fc:	f003 f9e4 	bl	800a9c8 <pvPortMalloc>
 8007600:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d059      	beq.n	80076bc <osTimerNew+0xe8>
      callb->func = func;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <osTimerNew+0x4c>
        reload = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e001      	b.n	8007624 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007620:	2301      	movs	r3, #1
 8007622:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007624:	f04f 33ff 	mov.w	r3, #4294967295
 8007628:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01c      	beq.n	800766e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <osTimerNew+0x6e>
          name = attr->name;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d006      	beq.n	8007658 <osTimerNew+0x84>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	2b2b      	cmp	r3, #43	; 0x2b
 8007650:	d902      	bls.n	8007658 <osTimerNew+0x84>
          mem = 1;
 8007652:	2301      	movs	r3, #1
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	e00c      	b.n	8007672 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d108      	bne.n	8007672 <osTimerNew+0x9e>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <osTimerNew+0x9e>
            mem = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	e001      	b.n	8007672 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d10c      	bne.n	8007692 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <osTimerNew+0xf4>)
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	2101      	movs	r1, #1
 8007688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800768a:	f002 fbb0 	bl	8009dee <xTimerCreateStatic>
 800768e:	6238      	str	r0, [r7, #32]
 8007690:	e00b      	b.n	80076aa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d108      	bne.n	80076aa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007698:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <osTimerNew+0xf4>)
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	2101      	movs	r1, #1
 80076a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076a4:	f002 fb82 	bl	8009dac <xTimerCreate>
 80076a8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <osTimerNew+0xe8>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <osTimerNew+0xe8>
        vPortFree (callb);
 80076b6:	6978      	ldr	r0, [r7, #20]
 80076b8:	f003 fa52 	bl	800ab60 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80076bc:	6a3b      	ldr	r3, [r7, #32]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3728      	adds	r7, #40	; 0x28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	080075ab 	.word	0x080075ab

080076cc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076da:	f3ef 8305 	mrs	r3, IPSR
 80076de:	60fb      	str	r3, [r7, #12]
  return(result);
 80076e0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <osTimerStart+0x22>
    stat = osErrorISR;
 80076e6:	f06f 0305 	mvn.w	r3, #5
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e017      	b.n	800771e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <osTimerStart+0x30>
    stat = osErrorParameter;
 80076f4:	f06f 0303 	mvn.w	r3, #3
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	e010      	b.n	800771e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80076fc:	2300      	movs	r3, #0
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	2300      	movs	r3, #0
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	2104      	movs	r1, #4
 8007706:	6938      	ldr	r0, [r7, #16]
 8007708:	f002 fbea 	bl	8009ee0 <xTimerGenericCommand>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	d102      	bne.n	8007718 <osTimerStart+0x4c>
      stat = osOK;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e002      	b.n	800771e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007718:	f06f 0302 	mvn.w	r3, #2
 800771c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800771e:	697b      	ldr	r3, [r7, #20]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007734:	f3ef 8305 	mrs	r3, IPSR
 8007738:	60bb      	str	r3, [r7, #8]
  return(result);
 800773a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800773c:	2b00      	cmp	r3, #0
 800773e:	d174      	bne.n	800782a <osMutexNew+0x102>
    if (attr != NULL) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <osMutexNew+0x26>
      type = attr->attr_bits;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	e001      	b.n	8007752 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <osMutexNew+0x3a>
      rmtx = 1U;
 800775c:	2301      	movs	r3, #1
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e001      	b.n	8007766 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d15c      	bne.n	800782a <osMutexNew+0x102>
      mem = -1;
 8007770:	f04f 33ff 	mov.w	r3, #4294967295
 8007774:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d015      	beq.n	80077a8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d006      	beq.n	8007792 <osMutexNew+0x6a>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b4f      	cmp	r3, #79	; 0x4f
 800778a:	d902      	bls.n	8007792 <osMutexNew+0x6a>
          mem = 1;
 800778c:	2301      	movs	r3, #1
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	e00c      	b.n	80077ac <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d108      	bne.n	80077ac <osMutexNew+0x84>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <osMutexNew+0x84>
            mem = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	e001      	b.n	80077ac <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d112      	bne.n	80077d8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	4619      	mov	r1, r3
 80077be:	2004      	movs	r0, #4
 80077c0:	f000 fb17 	bl	8007df2 <xQueueCreateMutexStatic>
 80077c4:	61f8      	str	r0, [r7, #28]
 80077c6:	e016      	b.n	80077f6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	4619      	mov	r1, r3
 80077ce:	2001      	movs	r0, #1
 80077d0:	f000 fb0f 	bl	8007df2 <xQueueCreateMutexStatic>
 80077d4:	61f8      	str	r0, [r7, #28]
 80077d6:	e00e      	b.n	80077f6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80077e4:	2004      	movs	r0, #4
 80077e6:	f000 faec 	bl	8007dc2 <xQueueCreateMutex>
 80077ea:	61f8      	str	r0, [r7, #28]
 80077ec:	e003      	b.n	80077f6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80077ee:	2001      	movs	r0, #1
 80077f0:	f000 fae7 	bl	8007dc2 <xQueueCreateMutex>
 80077f4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00c      	beq.n	8007816 <osMutexNew+0xee>
        if (attr != NULL) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <osMutexNew+0xe2>
          name = attr->name;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e001      	b.n	800780e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	69f8      	ldr	r0, [r7, #28]
 8007812:	f001 f821 	bl	8008858 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d006      	beq.n	800782a <osMutexNew+0x102>
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f043 0301 	orr.w	r3, r3, #1
 8007828:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800782a:	69fb      	ldr	r3, [r7, #28]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3720      	adds	r7, #32
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007852:	f3ef 8305 	mrs	r3, IPSR
 8007856:	60bb      	str	r3, [r7, #8]
  return(result);
 8007858:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800785e:	f06f 0305 	mvn.w	r3, #5
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e02c      	b.n	80078c0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800786c:	f06f 0303 	mvn.w	r3, #3
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e025      	b.n	80078c0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6938      	ldr	r0, [r7, #16]
 800787e:	f000 fb07 	bl	8007e90 <xQueueTakeMutexRecursive>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	d01b      	beq.n	80078c0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800788e:	f06f 0301 	mvn.w	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e014      	b.n	80078c0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007896:	f06f 0302 	mvn.w	r3, #2
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	e010      	b.n	80078c0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6938      	ldr	r0, [r7, #16]
 80078a2:	f000 fda5 	bl	80083f0 <xQueueSemaphoreTake>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d009      	beq.n	80078c0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80078b2:	f06f 0301 	mvn.w	r3, #1
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	e002      	b.n	80078c0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80078ba:	f06f 0302 	mvn.w	r3, #2
 80078be:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80078c0:	697b      	ldr	r3, [r7, #20]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078e6:	f3ef 8305 	mrs	r3, IPSR
 80078ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80078ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <osMutexRelease+0x30>
    stat = osErrorISR;
 80078f2:	f06f 0305 	mvn.w	r3, #5
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e01f      	b.n	800793a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d103      	bne.n	8007908 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007900:	f06f 0303 	mvn.w	r3, #3
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e018      	b.n	800793a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800790e:	6938      	ldr	r0, [r7, #16]
 8007910:	f000 fa8a 	bl	8007e28 <xQueueGiveMutexRecursive>
 8007914:	4603      	mov	r3, r0
 8007916:	2b01      	cmp	r3, #1
 8007918:	d00f      	beq.n	800793a <osMutexRelease+0x70>
        stat = osErrorResource;
 800791a:	f06f 0302 	mvn.w	r3, #2
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e00b      	b.n	800793a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007922:	2300      	movs	r3, #0
 8007924:	2200      	movs	r2, #0
 8007926:	2100      	movs	r1, #0
 8007928:	6938      	ldr	r0, [r7, #16]
 800792a:	f000 fae7 	bl	8007efc <xQueueGenericSend>
 800792e:	4603      	mov	r3, r0
 8007930:	2b01      	cmp	r3, #1
 8007932:	d002      	beq.n	800793a <osMutexRelease+0x70>
        stat = osErrorResource;
 8007934:	f06f 0302 	mvn.w	r3, #2
 8007938:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800793a:	697b      	ldr	r3, [r7, #20]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a07      	ldr	r2, [pc, #28]	; (8007970 <vApplicationGetIdleTaskMemory+0x2c>)
 8007954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4a06      	ldr	r2, [pc, #24]	; (8007974 <vApplicationGetIdleTaskMemory+0x30>)
 800795a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2280      	movs	r2, #128	; 0x80
 8007960:	601a      	str	r2, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20004248 	.word	0x20004248
 8007974:	20004304 	.word	0x20004304

08007978 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a07      	ldr	r2, [pc, #28]	; (80079a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007988:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4a06      	ldr	r2, [pc, #24]	; (80079a8 <vApplicationGetTimerTaskMemory+0x30>)
 800798e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007996:	601a      	str	r2, [r3, #0]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	20004504 	.word	0x20004504
 80079a8:	200045c0 	.word	0x200045c0

080079ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f103 0208 	add.w	r2, r3, #8
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f04f 32ff 	mov.w	r2, #4294967295
 80079c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f103 0208 	add.w	r2, r3, #8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f103 0208 	add.w	r2, r3, #8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d103      	bne.n	8007a6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	e00c      	b.n	8007a88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3308      	adds	r3, #8
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e002      	b.n	8007a7c <vListInsert+0x2e>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d2f6      	bcs.n	8007a76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6892      	ldr	r2, [r2, #8]
 8007ad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6852      	ldr	r2, [r2, #4]
 8007ae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d103      	bne.n	8007af4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	1e5a      	subs	r2, r3, #1
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b3e:	f002 fe21 	bl	800a784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	441a      	add	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	68f9      	ldr	r1, [r7, #12]
 8007b72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	441a      	add	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	22ff      	movs	r2, #255	; 0xff
 8007b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	22ff      	movs	r2, #255	; 0xff
 8007b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d114      	bne.n	8007bbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01a      	beq.n	8007bd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fb09 	bl	80091b8 <xTaskRemoveFromEventList>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d012      	beq.n	8007bd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <xQueueGenericReset+0xcc>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	e009      	b.n	8007bd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fef2 	bl	80079ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3324      	adds	r3, #36	; 0x24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff feed 	bl	80079ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bd2:	f002 fe07 	bl	800a7e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bd6:	2301      	movs	r3, #1
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	e000ed04 	.word	0xe000ed04

08007be4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08e      	sub	sp, #56	; 0x38
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10a      	bne.n	8007c0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c0a:	bf00      	nop
 8007c0c:	e7fe      	b.n	8007c0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <xQueueGenericCreateStatic+0x52>
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <xQueueGenericCreateStatic+0x56>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e000      	b.n	8007c3c <xQueueGenericCreateStatic+0x58>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	623b      	str	r3, [r7, #32]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <xQueueGenericCreateStatic+0x7e>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <xQueueGenericCreateStatic+0x82>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e000      	b.n	8007c68 <xQueueGenericCreateStatic+0x84>
 8007c66:	2300      	movs	r3, #0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	61fb      	str	r3, [r7, #28]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c82:	2350      	movs	r3, #80	; 0x50
 8007c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b50      	cmp	r3, #80	; 0x50
 8007c8a:	d00a      	beq.n	8007ca2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61bb      	str	r3, [r7, #24]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ca2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f83f 	bl	8007d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3730      	adds	r7, #48	; 0x30
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	; 0x28
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	613b      	str	r3, [r7, #16]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	fb02 f303 	mul.w	r3, r2, r3
 8007d06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3350      	adds	r3, #80	; 0x50
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f002 fe5b 	bl	800a9c8 <pvPortMalloc>
 8007d12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d011      	beq.n	8007d3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	3350      	adds	r3, #80	; 0x50
 8007d22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d2c:	79fa      	ldrb	r2, [r7, #7]
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4613      	mov	r3, r2
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f805 	bl	8007d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3720      	adds	r7, #32
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e002      	b.n	8007d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d76:	2101      	movs	r1, #1
 8007d78:	69b8      	ldr	r0, [r7, #24]
 8007d7a:	f7ff fecb 	bl	8007b14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00e      	beq.n	8007dba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007dae:	2300      	movs	r3, #0
 8007db0:	2200      	movs	r2, #0
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f8a1 	bl	8007efc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b086      	sub	sp, #24
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	4603      	mov	r3, r0
 8007dca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6939      	ldr	r1, [r7, #16]
 8007dda:	6978      	ldr	r0, [r7, #20]
 8007ddc:	f7ff ff7a 	bl	8007cd4 <xQueueGenericCreate>
 8007de0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff ffd3 	bl	8007d8e <prvInitialiseMutex>

		return xNewQueue;
 8007de8:	68fb      	ldr	r3, [r7, #12]
	}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b088      	sub	sp, #32
 8007df6:	af02      	add	r7, sp, #8
 8007df8:	4603      	mov	r3, r0
 8007dfa:	6039      	str	r1, [r7, #0]
 8007dfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	6939      	ldr	r1, [r7, #16]
 8007e10:	6978      	ldr	r0, [r7, #20]
 8007e12:	f7ff fee7 	bl	8007be4 <xQueueGenericCreateStatic>
 8007e16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff ffb8 	bl	8007d8e <prvInitialiseMutex>

		return xNewQueue;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60fb      	str	r3, [r7, #12]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	689c      	ldr	r4, [r3, #8]
 8007e54:	f001 fb72 	bl	800953c <xTaskGetCurrentTaskHandle>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	d111      	bne.n	8007e82 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007e70:	2300      	movs	r3, #0
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f000 f840 	bl	8007efc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e001      	b.n	8007e86 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007e86:	697b      	ldr	r3, [r7, #20]
	}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd90      	pop	{r4, r7, pc}

08007e90 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007e90:	b590      	push	{r4, r7, lr}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	60fb      	str	r3, [r7, #12]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	689c      	ldr	r4, [r3, #8]
 8007ebe:	f001 fb3d 	bl	800953c <xTaskGetCurrentTaskHandle>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	d107      	bne.n	8007ed8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	e00c      	b.n	8007ef2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6938      	ldr	r0, [r7, #16]
 8007edc:	f000 fa88 	bl	80083f0 <xQueueSemaphoreTake>
 8007ee0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007ef2:	697b      	ldr	r3, [r7, #20]
	}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd90      	pop	{r4, r7, pc}

08007efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08e      	sub	sp, #56	; 0x38
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10a      	bne.n	8007f2e <xQueueGenericSend+0x32>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <xQueueGenericSend+0x40>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <xQueueGenericSend+0x44>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e000      	b.n	8007f42 <xQueueGenericSend+0x46>
 8007f40:	2300      	movs	r3, #0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10a      	bne.n	8007f5c <xQueueGenericSend+0x60>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f58:	bf00      	nop
 8007f5a:	e7fe      	b.n	8007f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d103      	bne.n	8007f6a <xQueueGenericSend+0x6e>
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <xQueueGenericSend+0x72>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <xQueueGenericSend+0x74>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	623b      	str	r3, [r7, #32]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f8a:	f001 fae7 	bl	800955c <xTaskGetSchedulerState>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <xQueueGenericSend+0x9e>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <xQueueGenericSend+0xa2>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <xQueueGenericSend+0xa4>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <xQueueGenericSend+0xbe>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	61fb      	str	r3, [r7, #28]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fba:	f002 fbe3 	bl	800a784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d302      	bcc.n	8007fd0 <xQueueGenericSend+0xd4>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d129      	bne.n	8008024 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fd6:	f000 fb2f 	bl	8008638 <prvCopyDataToQueue>
 8007fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d010      	beq.n	8008006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	3324      	adds	r3, #36	; 0x24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 f8e5 	bl	80091b8 <xTaskRemoveFromEventList>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d013      	beq.n	800801c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ff4:	4b3f      	ldr	r3, [pc, #252]	; (80080f4 <xQueueGenericSend+0x1f8>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	e00a      	b.n	800801c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800800c:	4b39      	ldr	r3, [pc, #228]	; (80080f4 <xQueueGenericSend+0x1f8>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800801c:	f002 fbe2 	bl	800a7e4 <vPortExitCritical>
				return pdPASS;
 8008020:	2301      	movs	r3, #1
 8008022:	e063      	b.n	80080ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800802a:	f002 fbdb 	bl	800a7e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800802e:	2300      	movs	r3, #0
 8008030:	e05c      	b.n	80080ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008038:	f107 0314 	add.w	r3, r7, #20
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f91f 	bl	8009280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008042:	2301      	movs	r3, #1
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008046:	f002 fbcd 	bl	800a7e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800804a:	f000 fe8b 	bl	8008d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800804e:	f002 fb99 	bl	800a784 <vPortEnterCritical>
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008058:	b25b      	sxtb	r3, r3
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805e:	d103      	bne.n	8008068 <xQueueGenericSend+0x16c>
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800806e:	b25b      	sxtb	r3, r3
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d103      	bne.n	800807e <xQueueGenericSend+0x182>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800807e:	f002 fbb1 	bl	800a7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008082:	1d3a      	adds	r2, r7, #4
 8008084:	f107 0314 	add.w	r3, r7, #20
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f001 f90e 	bl	80092ac <xTaskCheckForTimeOut>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d124      	bne.n	80080e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008098:	f000 fbc6 	bl	8008828 <prvIsQueueFull>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d018      	beq.n	80080d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	3310      	adds	r3, #16
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4611      	mov	r1, r2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 f834 	bl	8009118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b2:	f000 fb51 	bl	8008758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080b6:	f000 fe63 	bl	8008d80 <xTaskResumeAll>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f47f af7c 	bne.w	8007fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <xQueueGenericSend+0x1f8>)
 80080c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	e772      	b.n	8007fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080d6:	f000 fb3f 	bl	8008758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080da:	f000 fe51 	bl	8008d80 <xTaskResumeAll>
 80080de:	e76c      	b.n	8007fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080e2:	f000 fb39 	bl	8008758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080e6:	f000 fe4b 	bl	8008d80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3738      	adds	r7, #56	; 0x38
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b090      	sub	sp, #64	; 0x40
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d103      	bne.n	8008134 <xQueueGenericSendFromISR+0x3c>
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <xQueueGenericSendFromISR+0x40>
 8008134:	2301      	movs	r3, #1
 8008136:	e000      	b.n	800813a <xQueueGenericSendFromISR+0x42>
 8008138:	2300      	movs	r3, #0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d103      	bne.n	8008162 <xQueueGenericSendFromISR+0x6a>
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <xQueueGenericSendFromISR+0x6e>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <xQueueGenericSendFromISR+0x70>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	623b      	str	r3, [r7, #32]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008182:	f002 fbe1 	bl	800a948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008186:	f3ef 8211 	mrs	r2, BASEPRI
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	61fa      	str	r2, [r7, #28]
 800819c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800819e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d302      	bcc.n	80081b4 <xQueueGenericSendFromISR+0xbc>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d12f      	bne.n	8008214 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ca:	f000 fa35 	bl	8008638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d112      	bne.n	80081fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d016      	beq.n	800820e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	3324      	adds	r3, #36	; 0x24
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 ffe7 	bl	80091b8 <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00e      	beq.n	800820e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e007      	b.n	800820e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008202:	3301      	adds	r3, #1
 8008204:	b2db      	uxtb	r3, r3
 8008206:	b25a      	sxtb	r2, r3
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800820e:	2301      	movs	r3, #1
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008212:	e001      	b.n	8008218 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008214:	2300      	movs	r3, #0
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008222:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008226:	4618      	mov	r0, r3
 8008228:	3740      	adds	r7, #64	; 0x40
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08c      	sub	sp, #48	; 0x30
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800823c:	2300      	movs	r3, #0
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <xQueueReceive+0x30>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	623b      	str	r3, [r7, #32]
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <xQueueReceive+0x3e>
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <xQueueReceive+0x42>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <xQueueReceive+0x44>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xQueueReceive+0x5e>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	61fb      	str	r3, [r7, #28]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800828e:	f001 f965 	bl	800955c <xTaskGetSchedulerState>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d102      	bne.n	800829e <xQueueReceive+0x6e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <xQueueReceive+0x72>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <xQueueReceive+0x74>
 80082a2:	2300      	movs	r3, #0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <xQueueReceive+0x8e>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	61bb      	str	r3, [r7, #24]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082be:	f002 fa61 	bl	800a784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01f      	beq.n	800830e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d2:	f000 fa1b 	bl	800870c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	1e5a      	subs	r2, r3, #1
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00f      	beq.n	8008306 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	3310      	adds	r3, #16
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff64 	bl	80091b8 <xTaskRemoveFromEventList>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082f6:	4b3d      	ldr	r3, [pc, #244]	; (80083ec <xQueueReceive+0x1bc>)
 80082f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008306:	f002 fa6d 	bl	800a7e4 <vPortExitCritical>
				return pdPASS;
 800830a:	2301      	movs	r3, #1
 800830c:	e069      	b.n	80083e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d103      	bne.n	800831c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008314:	f002 fa66 	bl	800a7e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008318:	2300      	movs	r3, #0
 800831a:	e062      	b.n	80083e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008322:	f107 0310 	add.w	r3, r7, #16
 8008326:	4618      	mov	r0, r3
 8008328:	f000 ffaa 	bl	8009280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008330:	f002 fa58 	bl	800a7e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008334:	f000 fd16 	bl	8008d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008338:	f002 fa24 	bl	800a784 <vPortEnterCritical>
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008342:	b25b      	sxtb	r3, r3
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d103      	bne.n	8008352 <xQueueReceive+0x122>
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008358:	b25b      	sxtb	r3, r3
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835e:	d103      	bne.n	8008368 <xQueueReceive+0x138>
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008368:	f002 fa3c 	bl	800a7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836c:	1d3a      	adds	r2, r7, #4
 800836e:	f107 0310 	add.w	r3, r7, #16
 8008372:	4611      	mov	r1, r2
 8008374:	4618      	mov	r0, r3
 8008376:	f000 ff99 	bl	80092ac <xTaskCheckForTimeOut>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d123      	bne.n	80083c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008382:	f000 fa3b 	bl	80087fc <prvIsQueueEmpty>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d017      	beq.n	80083bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	3324      	adds	r3, #36	; 0x24
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	4611      	mov	r1, r2
 8008394:	4618      	mov	r0, r3
 8008396:	f000 febf 	bl	8009118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800839a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800839c:	f000 f9dc 	bl	8008758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083a0:	f000 fcee 	bl	8008d80 <xTaskResumeAll>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d189      	bne.n	80082be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80083aa:	4b10      	ldr	r3, [pc, #64]	; (80083ec <xQueueReceive+0x1bc>)
 80083ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	e780      	b.n	80082be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083be:	f000 f9cb 	bl	8008758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c2:	f000 fcdd 	bl	8008d80 <xTaskResumeAll>
 80083c6:	e77a      	b.n	80082be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ca:	f000 f9c5 	bl	8008758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ce:	f000 fcd7 	bl	8008d80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d4:	f000 fa12 	bl	80087fc <prvIsQueueEmpty>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f43f af6f 	beq.w	80082be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3730      	adds	r7, #48	; 0x30
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	e000ed04 	.word	0xe000ed04

080083f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08e      	sub	sp, #56	; 0x38
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80083fa:	2300      	movs	r3, #0
 80083fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008402:	2300      	movs	r3, #0
 8008404:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	623b      	str	r3, [r7, #32]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	61fb      	str	r3, [r7, #28]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008440:	f001 f88c 	bl	800955c <xTaskGetSchedulerState>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d102      	bne.n	8008450 <xQueueSemaphoreTake+0x60>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <xQueueSemaphoreTake+0x64>
 8008450:	2301      	movs	r3, #1
 8008452:	e000      	b.n	8008456 <xQueueSemaphoreTake+0x66>
 8008454:	2300      	movs	r3, #0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	61bb      	str	r3, [r7, #24]
}
 800846c:	bf00      	nop
 800846e:	e7fe      	b.n	800846e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008470:	f002 f988 	bl	800a784 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	2b00      	cmp	r3, #0
 800847e:	d024      	beq.n	80084ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	1e5a      	subs	r2, r3, #1
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008490:	f001 f9da 	bl	8009848 <pvTaskIncrementMutexHeldCount>
 8008494:	4602      	mov	r2, r0
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00f      	beq.n	80084c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	3310      	adds	r3, #16
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fe86 	bl	80091b8 <xTaskRemoveFromEventList>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084b2:	4b54      	ldr	r3, [pc, #336]	; (8008604 <xQueueSemaphoreTake+0x214>)
 80084b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084c2:	f002 f98f 	bl	800a7e4 <vPortExitCritical>
				return pdPASS;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e097      	b.n	80085fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d111      	bne.n	80084f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	617b      	str	r3, [r7, #20]
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084ec:	f002 f97a 	bl	800a7e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e082      	b.n	80085fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 febe 	bl	8009280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008504:	2301      	movs	r3, #1
 8008506:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008508:	f002 f96c 	bl	800a7e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800850c:	f000 fc2a 	bl	8008d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008510:	f002 f938 	bl	800a784 <vPortEnterCritical>
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800851a:	b25b      	sxtb	r3, r3
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008520:	d103      	bne.n	800852a <xQueueSemaphoreTake+0x13a>
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008530:	b25b      	sxtb	r3, r3
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008536:	d103      	bne.n	8008540 <xQueueSemaphoreTake+0x150>
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008540:	f002 f950 	bl	800a7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008544:	463a      	mov	r2, r7
 8008546:	f107 030c 	add.w	r3, r7, #12
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fead 	bl	80092ac <xTaskCheckForTimeOut>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d132      	bne.n	80085be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800855a:	f000 f94f 	bl	80087fc <prvIsQueueEmpty>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d026      	beq.n	80085b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d109      	bne.n	8008580 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800856c:	f002 f90a 	bl	800a784 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f80f 	bl	8009598 <xTaskPriorityInherit>
 800857a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800857c:	f002 f932 	bl	800a7e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	3324      	adds	r3, #36	; 0x24
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	4611      	mov	r1, r2
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fdc5 	bl	8009118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800858e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008590:	f000 f8e2 	bl	8008758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008594:	f000 fbf4 	bl	8008d80 <xTaskResumeAll>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	f47f af68 	bne.w	8008470 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80085a0:	4b18      	ldr	r3, [pc, #96]	; (8008604 <xQueueSemaphoreTake+0x214>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	e75e      	b.n	8008470 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80085b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085b4:	f000 f8d0 	bl	8008758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b8:	f000 fbe2 	bl	8008d80 <xTaskResumeAll>
 80085bc:	e758      	b.n	8008470 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80085be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085c0:	f000 f8ca 	bl	8008758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085c4:	f000 fbdc 	bl	8008d80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ca:	f000 f917 	bl	80087fc <prvIsQueueEmpty>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f43f af4d 	beq.w	8008470 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00d      	beq.n	80085f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80085dc:	f002 f8d2 	bl	800a784 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80085e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085e2:	f000 f811 	bl	8008608 <prvGetDisinheritPriorityAfterTimeout>
 80085e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 f8a8 	bl	8009744 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085f4:	f002 f8f6 	bl	800a7e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3738      	adds	r7, #56	; 0x38
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d006      	beq.n	8008626 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e001      	b.n	800862a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800862a:	68fb      	ldr	r3, [r7, #12]
	}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10d      	bne.n	8008672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d14d      	bne.n	80086fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f800 	bl	8009668 <xTaskPriorityDisinherit>
 8008668:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	609a      	str	r2, [r3, #8]
 8008670:	e043      	b.n	80086fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d119      	bne.n	80086ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6858      	ldr	r0, [r3, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	461a      	mov	r2, r3
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	f002 fcad 	bl	800afe2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d32b      	bcc.n	80086fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	e026      	b.n	80086fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68d8      	ldr	r0, [r3, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	461a      	mov	r2, r3
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	f002 fc93 	bl	800afe2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	425b      	negs	r3, r3
 80086c6:	441a      	add	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d207      	bcs.n	80086e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	425b      	negs	r3, r3
 80086e2:	441a      	add	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d105      	bne.n	80086fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008702:	697b      	ldr	r3, [r7, #20]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	2b00      	cmp	r3, #0
 800871c:	d018      	beq.n	8008750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	441a      	add	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d303      	bcc.n	8008740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68d9      	ldr	r1, [r3, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	461a      	mov	r2, r3
 800874a:	6838      	ldr	r0, [r7, #0]
 800874c:	f002 fc49 	bl	800afe2 <memcpy>
	}
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008760:	f002 f810 	bl	800a784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800876a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800876c:	e011      	b.n	8008792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	2b00      	cmp	r3, #0
 8008774:	d012      	beq.n	800879c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3324      	adds	r3, #36	; 0x24
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fd1c 	bl	80091b8 <xTaskRemoveFromEventList>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008786:	f000 fdf3 	bl	8009370 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	3b01      	subs	r3, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dce9      	bgt.n	800876e <prvUnlockQueue+0x16>
 800879a:	e000      	b.n	800879e <prvUnlockQueue+0x46>
					break;
 800879c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	22ff      	movs	r2, #255	; 0xff
 80087a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087a6:	f002 f81d 	bl	800a7e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087aa:	f001 ffeb 	bl	800a784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087b6:	e011      	b.n	80087dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d012      	beq.n	80087e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3310      	adds	r3, #16
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fcf7 	bl	80091b8 <xTaskRemoveFromEventList>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087d0:	f000 fdce 	bl	8009370 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dce9      	bgt.n	80087b8 <prvUnlockQueue+0x60>
 80087e4:	e000      	b.n	80087e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	22ff      	movs	r2, #255	; 0xff
 80087ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087f0:	f001 fff8 	bl	800a7e4 <vPortExitCritical>
}
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008804:	f001 ffbe 	bl	800a784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e001      	b.n	800881a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881a:	f001 ffe3 	bl	800a7e4 <vPortExitCritical>

	return xReturn;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008830:	f001 ffa8 	bl	800a784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883c:	429a      	cmp	r2, r3
 800883e:	d102      	bne.n	8008846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008840:	2301      	movs	r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	e001      	b.n	800884a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800884a:	f001 ffcb 	bl	800a7e4 <vPortExitCritical>

	return xReturn;
 800884e:	68fb      	ldr	r3, [r7, #12]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	e014      	b.n	8008892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008868:	4a0f      	ldr	r2, [pc, #60]	; (80088a8 <vQueueAddToRegistry+0x50>)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008874:	490c      	ldr	r1, [pc, #48]	; (80088a8 <vQueueAddToRegistry+0x50>)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800887e:	4a0a      	ldr	r2, [pc, #40]	; (80088a8 <vQueueAddToRegistry+0x50>)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	4413      	add	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800888a:	e006      	b.n	800889a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3301      	adds	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b07      	cmp	r3, #7
 8008896:	d9e7      	bls.n	8008868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	200049c0 	.word	0x200049c0

080088ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088bc:	f001 ff62 	bl	800a784 <vPortEnterCritical>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088c6:	b25b      	sxtb	r3, r3
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d103      	bne.n	80088d6 <vQueueWaitForMessageRestricted+0x2a>
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088dc:	b25b      	sxtb	r3, r3
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d103      	bne.n	80088ec <vQueueWaitForMessageRestricted+0x40>
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088ec:	f001 ff7a 	bl	800a7e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	3324      	adds	r3, #36	; 0x24
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fc2d 	bl	8009160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008906:	6978      	ldr	r0, [r7, #20]
 8008908:	f7ff ff26 	bl	8008758 <prvUnlockQueue>
	}
 800890c:	bf00      	nop
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08e      	sub	sp, #56	; 0x38
 8008918:	af04      	add	r7, sp, #16
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	623b      	str	r3, [r7, #32]
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <xTaskCreateStatic+0x46>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	61fb      	str	r3, [r7, #28]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800895a:	23bc      	movs	r3, #188	; 0xbc
 800895c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2bbc      	cmp	r3, #188	; 0xbc
 8008962:	d00a      	beq.n	800897a <xTaskCreateStatic+0x66>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	61bb      	str	r3, [r7, #24]
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800897a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01e      	beq.n	80089c0 <xTaskCreateStatic+0xac>
 8008982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01b      	beq.n	80089c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008990:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	2202      	movs	r2, #2
 8008996:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800899a:	2300      	movs	r3, #0
 800899c:	9303      	str	r3, [sp, #12]
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	9302      	str	r3, [sp, #8]
 80089a2:	f107 0314 	add.w	r3, r7, #20
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 f850 	bl	8008a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ba:	f000 f8f3 	bl	8008ba4 <prvAddNewTaskToReadyList>
 80089be:	e001      	b.n	80089c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089c4:	697b      	ldr	r3, [r7, #20]
	}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3728      	adds	r7, #40	; 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b08c      	sub	sp, #48	; 0x30
 80089d2:	af04      	add	r7, sp, #16
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	603b      	str	r3, [r7, #0]
 80089da:	4613      	mov	r3, r2
 80089dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 fff0 	bl	800a9c8 <pvPortMalloc>
 80089e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00e      	beq.n	8008a0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089f0:	20bc      	movs	r0, #188	; 0xbc
 80089f2:	f001 ffe9 	bl	800a9c8 <pvPortMalloc>
 80089f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	631a      	str	r2, [r3, #48]	; 0x30
 8008a04:	e005      	b.n	8008a12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a06:	6978      	ldr	r0, [r7, #20]
 8008a08:	f002 f8aa 	bl	800ab60 <vPortFree>
 8008a0c:	e001      	b.n	8008a12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d017      	beq.n	8008a48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a20:	88fa      	ldrh	r2, [r7, #6]
 8008a22:	2300      	movs	r3, #0
 8008a24:	9303      	str	r3, [sp, #12]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	9302      	str	r3, [sp, #8]
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 f80e 	bl	8008a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a3c:	69f8      	ldr	r0, [r7, #28]
 8008a3e:	f000 f8b1 	bl	8008ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a42:	2301      	movs	r3, #1
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	e002      	b.n	8008a4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a48:	f04f 33ff 	mov.w	r3, #4294967295
 8008a4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3720      	adds	r7, #32
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	461a      	mov	r2, r3
 8008a70:	21a5      	movs	r1, #165	; 0xa5
 8008a72:	f002 fac4 	bl	800affe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a80:	3b01      	subs	r3, #1
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	f023 0307 	bic.w	r3, r3, #7
 8008a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	617b      	str	r3, [r7, #20]
}
 8008aac:	bf00      	nop
 8008aae:	e7fe      	b.n	8008aae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01f      	beq.n	8008af6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	e012      	b.n	8008ae2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	7819      	ldrb	r1, [r3, #0]
 8008ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	3334      	adds	r3, #52	; 0x34
 8008acc:	460a      	mov	r2, r1
 8008ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d006      	beq.n	8008aea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	61fb      	str	r3, [r7, #28]
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b0f      	cmp	r3, #15
 8008ae6:	d9e9      	bls.n	8008abc <prvInitialiseNewTask+0x64>
 8008ae8:	e000      	b.n	8008aec <prvInitialiseNewTask+0x94>
			{
				break;
 8008aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008af4:	e003      	b.n	8008afe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	2b37      	cmp	r3, #55	; 0x37
 8008b02:	d901      	bls.n	8008b08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b04:	2337      	movs	r3, #55	; 0x37
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	2200      	movs	r2, #0
 8008b18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe ff64 	bl	80079ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	3318      	adds	r3, #24
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe ff5f 	bl	80079ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	3354      	adds	r3, #84	; 0x54
 8008b58:	2260      	movs	r2, #96	; 0x60
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f002 fa4e 	bl	800affe <memset>
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	4a0c      	ldr	r2, [pc, #48]	; (8008b98 <prvInitialiseNewTask+0x140>)
 8008b66:	659a      	str	r2, [r3, #88]	; 0x58
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	4a0c      	ldr	r2, [pc, #48]	; (8008b9c <prvInitialiseNewTask+0x144>)
 8008b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	4a0b      	ldr	r2, [pc, #44]	; (8008ba0 <prvInitialiseNewTask+0x148>)
 8008b72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	68f9      	ldr	r1, [r7, #12]
 8008b78:	69b8      	ldr	r0, [r7, #24]
 8008b7a:	f001 fcd7 	bl	800a52c <pxPortInitialiseStack>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b90:	bf00      	nop
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	08010344 	.word	0x08010344
 8008b9c:	08010364 	.word	0x08010364
 8008ba0:	08010324 	.word	0x08010324

08008ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bac:	f001 fdea 	bl	800a784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bb0:	4b2d      	ldr	r3, [pc, #180]	; (8008c68 <prvAddNewTaskToReadyList+0xc4>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	4a2c      	ldr	r2, [pc, #176]	; (8008c68 <prvAddNewTaskToReadyList+0xc4>)
 8008bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bba:	4b2c      	ldr	r3, [pc, #176]	; (8008c6c <prvAddNewTaskToReadyList+0xc8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d109      	bne.n	8008bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bc2:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <prvAddNewTaskToReadyList+0xc8>)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bc8:	4b27      	ldr	r3, [pc, #156]	; (8008c68 <prvAddNewTaskToReadyList+0xc4>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d110      	bne.n	8008bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bd0:	f000 fbf2 	bl	80093b8 <prvInitialiseTaskLists>
 8008bd4:	e00d      	b.n	8008bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bd6:	4b26      	ldr	r3, [pc, #152]	; (8008c70 <prvAddNewTaskToReadyList+0xcc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bde:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <prvAddNewTaskToReadyList+0xc8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d802      	bhi.n	8008bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bec:	4a1f      	ldr	r2, [pc, #124]	; (8008c6c <prvAddNewTaskToReadyList+0xc8>)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bf2:	4b20      	ldr	r3, [pc, #128]	; (8008c74 <prvAddNewTaskToReadyList+0xd0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	4a1e      	ldr	r2, [pc, #120]	; (8008c74 <prvAddNewTaskToReadyList+0xd0>)
 8008bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bfc:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <prvAddNewTaskToReadyList+0xd0>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <prvAddNewTaskToReadyList+0xd4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d903      	bls.n	8008c18 <prvAddNewTaskToReadyList+0x74>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <prvAddNewTaskToReadyList+0xd4>)
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a15      	ldr	r2, [pc, #84]	; (8008c7c <prvAddNewTaskToReadyList+0xd8>)
 8008c26:	441a      	add	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fe fee9 	bl	8007a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c34:	f001 fdd6 	bl	800a7e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <prvAddNewTaskToReadyList+0xcc>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00e      	beq.n	8008c5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <prvAddNewTaskToReadyList+0xc8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d207      	bcs.n	8008c5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c4e:	4b0c      	ldr	r3, [pc, #48]	; (8008c80 <prvAddNewTaskToReadyList+0xdc>)
 8008c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20004ed4 	.word	0x20004ed4
 8008c6c:	20004a00 	.word	0x20004a00
 8008c70:	20004ee0 	.word	0x20004ee0
 8008c74:	20004ef0 	.word	0x20004ef0
 8008c78:	20004edc 	.word	0x20004edc
 8008c7c:	20004a04 	.word	0x20004a04
 8008c80:	e000ed04 	.word	0xe000ed04

08008c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08a      	sub	sp, #40	; 0x28
 8008c88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c92:	463a      	mov	r2, r7
 8008c94:	1d39      	adds	r1, r7, #4
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fe52 	bl	8007944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	9202      	str	r2, [sp, #8]
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	2300      	movs	r3, #0
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	460a      	mov	r2, r1
 8008cb2:	4924      	ldr	r1, [pc, #144]	; (8008d44 <vTaskStartScheduler+0xc0>)
 8008cb4:	4824      	ldr	r0, [pc, #144]	; (8008d48 <vTaskStartScheduler+0xc4>)
 8008cb6:	f7ff fe2d 	bl	8008914 <xTaskCreateStatic>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4a23      	ldr	r2, [pc, #140]	; (8008d4c <vTaskStartScheduler+0xc8>)
 8008cbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cc0:	4b22      	ldr	r3, [pc, #136]	; (8008d4c <vTaskStartScheduler+0xc8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e001      	b.n	8008cd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d102      	bne.n	8008cde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008cd8:	f001 f820 	bl	8009d1c <xTimerCreateTimerTask>
 8008cdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d11b      	bne.n	8008d1c <vTaskStartScheduler+0x98>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	613b      	str	r3, [r7, #16]
}
 8008cf6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cf8:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <vTaskStartScheduler+0xcc>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3354      	adds	r3, #84	; 0x54
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <vTaskStartScheduler+0xd0>)
 8008d00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d02:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <vTaskStartScheduler+0xd4>)
 8008d04:	f04f 32ff 	mov.w	r2, #4294967295
 8008d08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <vTaskStartScheduler+0xd8>)
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <vTaskStartScheduler+0xdc>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d16:	f001 fc93 	bl	800a640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d1a:	e00e      	b.n	8008d3a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d10a      	bne.n	8008d3a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	60fb      	str	r3, [r7, #12]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <vTaskStartScheduler+0xb4>
}
 8008d3a:	bf00      	nop
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	08010240 	.word	0x08010240
 8008d48:	08009389 	.word	0x08009389
 8008d4c:	20004ef8 	.word	0x20004ef8
 8008d50:	20004a00 	.word	0x20004a00
 8008d54:	200000d0 	.word	0x200000d0
 8008d58:	20004ef4 	.word	0x20004ef4
 8008d5c:	20004ee0 	.word	0x20004ee0
 8008d60:	20004ed8 	.word	0x20004ed8

08008d64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <vTaskSuspendAll+0x18>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	4a03      	ldr	r2, [pc, #12]	; (8008d7c <vTaskSuspendAll+0x18>)
 8008d70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d72:	bf00      	nop
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	20004efc 	.word	0x20004efc

08008d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d8e:	4b42      	ldr	r3, [pc, #264]	; (8008e98 <xTaskResumeAll+0x118>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <xTaskResumeAll+0x2c>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	603b      	str	r3, [r7, #0]
}
 8008da8:	bf00      	nop
 8008daa:	e7fe      	b.n	8008daa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dac:	f001 fcea 	bl	800a784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008db0:	4b39      	ldr	r3, [pc, #228]	; (8008e98 <xTaskResumeAll+0x118>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	4a38      	ldr	r2, [pc, #224]	; (8008e98 <xTaskResumeAll+0x118>)
 8008db8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dba:	4b37      	ldr	r3, [pc, #220]	; (8008e98 <xTaskResumeAll+0x118>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d162      	bne.n	8008e88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dc2:	4b36      	ldr	r3, [pc, #216]	; (8008e9c <xTaskResumeAll+0x11c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d05e      	beq.n	8008e88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dca:	e02f      	b.n	8008e2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dcc:	4b34      	ldr	r3, [pc, #208]	; (8008ea0 <xTaskResumeAll+0x120>)
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3318      	adds	r3, #24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fe71 	bl	8007ac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fe6c 	bl	8007ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dec:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <xTaskResumeAll+0x124>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d903      	bls.n	8008dfc <xTaskResumeAll+0x7c>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df8:	4a2a      	ldr	r2, [pc, #168]	; (8008ea4 <xTaskResumeAll+0x124>)
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4a27      	ldr	r2, [pc, #156]	; (8008ea8 <xTaskResumeAll+0x128>)
 8008e0a:	441a      	add	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3304      	adds	r3, #4
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f7fe fdf7 	bl	8007a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1c:	4b23      	ldr	r3, [pc, #140]	; (8008eac <xTaskResumeAll+0x12c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d302      	bcc.n	8008e2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e26:	4b22      	ldr	r3, [pc, #136]	; (8008eb0 <xTaskResumeAll+0x130>)
 8008e28:	2201      	movs	r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ea0 <xTaskResumeAll+0x120>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1cb      	bne.n	8008dcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e3a:	f000 fb5f 	bl	80094fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e3e:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <xTaskResumeAll+0x134>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d010      	beq.n	8008e6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e4a:	f000 f847 	bl	8008edc <xTaskIncrementTick>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e54:	4b16      	ldr	r3, [pc, #88]	; (8008eb0 <xTaskResumeAll+0x130>)
 8008e56:	2201      	movs	r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f1      	bne.n	8008e4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e66:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <xTaskResumeAll+0x134>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <xTaskResumeAll+0x130>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d009      	beq.n	8008e88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e78:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <xTaskResumeAll+0x138>)
 8008e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e88:	f001 fcac 	bl	800a7e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20004efc 	.word	0x20004efc
 8008e9c:	20004ed4 	.word	0x20004ed4
 8008ea0:	20004e94 	.word	0x20004e94
 8008ea4:	20004edc 	.word	0x20004edc
 8008ea8:	20004a04 	.word	0x20004a04
 8008eac:	20004a00 	.word	0x20004a00
 8008eb0:	20004ee8 	.word	0x20004ee8
 8008eb4:	20004ee4 	.word	0x20004ee4
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ec2:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <xTaskGetTickCount+0x1c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ec8:	687b      	ldr	r3, [r7, #4]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20004ed8 	.word	0x20004ed8

08008edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee6:	4b4f      	ldr	r3, [pc, #316]	; (8009024 <xTaskIncrementTick+0x148>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 808f 	bne.w	800900e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ef0:	4b4d      	ldr	r3, [pc, #308]	; (8009028 <xTaskIncrementTick+0x14c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ef8:	4a4b      	ldr	r2, [pc, #300]	; (8009028 <xTaskIncrementTick+0x14c>)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d120      	bne.n	8008f46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f04:	4b49      	ldr	r3, [pc, #292]	; (800902c <xTaskIncrementTick+0x150>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	603b      	str	r3, [r7, #0]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <xTaskIncrementTick+0x46>
 8008f24:	4b41      	ldr	r3, [pc, #260]	; (800902c <xTaskIncrementTick+0x150>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	4b41      	ldr	r3, [pc, #260]	; (8009030 <xTaskIncrementTick+0x154>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a3f      	ldr	r2, [pc, #252]	; (800902c <xTaskIncrementTick+0x150>)
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	4a3f      	ldr	r2, [pc, #252]	; (8009030 <xTaskIncrementTick+0x154>)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	4b3e      	ldr	r3, [pc, #248]	; (8009034 <xTaskIncrementTick+0x158>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	4a3d      	ldr	r2, [pc, #244]	; (8009034 <xTaskIncrementTick+0x158>)
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	f000 fadb 	bl	80094fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f46:	4b3c      	ldr	r3, [pc, #240]	; (8009038 <xTaskIncrementTick+0x15c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d349      	bcc.n	8008fe4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f50:	4b36      	ldr	r3, [pc, #216]	; (800902c <xTaskIncrementTick+0x150>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d104      	bne.n	8008f64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5a:	4b37      	ldr	r3, [pc, #220]	; (8009038 <xTaskIncrementTick+0x15c>)
 8008f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f60:	601a      	str	r2, [r3, #0]
					break;
 8008f62:	e03f      	b.n	8008fe4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f64:	4b31      	ldr	r3, [pc, #196]	; (800902c <xTaskIncrementTick+0x150>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d203      	bcs.n	8008f84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f7c:	4a2e      	ldr	r2, [pc, #184]	; (8009038 <xTaskIncrementTick+0x15c>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f82:	e02f      	b.n	8008fe4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe fd99 	bl	8007ac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d004      	beq.n	8008fa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	3318      	adds	r3, #24
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fd90 	bl	8007ac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	4b25      	ldr	r3, [pc, #148]	; (800903c <xTaskIncrementTick+0x160>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d903      	bls.n	8008fb4 <xTaskIncrementTick+0xd8>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	4a22      	ldr	r2, [pc, #136]	; (800903c <xTaskIncrementTick+0x160>)
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	4613      	mov	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <xTaskIncrementTick+0x164>)
 8008fc2:	441a      	add	r2, r3
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fe fd1b 	bl	8007a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd4:	4b1b      	ldr	r3, [pc, #108]	; (8009044 <xTaskIncrementTick+0x168>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d3b8      	bcc.n	8008f50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe2:	e7b5      	b.n	8008f50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <xTaskIncrementTick+0x168>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fea:	4915      	ldr	r1, [pc, #84]	; (8009040 <xTaskIncrementTick+0x164>)
 8008fec:	4613      	mov	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d901      	bls.n	8009000 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009000:	4b11      	ldr	r3, [pc, #68]	; (8009048 <xTaskIncrementTick+0x16c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	617b      	str	r3, [r7, #20]
 800900c:	e004      	b.n	8009018 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800900e:	4b0f      	ldr	r3, [pc, #60]	; (800904c <xTaskIncrementTick+0x170>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a0d      	ldr	r2, [pc, #52]	; (800904c <xTaskIncrementTick+0x170>)
 8009016:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009018:	697b      	ldr	r3, [r7, #20]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20004efc 	.word	0x20004efc
 8009028:	20004ed8 	.word	0x20004ed8
 800902c:	20004e8c 	.word	0x20004e8c
 8009030:	20004e90 	.word	0x20004e90
 8009034:	20004eec 	.word	0x20004eec
 8009038:	20004ef4 	.word	0x20004ef4
 800903c:	20004edc 	.word	0x20004edc
 8009040:	20004a04 	.word	0x20004a04
 8009044:	20004a00 	.word	0x20004a00
 8009048:	20004ee8 	.word	0x20004ee8
 800904c:	20004ee4 	.word	0x20004ee4

08009050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009056:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <vTaskSwitchContext+0xb0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800905e:	4b29      	ldr	r3, [pc, #164]	; (8009104 <vTaskSwitchContext+0xb4>)
 8009060:	2201      	movs	r2, #1
 8009062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009064:	e046      	b.n	80090f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009066:	4b27      	ldr	r3, [pc, #156]	; (8009104 <vTaskSwitchContext+0xb4>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906c:	4b26      	ldr	r3, [pc, #152]	; (8009108 <vTaskSwitchContext+0xb8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e010      	b.n	8009096 <vTaskSwitchContext+0x46>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <vTaskSwitchContext+0x40>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	607b      	str	r3, [r7, #4]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <vTaskSwitchContext+0x3e>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3b01      	subs	r3, #1
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	491d      	ldr	r1, [pc, #116]	; (800910c <vTaskSwitchContext+0xbc>)
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0e4      	beq.n	8009074 <vTaskSwitchContext+0x24>
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4a15      	ldr	r2, [pc, #84]	; (800910c <vTaskSwitchContext+0xbc>)
 80090b6:	4413      	add	r3, r2
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	685a      	ldr	r2, [r3, #4]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	605a      	str	r2, [r3, #4]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	3308      	adds	r3, #8
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d104      	bne.n	80090da <vTaskSwitchContext+0x8a>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	605a      	str	r2, [r3, #4]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	4a0b      	ldr	r2, [pc, #44]	; (8009110 <vTaskSwitchContext+0xc0>)
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	4a08      	ldr	r2, [pc, #32]	; (8009108 <vTaskSwitchContext+0xb8>)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <vTaskSwitchContext+0xc0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3354      	adds	r3, #84	; 0x54
 80090f0:	4a08      	ldr	r2, [pc, #32]	; (8009114 <vTaskSwitchContext+0xc4>)
 80090f2:	6013      	str	r3, [r2, #0]
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	20004efc 	.word	0x20004efc
 8009104:	20004ee8 	.word	0x20004ee8
 8009108:	20004edc 	.word	0x20004edc
 800910c:	20004a04 	.word	0x20004a04
 8009110:	20004a00 	.word	0x20004a00
 8009114:	200000d0 	.word	0x200000d0

08009118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60fb      	str	r3, [r7, #12]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <vTaskPlaceOnEventList+0x44>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3318      	adds	r3, #24
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7fe fc81 	bl	8007a4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800914c:	2101      	movs	r1, #1
 800914e:	6838      	ldr	r0, [r7, #0]
 8009150:	f000 fd90 	bl	8009c74 <prvAddCurrentTaskToDelayedList>
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	20004a00 	.word	0x20004a00

08009160 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	617b      	str	r3, [r7, #20]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3318      	adds	r3, #24
 800918e:	4619      	mov	r1, r3
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7fe fc38 	bl	8007a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	68b8      	ldr	r0, [r7, #8]
 80091a6:	f000 fd65 	bl	8009c74 <prvAddCurrentTaskToDelayedList>
	}
 80091aa:	bf00      	nop
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20004a00 	.word	0x20004a00

080091b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10a      	bne.n	80091e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60fb      	str	r3, [r7, #12]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	3318      	adds	r3, #24
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fc69 	bl	8007ac0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ee:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <xTaskRemoveFromEventList+0xb0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d11d      	bne.n	8009232 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fc60 	bl	8007ac0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <xTaskRemoveFromEventList+0xb4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	429a      	cmp	r2, r3
 800920a:	d903      	bls.n	8009214 <xTaskRemoveFromEventList+0x5c>
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4a16      	ldr	r2, [pc, #88]	; (800926c <xTaskRemoveFromEventList+0xb4>)
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009218:	4613      	mov	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4a13      	ldr	r2, [pc, #76]	; (8009270 <xTaskRemoveFromEventList+0xb8>)
 8009222:	441a      	add	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	3304      	adds	r3, #4
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f7fe fbeb 	bl	8007a06 <vListInsertEnd>
 8009230:	e005      	b.n	800923e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	3318      	adds	r3, #24
 8009236:	4619      	mov	r1, r3
 8009238:	480e      	ldr	r0, [pc, #56]	; (8009274 <xTaskRemoveFromEventList+0xbc>)
 800923a:	f7fe fbe4 	bl	8007a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <xTaskRemoveFromEventList+0xc0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	429a      	cmp	r2, r3
 800924a:	d905      	bls.n	8009258 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009250:	4b0a      	ldr	r3, [pc, #40]	; (800927c <xTaskRemoveFromEventList+0xc4>)
 8009252:	2201      	movs	r2, #1
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	e001      	b.n	800925c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009258:	2300      	movs	r3, #0
 800925a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800925c:	697b      	ldr	r3, [r7, #20]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20004efc 	.word	0x20004efc
 800926c:	20004edc 	.word	0x20004edc
 8009270:	20004a04 	.word	0x20004a04
 8009274:	20004e94 	.word	0x20004e94
 8009278:	20004a00 	.word	0x20004a00
 800927c:	20004ee8 	.word	0x20004ee8

08009280 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009288:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <vTaskInternalSetTimeOutState+0x24>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009290:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <vTaskInternalSetTimeOutState+0x28>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	605a      	str	r2, [r3, #4]
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	20004eec 	.word	0x20004eec
 80092a8:	20004ed8 	.word	0x20004ed8

080092ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	613b      	str	r3, [r7, #16]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	60fb      	str	r3, [r7, #12]
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092ee:	f001 fa49 	bl	800a784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092f2:	4b1d      	ldr	r3, [pc, #116]	; (8009368 <xTaskCheckForTimeOut+0xbc>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930a:	d102      	bne.n	8009312 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
 8009310:	e023      	b.n	800935a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b15      	ldr	r3, [pc, #84]	; (800936c <xTaskCheckForTimeOut+0xc0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d007      	beq.n	800932e <xTaskCheckForTimeOut+0x82>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	429a      	cmp	r2, r3
 8009326:	d302      	bcc.n	800932e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009328:	2301      	movs	r3, #1
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e015      	b.n	800935a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	429a      	cmp	r2, r3
 8009336:	d20b      	bcs.n	8009350 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ff9b 	bl	8009280 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e004      	b.n	800935a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009356:	2301      	movs	r3, #1
 8009358:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800935a:	f001 fa43 	bl	800a7e4 <vPortExitCritical>

	return xReturn;
 800935e:	69fb      	ldr	r3, [r7, #28]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20004ed8 	.word	0x20004ed8
 800936c:	20004eec 	.word	0x20004eec

08009370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009374:	4b03      	ldr	r3, [pc, #12]	; (8009384 <vTaskMissedYield+0x14>)
 8009376:	2201      	movs	r2, #1
 8009378:	601a      	str	r2, [r3, #0]
}
 800937a:	bf00      	nop
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20004ee8 	.word	0x20004ee8

08009388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009390:	f000 f852 	bl	8009438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009394:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <prvIdleTask+0x28>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d9f9      	bls.n	8009390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <prvIdleTask+0x2c>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093ac:	e7f0      	b.n	8009390 <prvIdleTask+0x8>
 80093ae:	bf00      	nop
 80093b0:	20004a04 	.word	0x20004a04
 80093b4:	e000ed04 	.word	0xe000ed04

080093b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093be:	2300      	movs	r3, #0
 80093c0:	607b      	str	r3, [r7, #4]
 80093c2:	e00c      	b.n	80093de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4a12      	ldr	r2, [pc, #72]	; (8009418 <prvInitialiseTaskLists+0x60>)
 80093d0:	4413      	add	r3, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe faea 	bl	80079ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3301      	adds	r3, #1
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b37      	cmp	r3, #55	; 0x37
 80093e2:	d9ef      	bls.n	80093c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093e4:	480d      	ldr	r0, [pc, #52]	; (800941c <prvInitialiseTaskLists+0x64>)
 80093e6:	f7fe fae1 	bl	80079ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093ea:	480d      	ldr	r0, [pc, #52]	; (8009420 <prvInitialiseTaskLists+0x68>)
 80093ec:	f7fe fade 	bl	80079ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093f0:	480c      	ldr	r0, [pc, #48]	; (8009424 <prvInitialiseTaskLists+0x6c>)
 80093f2:	f7fe fadb 	bl	80079ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093f6:	480c      	ldr	r0, [pc, #48]	; (8009428 <prvInitialiseTaskLists+0x70>)
 80093f8:	f7fe fad8 	bl	80079ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093fc:	480b      	ldr	r0, [pc, #44]	; (800942c <prvInitialiseTaskLists+0x74>)
 80093fe:	f7fe fad5 	bl	80079ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009402:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <prvInitialiseTaskLists+0x78>)
 8009404:	4a05      	ldr	r2, [pc, #20]	; (800941c <prvInitialiseTaskLists+0x64>)
 8009406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <prvInitialiseTaskLists+0x7c>)
 800940a:	4a05      	ldr	r2, [pc, #20]	; (8009420 <prvInitialiseTaskLists+0x68>)
 800940c:	601a      	str	r2, [r3, #0]
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20004a04 	.word	0x20004a04
 800941c:	20004e64 	.word	0x20004e64
 8009420:	20004e78 	.word	0x20004e78
 8009424:	20004e94 	.word	0x20004e94
 8009428:	20004ea8 	.word	0x20004ea8
 800942c:	20004ec0 	.word	0x20004ec0
 8009430:	20004e8c 	.word	0x20004e8c
 8009434:	20004e90 	.word	0x20004e90

08009438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800943e:	e019      	b.n	8009474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009440:	f001 f9a0 	bl	800a784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009444:	4b10      	ldr	r3, [pc, #64]	; (8009488 <prvCheckTasksWaitingTermination+0x50>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3304      	adds	r3, #4
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fb35 	bl	8007ac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <prvCheckTasksWaitingTermination+0x54>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	4a0b      	ldr	r2, [pc, #44]	; (800948c <prvCheckTasksWaitingTermination+0x54>)
 800945e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009460:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <prvCheckTasksWaitingTermination+0x58>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3b01      	subs	r3, #1
 8009466:	4a0a      	ldr	r2, [pc, #40]	; (8009490 <prvCheckTasksWaitingTermination+0x58>)
 8009468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800946a:	f001 f9bb 	bl	800a7e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f810 	bl	8009494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <prvCheckTasksWaitingTermination+0x58>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e1      	bne.n	8009440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20004ea8 	.word	0x20004ea8
 800948c:	20004ed4 	.word	0x20004ed4
 8009490:	20004ebc 	.word	0x20004ebc

08009494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3354      	adds	r3, #84	; 0x54
 80094a0:	4618      	mov	r0, r3
 80094a2:	f002 fb4f 	bl	800bb44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d108      	bne.n	80094c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 fb53 	bl	800ab60 <vPortFree>
				vPortFree( pxTCB );
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 fb50 	bl	800ab60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094c0:	e018      	b.n	80094f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d103      	bne.n	80094d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 fb47 	bl	800ab60 <vPortFree>
	}
 80094d2:	e00f      	b.n	80094f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d00a      	beq.n	80094f4 <prvDeleteTCB+0x60>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60fb      	str	r3, [r7, #12]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <prvDeleteTCB+0x5e>
	}
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009502:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <prvResetNextTaskUnblockTime+0x38>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <prvResetNextTaskUnblockTime+0x3c>)
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009514:	e008      	b.n	8009528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009516:	4b07      	ldr	r3, [pc, #28]	; (8009534 <prvResetNextTaskUnblockTime+0x38>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	4a04      	ldr	r2, [pc, #16]	; (8009538 <prvResetNextTaskUnblockTime+0x3c>)
 8009526:	6013      	str	r3, [r2, #0]
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	20004e8c 	.word	0x20004e8c
 8009538:	20004ef4 	.word	0x20004ef4

0800953c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <xTaskGetCurrentTaskHandle+0x1c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009548:	687b      	ldr	r3, [r7, #4]
	}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20004a00 	.word	0x20004a00

0800955c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009562:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <xTaskGetSchedulerState+0x34>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d102      	bne.n	8009570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800956a:	2301      	movs	r3, #1
 800956c:	607b      	str	r3, [r7, #4]
 800956e:	e008      	b.n	8009582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009570:	4b08      	ldr	r3, [pc, #32]	; (8009594 <xTaskGetSchedulerState+0x38>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009578:	2302      	movs	r3, #2
 800957a:	607b      	str	r3, [r7, #4]
 800957c:	e001      	b.n	8009582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800957e:	2300      	movs	r3, #0
 8009580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009582:	687b      	ldr	r3, [r7, #4]
	}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20004ee0 	.word	0x20004ee0
 8009594:	20004efc 	.word	0x20004efc

08009598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d051      	beq.n	8009652 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b2:	4b2a      	ldr	r3, [pc, #168]	; (800965c <xTaskPriorityInherit+0xc4>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d241      	bcs.n	8009640 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	db06      	blt.n	80095d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c4:	4b25      	ldr	r3, [pc, #148]	; (800965c <xTaskPriorityInherit+0xc4>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6959      	ldr	r1, [r3, #20]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <xTaskPriorityInherit+0xc8>)
 80095e4:	4413      	add	r3, r2
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d122      	bne.n	8009630 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe fa66 	bl	8007ac0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095f4:	4b19      	ldr	r3, [pc, #100]	; (800965c <xTaskPriorityInherit+0xc4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009602:	4b18      	ldr	r3, [pc, #96]	; (8009664 <xTaskPriorityInherit+0xcc>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d903      	bls.n	8009612 <xTaskPriorityInherit+0x7a>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	4a15      	ldr	r2, [pc, #84]	; (8009664 <xTaskPriorityInherit+0xcc>)
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4a10      	ldr	r2, [pc, #64]	; (8009660 <xTaskPriorityInherit+0xc8>)
 8009620:	441a      	add	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7fe f9ec 	bl	8007a06 <vListInsertEnd>
 800962e:	e004      	b.n	800963a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009630:	4b0a      	ldr	r3, [pc, #40]	; (800965c <xTaskPriorityInherit+0xc4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800963a:	2301      	movs	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	e008      	b.n	8009652 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009644:	4b05      	ldr	r3, [pc, #20]	; (800965c <xTaskPriorityInherit+0xc4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	429a      	cmp	r2, r3
 800964c:	d201      	bcs.n	8009652 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800964e:	2301      	movs	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009652:	68fb      	ldr	r3, [r7, #12]
	}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20004a00 	.word	0x20004a00
 8009660:	20004a04 	.word	0x20004a04
 8009664:	20004edc 	.word	0x20004edc

08009668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d056      	beq.n	800972c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800967e:	4b2e      	ldr	r3, [pc, #184]	; (8009738 <xTaskPriorityDisinherit+0xd0>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	429a      	cmp	r2, r3
 8009686:	d00a      	beq.n	800969e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	60fb      	str	r3, [r7, #12]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10a      	bne.n	80096bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	60bb      	str	r3, [r7, #8]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c0:	1e5a      	subs	r2, r3, #1
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d02c      	beq.n	800972c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d128      	bne.n	800972c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3304      	adds	r3, #4
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe f9ee 	bl	8007ac0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fc:	4b0f      	ldr	r3, [pc, #60]	; (800973c <xTaskPriorityDisinherit+0xd4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d903      	bls.n	800970c <xTaskPriorityDisinherit+0xa4>
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	4a0c      	ldr	r2, [pc, #48]	; (800973c <xTaskPriorityDisinherit+0xd4>)
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4a09      	ldr	r2, [pc, #36]	; (8009740 <xTaskPriorityDisinherit+0xd8>)
 800971a:	441a      	add	r2, r3
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fe f96f 	bl	8007a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800972c:	697b      	ldr	r3, [r7, #20]
	}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20004a00 	.word	0x20004a00
 800973c:	20004edc 	.word	0x20004edc
 8009740:	20004a04 	.word	0x20004a04

08009744 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009752:	2301      	movs	r3, #1
 8009754:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d06a      	beq.n	8009832 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	60fb      	str	r3, [r7, #12]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d902      	bls.n	800978a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	61fb      	str	r3, [r7, #28]
 8009788:	e002      	b.n	8009790 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	429a      	cmp	r2, r3
 8009798:	d04b      	beq.n	8009832 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d146      	bne.n	8009832 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097a4:	4b25      	ldr	r3, [pc, #148]	; (800983c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d10a      	bne.n	80097c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	60bb      	str	r3, [r7, #8]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	db04      	blt.n	80097e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	6959      	ldr	r1, [r3, #20]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4a13      	ldr	r2, [pc, #76]	; (8009840 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80097f2:	4413      	add	r3, r2
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d11c      	bne.n	8009832 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe f95f 	bl	8007ac0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d903      	bls.n	8009816 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	4a0c      	ldr	r2, [pc, #48]	; (8009844 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4a07      	ldr	r2, [pc, #28]	; (8009840 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009824:	441a      	add	r2, r3
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	3304      	adds	r3, #4
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7fe f8ea 	bl	8007a06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009832:	bf00      	nop
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20004a00 	.word	0x20004a00
 8009840:	20004a04 	.word	0x20004a04
 8009844:	20004edc 	.word	0x20004edc

08009848 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800984c:	4b07      	ldr	r3, [pc, #28]	; (800986c <pvTaskIncrementMutexHeldCount+0x24>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d004      	beq.n	800985e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <pvTaskIncrementMutexHeldCount+0x24>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800985a:	3201      	adds	r2, #1
 800985c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800985e:	4b03      	ldr	r3, [pc, #12]	; (800986c <pvTaskIncrementMutexHeldCount+0x24>)
 8009860:	681b      	ldr	r3, [r3, #0]
	}
 8009862:	4618      	mov	r0, r3
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	20004a00 	.word	0x20004a00

08009870 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800987e:	f000 ff81 	bl	800a784 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009882:	4b29      	ldr	r3, [pc, #164]	; (8009928 <xTaskNotifyWait+0xb8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d01c      	beq.n	80098ca <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009890:	4b25      	ldr	r3, [pc, #148]	; (8009928 <xTaskNotifyWait+0xb8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	43d2      	mvns	r2, r2
 800989c:	400a      	ands	r2, r1
 800989e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80098a2:	4b21      	ldr	r3, [pc, #132]	; (8009928 <xTaskNotifyWait+0xb8>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00b      	beq.n	80098ca <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098b2:	2101      	movs	r1, #1
 80098b4:	6838      	ldr	r0, [r7, #0]
 80098b6:	f000 f9dd 	bl	8009c74 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80098ba:	4b1c      	ldr	r3, [pc, #112]	; (800992c <xTaskNotifyWait+0xbc>)
 80098bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80098ca:	f000 ff8b 	bl	800a7e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80098ce:	f000 ff59 	bl	800a784 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d005      	beq.n	80098e4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80098d8:	4b13      	ldr	r3, [pc, #76]	; (8009928 <xTaskNotifyWait+0xb8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80098e4:	4b10      	ldr	r3, [pc, #64]	; (8009928 <xTaskNotifyWait+0xb8>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d002      	beq.n	80098f8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	e00a      	b.n	800990e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80098f8:	4b0b      	ldr	r3, [pc, #44]	; (8009928 <xTaskNotifyWait+0xb8>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	43d2      	mvns	r2, r2
 8009904:	400a      	ands	r2, r1
 8009906:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800990a:	2301      	movs	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <xTaskNotifyWait+0xb8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009918:	f000 ff64 	bl	800a7e4 <vPortExitCritical>

		return xReturn;
 800991c:	697b      	ldr	r3, [r7, #20]
	}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20004a00 	.word	0x20004a00
 800992c:	e000ed04 	.word	0xe000ed04

08009930 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08a      	sub	sp, #40	; 0x28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	4613      	mov	r3, r2
 800993e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009940:	2301      	movs	r3, #1
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10a      	bne.n	8009960 <xTaskGenericNotify+0x30>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	61bb      	str	r3, [r7, #24]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009964:	f000 ff0e 	bl	800a784 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800997e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	2b04      	cmp	r3, #4
 800998c:	d82d      	bhi.n	80099ea <xTaskGenericNotify+0xba>
 800998e:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <xTaskGenericNotify+0x64>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	08009a0d 	.word	0x08009a0d
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099bb 	.word	0x080099bb
 80099a0:	080099cb 	.word	0x080099cb
 80099a4:	080099d5 	.word	0x080099d5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80099b8:	e02b      	b.n	8009a12 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80099c8:	e023      	b.n	8009a12 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80099d2:	e01e      	b.n	8009a12 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80099d4:	7ffb      	ldrb	r3, [r7, #31]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d004      	beq.n	80099e4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80099e2:	e016      	b.n	8009a12 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80099e4:	2300      	movs	r3, #0
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80099e8:	e013      	b.n	8009a12 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d00c      	beq.n	8009a10 <xTaskGenericNotify+0xe0>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	617b      	str	r3, [r7, #20]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <xTaskGenericNotify+0xda>
					break;
 8009a0c:	bf00      	nop
 8009a0e:	e000      	b.n	8009a12 <xTaskGenericNotify+0xe2>

					break;
 8009a10:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009a12:	7ffb      	ldrb	r3, [r7, #31]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d13a      	bne.n	8009a8e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe f84f 	bl	8007ac0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a26:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <xTaskGenericNotify+0x16c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d903      	bls.n	8009a36 <xTaskGenericNotify+0x106>
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	4a1a      	ldr	r2, [pc, #104]	; (8009a9c <xTaskGenericNotify+0x16c>)
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4a17      	ldr	r2, [pc, #92]	; (8009aa0 <xTaskGenericNotify+0x170>)
 8009a44:	441a      	add	r2, r3
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	f7fd ffda 	bl	8007a06 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <xTaskGenericNotify+0x140>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	613b      	str	r3, [r7, #16]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <xTaskGenericNotify+0x174>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d907      	bls.n	8009a8e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009a7e:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <xTaskGenericNotify+0x178>)
 8009a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a8e:	f000 fea9 	bl	800a7e4 <vPortExitCritical>

		return xReturn;
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3728      	adds	r7, #40	; 0x28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20004edc 	.word	0x20004edc
 8009aa0:	20004a04 	.word	0x20004a04
 8009aa4:	20004a00 	.word	0x20004a00
 8009aa8:	e000ed04 	.word	0xe000ed04

08009aac <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08e      	sub	sp, #56	; 0x38
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009abc:	2301      	movs	r3, #1
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10a      	bne.n	8009adc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ad8:	bf00      	nop
 8009ada:	e7fe      	b.n	8009ada <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009adc:	f000 ff34 	bl	800a948 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009ae4:	f3ef 8211 	mrs	r2, BASEPRI
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	623a      	str	r2, [r7, #32]
 8009afa:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009afc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d004      	beq.n	8009b10 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b12:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d82f      	bhi.n	8009b88 <xTaskGenericNotifyFromISR+0xdc>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <xTaskGenericNotifyFromISR+0x84>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009bab 	.word	0x08009bab
 8009b34:	08009b45 	.word	0x08009b45
 8009b38:	08009b57 	.word	0x08009b57
 8009b3c:	08009b67 	.word	0x08009b67
 8009b40:	08009b71 	.word	0x08009b71
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009b54:	e02c      	b.n	8009bb0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009b64:	e024      	b.n	8009bb0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009b6e:	e01f      	b.n	8009bb0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d004      	beq.n	8009b82 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009b80:	e016      	b.n	8009bb0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009b86:	e013      	b.n	8009bb0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b92:	d00c      	beq.n	8009bae <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	61bb      	str	r3, [r7, #24]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009bae:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009bb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d146      	bne.n	8009c46 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00a      	beq.n	8009bd6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	617b      	str	r3, [r7, #20]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bd6:	4b21      	ldr	r3, [pc, #132]	; (8009c5c <xTaskGenericNotifyFromISR+0x1b0>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d11d      	bne.n	8009c1a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	3304      	adds	r3, #4
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fd ff6c 	bl	8007ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bec:	4b1c      	ldr	r3, [pc, #112]	; (8009c60 <xTaskGenericNotifyFromISR+0x1b4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d903      	bls.n	8009bfc <xTaskGenericNotifyFromISR+0x150>
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	4a19      	ldr	r2, [pc, #100]	; (8009c60 <xTaskGenericNotifyFromISR+0x1b4>)
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4a16      	ldr	r2, [pc, #88]	; (8009c64 <xTaskGenericNotifyFromISR+0x1b8>)
 8009c0a:	441a      	add	r2, r3
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f7fd fef7 	bl	8007a06 <vListInsertEnd>
 8009c18:	e005      	b.n	8009c26 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	3318      	adds	r3, #24
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4811      	ldr	r0, [pc, #68]	; (8009c68 <xTaskGenericNotifyFromISR+0x1bc>)
 8009c22:	f7fd fef0 	bl	8007a06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2a:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <xTaskGenericNotifyFromISR+0x1c0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d908      	bls.n	8009c46 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009c40:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <xTaskGenericNotifyFromISR+0x1c4>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f383 8811 	msr	BASEPRI, r3
}
 8009c50:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3738      	adds	r7, #56	; 0x38
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20004efc 	.word	0x20004efc
 8009c60:	20004edc 	.word	0x20004edc
 8009c64:	20004a04 	.word	0x20004a04
 8009c68:	20004e94 	.word	0x20004e94
 8009c6c:	20004a00 	.word	0x20004a00
 8009c70:	20004ee8 	.word	0x20004ee8

08009c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c7e:	4b21      	ldr	r3, [pc, #132]	; (8009d04 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c84:	4b20      	ldr	r3, [pc, #128]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fd ff18 	bl	8007ac0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d10a      	bne.n	8009cae <prvAddCurrentTaskToDelayedList+0x3a>
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c9e:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4819      	ldr	r0, [pc, #100]	; (8009d0c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ca8:	f7fd fead 	bl	8007a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cac:	e026      	b.n	8009cfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cb6:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d209      	bcs.n	8009cda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7fd febb 	bl	8007a4e <vListInsert>
}
 8009cd8:	e010      	b.n	8009cfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cda:	4b0e      	ldr	r3, [pc, #56]	; (8009d14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f7fd feb1 	bl	8007a4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cec:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d202      	bcs.n	8009cfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009cf6:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6013      	str	r3, [r2, #0]
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20004ed8 	.word	0x20004ed8
 8009d08:	20004a00 	.word	0x20004a00
 8009d0c:	20004ec0 	.word	0x20004ec0
 8009d10:	20004e90 	.word	0x20004e90
 8009d14:	20004e8c 	.word	0x20004e8c
 8009d18:	20004ef4 	.word	0x20004ef4

08009d1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	; 0x28
 8009d20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d26:	f000 fba1 	bl	800a46c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d2a:	4b1c      	ldr	r3, [pc, #112]	; (8009d9c <xTimerCreateTimerTask+0x80>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d021      	beq.n	8009d76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d3a:	1d3a      	adds	r2, r7, #4
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	f107 030c 	add.w	r3, r7, #12
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fd fe17 	bl	8007978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	9202      	str	r2, [sp, #8]
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	2302      	movs	r3, #2
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	4910      	ldr	r1, [pc, #64]	; (8009da0 <xTimerCreateTimerTask+0x84>)
 8009d5e:	4811      	ldr	r0, [pc, #68]	; (8009da4 <xTimerCreateTimerTask+0x88>)
 8009d60:	f7fe fdd8 	bl	8008914 <xTaskCreateStatic>
 8009d64:	4603      	mov	r3, r0
 8009d66:	4a10      	ldr	r2, [pc, #64]	; (8009da8 <xTimerCreateTimerTask+0x8c>)
 8009d68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <xTimerCreateTimerTask+0x8c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d72:	2301      	movs	r3, #1
 8009d74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	613b      	str	r3, [r7, #16]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d92:	697b      	ldr	r3, [r7, #20]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20004f30 	.word	0x20004f30
 8009da0:	08010248 	.word	0x08010248
 8009da4:	0800a015 	.word	0x0800a015
 8009da8:	20004f34 	.word	0x20004f34

08009dac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009dba:	202c      	movs	r0, #44	; 0x2c
 8009dbc:	f000 fe04 	bl	800a9c8 <pvPortMalloc>
 8009dc0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00d      	beq.n	8009de4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 f843 	bl	8009e6a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009de4:	697b      	ldr	r3, [r7, #20]
	}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b08a      	sub	sp, #40	; 0x28
 8009df2:	af02      	add	r7, sp, #8
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009dfc:	232c      	movs	r3, #44	; 0x2c
 8009dfe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	2b2c      	cmp	r3, #44	; 0x2c
 8009e04:	d00a      	beq.n	8009e1c <xTimerCreateStatic+0x2e>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	61bb      	str	r3, [r7, #24]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xTimerCreateStatic+0x4c>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	617b      	str	r3, [r7, #20]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00d      	beq.n	8009e60 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 f805 	bl	8009e6a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009e60:	69fb      	ldr	r3, [r7, #28]
	}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3720      	adds	r7, #32
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	617b      	str	r3, [r7, #20]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01e      	beq.n	8009ed8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009e9a:	f000 fae7 	bl	800a46c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	6a3a      	ldr	r2, [r7, #32]
 8009eb4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fd fd96 	bl	80079ec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d008      	beq.n	8009ed8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ecc:	f043 0304 	orr.w	r3, r3, #4
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009ed8:	bf00      	nop
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
 8009eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	623b      	str	r3, [r7, #32]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <xTimerGenericCommand+0x98>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d02a      	beq.n	8009f6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b05      	cmp	r3, #5
 8009f26:	dc18      	bgt.n	8009f5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f28:	f7ff fb18 	bl	800955c <xTaskGetSchedulerState>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d109      	bne.n	8009f46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f32:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <xTimerGenericCommand+0x98>)
 8009f34:	6818      	ldr	r0, [r3, #0]
 8009f36:	f107 0110 	add.w	r1, r7, #16
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3e:	f7fd ffdd 	bl	8007efc <xQueueGenericSend>
 8009f42:	6278      	str	r0, [r7, #36]	; 0x24
 8009f44:	e012      	b.n	8009f6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <xTimerGenericCommand+0x98>)
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	f107 0110 	add.w	r1, r7, #16
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2200      	movs	r2, #0
 8009f52:	f7fd ffd3 	bl	8007efc <xQueueGenericSend>
 8009f56:	6278      	str	r0, [r7, #36]	; 0x24
 8009f58:	e008      	b.n	8009f6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <xTimerGenericCommand+0x98>)
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	f107 0110 	add.w	r1, r7, #16
 8009f62:	2300      	movs	r3, #0
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	f7fe f8c7 	bl	80080f8 <xQueueGenericSendFromISR>
 8009f6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20004f30 	.word	0x20004f30

08009f7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b088      	sub	sp, #32
 8009f80:	af02      	add	r7, sp, #8
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f86:	4b22      	ldr	r3, [pc, #136]	; (800a010 <prvProcessExpiredTimer+0x94>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fd fd93 	bl	8007ac0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d022      	beq.n	8009fee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	699a      	ldr	r2, [r3, #24]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	18d1      	adds	r1, r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	6978      	ldr	r0, [r7, #20]
 8009fb6:	f000 f8d1 	bl	800a15c <prvInsertTimerInActiveList>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01f      	beq.n	800a000 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	2100      	movs	r1, #0
 8009fca:	6978      	ldr	r0, [r7, #20]
 8009fcc:	f7ff ff88 	bl	8009ee0 <xTimerGenericCommand>
 8009fd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d113      	bne.n	800a000 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	60fb      	str	r3, [r7, #12]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff4:	f023 0301 	bic.w	r3, r3, #1
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	6978      	ldr	r0, [r7, #20]
 800a006:	4798      	blx	r3
}
 800a008:	bf00      	nop
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20004f28 	.word	0x20004f28

0800a014 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a01c:	f107 0308 	add.w	r3, r7, #8
 800a020:	4618      	mov	r0, r3
 800a022:	f000 f857 	bl	800a0d4 <prvGetNextExpireTime>
 800a026:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4619      	mov	r1, r3
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f803 	bl	800a038 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a032:	f000 f8d5 	bl	800a1e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a036:	e7f1      	b.n	800a01c <prvTimerTask+0x8>

0800a038 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a042:	f7fe fe8f 	bl	8008d64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a046:	f107 0308 	add.w	r3, r7, #8
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 f866 	bl	800a11c <prvSampleTimeNow>
 800a050:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d130      	bne.n	800a0ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <prvProcessTimerOrBlockTask+0x3c>
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	429a      	cmp	r2, r3
 800a064:	d806      	bhi.n	800a074 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a066:	f7fe fe8b 	bl	8008d80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ff85 	bl	8009f7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a072:	e024      	b.n	800a0be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d008      	beq.n	800a08c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <prvProcessTimerOrBlockTask+0x90>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <prvProcessTimerOrBlockTask+0x50>
 800a084:	2301      	movs	r3, #1
 800a086:	e000      	b.n	800a08a <prvProcessTimerOrBlockTask+0x52>
 800a088:	2300      	movs	r3, #0
 800a08a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a08c:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <prvProcessTimerOrBlockTask+0x94>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	4619      	mov	r1, r3
 800a09a:	f7fe fc07 	bl	80088ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a09e:	f7fe fe6f 	bl	8008d80 <xTaskResumeAll>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0a8:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <prvProcessTimerOrBlockTask+0x98>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
}
 800a0b8:	e001      	b.n	800a0be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0ba:	f7fe fe61 	bl	8008d80 <xTaskResumeAll>
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20004f2c 	.word	0x20004f2c
 800a0cc:	20004f30 	.word	0x20004f30
 800a0d0:	e000ed04 	.word	0xe000ed04

0800a0d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <prvGetNextExpireTime+0x44>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <prvGetNextExpireTime+0x16>
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	e000      	b.n	800a0ec <prvGetNextExpireTime+0x18>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d105      	bne.n	800a104 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0f8:	4b07      	ldr	r3, [pc, #28]	; (800a118 <prvGetNextExpireTime+0x44>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e001      	b.n	800a108 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20004f28 	.word	0x20004f28

0800a11c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a124:	f7fe feca 	bl	8008ebc <xTaskGetTickCount>
 800a128:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a12a:	4b0b      	ldr	r3, [pc, #44]	; (800a158 <prvSampleTimeNow+0x3c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	429a      	cmp	r2, r3
 800a132:	d205      	bcs.n	800a140 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a134:	f000 f936 	bl	800a3a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e002      	b.n	800a146 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a146:	4a04      	ldr	r2, [pc, #16]	; (800a158 <prvSampleTimeNow+0x3c>)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a14c:	68fb      	ldr	r3, [r7, #12]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20004f38 	.word	0x20004f38

0800a15c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d812      	bhi.n	800a1a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	1ad2      	subs	r2, r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d302      	bcc.n	800a196 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e01b      	b.n	800a1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a196:	4b10      	ldr	r3, [pc, #64]	; (800a1d8 <prvInsertTimerInActiveList+0x7c>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fd fc54 	bl	8007a4e <vListInsert>
 800a1a6:	e012      	b.n	800a1ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d206      	bcs.n	800a1be <prvInsertTimerInActiveList+0x62>
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d302      	bcc.n	800a1be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	e007      	b.n	800a1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1be:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <prvInsertTimerInActiveList+0x80>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	f7fd fc40 	bl	8007a4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1ce:	697b      	ldr	r3, [r7, #20]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	20004f2c 	.word	0x20004f2c
 800a1dc:	20004f28 	.word	0x20004f28

0800a1e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08e      	sub	sp, #56	; 0x38
 800a1e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1e6:	e0ca      	b.n	800a37e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	da18      	bge.n	800a220 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1ee:	1d3b      	adds	r3, r7, #4
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10a      	bne.n	800a210 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	61fb      	str	r3, [r7, #28]
}
 800a20c:	bf00      	nop
 800a20e:	e7fe      	b.n	800a20e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a216:	6850      	ldr	r0, [r2, #4]
 800a218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a21a:	6892      	ldr	r2, [r2, #8]
 800a21c:	4611      	mov	r1, r2
 800a21e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f2c0 80aa 	blt.w	800a37c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	3304      	adds	r3, #4
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fd fc41 	bl	8007ac0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a23e:	463b      	mov	r3, r7
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff ff6b 	bl	800a11c <prvSampleTimeNow>
 800a246:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b09      	cmp	r3, #9
 800a24c:	f200 8097 	bhi.w	800a37e <prvProcessReceivedCommands+0x19e>
 800a250:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <prvProcessReceivedCommands+0x78>)
 800a252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a256:	bf00      	nop
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a281 	.word	0x0800a281
 800a260:	0800a281 	.word	0x0800a281
 800a264:	0800a2f5 	.word	0x0800a2f5
 800a268:	0800a309 	.word	0x0800a309
 800a26c:	0800a353 	.word	0x0800a353
 800a270:	0800a281 	.word	0x0800a281
 800a274:	0800a281 	.word	0x0800a281
 800a278:	0800a2f5 	.word	0x0800a2f5
 800a27c:	0800a309 	.word	0x0800a309
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	18d1      	adds	r1, r2, r3
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a0:	f7ff ff5c 	bl	800a15c <prvInsertTimerInActiveList>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d069      	beq.n	800a37e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d05e      	beq.n	800a37e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	441a      	add	r2, r3
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d2:	f7ff fe05 	bl	8009ee0 <xTimerGenericCommand>
 800a2d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d14f      	bne.n	800a37e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	61bb      	str	r3, [r7, #24]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2fa:	f023 0301 	bic.w	r3, r3, #1
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a306:	e03a      	b.n	800a37e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a30e:	f043 0301 	orr.w	r3, r3, #1
 800a312:	b2da      	uxtb	r2, r3
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	617b      	str	r3, [r7, #20]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	18d1      	adds	r1, r2, r3
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a34a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a34c:	f7ff ff06 	bl	800a15c <prvInsertTimerInActiveList>
					break;
 800a350:	e015      	b.n	800a37e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d103      	bne.n	800a368 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a362:	f000 fbfd 	bl	800ab60 <vPortFree>
 800a366:	e00a      	b.n	800a37e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a36e:	f023 0301 	bic.w	r3, r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a37a:	e000      	b.n	800a37e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a37c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a37e:	4b08      	ldr	r3, [pc, #32]	; (800a3a0 <prvProcessReceivedCommands+0x1c0>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	1d39      	adds	r1, r7, #4
 800a384:	2200      	movs	r2, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f7fd ff52 	bl	8008230 <xQueueReceive>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f47f af2a 	bne.w	800a1e8 <prvProcessReceivedCommands+0x8>
	}
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	3730      	adds	r7, #48	; 0x30
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20004f30 	.word	0x20004f30

0800a3a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b088      	sub	sp, #32
 800a3a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3aa:	e048      	b.n	800a43e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3ac:	4b2d      	ldr	r3, [pc, #180]	; (800a464 <prvSwitchTimerLists+0xc0>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b6:	4b2b      	ldr	r3, [pc, #172]	; (800a464 <prvSwitchTimerLists+0xc0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fd fb7b 	bl	8007ac0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d02e      	beq.n	800a43e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d90e      	bls.n	800a410 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3fe:	4b19      	ldr	r3, [pc, #100]	; (800a464 <prvSwitchTimerLists+0xc0>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3304      	adds	r3, #4
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f7fd fb20 	bl	8007a4e <vListInsert>
 800a40e:	e016      	b.n	800a43e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a410:	2300      	movs	r3, #0
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	2100      	movs	r1, #0
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff fd60 	bl	8009ee0 <xTimerGenericCommand>
 800a420:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	603b      	str	r3, [r7, #0]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <prvSwitchTimerLists+0xc0>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1b1      	bne.n	800a3ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a448:	4b06      	ldr	r3, [pc, #24]	; (800a464 <prvSwitchTimerLists+0xc0>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a44e:	4b06      	ldr	r3, [pc, #24]	; (800a468 <prvSwitchTimerLists+0xc4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a04      	ldr	r2, [pc, #16]	; (800a464 <prvSwitchTimerLists+0xc0>)
 800a454:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a456:	4a04      	ldr	r2, [pc, #16]	; (800a468 <prvSwitchTimerLists+0xc4>)
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	6013      	str	r3, [r2, #0]
}
 800a45c:	bf00      	nop
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20004f28 	.word	0x20004f28
 800a468:	20004f2c 	.word	0x20004f2c

0800a46c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a472:	f000 f987 	bl	800a784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a476:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d120      	bne.n	800a4c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a47e:	4814      	ldr	r0, [pc, #80]	; (800a4d0 <prvCheckForValidListAndQueue+0x64>)
 800a480:	f7fd fa94 	bl	80079ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a484:	4813      	ldr	r0, [pc, #76]	; (800a4d4 <prvCheckForValidListAndQueue+0x68>)
 800a486:	f7fd fa91 	bl	80079ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a48a:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <prvCheckForValidListAndQueue+0x6c>)
 800a48c:	4a10      	ldr	r2, [pc, #64]	; (800a4d0 <prvCheckForValidListAndQueue+0x64>)
 800a48e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a490:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <prvCheckForValidListAndQueue+0x70>)
 800a492:	4a10      	ldr	r2, [pc, #64]	; (800a4d4 <prvCheckForValidListAndQueue+0x68>)
 800a494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a496:	2300      	movs	r3, #0
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	4b11      	ldr	r3, [pc, #68]	; (800a4e0 <prvCheckForValidListAndQueue+0x74>)
 800a49c:	4a11      	ldr	r2, [pc, #68]	; (800a4e4 <prvCheckForValidListAndQueue+0x78>)
 800a49e:	2110      	movs	r1, #16
 800a4a0:	200a      	movs	r0, #10
 800a4a2:	f7fd fb9f 	bl	8007be4 <xQueueGenericCreateStatic>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4a08      	ldr	r2, [pc, #32]	; (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a4aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4ac:	4b07      	ldr	r3, [pc, #28]	; (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	490b      	ldr	r1, [pc, #44]	; (800a4e8 <prvCheckForValidListAndQueue+0x7c>)
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe f9cc 	bl	8008858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4c0:	f000 f990 	bl	800a7e4 <vPortExitCritical>
}
 800a4c4:	bf00      	nop
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20004f30 	.word	0x20004f30
 800a4d0:	20004f00 	.word	0x20004f00
 800a4d4:	20004f14 	.word	0x20004f14
 800a4d8:	20004f28 	.word	0x20004f28
 800a4dc:	20004f2c 	.word	0x20004f2c
 800a4e0:	20004fdc 	.word	0x20004fdc
 800a4e4:	20004f3c 	.word	0x20004f3c
 800a4e8:	08010250 	.word	0x08010250

0800a4ec <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10a      	bne.n	800a514 <pvTimerGetTimerID+0x28>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	60fb      	str	r3, [r7, #12]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a514:	f000 f936 	bl	800a784 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a51e:	f000 f961 	bl	800a7e4 <vPortExitCritical>

	return pvReturn;
 800a522:	693b      	ldr	r3, [r7, #16]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	3b04      	subs	r3, #4
 800a53c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3b04      	subs	r3, #4
 800a54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f023 0201 	bic.w	r2, r3, #1
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3b04      	subs	r3, #4
 800a55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a55c:	4a0c      	ldr	r2, [pc, #48]	; (800a590 <pxPortInitialiseStack+0x64>)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	3b14      	subs	r3, #20
 800a566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3b04      	subs	r3, #4
 800a572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f06f 0202 	mvn.w	r2, #2
 800a57a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3b20      	subs	r3, #32
 800a580:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a582:	68fb      	ldr	r3, [r7, #12]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	0800a595 	.word	0x0800a595

0800a594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a59e:	4b12      	ldr	r3, [pc, #72]	; (800a5e8 <prvTaskExitError+0x54>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d00a      	beq.n	800a5be <prvTaskExitError+0x2a>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	60fb      	str	r3, [r7, #12]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <prvTaskExitError+0x28>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60bb      	str	r3, [r7, #8]
}
 800a5d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5d2:	bf00      	nop
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0fc      	beq.n	800a5d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5da:	bf00      	nop
 800a5dc:	bf00      	nop
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	200000cc 	.word	0x200000cc
 800a5ec:	00000000 	.word	0x00000000

0800a5f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5f0:	4b07      	ldr	r3, [pc, #28]	; (800a610 <pxCurrentTCBConst2>)
 800a5f2:	6819      	ldr	r1, [r3, #0]
 800a5f4:	6808      	ldr	r0, [r1, #0]
 800a5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fa:	f380 8809 	msr	PSP, r0
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f04f 0000 	mov.w	r0, #0
 800a606:	f380 8811 	msr	BASEPRI, r0
 800a60a:	4770      	bx	lr
 800a60c:	f3af 8000 	nop.w

0800a610 <pxCurrentTCBConst2>:
 800a610:	20004a00 	.word	0x20004a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop

0800a618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a618:	4808      	ldr	r0, [pc, #32]	; (800a63c <prvPortStartFirstTask+0x24>)
 800a61a:	6800      	ldr	r0, [r0, #0]
 800a61c:	6800      	ldr	r0, [r0, #0]
 800a61e:	f380 8808 	msr	MSP, r0
 800a622:	f04f 0000 	mov.w	r0, #0
 800a626:	f380 8814 	msr	CONTROL, r0
 800a62a:	b662      	cpsie	i
 800a62c:	b661      	cpsie	f
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	df00      	svc	0
 800a638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a63a:	bf00      	nop
 800a63c:	e000ed08 	.word	0xe000ed08

0800a640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a646:	4b46      	ldr	r3, [pc, #280]	; (800a760 <xPortStartScheduler+0x120>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a46      	ldr	r2, [pc, #280]	; (800a764 <xPortStartScheduler+0x124>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d10a      	bne.n	800a666 <xPortStartScheduler+0x26>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	613b      	str	r3, [r7, #16]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a666:	4b3e      	ldr	r3, [pc, #248]	; (800a760 <xPortStartScheduler+0x120>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a3f      	ldr	r2, [pc, #252]	; (800a768 <xPortStartScheduler+0x128>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10a      	bne.n	800a686 <xPortStartScheduler+0x46>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	60fb      	str	r3, [r7, #12]
}
 800a682:	bf00      	nop
 800a684:	e7fe      	b.n	800a684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a686:	4b39      	ldr	r3, [pc, #228]	; (800a76c <xPortStartScheduler+0x12c>)
 800a688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	22ff      	movs	r2, #255	; 0xff
 800a696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	4b31      	ldr	r3, [pc, #196]	; (800a770 <xPortStartScheduler+0x130>)
 800a6ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6ae:	4b31      	ldr	r3, [pc, #196]	; (800a774 <xPortStartScheduler+0x134>)
 800a6b0:	2207      	movs	r2, #7
 800a6b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6b4:	e009      	b.n	800a6ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a6b6:	4b2f      	ldr	r3, [pc, #188]	; (800a774 <xPortStartScheduler+0x134>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	4a2d      	ldr	r2, [pc, #180]	; (800a774 <xPortStartScheduler+0x134>)
 800a6be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d2:	2b80      	cmp	r3, #128	; 0x80
 800a6d4:	d0ef      	beq.n	800a6b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6d6:	4b27      	ldr	r3, [pc, #156]	; (800a774 <xPortStartScheduler+0x134>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f1c3 0307 	rsb	r3, r3, #7
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d00a      	beq.n	800a6f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	60bb      	str	r3, [r7, #8]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6f8:	4b1e      	ldr	r3, [pc, #120]	; (800a774 <xPortStartScheduler+0x134>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	4a1d      	ldr	r2, [pc, #116]	; (800a774 <xPortStartScheduler+0x134>)
 800a700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a702:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <xPortStartScheduler+0x134>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a70a:	4a1a      	ldr	r2, [pc, #104]	; (800a774 <xPortStartScheduler+0x134>)
 800a70c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	b2da      	uxtb	r2, r3
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a716:	4b18      	ldr	r3, [pc, #96]	; (800a778 <xPortStartScheduler+0x138>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a17      	ldr	r2, [pc, #92]	; (800a778 <xPortStartScheduler+0x138>)
 800a71c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a722:	4b15      	ldr	r3, [pc, #84]	; (800a778 <xPortStartScheduler+0x138>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a14      	ldr	r2, [pc, #80]	; (800a778 <xPortStartScheduler+0x138>)
 800a728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a72c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a72e:	f000 f8dd 	bl	800a8ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a732:	4b12      	ldr	r3, [pc, #72]	; (800a77c <xPortStartScheduler+0x13c>)
 800a734:	2200      	movs	r2, #0
 800a736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a738:	f000 f8fc 	bl	800a934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a73c:	4b10      	ldr	r3, [pc, #64]	; (800a780 <xPortStartScheduler+0x140>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a0f      	ldr	r2, [pc, #60]	; (800a780 <xPortStartScheduler+0x140>)
 800a742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a748:	f7ff ff66 	bl	800a618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a74c:	f7fe fc80 	bl	8009050 <vTaskSwitchContext>
	prvTaskExitError();
 800a750:	f7ff ff20 	bl	800a594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	e000ed00 	.word	0xe000ed00
 800a764:	410fc271 	.word	0x410fc271
 800a768:	410fc270 	.word	0x410fc270
 800a76c:	e000e400 	.word	0xe000e400
 800a770:	2000502c 	.word	0x2000502c
 800a774:	20005030 	.word	0x20005030
 800a778:	e000ed20 	.word	0xe000ed20
 800a77c:	200000cc 	.word	0x200000cc
 800a780:	e000ef34 	.word	0xe000ef34

0800a784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	607b      	str	r3, [r7, #4]
}
 800a79c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a79e:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <vPortEnterCritical+0x58>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	4a0d      	ldr	r2, [pc, #52]	; (800a7dc <vPortEnterCritical+0x58>)
 800a7a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7a8:	4b0c      	ldr	r3, [pc, #48]	; (800a7dc <vPortEnterCritical+0x58>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d10f      	bne.n	800a7d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7b0:	4b0b      	ldr	r3, [pc, #44]	; (800a7e0 <vPortEnterCritical+0x5c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	603b      	str	r3, [r7, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <vPortEnterCritical+0x4a>
	}
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	200000cc 	.word	0x200000cc
 800a7e0:	e000ed04 	.word	0xe000ed04

0800a7e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7ea:	4b12      	ldr	r3, [pc, #72]	; (800a834 <vPortExitCritical+0x50>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10a      	bne.n	800a808 <vPortExitCritical+0x24>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	607b      	str	r3, [r7, #4]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a808:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <vPortExitCritical+0x50>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	4a09      	ldr	r2, [pc, #36]	; (800a834 <vPortExitCritical+0x50>)
 800a810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a812:	4b08      	ldr	r3, [pc, #32]	; (800a834 <vPortExitCritical+0x50>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d105      	bne.n	800a826 <vPortExitCritical+0x42>
 800a81a:	2300      	movs	r3, #0
 800a81c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	f383 8811 	msr	BASEPRI, r3
}
 800a824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	200000cc 	.word	0x200000cc
	...

0800a840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a840:	f3ef 8009 	mrs	r0, PSP
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	4b15      	ldr	r3, [pc, #84]	; (800a8a0 <pxCurrentTCBConst>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	f01e 0f10 	tst.w	lr, #16
 800a850:	bf08      	it	eq
 800a852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85a:	6010      	str	r0, [r2, #0]
 800a85c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a860:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a864:	f380 8811 	msr	BASEPRI, r0
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f7fe fbee 	bl	8009050 <vTaskSwitchContext>
 800a874:	f04f 0000 	mov.w	r0, #0
 800a878:	f380 8811 	msr	BASEPRI, r0
 800a87c:	bc09      	pop	{r0, r3}
 800a87e:	6819      	ldr	r1, [r3, #0]
 800a880:	6808      	ldr	r0, [r1, #0]
 800a882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a886:	f01e 0f10 	tst.w	lr, #16
 800a88a:	bf08      	it	eq
 800a88c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a890:	f380 8809 	msr	PSP, r0
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	f3af 8000 	nop.w

0800a8a0 <pxCurrentTCBConst>:
 800a8a0:	20004a00 	.word	0x20004a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop

0800a8a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8c2:	f7fe fb0b 	bl	8008edc <xTaskIncrementTick>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8cc:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <xPortSysTickHandler+0x40>)
 800a8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f383 8811 	msr	BASEPRI, r3
}
 800a8de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8e0:	bf00      	nop
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <vPortSetupTimerInterrupt+0x34>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8f6:	4b0b      	ldr	r3, [pc, #44]	; (800a924 <vPortSetupTimerInterrupt+0x38>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <vPortSetupTimerInterrupt+0x3c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a0a      	ldr	r2, [pc, #40]	; (800a92c <vPortSetupTimerInterrupt+0x40>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	099b      	lsrs	r3, r3, #6
 800a908:	4a09      	ldr	r2, [pc, #36]	; (800a930 <vPortSetupTimerInterrupt+0x44>)
 800a90a:	3b01      	subs	r3, #1
 800a90c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a90e:	4b04      	ldr	r3, [pc, #16]	; (800a920 <vPortSetupTimerInterrupt+0x34>)
 800a910:	2207      	movs	r2, #7
 800a912:	601a      	str	r2, [r3, #0]
}
 800a914:	bf00      	nop
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	e000e010 	.word	0xe000e010
 800a924:	e000e018 	.word	0xe000e018
 800a928:	200000c0 	.word	0x200000c0
 800a92c:	10624dd3 	.word	0x10624dd3
 800a930:	e000e014 	.word	0xe000e014

0800a934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a944 <vPortEnableVFP+0x10>
 800a938:	6801      	ldr	r1, [r0, #0]
 800a93a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a93e:	6001      	str	r1, [r0, #0]
 800a940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a942:	bf00      	nop
 800a944:	e000ed88 	.word	0xe000ed88

0800a948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a94e:	f3ef 8305 	mrs	r3, IPSR
 800a952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b0f      	cmp	r3, #15
 800a958:	d914      	bls.n	800a984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a95a:	4a17      	ldr	r2, [pc, #92]	; (800a9b8 <vPortValidateInterruptPriority+0x70>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a964:	4b15      	ldr	r3, [pc, #84]	; (800a9bc <vPortValidateInterruptPriority+0x74>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	7afa      	ldrb	r2, [r7, #11]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d20a      	bcs.n	800a984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	607b      	str	r3, [r7, #4]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a984:	4b0e      	ldr	r3, [pc, #56]	; (800a9c0 <vPortValidateInterruptPriority+0x78>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a98c:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <vPortValidateInterruptPriority+0x7c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d90a      	bls.n	800a9aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	603b      	str	r3, [r7, #0]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <vPortValidateInterruptPriority+0x60>
	}
 800a9aa:	bf00      	nop
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	e000e3f0 	.word	0xe000e3f0
 800a9bc:	2000502c 	.word	0x2000502c
 800a9c0:	e000ed0c 	.word	0xe000ed0c
 800a9c4:	20005030 	.word	0x20005030

0800a9c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08a      	sub	sp, #40	; 0x28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9d4:	f7fe f9c6 	bl	8008d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9d8:	4b5b      	ldr	r3, [pc, #364]	; (800ab48 <pvPortMalloc+0x180>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9e0:	f000 f920 	bl	800ac24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9e4:	4b59      	ldr	r3, [pc, #356]	; (800ab4c <pvPortMalloc+0x184>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f040 8093 	bne.w	800ab18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d01d      	beq.n	800aa34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9f8:	2208      	movs	r2, #8
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d014      	beq.n	800aa34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f023 0307 	bic.w	r3, r3, #7
 800aa10:	3308      	adds	r3, #8
 800aa12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <pvPortMalloc+0x6c>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	617b      	str	r3, [r7, #20]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d06e      	beq.n	800ab18 <pvPortMalloc+0x150>
 800aa3a:	4b45      	ldr	r3, [pc, #276]	; (800ab50 <pvPortMalloc+0x188>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d869      	bhi.n	800ab18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa44:	4b43      	ldr	r3, [pc, #268]	; (800ab54 <pvPortMalloc+0x18c>)
 800aa46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa48:	4b42      	ldr	r3, [pc, #264]	; (800ab54 <pvPortMalloc+0x18c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa4e:	e004      	b.n	800aa5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d903      	bls.n	800aa6c <pvPortMalloc+0xa4>
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1f1      	bne.n	800aa50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa6c:	4b36      	ldr	r3, [pc, #216]	; (800ab48 <pvPortMalloc+0x180>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d050      	beq.n	800ab18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2208      	movs	r2, #8
 800aa7c:	4413      	add	r3, r2
 800aa7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	1ad2      	subs	r2, r2, r3
 800aa90:	2308      	movs	r3, #8
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d91f      	bls.n	800aad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <pvPortMalloc+0xf8>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	613b      	str	r3, [r7, #16]
}
 800aabc:	bf00      	nop
 800aabe:	e7fe      	b.n	800aabe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	1ad2      	subs	r2, r2, r3
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aad2:	69b8      	ldr	r0, [r7, #24]
 800aad4:	f000 f908 	bl	800ace8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aad8:	4b1d      	ldr	r3, [pc, #116]	; (800ab50 <pvPortMalloc+0x188>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	4a1b      	ldr	r2, [pc, #108]	; (800ab50 <pvPortMalloc+0x188>)
 800aae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aae6:	4b1a      	ldr	r3, [pc, #104]	; (800ab50 <pvPortMalloc+0x188>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	4b1b      	ldr	r3, [pc, #108]	; (800ab58 <pvPortMalloc+0x190>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d203      	bcs.n	800aafa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaf2:	4b17      	ldr	r3, [pc, #92]	; (800ab50 <pvPortMalloc+0x188>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a18      	ldr	r2, [pc, #96]	; (800ab58 <pvPortMalloc+0x190>)
 800aaf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	4b13      	ldr	r3, [pc, #76]	; (800ab4c <pvPortMalloc+0x184>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	431a      	orrs	r2, r3
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab0e:	4b13      	ldr	r3, [pc, #76]	; (800ab5c <pvPortMalloc+0x194>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3301      	adds	r3, #1
 800ab14:	4a11      	ldr	r2, [pc, #68]	; (800ab5c <pvPortMalloc+0x194>)
 800ab16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab18:	f7fe f932 	bl	8008d80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00a      	beq.n	800ab3c <pvPortMalloc+0x174>
	__asm volatile
 800ab26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	60fb      	str	r3, [r7, #12]
}
 800ab38:	bf00      	nop
 800ab3a:	e7fe      	b.n	800ab3a <pvPortMalloc+0x172>
	return pvReturn;
 800ab3c:	69fb      	ldr	r3, [r7, #28]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3728      	adds	r7, #40	; 0x28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20006fdc 	.word	0x20006fdc
 800ab4c:	20006ff0 	.word	0x20006ff0
 800ab50:	20006fe0 	.word	0x20006fe0
 800ab54:	20006fd4 	.word	0x20006fd4
 800ab58:	20006fe4 	.word	0x20006fe4
 800ab5c:	20006fe8 	.word	0x20006fe8

0800ab60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d04d      	beq.n	800ac0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab72:	2308      	movs	r3, #8
 800ab74:	425b      	negs	r3, r3
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4413      	add	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	4b24      	ldr	r3, [pc, #144]	; (800ac18 <vPortFree+0xb8>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4013      	ands	r3, r2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10a      	bne.n	800aba4 <vPortFree+0x44>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	60fb      	str	r3, [r7, #12]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <vPortFree+0x62>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	60bb      	str	r3, [r7, #8]
}
 800abbe:	bf00      	nop
 800abc0:	e7fe      	b.n	800abc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <vPortFree+0xb8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4013      	ands	r3, r2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01e      	beq.n	800ac0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d11a      	bne.n	800ac0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <vPortFree+0xb8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	43db      	mvns	r3, r3
 800abe2:	401a      	ands	r2, r3
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abe8:	f7fe f8bc 	bl	8008d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <vPortFree+0xbc>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4413      	add	r3, r2
 800abf6:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <vPortFree+0xbc>)
 800abf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abfa:	6938      	ldr	r0, [r7, #16]
 800abfc:	f000 f874 	bl	800ace8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac00:	4b07      	ldr	r3, [pc, #28]	; (800ac20 <vPortFree+0xc0>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	4a06      	ldr	r2, [pc, #24]	; (800ac20 <vPortFree+0xc0>)
 800ac08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac0a:	f7fe f8b9 	bl	8008d80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac0e:	bf00      	nop
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20006ff0 	.word	0x20006ff0
 800ac1c:	20006fe0 	.word	0x20006fe0
 800ac20:	20006fec 	.word	0x20006fec

0800ac24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac2a:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 800ac2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac30:	4b27      	ldr	r3, [pc, #156]	; (800acd0 <prvHeapInit+0xac>)
 800ac32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00c      	beq.n	800ac58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3307      	adds	r3, #7
 800ac42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 0307 	bic.w	r3, r3, #7
 800ac4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	4a1f      	ldr	r2, [pc, #124]	; (800acd0 <prvHeapInit+0xac>)
 800ac54:	4413      	add	r3, r2
 800ac56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac5c:	4a1d      	ldr	r2, [pc, #116]	; (800acd4 <prvHeapInit+0xb0>)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac62:	4b1c      	ldr	r3, [pc, #112]	; (800acd4 <prvHeapInit+0xb0>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac70:	2208      	movs	r2, #8
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	1a9b      	subs	r3, r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f023 0307 	bic.w	r3, r3, #7
 800ac7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4a15      	ldr	r2, [pc, #84]	; (800acd8 <prvHeapInit+0xb4>)
 800ac84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac86:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <prvHeapInit+0xb4>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac8e:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <prvHeapInit+0xb4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	1ad2      	subs	r2, r2, r3
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aca4:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <prvHeapInit+0xb4>)
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <prvHeapInit+0xb8>)
 800acb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	4a09      	ldr	r2, [pc, #36]	; (800ace0 <prvHeapInit+0xbc>)
 800acba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acbc:	4b09      	ldr	r3, [pc, #36]	; (800ace4 <prvHeapInit+0xc0>)
 800acbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800acc2:	601a      	str	r2, [r3, #0]
}
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	20005034 	.word	0x20005034
 800acd4:	20006fd4 	.word	0x20006fd4
 800acd8:	20006fdc 	.word	0x20006fdc
 800acdc:	20006fe4 	.word	0x20006fe4
 800ace0:	20006fe0 	.word	0x20006fe0
 800ace4:	20006ff0 	.word	0x20006ff0

0800ace8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acf0:	4b28      	ldr	r3, [pc, #160]	; (800ad94 <prvInsertBlockIntoFreeList+0xac>)
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	e002      	b.n	800acfc <prvInsertBlockIntoFreeList+0x14>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d8f7      	bhi.n	800acf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	4413      	add	r3, r2
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d108      	bne.n	800ad2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	441a      	add	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	441a      	add	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d118      	bne.n	800ad70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	4b15      	ldr	r3, [pc, #84]	; (800ad98 <prvInsertBlockIntoFreeList+0xb0>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d00d      	beq.n	800ad66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	441a      	add	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	e008      	b.n	800ad78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad66:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <prvInsertBlockIntoFreeList+0xb0>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	e003      	b.n	800ad78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d002      	beq.n	800ad86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad86:	bf00      	nop
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20006fd4 	.word	0x20006fd4
 800ad98:	20006fdc 	.word	0x20006fdc

0800ad9c <__errno>:
 800ad9c:	4b01      	ldr	r3, [pc, #4]	; (800ada4 <__errno+0x8>)
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	200000d0 	.word	0x200000d0

0800ada8 <std>:
 800ada8:	2300      	movs	r3, #0
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	e9c0 3300 	strd	r3, r3, [r0]
 800adb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adb6:	6083      	str	r3, [r0, #8]
 800adb8:	8181      	strh	r1, [r0, #12]
 800adba:	6643      	str	r3, [r0, #100]	; 0x64
 800adbc:	81c2      	strh	r2, [r0, #14]
 800adbe:	6183      	str	r3, [r0, #24]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2208      	movs	r2, #8
 800adc4:	305c      	adds	r0, #92	; 0x5c
 800adc6:	f000 f91a 	bl	800affe <memset>
 800adca:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <std+0x38>)
 800adcc:	6263      	str	r3, [r4, #36]	; 0x24
 800adce:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <std+0x3c>)
 800add0:	62a3      	str	r3, [r4, #40]	; 0x28
 800add2:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <std+0x40>)
 800add4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <std+0x44>)
 800add8:	6224      	str	r4, [r4, #32]
 800adda:	6323      	str	r3, [r4, #48]	; 0x30
 800addc:	bd10      	pop	{r4, pc}
 800adde:	bf00      	nop
 800ade0:	0800bc1d 	.word	0x0800bc1d
 800ade4:	0800bc3f 	.word	0x0800bc3f
 800ade8:	0800bc77 	.word	0x0800bc77
 800adec:	0800bc9b 	.word	0x0800bc9b

0800adf0 <_cleanup_r>:
 800adf0:	4901      	ldr	r1, [pc, #4]	; (800adf8 <_cleanup_r+0x8>)
 800adf2:	f000 b8af 	b.w	800af54 <_fwalk_reent>
 800adf6:	bf00      	nop
 800adf8:	0800cc69 	.word	0x0800cc69

0800adfc <__sfmoreglue>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	2268      	movs	r2, #104	; 0x68
 800ae00:	1e4d      	subs	r5, r1, #1
 800ae02:	4355      	muls	r5, r2
 800ae04:	460e      	mov	r6, r1
 800ae06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae0a:	f000 f921 	bl	800b050 <_malloc_r>
 800ae0e:	4604      	mov	r4, r0
 800ae10:	b140      	cbz	r0, 800ae24 <__sfmoreglue+0x28>
 800ae12:	2100      	movs	r1, #0
 800ae14:	e9c0 1600 	strd	r1, r6, [r0]
 800ae18:	300c      	adds	r0, #12
 800ae1a:	60a0      	str	r0, [r4, #8]
 800ae1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae20:	f000 f8ed 	bl	800affe <memset>
 800ae24:	4620      	mov	r0, r4
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <__sfp_lock_acquire>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sfp_lock_acquire+0x8>)
 800ae2a:	f000 b8d8 	b.w	800afde <__retarget_lock_acquire_recursive>
 800ae2e:	bf00      	nop
 800ae30:	20006ff5 	.word	0x20006ff5

0800ae34 <__sfp_lock_release>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sfp_lock_release+0x8>)
 800ae36:	f000 b8d3 	b.w	800afe0 <__retarget_lock_release_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20006ff5 	.word	0x20006ff5

0800ae40 <__sinit_lock_acquire>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__sinit_lock_acquire+0x8>)
 800ae42:	f000 b8cc 	b.w	800afde <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20006ff6 	.word	0x20006ff6

0800ae4c <__sinit_lock_release>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__sinit_lock_release+0x8>)
 800ae4e:	f000 b8c7 	b.w	800afe0 <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20006ff6 	.word	0x20006ff6

0800ae58 <__sinit>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	f7ff fff0 	bl	800ae40 <__sinit_lock_acquire>
 800ae60:	69a3      	ldr	r3, [r4, #24]
 800ae62:	b11b      	cbz	r3, 800ae6c <__sinit+0x14>
 800ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae68:	f7ff bff0 	b.w	800ae4c <__sinit_lock_release>
 800ae6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae70:	6523      	str	r3, [r4, #80]	; 0x50
 800ae72:	4b13      	ldr	r3, [pc, #76]	; (800aec0 <__sinit+0x68>)
 800ae74:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <__sinit+0x6c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	bf04      	itt	eq
 800ae7e:	2301      	moveq	r3, #1
 800ae80:	61a3      	streq	r3, [r4, #24]
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f820 	bl	800aec8 <__sfp>
 800ae88:	6060      	str	r0, [r4, #4]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f81c 	bl	800aec8 <__sfp>
 800ae90:	60a0      	str	r0, [r4, #8]
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 f818 	bl	800aec8 <__sfp>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60e0      	str	r0, [r4, #12]
 800ae9c:	2104      	movs	r1, #4
 800ae9e:	6860      	ldr	r0, [r4, #4]
 800aea0:	f7ff ff82 	bl	800ada8 <std>
 800aea4:	68a0      	ldr	r0, [r4, #8]
 800aea6:	2201      	movs	r2, #1
 800aea8:	2109      	movs	r1, #9
 800aeaa:	f7ff ff7d 	bl	800ada8 <std>
 800aeae:	68e0      	ldr	r0, [r4, #12]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	2112      	movs	r1, #18
 800aeb4:	f7ff ff78 	bl	800ada8 <std>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	61a3      	str	r3, [r4, #24]
 800aebc:	e7d2      	b.n	800ae64 <__sinit+0xc>
 800aebe:	bf00      	nop
 800aec0:	08010384 	.word	0x08010384
 800aec4:	0800adf1 	.word	0x0800adf1

0800aec8 <__sfp>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	4607      	mov	r7, r0
 800aecc:	f7ff ffac 	bl	800ae28 <__sfp_lock_acquire>
 800aed0:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <__sfp+0x84>)
 800aed2:	681e      	ldr	r6, [r3, #0]
 800aed4:	69b3      	ldr	r3, [r6, #24]
 800aed6:	b913      	cbnz	r3, 800aede <__sfp+0x16>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ffbd 	bl	800ae58 <__sinit>
 800aede:	3648      	adds	r6, #72	; 0x48
 800aee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	d503      	bpl.n	800aef0 <__sfp+0x28>
 800aee8:	6833      	ldr	r3, [r6, #0]
 800aeea:	b30b      	cbz	r3, 800af30 <__sfp+0x68>
 800aeec:	6836      	ldr	r6, [r6, #0]
 800aeee:	e7f7      	b.n	800aee0 <__sfp+0x18>
 800aef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aef4:	b9d5      	cbnz	r5, 800af2c <__sfp+0x64>
 800aef6:	4b16      	ldr	r3, [pc, #88]	; (800af50 <__sfp+0x88>)
 800aef8:	60e3      	str	r3, [r4, #12]
 800aefa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aefe:	6665      	str	r5, [r4, #100]	; 0x64
 800af00:	f000 f86c 	bl	800afdc <__retarget_lock_init_recursive>
 800af04:	f7ff ff96 	bl	800ae34 <__sfp_lock_release>
 800af08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af10:	6025      	str	r5, [r4, #0]
 800af12:	61a5      	str	r5, [r4, #24]
 800af14:	2208      	movs	r2, #8
 800af16:	4629      	mov	r1, r5
 800af18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af1c:	f000 f86f 	bl	800affe <memset>
 800af20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af28:	4620      	mov	r0, r4
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af2c:	3468      	adds	r4, #104	; 0x68
 800af2e:	e7d9      	b.n	800aee4 <__sfp+0x1c>
 800af30:	2104      	movs	r1, #4
 800af32:	4638      	mov	r0, r7
 800af34:	f7ff ff62 	bl	800adfc <__sfmoreglue>
 800af38:	4604      	mov	r4, r0
 800af3a:	6030      	str	r0, [r6, #0]
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d1d5      	bne.n	800aeec <__sfp+0x24>
 800af40:	f7ff ff78 	bl	800ae34 <__sfp_lock_release>
 800af44:	230c      	movs	r3, #12
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	e7ee      	b.n	800af28 <__sfp+0x60>
 800af4a:	bf00      	nop
 800af4c:	08010384 	.word	0x08010384
 800af50:	ffff0001 	.word	0xffff0001

0800af54 <_fwalk_reent>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4606      	mov	r6, r0
 800af5a:	4688      	mov	r8, r1
 800af5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af60:	2700      	movs	r7, #0
 800af62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af66:	f1b9 0901 	subs.w	r9, r9, #1
 800af6a:	d505      	bpl.n	800af78 <_fwalk_reent+0x24>
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d1f7      	bne.n	800af62 <_fwalk_reent+0xe>
 800af72:	4638      	mov	r0, r7
 800af74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af78:	89ab      	ldrh	r3, [r5, #12]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d907      	bls.n	800af8e <_fwalk_reent+0x3a>
 800af7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af82:	3301      	adds	r3, #1
 800af84:	d003      	beq.n	800af8e <_fwalk_reent+0x3a>
 800af86:	4629      	mov	r1, r5
 800af88:	4630      	mov	r0, r6
 800af8a:	47c0      	blx	r8
 800af8c:	4307      	orrs	r7, r0
 800af8e:	3568      	adds	r5, #104	; 0x68
 800af90:	e7e9      	b.n	800af66 <_fwalk_reent+0x12>
	...

0800af94 <__libc_init_array>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4d0d      	ldr	r5, [pc, #52]	; (800afcc <__libc_init_array+0x38>)
 800af98:	4c0d      	ldr	r4, [pc, #52]	; (800afd0 <__libc_init_array+0x3c>)
 800af9a:	1b64      	subs	r4, r4, r5
 800af9c:	10a4      	asrs	r4, r4, #2
 800af9e:	2600      	movs	r6, #0
 800afa0:	42a6      	cmp	r6, r4
 800afa2:	d109      	bne.n	800afb8 <__libc_init_array+0x24>
 800afa4:	4d0b      	ldr	r5, [pc, #44]	; (800afd4 <__libc_init_array+0x40>)
 800afa6:	4c0c      	ldr	r4, [pc, #48]	; (800afd8 <__libc_init_array+0x44>)
 800afa8:	f005 f8d4 	bl	8010154 <_init>
 800afac:	1b64      	subs	r4, r4, r5
 800afae:	10a4      	asrs	r4, r4, #2
 800afb0:	2600      	movs	r6, #0
 800afb2:	42a6      	cmp	r6, r4
 800afb4:	d105      	bne.n	800afc2 <__libc_init_array+0x2e>
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afbc:	4798      	blx	r3
 800afbe:	3601      	adds	r6, #1
 800afc0:	e7ee      	b.n	800afa0 <__libc_init_array+0xc>
 800afc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc6:	4798      	blx	r3
 800afc8:	3601      	adds	r6, #1
 800afca:	e7f2      	b.n	800afb2 <__libc_init_array+0x1e>
 800afcc:	08010940 	.word	0x08010940
 800afd0:	08010940 	.word	0x08010940
 800afd4:	08010940 	.word	0x08010940
 800afd8:	08010944 	.word	0x08010944

0800afdc <__retarget_lock_init_recursive>:
 800afdc:	4770      	bx	lr

0800afde <__retarget_lock_acquire_recursive>:
 800afde:	4770      	bx	lr

0800afe0 <__retarget_lock_release_recursive>:
 800afe0:	4770      	bx	lr

0800afe2 <memcpy>:
 800afe2:	440a      	add	r2, r1
 800afe4:	4291      	cmp	r1, r2
 800afe6:	f100 33ff 	add.w	r3, r0, #4294967295
 800afea:	d100      	bne.n	800afee <memcpy+0xc>
 800afec:	4770      	bx	lr
 800afee:	b510      	push	{r4, lr}
 800aff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aff8:	4291      	cmp	r1, r2
 800affa:	d1f9      	bne.n	800aff0 <memcpy+0xe>
 800affc:	bd10      	pop	{r4, pc}

0800affe <memset>:
 800affe:	4402      	add	r2, r0
 800b000:	4603      	mov	r3, r0
 800b002:	4293      	cmp	r3, r2
 800b004:	d100      	bne.n	800b008 <memset+0xa>
 800b006:	4770      	bx	lr
 800b008:	f803 1b01 	strb.w	r1, [r3], #1
 800b00c:	e7f9      	b.n	800b002 <memset+0x4>
	...

0800b010 <sbrk_aligned>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	4e0e      	ldr	r6, [pc, #56]	; (800b04c <sbrk_aligned+0x3c>)
 800b014:	460c      	mov	r4, r1
 800b016:	6831      	ldr	r1, [r6, #0]
 800b018:	4605      	mov	r5, r0
 800b01a:	b911      	cbnz	r1, 800b022 <sbrk_aligned+0x12>
 800b01c:	f000 fdee 	bl	800bbfc <_sbrk_r>
 800b020:	6030      	str	r0, [r6, #0]
 800b022:	4621      	mov	r1, r4
 800b024:	4628      	mov	r0, r5
 800b026:	f000 fde9 	bl	800bbfc <_sbrk_r>
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	d00a      	beq.n	800b044 <sbrk_aligned+0x34>
 800b02e:	1cc4      	adds	r4, r0, #3
 800b030:	f024 0403 	bic.w	r4, r4, #3
 800b034:	42a0      	cmp	r0, r4
 800b036:	d007      	beq.n	800b048 <sbrk_aligned+0x38>
 800b038:	1a21      	subs	r1, r4, r0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 fdde 	bl	800bbfc <_sbrk_r>
 800b040:	3001      	adds	r0, #1
 800b042:	d101      	bne.n	800b048 <sbrk_aligned+0x38>
 800b044:	f04f 34ff 	mov.w	r4, #4294967295
 800b048:	4620      	mov	r0, r4
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	20006ffc 	.word	0x20006ffc

0800b050 <_malloc_r>:
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	1ccd      	adds	r5, r1, #3
 800b056:	f025 0503 	bic.w	r5, r5, #3
 800b05a:	3508      	adds	r5, #8
 800b05c:	2d0c      	cmp	r5, #12
 800b05e:	bf38      	it	cc
 800b060:	250c      	movcc	r5, #12
 800b062:	2d00      	cmp	r5, #0
 800b064:	4607      	mov	r7, r0
 800b066:	db01      	blt.n	800b06c <_malloc_r+0x1c>
 800b068:	42a9      	cmp	r1, r5
 800b06a:	d905      	bls.n	800b078 <_malloc_r+0x28>
 800b06c:	230c      	movs	r3, #12
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	2600      	movs	r6, #0
 800b072:	4630      	mov	r0, r6
 800b074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b078:	4e2e      	ldr	r6, [pc, #184]	; (800b134 <_malloc_r+0xe4>)
 800b07a:	f001 feb5 	bl	800cde8 <__malloc_lock>
 800b07e:	6833      	ldr	r3, [r6, #0]
 800b080:	461c      	mov	r4, r3
 800b082:	bb34      	cbnz	r4, 800b0d2 <_malloc_r+0x82>
 800b084:	4629      	mov	r1, r5
 800b086:	4638      	mov	r0, r7
 800b088:	f7ff ffc2 	bl	800b010 <sbrk_aligned>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	4604      	mov	r4, r0
 800b090:	d14d      	bne.n	800b12e <_malloc_r+0xde>
 800b092:	6834      	ldr	r4, [r6, #0]
 800b094:	4626      	mov	r6, r4
 800b096:	2e00      	cmp	r6, #0
 800b098:	d140      	bne.n	800b11c <_malloc_r+0xcc>
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	4631      	mov	r1, r6
 800b09e:	4638      	mov	r0, r7
 800b0a0:	eb04 0803 	add.w	r8, r4, r3
 800b0a4:	f000 fdaa 	bl	800bbfc <_sbrk_r>
 800b0a8:	4580      	cmp	r8, r0
 800b0aa:	d13a      	bne.n	800b122 <_malloc_r+0xd2>
 800b0ac:	6821      	ldr	r1, [r4, #0]
 800b0ae:	3503      	adds	r5, #3
 800b0b0:	1a6d      	subs	r5, r5, r1
 800b0b2:	f025 0503 	bic.w	r5, r5, #3
 800b0b6:	3508      	adds	r5, #8
 800b0b8:	2d0c      	cmp	r5, #12
 800b0ba:	bf38      	it	cc
 800b0bc:	250c      	movcc	r5, #12
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f7ff ffa5 	bl	800b010 <sbrk_aligned>
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d02b      	beq.n	800b122 <_malloc_r+0xd2>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	442b      	add	r3, r5
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	e00e      	b.n	800b0f0 <_malloc_r+0xa0>
 800b0d2:	6822      	ldr	r2, [r4, #0]
 800b0d4:	1b52      	subs	r2, r2, r5
 800b0d6:	d41e      	bmi.n	800b116 <_malloc_r+0xc6>
 800b0d8:	2a0b      	cmp	r2, #11
 800b0da:	d916      	bls.n	800b10a <_malloc_r+0xba>
 800b0dc:	1961      	adds	r1, r4, r5
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	6025      	str	r5, [r4, #0]
 800b0e2:	bf18      	it	ne
 800b0e4:	6059      	strne	r1, [r3, #4]
 800b0e6:	6863      	ldr	r3, [r4, #4]
 800b0e8:	bf08      	it	eq
 800b0ea:	6031      	streq	r1, [r6, #0]
 800b0ec:	5162      	str	r2, [r4, r5]
 800b0ee:	604b      	str	r3, [r1, #4]
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f104 060b 	add.w	r6, r4, #11
 800b0f6:	f001 fe7d 	bl	800cdf4 <__malloc_unlock>
 800b0fa:	f026 0607 	bic.w	r6, r6, #7
 800b0fe:	1d23      	adds	r3, r4, #4
 800b100:	1af2      	subs	r2, r6, r3
 800b102:	d0b6      	beq.n	800b072 <_malloc_r+0x22>
 800b104:	1b9b      	subs	r3, r3, r6
 800b106:	50a3      	str	r3, [r4, r2]
 800b108:	e7b3      	b.n	800b072 <_malloc_r+0x22>
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	bf0c      	ite	eq
 800b110:	6032      	streq	r2, [r6, #0]
 800b112:	605a      	strne	r2, [r3, #4]
 800b114:	e7ec      	b.n	800b0f0 <_malloc_r+0xa0>
 800b116:	4623      	mov	r3, r4
 800b118:	6864      	ldr	r4, [r4, #4]
 800b11a:	e7b2      	b.n	800b082 <_malloc_r+0x32>
 800b11c:	4634      	mov	r4, r6
 800b11e:	6876      	ldr	r6, [r6, #4]
 800b120:	e7b9      	b.n	800b096 <_malloc_r+0x46>
 800b122:	230c      	movs	r3, #12
 800b124:	603b      	str	r3, [r7, #0]
 800b126:	4638      	mov	r0, r7
 800b128:	f001 fe64 	bl	800cdf4 <__malloc_unlock>
 800b12c:	e7a1      	b.n	800b072 <_malloc_r+0x22>
 800b12e:	6025      	str	r5, [r4, #0]
 800b130:	e7de      	b.n	800b0f0 <_malloc_r+0xa0>
 800b132:	bf00      	nop
 800b134:	20006ff8 	.word	0x20006ff8

0800b138 <__cvt>:
 800b138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	ec55 4b10 	vmov	r4, r5, d0
 800b140:	2d00      	cmp	r5, #0
 800b142:	460e      	mov	r6, r1
 800b144:	4619      	mov	r1, r3
 800b146:	462b      	mov	r3, r5
 800b148:	bfbb      	ittet	lt
 800b14a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b14e:	461d      	movlt	r5, r3
 800b150:	2300      	movge	r3, #0
 800b152:	232d      	movlt	r3, #45	; 0x2d
 800b154:	700b      	strb	r3, [r1, #0]
 800b156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b158:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b15c:	4691      	mov	r9, r2
 800b15e:	f023 0820 	bic.w	r8, r3, #32
 800b162:	bfbc      	itt	lt
 800b164:	4622      	movlt	r2, r4
 800b166:	4614      	movlt	r4, r2
 800b168:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b16c:	d005      	beq.n	800b17a <__cvt+0x42>
 800b16e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b172:	d100      	bne.n	800b176 <__cvt+0x3e>
 800b174:	3601      	adds	r6, #1
 800b176:	2102      	movs	r1, #2
 800b178:	e000      	b.n	800b17c <__cvt+0x44>
 800b17a:	2103      	movs	r1, #3
 800b17c:	ab03      	add	r3, sp, #12
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	ab02      	add	r3, sp, #8
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	ec45 4b10 	vmov	d0, r4, r5
 800b188:	4653      	mov	r3, sl
 800b18a:	4632      	mov	r2, r6
 800b18c:	f000 fef8 	bl	800bf80 <_dtoa_r>
 800b190:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b194:	4607      	mov	r7, r0
 800b196:	d102      	bne.n	800b19e <__cvt+0x66>
 800b198:	f019 0f01 	tst.w	r9, #1
 800b19c:	d022      	beq.n	800b1e4 <__cvt+0xac>
 800b19e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1a2:	eb07 0906 	add.w	r9, r7, r6
 800b1a6:	d110      	bne.n	800b1ca <__cvt+0x92>
 800b1a8:	783b      	ldrb	r3, [r7, #0]
 800b1aa:	2b30      	cmp	r3, #48	; 0x30
 800b1ac:	d10a      	bne.n	800b1c4 <__cvt+0x8c>
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7f5 fcaf 	bl	8000b18 <__aeabi_dcmpeq>
 800b1ba:	b918      	cbnz	r0, 800b1c4 <__cvt+0x8c>
 800b1bc:	f1c6 0601 	rsb	r6, r6, #1
 800b1c0:	f8ca 6000 	str.w	r6, [sl]
 800b1c4:	f8da 3000 	ldr.w	r3, [sl]
 800b1c8:	4499      	add	r9, r3
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f5 fca1 	bl	8000b18 <__aeabi_dcmpeq>
 800b1d6:	b108      	cbz	r0, 800b1dc <__cvt+0xa4>
 800b1d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1dc:	2230      	movs	r2, #48	; 0x30
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	454b      	cmp	r3, r9
 800b1e2:	d307      	bcc.n	800b1f4 <__cvt+0xbc>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1e8:	1bdb      	subs	r3, r3, r7
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	b004      	add	sp, #16
 800b1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f4:	1c59      	adds	r1, r3, #1
 800b1f6:	9103      	str	r1, [sp, #12]
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	e7f0      	b.n	800b1de <__cvt+0xa6>

0800b1fc <__exponent>:
 800b1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1fe:	4603      	mov	r3, r0
 800b200:	2900      	cmp	r1, #0
 800b202:	bfb8      	it	lt
 800b204:	4249      	neglt	r1, r1
 800b206:	f803 2b02 	strb.w	r2, [r3], #2
 800b20a:	bfb4      	ite	lt
 800b20c:	222d      	movlt	r2, #45	; 0x2d
 800b20e:	222b      	movge	r2, #43	; 0x2b
 800b210:	2909      	cmp	r1, #9
 800b212:	7042      	strb	r2, [r0, #1]
 800b214:	dd2a      	ble.n	800b26c <__exponent+0x70>
 800b216:	f10d 0407 	add.w	r4, sp, #7
 800b21a:	46a4      	mov	ip, r4
 800b21c:	270a      	movs	r7, #10
 800b21e:	46a6      	mov	lr, r4
 800b220:	460a      	mov	r2, r1
 800b222:	fb91 f6f7 	sdiv	r6, r1, r7
 800b226:	fb07 1516 	mls	r5, r7, r6, r1
 800b22a:	3530      	adds	r5, #48	; 0x30
 800b22c:	2a63      	cmp	r2, #99	; 0x63
 800b22e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b232:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b236:	4631      	mov	r1, r6
 800b238:	dcf1      	bgt.n	800b21e <__exponent+0x22>
 800b23a:	3130      	adds	r1, #48	; 0x30
 800b23c:	f1ae 0502 	sub.w	r5, lr, #2
 800b240:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b244:	1c44      	adds	r4, r0, #1
 800b246:	4629      	mov	r1, r5
 800b248:	4561      	cmp	r1, ip
 800b24a:	d30a      	bcc.n	800b262 <__exponent+0x66>
 800b24c:	f10d 0209 	add.w	r2, sp, #9
 800b250:	eba2 020e 	sub.w	r2, r2, lr
 800b254:	4565      	cmp	r5, ip
 800b256:	bf88      	it	hi
 800b258:	2200      	movhi	r2, #0
 800b25a:	4413      	add	r3, r2
 800b25c:	1a18      	subs	r0, r3, r0
 800b25e:	b003      	add	sp, #12
 800b260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b262:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b266:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b26a:	e7ed      	b.n	800b248 <__exponent+0x4c>
 800b26c:	2330      	movs	r3, #48	; 0x30
 800b26e:	3130      	adds	r1, #48	; 0x30
 800b270:	7083      	strb	r3, [r0, #2]
 800b272:	70c1      	strb	r1, [r0, #3]
 800b274:	1d03      	adds	r3, r0, #4
 800b276:	e7f1      	b.n	800b25c <__exponent+0x60>

0800b278 <_printf_float>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	ed2d 8b02 	vpush	{d8}
 800b280:	b08d      	sub	sp, #52	; 0x34
 800b282:	460c      	mov	r4, r1
 800b284:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b288:	4616      	mov	r6, r2
 800b28a:	461f      	mov	r7, r3
 800b28c:	4605      	mov	r5, r0
 800b28e:	f001 fd27 	bl	800cce0 <_localeconv_r>
 800b292:	f8d0 a000 	ldr.w	sl, [r0]
 800b296:	4650      	mov	r0, sl
 800b298:	f7f4 ffc2 	bl	8000220 <strlen>
 800b29c:	2300      	movs	r3, #0
 800b29e:	930a      	str	r3, [sp, #40]	; 0x28
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	9305      	str	r3, [sp, #20]
 800b2a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b2ac:	3307      	adds	r3, #7
 800b2ae:	f023 0307 	bic.w	r3, r3, #7
 800b2b2:	f103 0208 	add.w	r2, r3, #8
 800b2b6:	f8c8 2000 	str.w	r2, [r8]
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b2c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b2c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2ca:	9307      	str	r3, [sp, #28]
 800b2cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2d0:	ee08 0a10 	vmov	s16, r0
 800b2d4:	4b9f      	ldr	r3, [pc, #636]	; (800b554 <_printf_float+0x2dc>)
 800b2d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2da:	f04f 32ff 	mov.w	r2, #4294967295
 800b2de:	f7f5 fc4d 	bl	8000b7c <__aeabi_dcmpun>
 800b2e2:	bb88      	cbnz	r0, 800b348 <_printf_float+0xd0>
 800b2e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2e8:	4b9a      	ldr	r3, [pc, #616]	; (800b554 <_printf_float+0x2dc>)
 800b2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ee:	f7f5 fc27 	bl	8000b40 <__aeabi_dcmple>
 800b2f2:	bb48      	cbnz	r0, 800b348 <_printf_float+0xd0>
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	f7f5 fc16 	bl	8000b2c <__aeabi_dcmplt>
 800b300:	b110      	cbz	r0, 800b308 <_printf_float+0x90>
 800b302:	232d      	movs	r3, #45	; 0x2d
 800b304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b308:	4b93      	ldr	r3, [pc, #588]	; (800b558 <_printf_float+0x2e0>)
 800b30a:	4894      	ldr	r0, [pc, #592]	; (800b55c <_printf_float+0x2e4>)
 800b30c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b310:	bf94      	ite	ls
 800b312:	4698      	movls	r8, r3
 800b314:	4680      	movhi	r8, r0
 800b316:	2303      	movs	r3, #3
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	f023 0204 	bic.w	r2, r3, #4
 800b320:	6022      	str	r2, [r4, #0]
 800b322:	f04f 0900 	mov.w	r9, #0
 800b326:	9700      	str	r7, [sp, #0]
 800b328:	4633      	mov	r3, r6
 800b32a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 f9d8 	bl	800b6e4 <_printf_common>
 800b334:	3001      	adds	r0, #1
 800b336:	f040 8090 	bne.w	800b45a <_printf_float+0x1e2>
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	b00d      	add	sp, #52	; 0x34
 800b340:	ecbd 8b02 	vpop	{d8}
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b348:	4642      	mov	r2, r8
 800b34a:	464b      	mov	r3, r9
 800b34c:	4640      	mov	r0, r8
 800b34e:	4649      	mov	r1, r9
 800b350:	f7f5 fc14 	bl	8000b7c <__aeabi_dcmpun>
 800b354:	b140      	cbz	r0, 800b368 <_printf_float+0xf0>
 800b356:	464b      	mov	r3, r9
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bfbc      	itt	lt
 800b35c:	232d      	movlt	r3, #45	; 0x2d
 800b35e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b362:	487f      	ldr	r0, [pc, #508]	; (800b560 <_printf_float+0x2e8>)
 800b364:	4b7f      	ldr	r3, [pc, #508]	; (800b564 <_printf_float+0x2ec>)
 800b366:	e7d1      	b.n	800b30c <_printf_float+0x94>
 800b368:	6863      	ldr	r3, [r4, #4]
 800b36a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b36e:	9206      	str	r2, [sp, #24]
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	d13f      	bne.n	800b3f4 <_printf_float+0x17c>
 800b374:	2306      	movs	r3, #6
 800b376:	6063      	str	r3, [r4, #4]
 800b378:	9b05      	ldr	r3, [sp, #20]
 800b37a:	6861      	ldr	r1, [r4, #4]
 800b37c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b380:	2300      	movs	r3, #0
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	ab0a      	add	r3, sp, #40	; 0x28
 800b386:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b38a:	ab09      	add	r3, sp, #36	; 0x24
 800b38c:	ec49 8b10 	vmov	d0, r8, r9
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	6022      	str	r2, [r4, #0]
 800b394:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b398:	4628      	mov	r0, r5
 800b39a:	f7ff fecd 	bl	800b138 <__cvt>
 800b39e:	9b06      	ldr	r3, [sp, #24]
 800b3a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3a2:	2b47      	cmp	r3, #71	; 0x47
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	d108      	bne.n	800b3ba <_printf_float+0x142>
 800b3a8:	1cc8      	adds	r0, r1, #3
 800b3aa:	db02      	blt.n	800b3b2 <_printf_float+0x13a>
 800b3ac:	6863      	ldr	r3, [r4, #4]
 800b3ae:	4299      	cmp	r1, r3
 800b3b0:	dd41      	ble.n	800b436 <_printf_float+0x1be>
 800b3b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b3b6:	fa5f fb8b 	uxtb.w	fp, fp
 800b3ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b3be:	d820      	bhi.n	800b402 <_printf_float+0x18a>
 800b3c0:	3901      	subs	r1, #1
 800b3c2:	465a      	mov	r2, fp
 800b3c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b3c8:	9109      	str	r1, [sp, #36]	; 0x24
 800b3ca:	f7ff ff17 	bl	800b1fc <__exponent>
 800b3ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d0:	1813      	adds	r3, r2, r0
 800b3d2:	2a01      	cmp	r2, #1
 800b3d4:	4681      	mov	r9, r0
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	dc02      	bgt.n	800b3e0 <_printf_float+0x168>
 800b3da:	6822      	ldr	r2, [r4, #0]
 800b3dc:	07d2      	lsls	r2, r2, #31
 800b3de:	d501      	bpl.n	800b3e4 <_printf_float+0x16c>
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	6123      	str	r3, [r4, #16]
 800b3e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d09c      	beq.n	800b326 <_printf_float+0xae>
 800b3ec:	232d      	movs	r3, #45	; 0x2d
 800b3ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3f2:	e798      	b.n	800b326 <_printf_float+0xae>
 800b3f4:	9a06      	ldr	r2, [sp, #24]
 800b3f6:	2a47      	cmp	r2, #71	; 0x47
 800b3f8:	d1be      	bne.n	800b378 <_printf_float+0x100>
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1bc      	bne.n	800b378 <_printf_float+0x100>
 800b3fe:	2301      	movs	r3, #1
 800b400:	e7b9      	b.n	800b376 <_printf_float+0xfe>
 800b402:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b406:	d118      	bne.n	800b43a <_printf_float+0x1c2>
 800b408:	2900      	cmp	r1, #0
 800b40a:	6863      	ldr	r3, [r4, #4]
 800b40c:	dd0b      	ble.n	800b426 <_printf_float+0x1ae>
 800b40e:	6121      	str	r1, [r4, #16]
 800b410:	b913      	cbnz	r3, 800b418 <_printf_float+0x1a0>
 800b412:	6822      	ldr	r2, [r4, #0]
 800b414:	07d0      	lsls	r0, r2, #31
 800b416:	d502      	bpl.n	800b41e <_printf_float+0x1a6>
 800b418:	3301      	adds	r3, #1
 800b41a:	440b      	add	r3, r1
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b420:	f04f 0900 	mov.w	r9, #0
 800b424:	e7de      	b.n	800b3e4 <_printf_float+0x16c>
 800b426:	b913      	cbnz	r3, 800b42e <_printf_float+0x1b6>
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	07d2      	lsls	r2, r2, #31
 800b42c:	d501      	bpl.n	800b432 <_printf_float+0x1ba>
 800b42e:	3302      	adds	r3, #2
 800b430:	e7f4      	b.n	800b41c <_printf_float+0x1a4>
 800b432:	2301      	movs	r3, #1
 800b434:	e7f2      	b.n	800b41c <_printf_float+0x1a4>
 800b436:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43c:	4299      	cmp	r1, r3
 800b43e:	db05      	blt.n	800b44c <_printf_float+0x1d4>
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	6121      	str	r1, [r4, #16]
 800b444:	07d8      	lsls	r0, r3, #31
 800b446:	d5ea      	bpl.n	800b41e <_printf_float+0x1a6>
 800b448:	1c4b      	adds	r3, r1, #1
 800b44a:	e7e7      	b.n	800b41c <_printf_float+0x1a4>
 800b44c:	2900      	cmp	r1, #0
 800b44e:	bfd4      	ite	le
 800b450:	f1c1 0202 	rsble	r2, r1, #2
 800b454:	2201      	movgt	r2, #1
 800b456:	4413      	add	r3, r2
 800b458:	e7e0      	b.n	800b41c <_printf_float+0x1a4>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	055a      	lsls	r2, r3, #21
 800b45e:	d407      	bmi.n	800b470 <_printf_float+0x1f8>
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	4642      	mov	r2, r8
 800b464:	4631      	mov	r1, r6
 800b466:	4628      	mov	r0, r5
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	d12c      	bne.n	800b4c8 <_printf_float+0x250>
 800b46e:	e764      	b.n	800b33a <_printf_float+0xc2>
 800b470:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b474:	f240 80e0 	bls.w	800b638 <_printf_float+0x3c0>
 800b478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b47c:	2200      	movs	r2, #0
 800b47e:	2300      	movs	r3, #0
 800b480:	f7f5 fb4a 	bl	8000b18 <__aeabi_dcmpeq>
 800b484:	2800      	cmp	r0, #0
 800b486:	d034      	beq.n	800b4f2 <_printf_float+0x27a>
 800b488:	4a37      	ldr	r2, [pc, #220]	; (800b568 <_printf_float+0x2f0>)
 800b48a:	2301      	movs	r3, #1
 800b48c:	4631      	mov	r1, r6
 800b48e:	4628      	mov	r0, r5
 800b490:	47b8      	blx	r7
 800b492:	3001      	adds	r0, #1
 800b494:	f43f af51 	beq.w	800b33a <_printf_float+0xc2>
 800b498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b49c:	429a      	cmp	r2, r3
 800b49e:	db02      	blt.n	800b4a6 <_printf_float+0x22e>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	07d8      	lsls	r0, r3, #31
 800b4a4:	d510      	bpl.n	800b4c8 <_printf_float+0x250>
 800b4a6:	ee18 3a10 	vmov	r3, s16
 800b4aa:	4652      	mov	r2, sl
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	47b8      	blx	r7
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	f43f af41 	beq.w	800b33a <_printf_float+0xc2>
 800b4b8:	f04f 0800 	mov.w	r8, #0
 800b4bc:	f104 091a 	add.w	r9, r4, #26
 800b4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	4543      	cmp	r3, r8
 800b4c6:	dc09      	bgt.n	800b4dc <_printf_float+0x264>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	079b      	lsls	r3, r3, #30
 800b4cc:	f100 8105 	bmi.w	800b6da <_printf_float+0x462>
 800b4d0:	68e0      	ldr	r0, [r4, #12]
 800b4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d4:	4298      	cmp	r0, r3
 800b4d6:	bfb8      	it	lt
 800b4d8:	4618      	movlt	r0, r3
 800b4da:	e730      	b.n	800b33e <_printf_float+0xc6>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	464a      	mov	r2, r9
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	47b8      	blx	r7
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	f43f af27 	beq.w	800b33a <_printf_float+0xc2>
 800b4ec:	f108 0801 	add.w	r8, r8, #1
 800b4f0:	e7e6      	b.n	800b4c0 <_printf_float+0x248>
 800b4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dc39      	bgt.n	800b56c <_printf_float+0x2f4>
 800b4f8:	4a1b      	ldr	r2, [pc, #108]	; (800b568 <_printf_float+0x2f0>)
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	f43f af19 	beq.w	800b33a <_printf_float+0xc2>
 800b508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b50c:	4313      	orrs	r3, r2
 800b50e:	d102      	bne.n	800b516 <_printf_float+0x29e>
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	07d9      	lsls	r1, r3, #31
 800b514:	d5d8      	bpl.n	800b4c8 <_printf_float+0x250>
 800b516:	ee18 3a10 	vmov	r3, s16
 800b51a:	4652      	mov	r2, sl
 800b51c:	4631      	mov	r1, r6
 800b51e:	4628      	mov	r0, r5
 800b520:	47b8      	blx	r7
 800b522:	3001      	adds	r0, #1
 800b524:	f43f af09 	beq.w	800b33a <_printf_float+0xc2>
 800b528:	f04f 0900 	mov.w	r9, #0
 800b52c:	f104 0a1a 	add.w	sl, r4, #26
 800b530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b532:	425b      	negs	r3, r3
 800b534:	454b      	cmp	r3, r9
 800b536:	dc01      	bgt.n	800b53c <_printf_float+0x2c4>
 800b538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b53a:	e792      	b.n	800b462 <_printf_float+0x1ea>
 800b53c:	2301      	movs	r3, #1
 800b53e:	4652      	mov	r2, sl
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	f43f aef7 	beq.w	800b33a <_printf_float+0xc2>
 800b54c:	f109 0901 	add.w	r9, r9, #1
 800b550:	e7ee      	b.n	800b530 <_printf_float+0x2b8>
 800b552:	bf00      	nop
 800b554:	7fefffff 	.word	0x7fefffff
 800b558:	08010388 	.word	0x08010388
 800b55c:	0801038c 	.word	0x0801038c
 800b560:	08010394 	.word	0x08010394
 800b564:	08010390 	.word	0x08010390
 800b568:	08010398 	.word	0x08010398
 800b56c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b56e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b570:	429a      	cmp	r2, r3
 800b572:	bfa8      	it	ge
 800b574:	461a      	movge	r2, r3
 800b576:	2a00      	cmp	r2, #0
 800b578:	4691      	mov	r9, r2
 800b57a:	dc37      	bgt.n	800b5ec <_printf_float+0x374>
 800b57c:	f04f 0b00 	mov.w	fp, #0
 800b580:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b584:	f104 021a 	add.w	r2, r4, #26
 800b588:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b58a:	9305      	str	r3, [sp, #20]
 800b58c:	eba3 0309 	sub.w	r3, r3, r9
 800b590:	455b      	cmp	r3, fp
 800b592:	dc33      	bgt.n	800b5fc <_printf_float+0x384>
 800b594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b598:	429a      	cmp	r2, r3
 800b59a:	db3b      	blt.n	800b614 <_printf_float+0x39c>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	07da      	lsls	r2, r3, #31
 800b5a0:	d438      	bmi.n	800b614 <_printf_float+0x39c>
 800b5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a4:	9a05      	ldr	r2, [sp, #20]
 800b5a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5a8:	1a9a      	subs	r2, r3, r2
 800b5aa:	eba3 0901 	sub.w	r9, r3, r1
 800b5ae:	4591      	cmp	r9, r2
 800b5b0:	bfa8      	it	ge
 800b5b2:	4691      	movge	r9, r2
 800b5b4:	f1b9 0f00 	cmp.w	r9, #0
 800b5b8:	dc35      	bgt.n	800b626 <_printf_float+0x3ae>
 800b5ba:	f04f 0800 	mov.w	r8, #0
 800b5be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5c2:	f104 0a1a 	add.w	sl, r4, #26
 800b5c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	eba3 0309 	sub.w	r3, r3, r9
 800b5d0:	4543      	cmp	r3, r8
 800b5d2:	f77f af79 	ble.w	800b4c8 <_printf_float+0x250>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4652      	mov	r2, sl
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f43f aeaa 	beq.w	800b33a <_printf_float+0xc2>
 800b5e6:	f108 0801 	add.w	r8, r8, #1
 800b5ea:	e7ec      	b.n	800b5c6 <_printf_float+0x34e>
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	4642      	mov	r2, r8
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	47b8      	blx	r7
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	d1c0      	bne.n	800b57c <_printf_float+0x304>
 800b5fa:	e69e      	b.n	800b33a <_printf_float+0xc2>
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	4631      	mov	r1, r6
 800b600:	4628      	mov	r0, r5
 800b602:	9205      	str	r2, [sp, #20]
 800b604:	47b8      	blx	r7
 800b606:	3001      	adds	r0, #1
 800b608:	f43f ae97 	beq.w	800b33a <_printf_float+0xc2>
 800b60c:	9a05      	ldr	r2, [sp, #20]
 800b60e:	f10b 0b01 	add.w	fp, fp, #1
 800b612:	e7b9      	b.n	800b588 <_printf_float+0x310>
 800b614:	ee18 3a10 	vmov	r3, s16
 800b618:	4652      	mov	r2, sl
 800b61a:	4631      	mov	r1, r6
 800b61c:	4628      	mov	r0, r5
 800b61e:	47b8      	blx	r7
 800b620:	3001      	adds	r0, #1
 800b622:	d1be      	bne.n	800b5a2 <_printf_float+0x32a>
 800b624:	e689      	b.n	800b33a <_printf_float+0xc2>
 800b626:	9a05      	ldr	r2, [sp, #20]
 800b628:	464b      	mov	r3, r9
 800b62a:	4442      	add	r2, r8
 800b62c:	4631      	mov	r1, r6
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	d1c1      	bne.n	800b5ba <_printf_float+0x342>
 800b636:	e680      	b.n	800b33a <_printf_float+0xc2>
 800b638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b63a:	2a01      	cmp	r2, #1
 800b63c:	dc01      	bgt.n	800b642 <_printf_float+0x3ca>
 800b63e:	07db      	lsls	r3, r3, #31
 800b640:	d538      	bpl.n	800b6b4 <_printf_float+0x43c>
 800b642:	2301      	movs	r3, #1
 800b644:	4642      	mov	r2, r8
 800b646:	4631      	mov	r1, r6
 800b648:	4628      	mov	r0, r5
 800b64a:	47b8      	blx	r7
 800b64c:	3001      	adds	r0, #1
 800b64e:	f43f ae74 	beq.w	800b33a <_printf_float+0xc2>
 800b652:	ee18 3a10 	vmov	r3, s16
 800b656:	4652      	mov	r2, sl
 800b658:	4631      	mov	r1, r6
 800b65a:	4628      	mov	r0, r5
 800b65c:	47b8      	blx	r7
 800b65e:	3001      	adds	r0, #1
 800b660:	f43f ae6b 	beq.w	800b33a <_printf_float+0xc2>
 800b664:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b668:	2200      	movs	r2, #0
 800b66a:	2300      	movs	r3, #0
 800b66c:	f7f5 fa54 	bl	8000b18 <__aeabi_dcmpeq>
 800b670:	b9d8      	cbnz	r0, 800b6aa <_printf_float+0x432>
 800b672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b674:	f108 0201 	add.w	r2, r8, #1
 800b678:	3b01      	subs	r3, #1
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	d10e      	bne.n	800b6a2 <_printf_float+0x42a>
 800b684:	e659      	b.n	800b33a <_printf_float+0xc2>
 800b686:	2301      	movs	r3, #1
 800b688:	4652      	mov	r2, sl
 800b68a:	4631      	mov	r1, r6
 800b68c:	4628      	mov	r0, r5
 800b68e:	47b8      	blx	r7
 800b690:	3001      	adds	r0, #1
 800b692:	f43f ae52 	beq.w	800b33a <_printf_float+0xc2>
 800b696:	f108 0801 	add.w	r8, r8, #1
 800b69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b69c:	3b01      	subs	r3, #1
 800b69e:	4543      	cmp	r3, r8
 800b6a0:	dcf1      	bgt.n	800b686 <_printf_float+0x40e>
 800b6a2:	464b      	mov	r3, r9
 800b6a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6a8:	e6dc      	b.n	800b464 <_printf_float+0x1ec>
 800b6aa:	f04f 0800 	mov.w	r8, #0
 800b6ae:	f104 0a1a 	add.w	sl, r4, #26
 800b6b2:	e7f2      	b.n	800b69a <_printf_float+0x422>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4642      	mov	r2, r8
 800b6b8:	e7df      	b.n	800b67a <_printf_float+0x402>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	464a      	mov	r2, r9
 800b6be:	4631      	mov	r1, r6
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	47b8      	blx	r7
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	f43f ae38 	beq.w	800b33a <_printf_float+0xc2>
 800b6ca:	f108 0801 	add.w	r8, r8, #1
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6d2:	1a5b      	subs	r3, r3, r1
 800b6d4:	4543      	cmp	r3, r8
 800b6d6:	dcf0      	bgt.n	800b6ba <_printf_float+0x442>
 800b6d8:	e6fa      	b.n	800b4d0 <_printf_float+0x258>
 800b6da:	f04f 0800 	mov.w	r8, #0
 800b6de:	f104 0919 	add.w	r9, r4, #25
 800b6e2:	e7f4      	b.n	800b6ce <_printf_float+0x456>

0800b6e4 <_printf_common>:
 800b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	4699      	mov	r9, r3
 800b6ec:	688a      	ldr	r2, [r1, #8]
 800b6ee:	690b      	ldr	r3, [r1, #16]
 800b6f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	bfb8      	it	lt
 800b6f8:	4613      	movlt	r3, r2
 800b6fa:	6033      	str	r3, [r6, #0]
 800b6fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b700:	4607      	mov	r7, r0
 800b702:	460c      	mov	r4, r1
 800b704:	b10a      	cbz	r2, 800b70a <_printf_common+0x26>
 800b706:	3301      	adds	r3, #1
 800b708:	6033      	str	r3, [r6, #0]
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	0699      	lsls	r1, r3, #26
 800b70e:	bf42      	ittt	mi
 800b710:	6833      	ldrmi	r3, [r6, #0]
 800b712:	3302      	addmi	r3, #2
 800b714:	6033      	strmi	r3, [r6, #0]
 800b716:	6825      	ldr	r5, [r4, #0]
 800b718:	f015 0506 	ands.w	r5, r5, #6
 800b71c:	d106      	bne.n	800b72c <_printf_common+0x48>
 800b71e:	f104 0a19 	add.w	sl, r4, #25
 800b722:	68e3      	ldr	r3, [r4, #12]
 800b724:	6832      	ldr	r2, [r6, #0]
 800b726:	1a9b      	subs	r3, r3, r2
 800b728:	42ab      	cmp	r3, r5
 800b72a:	dc26      	bgt.n	800b77a <_printf_common+0x96>
 800b72c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b730:	1e13      	subs	r3, r2, #0
 800b732:	6822      	ldr	r2, [r4, #0]
 800b734:	bf18      	it	ne
 800b736:	2301      	movne	r3, #1
 800b738:	0692      	lsls	r2, r2, #26
 800b73a:	d42b      	bmi.n	800b794 <_printf_common+0xb0>
 800b73c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b740:	4649      	mov	r1, r9
 800b742:	4638      	mov	r0, r7
 800b744:	47c0      	blx	r8
 800b746:	3001      	adds	r0, #1
 800b748:	d01e      	beq.n	800b788 <_printf_common+0xa4>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	68e5      	ldr	r5, [r4, #12]
 800b74e:	6832      	ldr	r2, [r6, #0]
 800b750:	f003 0306 	and.w	r3, r3, #6
 800b754:	2b04      	cmp	r3, #4
 800b756:	bf08      	it	eq
 800b758:	1aad      	subeq	r5, r5, r2
 800b75a:	68a3      	ldr	r3, [r4, #8]
 800b75c:	6922      	ldr	r2, [r4, #16]
 800b75e:	bf0c      	ite	eq
 800b760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b764:	2500      	movne	r5, #0
 800b766:	4293      	cmp	r3, r2
 800b768:	bfc4      	itt	gt
 800b76a:	1a9b      	subgt	r3, r3, r2
 800b76c:	18ed      	addgt	r5, r5, r3
 800b76e:	2600      	movs	r6, #0
 800b770:	341a      	adds	r4, #26
 800b772:	42b5      	cmp	r5, r6
 800b774:	d11a      	bne.n	800b7ac <_printf_common+0xc8>
 800b776:	2000      	movs	r0, #0
 800b778:	e008      	b.n	800b78c <_printf_common+0xa8>
 800b77a:	2301      	movs	r3, #1
 800b77c:	4652      	mov	r2, sl
 800b77e:	4649      	mov	r1, r9
 800b780:	4638      	mov	r0, r7
 800b782:	47c0      	blx	r8
 800b784:	3001      	adds	r0, #1
 800b786:	d103      	bne.n	800b790 <_printf_common+0xac>
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b790:	3501      	adds	r5, #1
 800b792:	e7c6      	b.n	800b722 <_printf_common+0x3e>
 800b794:	18e1      	adds	r1, r4, r3
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	2030      	movs	r0, #48	; 0x30
 800b79a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b79e:	4422      	add	r2, r4
 800b7a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	e7c7      	b.n	800b73c <_printf_common+0x58>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	47c0      	blx	r8
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	d0e6      	beq.n	800b788 <_printf_common+0xa4>
 800b7ba:	3601      	adds	r6, #1
 800b7bc:	e7d9      	b.n	800b772 <_printf_common+0x8e>
	...

0800b7c0 <_printf_i>:
 800b7c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c4:	7e0f      	ldrb	r7, [r1, #24]
 800b7c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7c8:	2f78      	cmp	r7, #120	; 0x78
 800b7ca:	4691      	mov	r9, r2
 800b7cc:	4680      	mov	r8, r0
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	469a      	mov	sl, r3
 800b7d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7d6:	d807      	bhi.n	800b7e8 <_printf_i+0x28>
 800b7d8:	2f62      	cmp	r7, #98	; 0x62
 800b7da:	d80a      	bhi.n	800b7f2 <_printf_i+0x32>
 800b7dc:	2f00      	cmp	r7, #0
 800b7de:	f000 80d8 	beq.w	800b992 <_printf_i+0x1d2>
 800b7e2:	2f58      	cmp	r7, #88	; 0x58
 800b7e4:	f000 80a3 	beq.w	800b92e <_printf_i+0x16e>
 800b7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7f0:	e03a      	b.n	800b868 <_printf_i+0xa8>
 800b7f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7f6:	2b15      	cmp	r3, #21
 800b7f8:	d8f6      	bhi.n	800b7e8 <_printf_i+0x28>
 800b7fa:	a101      	add	r1, pc, #4	; (adr r1, 800b800 <_printf_i+0x40>)
 800b7fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b800:	0800b859 	.word	0x0800b859
 800b804:	0800b86d 	.word	0x0800b86d
 800b808:	0800b7e9 	.word	0x0800b7e9
 800b80c:	0800b7e9 	.word	0x0800b7e9
 800b810:	0800b7e9 	.word	0x0800b7e9
 800b814:	0800b7e9 	.word	0x0800b7e9
 800b818:	0800b86d 	.word	0x0800b86d
 800b81c:	0800b7e9 	.word	0x0800b7e9
 800b820:	0800b7e9 	.word	0x0800b7e9
 800b824:	0800b7e9 	.word	0x0800b7e9
 800b828:	0800b7e9 	.word	0x0800b7e9
 800b82c:	0800b979 	.word	0x0800b979
 800b830:	0800b89d 	.word	0x0800b89d
 800b834:	0800b95b 	.word	0x0800b95b
 800b838:	0800b7e9 	.word	0x0800b7e9
 800b83c:	0800b7e9 	.word	0x0800b7e9
 800b840:	0800b99b 	.word	0x0800b99b
 800b844:	0800b7e9 	.word	0x0800b7e9
 800b848:	0800b89d 	.word	0x0800b89d
 800b84c:	0800b7e9 	.word	0x0800b7e9
 800b850:	0800b7e9 	.word	0x0800b7e9
 800b854:	0800b963 	.word	0x0800b963
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	1d1a      	adds	r2, r3, #4
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	602a      	str	r2, [r5, #0]
 800b860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b868:	2301      	movs	r3, #1
 800b86a:	e0a3      	b.n	800b9b4 <_printf_i+0x1f4>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	6829      	ldr	r1, [r5, #0]
 800b870:	0606      	lsls	r6, r0, #24
 800b872:	f101 0304 	add.w	r3, r1, #4
 800b876:	d50a      	bpl.n	800b88e <_printf_i+0xce>
 800b878:	680e      	ldr	r6, [r1, #0]
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	2e00      	cmp	r6, #0
 800b87e:	da03      	bge.n	800b888 <_printf_i+0xc8>
 800b880:	232d      	movs	r3, #45	; 0x2d
 800b882:	4276      	negs	r6, r6
 800b884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b888:	485e      	ldr	r0, [pc, #376]	; (800ba04 <_printf_i+0x244>)
 800b88a:	230a      	movs	r3, #10
 800b88c:	e019      	b.n	800b8c2 <_printf_i+0x102>
 800b88e:	680e      	ldr	r6, [r1, #0]
 800b890:	602b      	str	r3, [r5, #0]
 800b892:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b896:	bf18      	it	ne
 800b898:	b236      	sxthne	r6, r6
 800b89a:	e7ef      	b.n	800b87c <_printf_i+0xbc>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	6820      	ldr	r0, [r4, #0]
 800b8a0:	1d19      	adds	r1, r3, #4
 800b8a2:	6029      	str	r1, [r5, #0]
 800b8a4:	0601      	lsls	r1, r0, #24
 800b8a6:	d501      	bpl.n	800b8ac <_printf_i+0xec>
 800b8a8:	681e      	ldr	r6, [r3, #0]
 800b8aa:	e002      	b.n	800b8b2 <_printf_i+0xf2>
 800b8ac:	0646      	lsls	r6, r0, #25
 800b8ae:	d5fb      	bpl.n	800b8a8 <_printf_i+0xe8>
 800b8b0:	881e      	ldrh	r6, [r3, #0]
 800b8b2:	4854      	ldr	r0, [pc, #336]	; (800ba04 <_printf_i+0x244>)
 800b8b4:	2f6f      	cmp	r7, #111	; 0x6f
 800b8b6:	bf0c      	ite	eq
 800b8b8:	2308      	moveq	r3, #8
 800b8ba:	230a      	movne	r3, #10
 800b8bc:	2100      	movs	r1, #0
 800b8be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8c2:	6865      	ldr	r5, [r4, #4]
 800b8c4:	60a5      	str	r5, [r4, #8]
 800b8c6:	2d00      	cmp	r5, #0
 800b8c8:	bfa2      	ittt	ge
 800b8ca:	6821      	ldrge	r1, [r4, #0]
 800b8cc:	f021 0104 	bicge.w	r1, r1, #4
 800b8d0:	6021      	strge	r1, [r4, #0]
 800b8d2:	b90e      	cbnz	r6, 800b8d8 <_printf_i+0x118>
 800b8d4:	2d00      	cmp	r5, #0
 800b8d6:	d04d      	beq.n	800b974 <_printf_i+0x1b4>
 800b8d8:	4615      	mov	r5, r2
 800b8da:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8de:	fb03 6711 	mls	r7, r3, r1, r6
 800b8e2:	5dc7      	ldrb	r7, [r0, r7]
 800b8e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8e8:	4637      	mov	r7, r6
 800b8ea:	42bb      	cmp	r3, r7
 800b8ec:	460e      	mov	r6, r1
 800b8ee:	d9f4      	bls.n	800b8da <_printf_i+0x11a>
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d10b      	bne.n	800b90c <_printf_i+0x14c>
 800b8f4:	6823      	ldr	r3, [r4, #0]
 800b8f6:	07de      	lsls	r6, r3, #31
 800b8f8:	d508      	bpl.n	800b90c <_printf_i+0x14c>
 800b8fa:	6923      	ldr	r3, [r4, #16]
 800b8fc:	6861      	ldr	r1, [r4, #4]
 800b8fe:	4299      	cmp	r1, r3
 800b900:	bfde      	ittt	le
 800b902:	2330      	movle	r3, #48	; 0x30
 800b904:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b908:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b90c:	1b52      	subs	r2, r2, r5
 800b90e:	6122      	str	r2, [r4, #16]
 800b910:	f8cd a000 	str.w	sl, [sp]
 800b914:	464b      	mov	r3, r9
 800b916:	aa03      	add	r2, sp, #12
 800b918:	4621      	mov	r1, r4
 800b91a:	4640      	mov	r0, r8
 800b91c:	f7ff fee2 	bl	800b6e4 <_printf_common>
 800b920:	3001      	adds	r0, #1
 800b922:	d14c      	bne.n	800b9be <_printf_i+0x1fe>
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	b004      	add	sp, #16
 800b92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b92e:	4835      	ldr	r0, [pc, #212]	; (800ba04 <_printf_i+0x244>)
 800b930:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b934:	6829      	ldr	r1, [r5, #0]
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	f851 6b04 	ldr.w	r6, [r1], #4
 800b93c:	6029      	str	r1, [r5, #0]
 800b93e:	061d      	lsls	r5, r3, #24
 800b940:	d514      	bpl.n	800b96c <_printf_i+0x1ac>
 800b942:	07df      	lsls	r7, r3, #31
 800b944:	bf44      	itt	mi
 800b946:	f043 0320 	orrmi.w	r3, r3, #32
 800b94a:	6023      	strmi	r3, [r4, #0]
 800b94c:	b91e      	cbnz	r6, 800b956 <_printf_i+0x196>
 800b94e:	6823      	ldr	r3, [r4, #0]
 800b950:	f023 0320 	bic.w	r3, r3, #32
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	2310      	movs	r3, #16
 800b958:	e7b0      	b.n	800b8bc <_printf_i+0xfc>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	f043 0320 	orr.w	r3, r3, #32
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	2378      	movs	r3, #120	; 0x78
 800b964:	4828      	ldr	r0, [pc, #160]	; (800ba08 <_printf_i+0x248>)
 800b966:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b96a:	e7e3      	b.n	800b934 <_printf_i+0x174>
 800b96c:	0659      	lsls	r1, r3, #25
 800b96e:	bf48      	it	mi
 800b970:	b2b6      	uxthmi	r6, r6
 800b972:	e7e6      	b.n	800b942 <_printf_i+0x182>
 800b974:	4615      	mov	r5, r2
 800b976:	e7bb      	b.n	800b8f0 <_printf_i+0x130>
 800b978:	682b      	ldr	r3, [r5, #0]
 800b97a:	6826      	ldr	r6, [r4, #0]
 800b97c:	6961      	ldr	r1, [r4, #20]
 800b97e:	1d18      	adds	r0, r3, #4
 800b980:	6028      	str	r0, [r5, #0]
 800b982:	0635      	lsls	r5, r6, #24
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	d501      	bpl.n	800b98c <_printf_i+0x1cc>
 800b988:	6019      	str	r1, [r3, #0]
 800b98a:	e002      	b.n	800b992 <_printf_i+0x1d2>
 800b98c:	0670      	lsls	r0, r6, #25
 800b98e:	d5fb      	bpl.n	800b988 <_printf_i+0x1c8>
 800b990:	8019      	strh	r1, [r3, #0]
 800b992:	2300      	movs	r3, #0
 800b994:	6123      	str	r3, [r4, #16]
 800b996:	4615      	mov	r5, r2
 800b998:	e7ba      	b.n	800b910 <_printf_i+0x150>
 800b99a:	682b      	ldr	r3, [r5, #0]
 800b99c:	1d1a      	adds	r2, r3, #4
 800b99e:	602a      	str	r2, [r5, #0]
 800b9a0:	681d      	ldr	r5, [r3, #0]
 800b9a2:	6862      	ldr	r2, [r4, #4]
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7f4 fc42 	bl	8000230 <memchr>
 800b9ac:	b108      	cbz	r0, 800b9b2 <_printf_i+0x1f2>
 800b9ae:	1b40      	subs	r0, r0, r5
 800b9b0:	6060      	str	r0, [r4, #4]
 800b9b2:	6863      	ldr	r3, [r4, #4]
 800b9b4:	6123      	str	r3, [r4, #16]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9bc:	e7a8      	b.n	800b910 <_printf_i+0x150>
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	462a      	mov	r2, r5
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	47d0      	blx	sl
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d0ab      	beq.n	800b924 <_printf_i+0x164>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	079b      	lsls	r3, r3, #30
 800b9d0:	d413      	bmi.n	800b9fa <_printf_i+0x23a>
 800b9d2:	68e0      	ldr	r0, [r4, #12]
 800b9d4:	9b03      	ldr	r3, [sp, #12]
 800b9d6:	4298      	cmp	r0, r3
 800b9d8:	bfb8      	it	lt
 800b9da:	4618      	movlt	r0, r3
 800b9dc:	e7a4      	b.n	800b928 <_printf_i+0x168>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	4649      	mov	r1, r9
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	47d0      	blx	sl
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d09b      	beq.n	800b924 <_printf_i+0x164>
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	68e3      	ldr	r3, [r4, #12]
 800b9f0:	9903      	ldr	r1, [sp, #12]
 800b9f2:	1a5b      	subs	r3, r3, r1
 800b9f4:	42ab      	cmp	r3, r5
 800b9f6:	dcf2      	bgt.n	800b9de <_printf_i+0x21e>
 800b9f8:	e7eb      	b.n	800b9d2 <_printf_i+0x212>
 800b9fa:	2500      	movs	r5, #0
 800b9fc:	f104 0619 	add.w	r6, r4, #25
 800ba00:	e7f5      	b.n	800b9ee <_printf_i+0x22e>
 800ba02:	bf00      	nop
 800ba04:	0801039a 	.word	0x0801039a
 800ba08:	080103ab 	.word	0x080103ab

0800ba0c <iprintf>:
 800ba0c:	b40f      	push	{r0, r1, r2, r3}
 800ba0e:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <iprintf+0x2c>)
 800ba10:	b513      	push	{r0, r1, r4, lr}
 800ba12:	681c      	ldr	r4, [r3, #0]
 800ba14:	b124      	cbz	r4, 800ba20 <iprintf+0x14>
 800ba16:	69a3      	ldr	r3, [r4, #24]
 800ba18:	b913      	cbnz	r3, 800ba20 <iprintf+0x14>
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f7ff fa1c 	bl	800ae58 <__sinit>
 800ba20:	ab05      	add	r3, sp, #20
 800ba22:	9a04      	ldr	r2, [sp, #16]
 800ba24:	68a1      	ldr	r1, [r4, #8]
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f001 fdf9 	bl	800d620 <_vfiprintf_r>
 800ba2e:	b002      	add	sp, #8
 800ba30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba34:	b004      	add	sp, #16
 800ba36:	4770      	bx	lr
 800ba38:	200000d0 	.word	0x200000d0

0800ba3c <_puts_r>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	460e      	mov	r6, r1
 800ba40:	4605      	mov	r5, r0
 800ba42:	b118      	cbz	r0, 800ba4c <_puts_r+0x10>
 800ba44:	6983      	ldr	r3, [r0, #24]
 800ba46:	b90b      	cbnz	r3, 800ba4c <_puts_r+0x10>
 800ba48:	f7ff fa06 	bl	800ae58 <__sinit>
 800ba4c:	69ab      	ldr	r3, [r5, #24]
 800ba4e:	68ac      	ldr	r4, [r5, #8]
 800ba50:	b913      	cbnz	r3, 800ba58 <_puts_r+0x1c>
 800ba52:	4628      	mov	r0, r5
 800ba54:	f7ff fa00 	bl	800ae58 <__sinit>
 800ba58:	4b2c      	ldr	r3, [pc, #176]	; (800bb0c <_puts_r+0xd0>)
 800ba5a:	429c      	cmp	r4, r3
 800ba5c:	d120      	bne.n	800baa0 <_puts_r+0x64>
 800ba5e:	686c      	ldr	r4, [r5, #4]
 800ba60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba62:	07db      	lsls	r3, r3, #31
 800ba64:	d405      	bmi.n	800ba72 <_puts_r+0x36>
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	0598      	lsls	r0, r3, #22
 800ba6a:	d402      	bmi.n	800ba72 <_puts_r+0x36>
 800ba6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba6e:	f7ff fab6 	bl	800afde <__retarget_lock_acquire_recursive>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	0719      	lsls	r1, r3, #28
 800ba76:	d51d      	bpl.n	800bab4 <_puts_r+0x78>
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	b1db      	cbz	r3, 800bab4 <_puts_r+0x78>
 800ba7c:	3e01      	subs	r6, #1
 800ba7e:	68a3      	ldr	r3, [r4, #8]
 800ba80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba84:	3b01      	subs	r3, #1
 800ba86:	60a3      	str	r3, [r4, #8]
 800ba88:	bb39      	cbnz	r1, 800bada <_puts_r+0x9e>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	da38      	bge.n	800bb00 <_puts_r+0xc4>
 800ba8e:	4622      	mov	r2, r4
 800ba90:	210a      	movs	r1, #10
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 f906 	bl	800bca4 <__swbuf_r>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	d011      	beq.n	800bac0 <_puts_r+0x84>
 800ba9c:	250a      	movs	r5, #10
 800ba9e:	e011      	b.n	800bac4 <_puts_r+0x88>
 800baa0:	4b1b      	ldr	r3, [pc, #108]	; (800bb10 <_puts_r+0xd4>)
 800baa2:	429c      	cmp	r4, r3
 800baa4:	d101      	bne.n	800baaa <_puts_r+0x6e>
 800baa6:	68ac      	ldr	r4, [r5, #8]
 800baa8:	e7da      	b.n	800ba60 <_puts_r+0x24>
 800baaa:	4b1a      	ldr	r3, [pc, #104]	; (800bb14 <_puts_r+0xd8>)
 800baac:	429c      	cmp	r4, r3
 800baae:	bf08      	it	eq
 800bab0:	68ec      	ldreq	r4, [r5, #12]
 800bab2:	e7d5      	b.n	800ba60 <_puts_r+0x24>
 800bab4:	4621      	mov	r1, r4
 800bab6:	4628      	mov	r0, r5
 800bab8:	f000 f958 	bl	800bd6c <__swsetup_r>
 800babc:	2800      	cmp	r0, #0
 800babe:	d0dd      	beq.n	800ba7c <_puts_r+0x40>
 800bac0:	f04f 35ff 	mov.w	r5, #4294967295
 800bac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bac6:	07da      	lsls	r2, r3, #31
 800bac8:	d405      	bmi.n	800bad6 <_puts_r+0x9a>
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	059b      	lsls	r3, r3, #22
 800bace:	d402      	bmi.n	800bad6 <_puts_r+0x9a>
 800bad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bad2:	f7ff fa85 	bl	800afe0 <__retarget_lock_release_recursive>
 800bad6:	4628      	mov	r0, r5
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
 800bada:	2b00      	cmp	r3, #0
 800badc:	da04      	bge.n	800bae8 <_puts_r+0xac>
 800bade:	69a2      	ldr	r2, [r4, #24]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	dc06      	bgt.n	800baf2 <_puts_r+0xb6>
 800bae4:	290a      	cmp	r1, #10
 800bae6:	d004      	beq.n	800baf2 <_puts_r+0xb6>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	6022      	str	r2, [r4, #0]
 800baee:	7019      	strb	r1, [r3, #0]
 800baf0:	e7c5      	b.n	800ba7e <_puts_r+0x42>
 800baf2:	4622      	mov	r2, r4
 800baf4:	4628      	mov	r0, r5
 800baf6:	f000 f8d5 	bl	800bca4 <__swbuf_r>
 800bafa:	3001      	adds	r0, #1
 800bafc:	d1bf      	bne.n	800ba7e <_puts_r+0x42>
 800bafe:	e7df      	b.n	800bac0 <_puts_r+0x84>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	250a      	movs	r5, #10
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	6022      	str	r2, [r4, #0]
 800bb08:	701d      	strb	r5, [r3, #0]
 800bb0a:	e7db      	b.n	800bac4 <_puts_r+0x88>
 800bb0c:	08010344 	.word	0x08010344
 800bb10:	08010364 	.word	0x08010364
 800bb14:	08010324 	.word	0x08010324

0800bb18 <puts>:
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <puts+0xc>)
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	6818      	ldr	r0, [r3, #0]
 800bb1e:	f7ff bf8d 	b.w	800ba3c <_puts_r>
 800bb22:	bf00      	nop
 800bb24:	200000d0 	.word	0x200000d0

0800bb28 <cleanup_glue>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	6809      	ldr	r1, [r1, #0]
 800bb2e:	4605      	mov	r5, r0
 800bb30:	b109      	cbz	r1, 800bb36 <cleanup_glue+0xe>
 800bb32:	f7ff fff9 	bl	800bb28 <cleanup_glue>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4628      	mov	r0, r5
 800bb3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb3e:	f001 bcf9 	b.w	800d534 <_free_r>
	...

0800bb44 <_reclaim_reent>:
 800bb44:	4b2c      	ldr	r3, [pc, #176]	; (800bbf8 <_reclaim_reent+0xb4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4283      	cmp	r3, r0
 800bb4a:	b570      	push	{r4, r5, r6, lr}
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	d051      	beq.n	800bbf4 <_reclaim_reent+0xb0>
 800bb50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb52:	b143      	cbz	r3, 800bb66 <_reclaim_reent+0x22>
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d14a      	bne.n	800bbf0 <_reclaim_reent+0xac>
 800bb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	b111      	cbz	r1, 800bb66 <_reclaim_reent+0x22>
 800bb60:	4620      	mov	r0, r4
 800bb62:	f001 fce7 	bl	800d534 <_free_r>
 800bb66:	6961      	ldr	r1, [r4, #20]
 800bb68:	b111      	cbz	r1, 800bb70 <_reclaim_reent+0x2c>
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f001 fce2 	bl	800d534 <_free_r>
 800bb70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb72:	b111      	cbz	r1, 800bb7a <_reclaim_reent+0x36>
 800bb74:	4620      	mov	r0, r4
 800bb76:	f001 fcdd 	bl	800d534 <_free_r>
 800bb7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb7c:	b111      	cbz	r1, 800bb84 <_reclaim_reent+0x40>
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f001 fcd8 	bl	800d534 <_free_r>
 800bb84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb86:	b111      	cbz	r1, 800bb8e <_reclaim_reent+0x4a>
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f001 fcd3 	bl	800d534 <_free_r>
 800bb8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb90:	b111      	cbz	r1, 800bb98 <_reclaim_reent+0x54>
 800bb92:	4620      	mov	r0, r4
 800bb94:	f001 fcce 	bl	800d534 <_free_r>
 800bb98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb9a:	b111      	cbz	r1, 800bba2 <_reclaim_reent+0x5e>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f001 fcc9 	bl	800d534 <_free_r>
 800bba2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bba4:	b111      	cbz	r1, 800bbac <_reclaim_reent+0x68>
 800bba6:	4620      	mov	r0, r4
 800bba8:	f001 fcc4 	bl	800d534 <_free_r>
 800bbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbae:	b111      	cbz	r1, 800bbb6 <_reclaim_reent+0x72>
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f001 fcbf 	bl	800d534 <_free_r>
 800bbb6:	69a3      	ldr	r3, [r4, #24]
 800bbb8:	b1e3      	cbz	r3, 800bbf4 <_reclaim_reent+0xb0>
 800bbba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4798      	blx	r3
 800bbc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbc2:	b1b9      	cbz	r1, 800bbf4 <_reclaim_reent+0xb0>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbca:	f7ff bfad 	b.w	800bb28 <cleanup_glue>
 800bbce:	5949      	ldr	r1, [r1, r5]
 800bbd0:	b941      	cbnz	r1, 800bbe4 <_reclaim_reent+0xa0>
 800bbd2:	3504      	adds	r5, #4
 800bbd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbd6:	2d80      	cmp	r5, #128	; 0x80
 800bbd8:	68d9      	ldr	r1, [r3, #12]
 800bbda:	d1f8      	bne.n	800bbce <_reclaim_reent+0x8a>
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f001 fca9 	bl	800d534 <_free_r>
 800bbe2:	e7ba      	b.n	800bb5a <_reclaim_reent+0x16>
 800bbe4:	680e      	ldr	r6, [r1, #0]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f001 fca4 	bl	800d534 <_free_r>
 800bbec:	4631      	mov	r1, r6
 800bbee:	e7ef      	b.n	800bbd0 <_reclaim_reent+0x8c>
 800bbf0:	2500      	movs	r5, #0
 800bbf2:	e7ef      	b.n	800bbd4 <_reclaim_reent+0x90>
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	bf00      	nop
 800bbf8:	200000d0 	.word	0x200000d0

0800bbfc <_sbrk_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d06      	ldr	r5, [pc, #24]	; (800bc18 <_sbrk_r+0x1c>)
 800bc00:	2300      	movs	r3, #0
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	602b      	str	r3, [r5, #0]
 800bc08:	f7f6 fe42 	bl	8002890 <_sbrk>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_sbrk_r+0x1a>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_sbrk_r+0x1a>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	20007000 	.word	0x20007000

0800bc1c <__sread>:
 800bc1c:	b510      	push	{r4, lr}
 800bc1e:	460c      	mov	r4, r1
 800bc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc24:	f001 fe2c 	bl	800d880 <_read_r>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	bfab      	itete	ge
 800bc2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc2e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc30:	181b      	addge	r3, r3, r0
 800bc32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc36:	bfac      	ite	ge
 800bc38:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc3a:	81a3      	strhlt	r3, [r4, #12]
 800bc3c:	bd10      	pop	{r4, pc}

0800bc3e <__swrite>:
 800bc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc42:	461f      	mov	r7, r3
 800bc44:	898b      	ldrh	r3, [r1, #12]
 800bc46:	05db      	lsls	r3, r3, #23
 800bc48:	4605      	mov	r5, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	4616      	mov	r6, r2
 800bc4e:	d505      	bpl.n	800bc5c <__swrite+0x1e>
 800bc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc54:	2302      	movs	r3, #2
 800bc56:	2200      	movs	r2, #0
 800bc58:	f001 f846 	bl	800cce8 <_lseek_r>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc66:	81a3      	strh	r3, [r4, #12]
 800bc68:	4632      	mov	r2, r6
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc72:	f000 b869 	b.w	800bd48 <_write_r>

0800bc76 <__sseek>:
 800bc76:	b510      	push	{r4, lr}
 800bc78:	460c      	mov	r4, r1
 800bc7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc7e:	f001 f833 	bl	800cce8 <_lseek_r>
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	bf15      	itete	ne
 800bc88:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc92:	81a3      	strheq	r3, [r4, #12]
 800bc94:	bf18      	it	ne
 800bc96:	81a3      	strhne	r3, [r4, #12]
 800bc98:	bd10      	pop	{r4, pc}

0800bc9a <__sclose>:
 800bc9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc9e:	f000 b8d3 	b.w	800be48 <_close_r>
	...

0800bca4 <__swbuf_r>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	460e      	mov	r6, r1
 800bca8:	4614      	mov	r4, r2
 800bcaa:	4605      	mov	r5, r0
 800bcac:	b118      	cbz	r0, 800bcb6 <__swbuf_r+0x12>
 800bcae:	6983      	ldr	r3, [r0, #24]
 800bcb0:	b90b      	cbnz	r3, 800bcb6 <__swbuf_r+0x12>
 800bcb2:	f7ff f8d1 	bl	800ae58 <__sinit>
 800bcb6:	4b21      	ldr	r3, [pc, #132]	; (800bd3c <__swbuf_r+0x98>)
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	d12b      	bne.n	800bd14 <__swbuf_r+0x70>
 800bcbc:	686c      	ldr	r4, [r5, #4]
 800bcbe:	69a3      	ldr	r3, [r4, #24]
 800bcc0:	60a3      	str	r3, [r4, #8]
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	071a      	lsls	r2, r3, #28
 800bcc6:	d52f      	bpl.n	800bd28 <__swbuf_r+0x84>
 800bcc8:	6923      	ldr	r3, [r4, #16]
 800bcca:	b36b      	cbz	r3, 800bd28 <__swbuf_r+0x84>
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	6820      	ldr	r0, [r4, #0]
 800bcd0:	1ac0      	subs	r0, r0, r3
 800bcd2:	6963      	ldr	r3, [r4, #20]
 800bcd4:	b2f6      	uxtb	r6, r6
 800bcd6:	4283      	cmp	r3, r0
 800bcd8:	4637      	mov	r7, r6
 800bcda:	dc04      	bgt.n	800bce6 <__swbuf_r+0x42>
 800bcdc:	4621      	mov	r1, r4
 800bcde:	4628      	mov	r0, r5
 800bce0:	f000 ffc2 	bl	800cc68 <_fflush_r>
 800bce4:	bb30      	cbnz	r0, 800bd34 <__swbuf_r+0x90>
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	60a3      	str	r3, [r4, #8]
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	1c5a      	adds	r2, r3, #1
 800bcf0:	6022      	str	r2, [r4, #0]
 800bcf2:	701e      	strb	r6, [r3, #0]
 800bcf4:	6963      	ldr	r3, [r4, #20]
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	4283      	cmp	r3, r0
 800bcfa:	d004      	beq.n	800bd06 <__swbuf_r+0x62>
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	07db      	lsls	r3, r3, #31
 800bd00:	d506      	bpl.n	800bd10 <__swbuf_r+0x6c>
 800bd02:	2e0a      	cmp	r6, #10
 800bd04:	d104      	bne.n	800bd10 <__swbuf_r+0x6c>
 800bd06:	4621      	mov	r1, r4
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f000 ffad 	bl	800cc68 <_fflush_r>
 800bd0e:	b988      	cbnz	r0, 800bd34 <__swbuf_r+0x90>
 800bd10:	4638      	mov	r0, r7
 800bd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd14:	4b0a      	ldr	r3, [pc, #40]	; (800bd40 <__swbuf_r+0x9c>)
 800bd16:	429c      	cmp	r4, r3
 800bd18:	d101      	bne.n	800bd1e <__swbuf_r+0x7a>
 800bd1a:	68ac      	ldr	r4, [r5, #8]
 800bd1c:	e7cf      	b.n	800bcbe <__swbuf_r+0x1a>
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <__swbuf_r+0xa0>)
 800bd20:	429c      	cmp	r4, r3
 800bd22:	bf08      	it	eq
 800bd24:	68ec      	ldreq	r4, [r5, #12]
 800bd26:	e7ca      	b.n	800bcbe <__swbuf_r+0x1a>
 800bd28:	4621      	mov	r1, r4
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	f000 f81e 	bl	800bd6c <__swsetup_r>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d0cb      	beq.n	800bccc <__swbuf_r+0x28>
 800bd34:	f04f 37ff 	mov.w	r7, #4294967295
 800bd38:	e7ea      	b.n	800bd10 <__swbuf_r+0x6c>
 800bd3a:	bf00      	nop
 800bd3c:	08010344 	.word	0x08010344
 800bd40:	08010364 	.word	0x08010364
 800bd44:	08010324 	.word	0x08010324

0800bd48 <_write_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	; (800bd68 <_write_r+0x20>)
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	4608      	mov	r0, r1
 800bd50:	4611      	mov	r1, r2
 800bd52:	2200      	movs	r2, #0
 800bd54:	602a      	str	r2, [r5, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f7f6 fa72 	bl	8002240 <_write>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_write_r+0x1e>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_write_r+0x1e>
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	20007000 	.word	0x20007000

0800bd6c <__swsetup_r>:
 800bd6c:	4b32      	ldr	r3, [pc, #200]	; (800be38 <__swsetup_r+0xcc>)
 800bd6e:	b570      	push	{r4, r5, r6, lr}
 800bd70:	681d      	ldr	r5, [r3, #0]
 800bd72:	4606      	mov	r6, r0
 800bd74:	460c      	mov	r4, r1
 800bd76:	b125      	cbz	r5, 800bd82 <__swsetup_r+0x16>
 800bd78:	69ab      	ldr	r3, [r5, #24]
 800bd7a:	b913      	cbnz	r3, 800bd82 <__swsetup_r+0x16>
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f7ff f86b 	bl	800ae58 <__sinit>
 800bd82:	4b2e      	ldr	r3, [pc, #184]	; (800be3c <__swsetup_r+0xd0>)
 800bd84:	429c      	cmp	r4, r3
 800bd86:	d10f      	bne.n	800bda8 <__swsetup_r+0x3c>
 800bd88:	686c      	ldr	r4, [r5, #4]
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd90:	0719      	lsls	r1, r3, #28
 800bd92:	d42c      	bmi.n	800bdee <__swsetup_r+0x82>
 800bd94:	06dd      	lsls	r5, r3, #27
 800bd96:	d411      	bmi.n	800bdbc <__swsetup_r+0x50>
 800bd98:	2309      	movs	r3, #9
 800bd9a:	6033      	str	r3, [r6, #0]
 800bd9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bda0:	81a3      	strh	r3, [r4, #12]
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	e03e      	b.n	800be26 <__swsetup_r+0xba>
 800bda8:	4b25      	ldr	r3, [pc, #148]	; (800be40 <__swsetup_r+0xd4>)
 800bdaa:	429c      	cmp	r4, r3
 800bdac:	d101      	bne.n	800bdb2 <__swsetup_r+0x46>
 800bdae:	68ac      	ldr	r4, [r5, #8]
 800bdb0:	e7eb      	b.n	800bd8a <__swsetup_r+0x1e>
 800bdb2:	4b24      	ldr	r3, [pc, #144]	; (800be44 <__swsetup_r+0xd8>)
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	bf08      	it	eq
 800bdb8:	68ec      	ldreq	r4, [r5, #12]
 800bdba:	e7e6      	b.n	800bd8a <__swsetup_r+0x1e>
 800bdbc:	0758      	lsls	r0, r3, #29
 800bdbe:	d512      	bpl.n	800bde6 <__swsetup_r+0x7a>
 800bdc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdc2:	b141      	cbz	r1, 800bdd6 <__swsetup_r+0x6a>
 800bdc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdc8:	4299      	cmp	r1, r3
 800bdca:	d002      	beq.n	800bdd2 <__swsetup_r+0x66>
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f001 fbb1 	bl	800d534 <_free_r>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	6363      	str	r3, [r4, #52]	; 0x34
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	2300      	movs	r3, #0
 800bde0:	6063      	str	r3, [r4, #4]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f043 0308 	orr.w	r3, r3, #8
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	b94b      	cbnz	r3, 800be06 <__swsetup_r+0x9a>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdfc:	d003      	beq.n	800be06 <__swsetup_r+0x9a>
 800bdfe:	4621      	mov	r1, r4
 800be00:	4630      	mov	r0, r6
 800be02:	f000 ffa9 	bl	800cd58 <__smakebuf_r>
 800be06:	89a0      	ldrh	r0, [r4, #12]
 800be08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be0c:	f010 0301 	ands.w	r3, r0, #1
 800be10:	d00a      	beq.n	800be28 <__swsetup_r+0xbc>
 800be12:	2300      	movs	r3, #0
 800be14:	60a3      	str	r3, [r4, #8]
 800be16:	6963      	ldr	r3, [r4, #20]
 800be18:	425b      	negs	r3, r3
 800be1a:	61a3      	str	r3, [r4, #24]
 800be1c:	6923      	ldr	r3, [r4, #16]
 800be1e:	b943      	cbnz	r3, 800be32 <__swsetup_r+0xc6>
 800be20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be24:	d1ba      	bne.n	800bd9c <__swsetup_r+0x30>
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	0781      	lsls	r1, r0, #30
 800be2a:	bf58      	it	pl
 800be2c:	6963      	ldrpl	r3, [r4, #20]
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	e7f4      	b.n	800be1c <__swsetup_r+0xb0>
 800be32:	2000      	movs	r0, #0
 800be34:	e7f7      	b.n	800be26 <__swsetup_r+0xba>
 800be36:	bf00      	nop
 800be38:	200000d0 	.word	0x200000d0
 800be3c:	08010344 	.word	0x08010344
 800be40:	08010364 	.word	0x08010364
 800be44:	08010324 	.word	0x08010324

0800be48 <_close_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d06      	ldr	r5, [pc, #24]	; (800be64 <_close_r+0x1c>)
 800be4c:	2300      	movs	r3, #0
 800be4e:	4604      	mov	r4, r0
 800be50:	4608      	mov	r0, r1
 800be52:	602b      	str	r3, [r5, #0]
 800be54:	f7f6 fce7 	bl	8002826 <_close>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_close_r+0x1a>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_close_r+0x1a>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	20007000 	.word	0x20007000

0800be68 <quorem>:
 800be68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	6903      	ldr	r3, [r0, #16]
 800be6e:	690c      	ldr	r4, [r1, #16]
 800be70:	42a3      	cmp	r3, r4
 800be72:	4607      	mov	r7, r0
 800be74:	f2c0 8081 	blt.w	800bf7a <quorem+0x112>
 800be78:	3c01      	subs	r4, #1
 800be7a:	f101 0814 	add.w	r8, r1, #20
 800be7e:	f100 0514 	add.w	r5, r0, #20
 800be82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be90:	3301      	adds	r3, #1
 800be92:	429a      	cmp	r2, r3
 800be94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bea0:	d331      	bcc.n	800bf06 <quorem+0x9e>
 800bea2:	f04f 0e00 	mov.w	lr, #0
 800bea6:	4640      	mov	r0, r8
 800bea8:	46ac      	mov	ip, r5
 800beaa:	46f2      	mov	sl, lr
 800beac:	f850 2b04 	ldr.w	r2, [r0], #4
 800beb0:	b293      	uxth	r3, r2
 800beb2:	fb06 e303 	mla	r3, r6, r3, lr
 800beb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800beba:	b29b      	uxth	r3, r3
 800bebc:	ebaa 0303 	sub.w	r3, sl, r3
 800bec0:	f8dc a000 	ldr.w	sl, [ip]
 800bec4:	0c12      	lsrs	r2, r2, #16
 800bec6:	fa13 f38a 	uxtah	r3, r3, sl
 800beca:	fb06 e202 	mla	r2, r6, r2, lr
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	9b00      	ldr	r3, [sp, #0]
 800bed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bed6:	b292      	uxth	r2, r2
 800bed8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bedc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bee0:	f8bd 3000 	ldrh.w	r3, [sp]
 800bee4:	4581      	cmp	r9, r0
 800bee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800beea:	f84c 3b04 	str.w	r3, [ip], #4
 800beee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bef2:	d2db      	bcs.n	800beac <quorem+0x44>
 800bef4:	f855 300b 	ldr.w	r3, [r5, fp]
 800bef8:	b92b      	cbnz	r3, 800bf06 <quorem+0x9e>
 800befa:	9b01      	ldr	r3, [sp, #4]
 800befc:	3b04      	subs	r3, #4
 800befe:	429d      	cmp	r5, r3
 800bf00:	461a      	mov	r2, r3
 800bf02:	d32e      	bcc.n	800bf62 <quorem+0xfa>
 800bf04:	613c      	str	r4, [r7, #16]
 800bf06:	4638      	mov	r0, r7
 800bf08:	f001 f9fc 	bl	800d304 <__mcmp>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	db24      	blt.n	800bf5a <quorem+0xf2>
 800bf10:	3601      	adds	r6, #1
 800bf12:	4628      	mov	r0, r5
 800bf14:	f04f 0c00 	mov.w	ip, #0
 800bf18:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf1c:	f8d0 e000 	ldr.w	lr, [r0]
 800bf20:	b293      	uxth	r3, r2
 800bf22:	ebac 0303 	sub.w	r3, ip, r3
 800bf26:	0c12      	lsrs	r2, r2, #16
 800bf28:	fa13 f38e 	uxtah	r3, r3, lr
 800bf2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf3a:	45c1      	cmp	r9, r8
 800bf3c:	f840 3b04 	str.w	r3, [r0], #4
 800bf40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf44:	d2e8      	bcs.n	800bf18 <quorem+0xb0>
 800bf46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf4e:	b922      	cbnz	r2, 800bf5a <quorem+0xf2>
 800bf50:	3b04      	subs	r3, #4
 800bf52:	429d      	cmp	r5, r3
 800bf54:	461a      	mov	r2, r3
 800bf56:	d30a      	bcc.n	800bf6e <quorem+0x106>
 800bf58:	613c      	str	r4, [r7, #16]
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	b003      	add	sp, #12
 800bf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf62:	6812      	ldr	r2, [r2, #0]
 800bf64:	3b04      	subs	r3, #4
 800bf66:	2a00      	cmp	r2, #0
 800bf68:	d1cc      	bne.n	800bf04 <quorem+0x9c>
 800bf6a:	3c01      	subs	r4, #1
 800bf6c:	e7c7      	b.n	800befe <quorem+0x96>
 800bf6e:	6812      	ldr	r2, [r2, #0]
 800bf70:	3b04      	subs	r3, #4
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	d1f0      	bne.n	800bf58 <quorem+0xf0>
 800bf76:	3c01      	subs	r4, #1
 800bf78:	e7eb      	b.n	800bf52 <quorem+0xea>
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	e7ee      	b.n	800bf5c <quorem+0xf4>
	...

0800bf80 <_dtoa_r>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	ed2d 8b04 	vpush	{d8-d9}
 800bf88:	ec57 6b10 	vmov	r6, r7, d0
 800bf8c:	b093      	sub	sp, #76	; 0x4c
 800bf8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf94:	9106      	str	r1, [sp, #24]
 800bf96:	ee10 aa10 	vmov	sl, s0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf9e:	930c      	str	r3, [sp, #48]	; 0x30
 800bfa0:	46bb      	mov	fp, r7
 800bfa2:	b975      	cbnz	r5, 800bfc2 <_dtoa_r+0x42>
 800bfa4:	2010      	movs	r0, #16
 800bfa6:	f000 ff17 	bl	800cdd8 <malloc>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	6260      	str	r0, [r4, #36]	; 0x24
 800bfae:	b920      	cbnz	r0, 800bfba <_dtoa_r+0x3a>
 800bfb0:	4ba7      	ldr	r3, [pc, #668]	; (800c250 <_dtoa_r+0x2d0>)
 800bfb2:	21ea      	movs	r1, #234	; 0xea
 800bfb4:	48a7      	ldr	r0, [pc, #668]	; (800c254 <_dtoa_r+0x2d4>)
 800bfb6:	f001 fc75 	bl	800d8a4 <__assert_func>
 800bfba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bfbe:	6005      	str	r5, [r0, #0]
 800bfc0:	60c5      	str	r5, [r0, #12]
 800bfc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc4:	6819      	ldr	r1, [r3, #0]
 800bfc6:	b151      	cbz	r1, 800bfde <_dtoa_r+0x5e>
 800bfc8:	685a      	ldr	r2, [r3, #4]
 800bfca:	604a      	str	r2, [r1, #4]
 800bfcc:	2301      	movs	r3, #1
 800bfce:	4093      	lsls	r3, r2
 800bfd0:	608b      	str	r3, [r1, #8]
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f000 ff54 	bl	800ce80 <_Bfree>
 800bfd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	1e3b      	subs	r3, r7, #0
 800bfe0:	bfaa      	itet	ge
 800bfe2:	2300      	movge	r3, #0
 800bfe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bfe8:	f8c8 3000 	strge.w	r3, [r8]
 800bfec:	4b9a      	ldr	r3, [pc, #616]	; (800c258 <_dtoa_r+0x2d8>)
 800bfee:	bfbc      	itt	lt
 800bff0:	2201      	movlt	r2, #1
 800bff2:	f8c8 2000 	strlt.w	r2, [r8]
 800bff6:	ea33 030b 	bics.w	r3, r3, fp
 800bffa:	d11b      	bne.n	800c034 <_dtoa_r+0xb4>
 800bffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bffe:	f242 730f 	movw	r3, #9999	; 0x270f
 800c002:	6013      	str	r3, [r2, #0]
 800c004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c008:	4333      	orrs	r3, r6
 800c00a:	f000 8592 	beq.w	800cb32 <_dtoa_r+0xbb2>
 800c00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c010:	b963      	cbnz	r3, 800c02c <_dtoa_r+0xac>
 800c012:	4b92      	ldr	r3, [pc, #584]	; (800c25c <_dtoa_r+0x2dc>)
 800c014:	e022      	b.n	800c05c <_dtoa_r+0xdc>
 800c016:	4b92      	ldr	r3, [pc, #584]	; (800c260 <_dtoa_r+0x2e0>)
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	3308      	adds	r3, #8
 800c01c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c01e:	6013      	str	r3, [r2, #0]
 800c020:	9801      	ldr	r0, [sp, #4]
 800c022:	b013      	add	sp, #76	; 0x4c
 800c024:	ecbd 8b04 	vpop	{d8-d9}
 800c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02c:	4b8b      	ldr	r3, [pc, #556]	; (800c25c <_dtoa_r+0x2dc>)
 800c02e:	9301      	str	r3, [sp, #4]
 800c030:	3303      	adds	r3, #3
 800c032:	e7f3      	b.n	800c01c <_dtoa_r+0x9c>
 800c034:	2200      	movs	r2, #0
 800c036:	2300      	movs	r3, #0
 800c038:	4650      	mov	r0, sl
 800c03a:	4659      	mov	r1, fp
 800c03c:	f7f4 fd6c 	bl	8000b18 <__aeabi_dcmpeq>
 800c040:	ec4b ab19 	vmov	d9, sl, fp
 800c044:	4680      	mov	r8, r0
 800c046:	b158      	cbz	r0, 800c060 <_dtoa_r+0xe0>
 800c048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c04a:	2301      	movs	r3, #1
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 856b 	beq.w	800cb2c <_dtoa_r+0xbac>
 800c056:	4883      	ldr	r0, [pc, #524]	; (800c264 <_dtoa_r+0x2e4>)
 800c058:	6018      	str	r0, [r3, #0]
 800c05a:	1e43      	subs	r3, r0, #1
 800c05c:	9301      	str	r3, [sp, #4]
 800c05e:	e7df      	b.n	800c020 <_dtoa_r+0xa0>
 800c060:	ec4b ab10 	vmov	d0, sl, fp
 800c064:	aa10      	add	r2, sp, #64	; 0x40
 800c066:	a911      	add	r1, sp, #68	; 0x44
 800c068:	4620      	mov	r0, r4
 800c06a:	f001 f9f1 	bl	800d450 <__d2b>
 800c06e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c072:	ee08 0a10 	vmov	s16, r0
 800c076:	2d00      	cmp	r5, #0
 800c078:	f000 8084 	beq.w	800c184 <_dtoa_r+0x204>
 800c07c:	ee19 3a90 	vmov	r3, s19
 800c080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c088:	4656      	mov	r6, sl
 800c08a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c08e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c096:	4b74      	ldr	r3, [pc, #464]	; (800c268 <_dtoa_r+0x2e8>)
 800c098:	2200      	movs	r2, #0
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7f4 f91b 	bl	80002d8 <__aeabi_dsub>
 800c0a2:	a365      	add	r3, pc, #404	; (adr r3, 800c238 <_dtoa_r+0x2b8>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f7f4 face 	bl	8000648 <__aeabi_dmul>
 800c0ac:	a364      	add	r3, pc, #400	; (adr r3, 800c240 <_dtoa_r+0x2c0>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 f913 	bl	80002dc <__adddf3>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	460f      	mov	r7, r1
 800c0bc:	f7f4 fa5a 	bl	8000574 <__aeabi_i2d>
 800c0c0:	a361      	add	r3, pc, #388	; (adr r3, 800c248 <_dtoa_r+0x2c8>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f7f4 fabf 	bl	8000648 <__aeabi_dmul>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 f903 	bl	80002dc <__adddf3>
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	460f      	mov	r7, r1
 800c0da:	f7f4 fd65 	bl	8000ba8 <__aeabi_d2iz>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	9000      	str	r0, [sp, #0]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	f7f4 fd20 	bl	8000b2c <__aeabi_dcmplt>
 800c0ec:	b150      	cbz	r0, 800c104 <_dtoa_r+0x184>
 800c0ee:	9800      	ldr	r0, [sp, #0]
 800c0f0:	f7f4 fa40 	bl	8000574 <__aeabi_i2d>
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	463b      	mov	r3, r7
 800c0f8:	f7f4 fd0e 	bl	8000b18 <__aeabi_dcmpeq>
 800c0fc:	b910      	cbnz	r0, 800c104 <_dtoa_r+0x184>
 800c0fe:	9b00      	ldr	r3, [sp, #0]
 800c100:	3b01      	subs	r3, #1
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	9b00      	ldr	r3, [sp, #0]
 800c106:	2b16      	cmp	r3, #22
 800c108:	d85a      	bhi.n	800c1c0 <_dtoa_r+0x240>
 800c10a:	9a00      	ldr	r2, [sp, #0]
 800c10c:	4b57      	ldr	r3, [pc, #348]	; (800c26c <_dtoa_r+0x2ec>)
 800c10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	ec51 0b19 	vmov	r0, r1, d9
 800c11a:	f7f4 fd07 	bl	8000b2c <__aeabi_dcmplt>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d050      	beq.n	800c1c4 <_dtoa_r+0x244>
 800c122:	9b00      	ldr	r3, [sp, #0]
 800c124:	3b01      	subs	r3, #1
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	2300      	movs	r3, #0
 800c12a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c12e:	1b5d      	subs	r5, r3, r5
 800c130:	1e6b      	subs	r3, r5, #1
 800c132:	9305      	str	r3, [sp, #20]
 800c134:	bf45      	ittet	mi
 800c136:	f1c5 0301 	rsbmi	r3, r5, #1
 800c13a:	9304      	strmi	r3, [sp, #16]
 800c13c:	2300      	movpl	r3, #0
 800c13e:	2300      	movmi	r3, #0
 800c140:	bf4c      	ite	mi
 800c142:	9305      	strmi	r3, [sp, #20]
 800c144:	9304      	strpl	r3, [sp, #16]
 800c146:	9b00      	ldr	r3, [sp, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	db3d      	blt.n	800c1c8 <_dtoa_r+0x248>
 800c14c:	9b05      	ldr	r3, [sp, #20]
 800c14e:	9a00      	ldr	r2, [sp, #0]
 800c150:	920a      	str	r2, [sp, #40]	; 0x28
 800c152:	4413      	add	r3, r2
 800c154:	9305      	str	r3, [sp, #20]
 800c156:	2300      	movs	r3, #0
 800c158:	9307      	str	r3, [sp, #28]
 800c15a:	9b06      	ldr	r3, [sp, #24]
 800c15c:	2b09      	cmp	r3, #9
 800c15e:	f200 8089 	bhi.w	800c274 <_dtoa_r+0x2f4>
 800c162:	2b05      	cmp	r3, #5
 800c164:	bfc4      	itt	gt
 800c166:	3b04      	subgt	r3, #4
 800c168:	9306      	strgt	r3, [sp, #24]
 800c16a:	9b06      	ldr	r3, [sp, #24]
 800c16c:	f1a3 0302 	sub.w	r3, r3, #2
 800c170:	bfcc      	ite	gt
 800c172:	2500      	movgt	r5, #0
 800c174:	2501      	movle	r5, #1
 800c176:	2b03      	cmp	r3, #3
 800c178:	f200 8087 	bhi.w	800c28a <_dtoa_r+0x30a>
 800c17c:	e8df f003 	tbb	[pc, r3]
 800c180:	59383a2d 	.word	0x59383a2d
 800c184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c188:	441d      	add	r5, r3
 800c18a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c18e:	2b20      	cmp	r3, #32
 800c190:	bfc1      	itttt	gt
 800c192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c19a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c19e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c1a2:	bfda      	itte	le
 800c1a4:	f1c3 0320 	rsble	r3, r3, #32
 800c1a8:	fa06 f003 	lslle.w	r0, r6, r3
 800c1ac:	4318      	orrgt	r0, r3
 800c1ae:	f7f4 f9d1 	bl	8000554 <__aeabi_ui2d>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c1ba:	3d01      	subs	r5, #1
 800c1bc:	930e      	str	r3, [sp, #56]	; 0x38
 800c1be:	e76a      	b.n	800c096 <_dtoa_r+0x116>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e7b2      	b.n	800c12a <_dtoa_r+0x1aa>
 800c1c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c1c6:	e7b1      	b.n	800c12c <_dtoa_r+0x1ac>
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	9a00      	ldr	r2, [sp, #0]
 800c1cc:	1a9b      	subs	r3, r3, r2
 800c1ce:	9304      	str	r3, [sp, #16]
 800c1d0:	4253      	negs	r3, r2
 800c1d2:	9307      	str	r3, [sp, #28]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d8:	e7bf      	b.n	800c15a <_dtoa_r+0x1da>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9308      	str	r3, [sp, #32]
 800c1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	dc55      	bgt.n	800c290 <_dtoa_r+0x310>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ee:	e00c      	b.n	800c20a <_dtoa_r+0x28a>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e7f3      	b.n	800c1dc <_dtoa_r+0x25c>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1f8:	9308      	str	r3, [sp, #32]
 800c1fa:	9b00      	ldr	r3, [sp, #0]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	9302      	str	r3, [sp, #8]
 800c200:	3301      	adds	r3, #1
 800c202:	2b01      	cmp	r3, #1
 800c204:	9303      	str	r3, [sp, #12]
 800c206:	bfb8      	it	lt
 800c208:	2301      	movlt	r3, #1
 800c20a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c20c:	2200      	movs	r2, #0
 800c20e:	6042      	str	r2, [r0, #4]
 800c210:	2204      	movs	r2, #4
 800c212:	f102 0614 	add.w	r6, r2, #20
 800c216:	429e      	cmp	r6, r3
 800c218:	6841      	ldr	r1, [r0, #4]
 800c21a:	d93d      	bls.n	800c298 <_dtoa_r+0x318>
 800c21c:	4620      	mov	r0, r4
 800c21e:	f000 fdef 	bl	800ce00 <_Balloc>
 800c222:	9001      	str	r0, [sp, #4]
 800c224:	2800      	cmp	r0, #0
 800c226:	d13b      	bne.n	800c2a0 <_dtoa_r+0x320>
 800c228:	4b11      	ldr	r3, [pc, #68]	; (800c270 <_dtoa_r+0x2f0>)
 800c22a:	4602      	mov	r2, r0
 800c22c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c230:	e6c0      	b.n	800bfb4 <_dtoa_r+0x34>
 800c232:	2301      	movs	r3, #1
 800c234:	e7df      	b.n	800c1f6 <_dtoa_r+0x276>
 800c236:	bf00      	nop
 800c238:	636f4361 	.word	0x636f4361
 800c23c:	3fd287a7 	.word	0x3fd287a7
 800c240:	8b60c8b3 	.word	0x8b60c8b3
 800c244:	3fc68a28 	.word	0x3fc68a28
 800c248:	509f79fb 	.word	0x509f79fb
 800c24c:	3fd34413 	.word	0x3fd34413
 800c250:	080103c9 	.word	0x080103c9
 800c254:	080103e0 	.word	0x080103e0
 800c258:	7ff00000 	.word	0x7ff00000
 800c25c:	080103c5 	.word	0x080103c5
 800c260:	080103bc 	.word	0x080103bc
 800c264:	08010399 	.word	0x08010399
 800c268:	3ff80000 	.word	0x3ff80000
 800c26c:	080104d0 	.word	0x080104d0
 800c270:	0801043b 	.word	0x0801043b
 800c274:	2501      	movs	r5, #1
 800c276:	2300      	movs	r3, #0
 800c278:	9306      	str	r3, [sp, #24]
 800c27a:	9508      	str	r5, [sp, #32]
 800c27c:	f04f 33ff 	mov.w	r3, #4294967295
 800c280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c284:	2200      	movs	r2, #0
 800c286:	2312      	movs	r3, #18
 800c288:	e7b0      	b.n	800c1ec <_dtoa_r+0x26c>
 800c28a:	2301      	movs	r3, #1
 800c28c:	9308      	str	r3, [sp, #32]
 800c28e:	e7f5      	b.n	800c27c <_dtoa_r+0x2fc>
 800c290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c296:	e7b8      	b.n	800c20a <_dtoa_r+0x28a>
 800c298:	3101      	adds	r1, #1
 800c29a:	6041      	str	r1, [r0, #4]
 800c29c:	0052      	lsls	r2, r2, #1
 800c29e:	e7b8      	b.n	800c212 <_dtoa_r+0x292>
 800c2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a2:	9a01      	ldr	r2, [sp, #4]
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	2b0e      	cmp	r3, #14
 800c2aa:	f200 809d 	bhi.w	800c3e8 <_dtoa_r+0x468>
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	f000 809a 	beq.w	800c3e8 <_dtoa_r+0x468>
 800c2b4:	9b00      	ldr	r3, [sp, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	dd32      	ble.n	800c320 <_dtoa_r+0x3a0>
 800c2ba:	4ab7      	ldr	r2, [pc, #732]	; (800c598 <_dtoa_r+0x618>)
 800c2bc:	f003 030f 	and.w	r3, r3, #15
 800c2c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2c8:	9b00      	ldr	r3, [sp, #0]
 800c2ca:	05d8      	lsls	r0, r3, #23
 800c2cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c2d0:	d516      	bpl.n	800c300 <_dtoa_r+0x380>
 800c2d2:	4bb2      	ldr	r3, [pc, #712]	; (800c59c <_dtoa_r+0x61c>)
 800c2d4:	ec51 0b19 	vmov	r0, r1, d9
 800c2d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2dc:	f7f4 fade 	bl	800089c <__aeabi_ddiv>
 800c2e0:	f007 070f 	and.w	r7, r7, #15
 800c2e4:	4682      	mov	sl, r0
 800c2e6:	468b      	mov	fp, r1
 800c2e8:	2503      	movs	r5, #3
 800c2ea:	4eac      	ldr	r6, [pc, #688]	; (800c59c <_dtoa_r+0x61c>)
 800c2ec:	b957      	cbnz	r7, 800c304 <_dtoa_r+0x384>
 800c2ee:	4642      	mov	r2, r8
 800c2f0:	464b      	mov	r3, r9
 800c2f2:	4650      	mov	r0, sl
 800c2f4:	4659      	mov	r1, fp
 800c2f6:	f7f4 fad1 	bl	800089c <__aeabi_ddiv>
 800c2fa:	4682      	mov	sl, r0
 800c2fc:	468b      	mov	fp, r1
 800c2fe:	e028      	b.n	800c352 <_dtoa_r+0x3d2>
 800c300:	2502      	movs	r5, #2
 800c302:	e7f2      	b.n	800c2ea <_dtoa_r+0x36a>
 800c304:	07f9      	lsls	r1, r7, #31
 800c306:	d508      	bpl.n	800c31a <_dtoa_r+0x39a>
 800c308:	4640      	mov	r0, r8
 800c30a:	4649      	mov	r1, r9
 800c30c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c310:	f7f4 f99a 	bl	8000648 <__aeabi_dmul>
 800c314:	3501      	adds	r5, #1
 800c316:	4680      	mov	r8, r0
 800c318:	4689      	mov	r9, r1
 800c31a:	107f      	asrs	r7, r7, #1
 800c31c:	3608      	adds	r6, #8
 800c31e:	e7e5      	b.n	800c2ec <_dtoa_r+0x36c>
 800c320:	f000 809b 	beq.w	800c45a <_dtoa_r+0x4da>
 800c324:	9b00      	ldr	r3, [sp, #0]
 800c326:	4f9d      	ldr	r7, [pc, #628]	; (800c59c <_dtoa_r+0x61c>)
 800c328:	425e      	negs	r6, r3
 800c32a:	4b9b      	ldr	r3, [pc, #620]	; (800c598 <_dtoa_r+0x618>)
 800c32c:	f006 020f 	and.w	r2, r6, #15
 800c330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	ec51 0b19 	vmov	r0, r1, d9
 800c33c:	f7f4 f984 	bl	8000648 <__aeabi_dmul>
 800c340:	1136      	asrs	r6, r6, #4
 800c342:	4682      	mov	sl, r0
 800c344:	468b      	mov	fp, r1
 800c346:	2300      	movs	r3, #0
 800c348:	2502      	movs	r5, #2
 800c34a:	2e00      	cmp	r6, #0
 800c34c:	d17a      	bne.n	800c444 <_dtoa_r+0x4c4>
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1d3      	bne.n	800c2fa <_dtoa_r+0x37a>
 800c352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 8082 	beq.w	800c45e <_dtoa_r+0x4de>
 800c35a:	4b91      	ldr	r3, [pc, #580]	; (800c5a0 <_dtoa_r+0x620>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	4650      	mov	r0, sl
 800c360:	4659      	mov	r1, fp
 800c362:	f7f4 fbe3 	bl	8000b2c <__aeabi_dcmplt>
 800c366:	2800      	cmp	r0, #0
 800c368:	d079      	beq.n	800c45e <_dtoa_r+0x4de>
 800c36a:	9b03      	ldr	r3, [sp, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d076      	beq.n	800c45e <_dtoa_r+0x4de>
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	dd36      	ble.n	800c3e4 <_dtoa_r+0x464>
 800c376:	9b00      	ldr	r3, [sp, #0]
 800c378:	4650      	mov	r0, sl
 800c37a:	4659      	mov	r1, fp
 800c37c:	1e5f      	subs	r7, r3, #1
 800c37e:	2200      	movs	r2, #0
 800c380:	4b88      	ldr	r3, [pc, #544]	; (800c5a4 <_dtoa_r+0x624>)
 800c382:	f7f4 f961 	bl	8000648 <__aeabi_dmul>
 800c386:	9e02      	ldr	r6, [sp, #8]
 800c388:	4682      	mov	sl, r0
 800c38a:	468b      	mov	fp, r1
 800c38c:	3501      	adds	r5, #1
 800c38e:	4628      	mov	r0, r5
 800c390:	f7f4 f8f0 	bl	8000574 <__aeabi_i2d>
 800c394:	4652      	mov	r2, sl
 800c396:	465b      	mov	r3, fp
 800c398:	f7f4 f956 	bl	8000648 <__aeabi_dmul>
 800c39c:	4b82      	ldr	r3, [pc, #520]	; (800c5a8 <_dtoa_r+0x628>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f7f3 ff9c 	bl	80002dc <__adddf3>
 800c3a4:	46d0      	mov	r8, sl
 800c3a6:	46d9      	mov	r9, fp
 800c3a8:	4682      	mov	sl, r0
 800c3aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c3ae:	2e00      	cmp	r6, #0
 800c3b0:	d158      	bne.n	800c464 <_dtoa_r+0x4e4>
 800c3b2:	4b7e      	ldr	r3, [pc, #504]	; (800c5ac <_dtoa_r+0x62c>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	f7f3 ff8d 	bl	80002d8 <__aeabi_dsub>
 800c3be:	4652      	mov	r2, sl
 800c3c0:	465b      	mov	r3, fp
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	4689      	mov	r9, r1
 800c3c6:	f7f4 fbcf 	bl	8000b68 <__aeabi_dcmpgt>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	f040 8295 	bne.w	800c8fa <_dtoa_r+0x97a>
 800c3d0:	4652      	mov	r2, sl
 800c3d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	4649      	mov	r1, r9
 800c3da:	f7f4 fba7 	bl	8000b2c <__aeabi_dcmplt>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f040 8289 	bne.w	800c8f6 <_dtoa_r+0x976>
 800c3e4:	ec5b ab19 	vmov	sl, fp, d9
 800c3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f2c0 8148 	blt.w	800c680 <_dtoa_r+0x700>
 800c3f0:	9a00      	ldr	r2, [sp, #0]
 800c3f2:	2a0e      	cmp	r2, #14
 800c3f4:	f300 8144 	bgt.w	800c680 <_dtoa_r+0x700>
 800c3f8:	4b67      	ldr	r3, [pc, #412]	; (800c598 <_dtoa_r+0x618>)
 800c3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	f280 80d5 	bge.w	800c5b4 <_dtoa_r+0x634>
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f300 80d1 	bgt.w	800c5b4 <_dtoa_r+0x634>
 800c412:	f040 826f 	bne.w	800c8f4 <_dtoa_r+0x974>
 800c416:	4b65      	ldr	r3, [pc, #404]	; (800c5ac <_dtoa_r+0x62c>)
 800c418:	2200      	movs	r2, #0
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f4 f913 	bl	8000648 <__aeabi_dmul>
 800c422:	4652      	mov	r2, sl
 800c424:	465b      	mov	r3, fp
 800c426:	f7f4 fb95 	bl	8000b54 <__aeabi_dcmpge>
 800c42a:	9e03      	ldr	r6, [sp, #12]
 800c42c:	4637      	mov	r7, r6
 800c42e:	2800      	cmp	r0, #0
 800c430:	f040 8245 	bne.w	800c8be <_dtoa_r+0x93e>
 800c434:	9d01      	ldr	r5, [sp, #4]
 800c436:	2331      	movs	r3, #49	; 0x31
 800c438:	f805 3b01 	strb.w	r3, [r5], #1
 800c43c:	9b00      	ldr	r3, [sp, #0]
 800c43e:	3301      	adds	r3, #1
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	e240      	b.n	800c8c6 <_dtoa_r+0x946>
 800c444:	07f2      	lsls	r2, r6, #31
 800c446:	d505      	bpl.n	800c454 <_dtoa_r+0x4d4>
 800c448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c44c:	f7f4 f8fc 	bl	8000648 <__aeabi_dmul>
 800c450:	3501      	adds	r5, #1
 800c452:	2301      	movs	r3, #1
 800c454:	1076      	asrs	r6, r6, #1
 800c456:	3708      	adds	r7, #8
 800c458:	e777      	b.n	800c34a <_dtoa_r+0x3ca>
 800c45a:	2502      	movs	r5, #2
 800c45c:	e779      	b.n	800c352 <_dtoa_r+0x3d2>
 800c45e:	9f00      	ldr	r7, [sp, #0]
 800c460:	9e03      	ldr	r6, [sp, #12]
 800c462:	e794      	b.n	800c38e <_dtoa_r+0x40e>
 800c464:	9901      	ldr	r1, [sp, #4]
 800c466:	4b4c      	ldr	r3, [pc, #304]	; (800c598 <_dtoa_r+0x618>)
 800c468:	4431      	add	r1, r6
 800c46a:	910d      	str	r1, [sp, #52]	; 0x34
 800c46c:	9908      	ldr	r1, [sp, #32]
 800c46e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c476:	2900      	cmp	r1, #0
 800c478:	d043      	beq.n	800c502 <_dtoa_r+0x582>
 800c47a:	494d      	ldr	r1, [pc, #308]	; (800c5b0 <_dtoa_r+0x630>)
 800c47c:	2000      	movs	r0, #0
 800c47e:	f7f4 fa0d 	bl	800089c <__aeabi_ddiv>
 800c482:	4652      	mov	r2, sl
 800c484:	465b      	mov	r3, fp
 800c486:	f7f3 ff27 	bl	80002d8 <__aeabi_dsub>
 800c48a:	9d01      	ldr	r5, [sp, #4]
 800c48c:	4682      	mov	sl, r0
 800c48e:	468b      	mov	fp, r1
 800c490:	4649      	mov	r1, r9
 800c492:	4640      	mov	r0, r8
 800c494:	f7f4 fb88 	bl	8000ba8 <__aeabi_d2iz>
 800c498:	4606      	mov	r6, r0
 800c49a:	f7f4 f86b 	bl	8000574 <__aeabi_i2d>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	f7f3 ff17 	bl	80002d8 <__aeabi_dsub>
 800c4aa:	3630      	adds	r6, #48	; 0x30
 800c4ac:	f805 6b01 	strb.w	r6, [r5], #1
 800c4b0:	4652      	mov	r2, sl
 800c4b2:	465b      	mov	r3, fp
 800c4b4:	4680      	mov	r8, r0
 800c4b6:	4689      	mov	r9, r1
 800c4b8:	f7f4 fb38 	bl	8000b2c <__aeabi_dcmplt>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d163      	bne.n	800c588 <_dtoa_r+0x608>
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	4936      	ldr	r1, [pc, #216]	; (800c5a0 <_dtoa_r+0x620>)
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	f7f3 ff06 	bl	80002d8 <__aeabi_dsub>
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	465b      	mov	r3, fp
 800c4d0:	f7f4 fb2c 	bl	8000b2c <__aeabi_dcmplt>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	f040 80b5 	bne.w	800c644 <_dtoa_r+0x6c4>
 800c4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4dc:	429d      	cmp	r5, r3
 800c4de:	d081      	beq.n	800c3e4 <_dtoa_r+0x464>
 800c4e0:	4b30      	ldr	r3, [pc, #192]	; (800c5a4 <_dtoa_r+0x624>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	4650      	mov	r0, sl
 800c4e6:	4659      	mov	r1, fp
 800c4e8:	f7f4 f8ae 	bl	8000648 <__aeabi_dmul>
 800c4ec:	4b2d      	ldr	r3, [pc, #180]	; (800c5a4 <_dtoa_r+0x624>)
 800c4ee:	4682      	mov	sl, r0
 800c4f0:	468b      	mov	fp, r1
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f7f4 f8a6 	bl	8000648 <__aeabi_dmul>
 800c4fc:	4680      	mov	r8, r0
 800c4fe:	4689      	mov	r9, r1
 800c500:	e7c6      	b.n	800c490 <_dtoa_r+0x510>
 800c502:	4650      	mov	r0, sl
 800c504:	4659      	mov	r1, fp
 800c506:	f7f4 f89f 	bl	8000648 <__aeabi_dmul>
 800c50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c50c:	9d01      	ldr	r5, [sp, #4]
 800c50e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c510:	4682      	mov	sl, r0
 800c512:	468b      	mov	fp, r1
 800c514:	4649      	mov	r1, r9
 800c516:	4640      	mov	r0, r8
 800c518:	f7f4 fb46 	bl	8000ba8 <__aeabi_d2iz>
 800c51c:	4606      	mov	r6, r0
 800c51e:	f7f4 f829 	bl	8000574 <__aeabi_i2d>
 800c522:	3630      	adds	r6, #48	; 0x30
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	4640      	mov	r0, r8
 800c52a:	4649      	mov	r1, r9
 800c52c:	f7f3 fed4 	bl	80002d8 <__aeabi_dsub>
 800c530:	f805 6b01 	strb.w	r6, [r5], #1
 800c534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c536:	429d      	cmp	r5, r3
 800c538:	4680      	mov	r8, r0
 800c53a:	4689      	mov	r9, r1
 800c53c:	f04f 0200 	mov.w	r2, #0
 800c540:	d124      	bne.n	800c58c <_dtoa_r+0x60c>
 800c542:	4b1b      	ldr	r3, [pc, #108]	; (800c5b0 <_dtoa_r+0x630>)
 800c544:	4650      	mov	r0, sl
 800c546:	4659      	mov	r1, fp
 800c548:	f7f3 fec8 	bl	80002dc <__adddf3>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	4640      	mov	r0, r8
 800c552:	4649      	mov	r1, r9
 800c554:	f7f4 fb08 	bl	8000b68 <__aeabi_dcmpgt>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d173      	bne.n	800c644 <_dtoa_r+0x6c4>
 800c55c:	4652      	mov	r2, sl
 800c55e:	465b      	mov	r3, fp
 800c560:	4913      	ldr	r1, [pc, #76]	; (800c5b0 <_dtoa_r+0x630>)
 800c562:	2000      	movs	r0, #0
 800c564:	f7f3 feb8 	bl	80002d8 <__aeabi_dsub>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4640      	mov	r0, r8
 800c56e:	4649      	mov	r1, r9
 800c570:	f7f4 fadc 	bl	8000b2c <__aeabi_dcmplt>
 800c574:	2800      	cmp	r0, #0
 800c576:	f43f af35 	beq.w	800c3e4 <_dtoa_r+0x464>
 800c57a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c57c:	1e6b      	subs	r3, r5, #1
 800c57e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c584:	2b30      	cmp	r3, #48	; 0x30
 800c586:	d0f8      	beq.n	800c57a <_dtoa_r+0x5fa>
 800c588:	9700      	str	r7, [sp, #0]
 800c58a:	e049      	b.n	800c620 <_dtoa_r+0x6a0>
 800c58c:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <_dtoa_r+0x624>)
 800c58e:	f7f4 f85b 	bl	8000648 <__aeabi_dmul>
 800c592:	4680      	mov	r8, r0
 800c594:	4689      	mov	r9, r1
 800c596:	e7bd      	b.n	800c514 <_dtoa_r+0x594>
 800c598:	080104d0 	.word	0x080104d0
 800c59c:	080104a8 	.word	0x080104a8
 800c5a0:	3ff00000 	.word	0x3ff00000
 800c5a4:	40240000 	.word	0x40240000
 800c5a8:	401c0000 	.word	0x401c0000
 800c5ac:	40140000 	.word	0x40140000
 800c5b0:	3fe00000 	.word	0x3fe00000
 800c5b4:	9d01      	ldr	r5, [sp, #4]
 800c5b6:	4656      	mov	r6, sl
 800c5b8:	465f      	mov	r7, fp
 800c5ba:	4642      	mov	r2, r8
 800c5bc:	464b      	mov	r3, r9
 800c5be:	4630      	mov	r0, r6
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	f7f4 f96b 	bl	800089c <__aeabi_ddiv>
 800c5c6:	f7f4 faef 	bl	8000ba8 <__aeabi_d2iz>
 800c5ca:	4682      	mov	sl, r0
 800c5cc:	f7f3 ffd2 	bl	8000574 <__aeabi_i2d>
 800c5d0:	4642      	mov	r2, r8
 800c5d2:	464b      	mov	r3, r9
 800c5d4:	f7f4 f838 	bl	8000648 <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4630      	mov	r0, r6
 800c5de:	4639      	mov	r1, r7
 800c5e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c5e4:	f7f3 fe78 	bl	80002d8 <__aeabi_dsub>
 800c5e8:	f805 6b01 	strb.w	r6, [r5], #1
 800c5ec:	9e01      	ldr	r6, [sp, #4]
 800c5ee:	9f03      	ldr	r7, [sp, #12]
 800c5f0:	1bae      	subs	r6, r5, r6
 800c5f2:	42b7      	cmp	r7, r6
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	d135      	bne.n	800c666 <_dtoa_r+0x6e6>
 800c5fa:	f7f3 fe6f 	bl	80002dc <__adddf3>
 800c5fe:	4642      	mov	r2, r8
 800c600:	464b      	mov	r3, r9
 800c602:	4606      	mov	r6, r0
 800c604:	460f      	mov	r7, r1
 800c606:	f7f4 faaf 	bl	8000b68 <__aeabi_dcmpgt>
 800c60a:	b9d0      	cbnz	r0, 800c642 <_dtoa_r+0x6c2>
 800c60c:	4642      	mov	r2, r8
 800c60e:	464b      	mov	r3, r9
 800c610:	4630      	mov	r0, r6
 800c612:	4639      	mov	r1, r7
 800c614:	f7f4 fa80 	bl	8000b18 <__aeabi_dcmpeq>
 800c618:	b110      	cbz	r0, 800c620 <_dtoa_r+0x6a0>
 800c61a:	f01a 0f01 	tst.w	sl, #1
 800c61e:	d110      	bne.n	800c642 <_dtoa_r+0x6c2>
 800c620:	4620      	mov	r0, r4
 800c622:	ee18 1a10 	vmov	r1, s16
 800c626:	f000 fc2b 	bl	800ce80 <_Bfree>
 800c62a:	2300      	movs	r3, #0
 800c62c:	9800      	ldr	r0, [sp, #0]
 800c62e:	702b      	strb	r3, [r5, #0]
 800c630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c632:	3001      	adds	r0, #1
 800c634:	6018      	str	r0, [r3, #0]
 800c636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f43f acf1 	beq.w	800c020 <_dtoa_r+0xa0>
 800c63e:	601d      	str	r5, [r3, #0]
 800c640:	e4ee      	b.n	800c020 <_dtoa_r+0xa0>
 800c642:	9f00      	ldr	r7, [sp, #0]
 800c644:	462b      	mov	r3, r5
 800c646:	461d      	mov	r5, r3
 800c648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c64c:	2a39      	cmp	r2, #57	; 0x39
 800c64e:	d106      	bne.n	800c65e <_dtoa_r+0x6de>
 800c650:	9a01      	ldr	r2, [sp, #4]
 800c652:	429a      	cmp	r2, r3
 800c654:	d1f7      	bne.n	800c646 <_dtoa_r+0x6c6>
 800c656:	9901      	ldr	r1, [sp, #4]
 800c658:	2230      	movs	r2, #48	; 0x30
 800c65a:	3701      	adds	r7, #1
 800c65c:	700a      	strb	r2, [r1, #0]
 800c65e:	781a      	ldrb	r2, [r3, #0]
 800c660:	3201      	adds	r2, #1
 800c662:	701a      	strb	r2, [r3, #0]
 800c664:	e790      	b.n	800c588 <_dtoa_r+0x608>
 800c666:	4ba6      	ldr	r3, [pc, #664]	; (800c900 <_dtoa_r+0x980>)
 800c668:	2200      	movs	r2, #0
 800c66a:	f7f3 ffed 	bl	8000648 <__aeabi_dmul>
 800c66e:	2200      	movs	r2, #0
 800c670:	2300      	movs	r3, #0
 800c672:	4606      	mov	r6, r0
 800c674:	460f      	mov	r7, r1
 800c676:	f7f4 fa4f 	bl	8000b18 <__aeabi_dcmpeq>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d09d      	beq.n	800c5ba <_dtoa_r+0x63a>
 800c67e:	e7cf      	b.n	800c620 <_dtoa_r+0x6a0>
 800c680:	9a08      	ldr	r2, [sp, #32]
 800c682:	2a00      	cmp	r2, #0
 800c684:	f000 80d7 	beq.w	800c836 <_dtoa_r+0x8b6>
 800c688:	9a06      	ldr	r2, [sp, #24]
 800c68a:	2a01      	cmp	r2, #1
 800c68c:	f300 80ba 	bgt.w	800c804 <_dtoa_r+0x884>
 800c690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c692:	2a00      	cmp	r2, #0
 800c694:	f000 80b2 	beq.w	800c7fc <_dtoa_r+0x87c>
 800c698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c69c:	9e07      	ldr	r6, [sp, #28]
 800c69e:	9d04      	ldr	r5, [sp, #16]
 800c6a0:	9a04      	ldr	r2, [sp, #16]
 800c6a2:	441a      	add	r2, r3
 800c6a4:	9204      	str	r2, [sp, #16]
 800c6a6:	9a05      	ldr	r2, [sp, #20]
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	441a      	add	r2, r3
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	9205      	str	r2, [sp, #20]
 800c6b0:	f000 fc9e 	bl	800cff0 <__i2b>
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	2d00      	cmp	r5, #0
 800c6b8:	dd0c      	ble.n	800c6d4 <_dtoa_r+0x754>
 800c6ba:	9b05      	ldr	r3, [sp, #20]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	dd09      	ble.n	800c6d4 <_dtoa_r+0x754>
 800c6c0:	42ab      	cmp	r3, r5
 800c6c2:	9a04      	ldr	r2, [sp, #16]
 800c6c4:	bfa8      	it	ge
 800c6c6:	462b      	movge	r3, r5
 800c6c8:	1ad2      	subs	r2, r2, r3
 800c6ca:	9204      	str	r2, [sp, #16]
 800c6cc:	9a05      	ldr	r2, [sp, #20]
 800c6ce:	1aed      	subs	r5, r5, r3
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	9305      	str	r3, [sp, #20]
 800c6d4:	9b07      	ldr	r3, [sp, #28]
 800c6d6:	b31b      	cbz	r3, 800c720 <_dtoa_r+0x7a0>
 800c6d8:	9b08      	ldr	r3, [sp, #32]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 80af 	beq.w	800c83e <_dtoa_r+0x8be>
 800c6e0:	2e00      	cmp	r6, #0
 800c6e2:	dd13      	ble.n	800c70c <_dtoa_r+0x78c>
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	4632      	mov	r2, r6
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 fd41 	bl	800d170 <__pow5mult>
 800c6ee:	ee18 2a10 	vmov	r2, s16
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	4607      	mov	r7, r0
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 fc90 	bl	800d01c <__multiply>
 800c6fc:	ee18 1a10 	vmov	r1, s16
 800c700:	4680      	mov	r8, r0
 800c702:	4620      	mov	r0, r4
 800c704:	f000 fbbc 	bl	800ce80 <_Bfree>
 800c708:	ee08 8a10 	vmov	s16, r8
 800c70c:	9b07      	ldr	r3, [sp, #28]
 800c70e:	1b9a      	subs	r2, r3, r6
 800c710:	d006      	beq.n	800c720 <_dtoa_r+0x7a0>
 800c712:	ee18 1a10 	vmov	r1, s16
 800c716:	4620      	mov	r0, r4
 800c718:	f000 fd2a 	bl	800d170 <__pow5mult>
 800c71c:	ee08 0a10 	vmov	s16, r0
 800c720:	2101      	movs	r1, #1
 800c722:	4620      	mov	r0, r4
 800c724:	f000 fc64 	bl	800cff0 <__i2b>
 800c728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	4606      	mov	r6, r0
 800c72e:	f340 8088 	ble.w	800c842 <_dtoa_r+0x8c2>
 800c732:	461a      	mov	r2, r3
 800c734:	4601      	mov	r1, r0
 800c736:	4620      	mov	r0, r4
 800c738:	f000 fd1a 	bl	800d170 <__pow5mult>
 800c73c:	9b06      	ldr	r3, [sp, #24]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	4606      	mov	r6, r0
 800c742:	f340 8081 	ble.w	800c848 <_dtoa_r+0x8c8>
 800c746:	f04f 0800 	mov.w	r8, #0
 800c74a:	6933      	ldr	r3, [r6, #16]
 800c74c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c750:	6918      	ldr	r0, [r3, #16]
 800c752:	f000 fbfd 	bl	800cf50 <__hi0bits>
 800c756:	f1c0 0020 	rsb	r0, r0, #32
 800c75a:	9b05      	ldr	r3, [sp, #20]
 800c75c:	4418      	add	r0, r3
 800c75e:	f010 001f 	ands.w	r0, r0, #31
 800c762:	f000 8092 	beq.w	800c88a <_dtoa_r+0x90a>
 800c766:	f1c0 0320 	rsb	r3, r0, #32
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	f340 808a 	ble.w	800c884 <_dtoa_r+0x904>
 800c770:	f1c0 001c 	rsb	r0, r0, #28
 800c774:	9b04      	ldr	r3, [sp, #16]
 800c776:	4403      	add	r3, r0
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	9b05      	ldr	r3, [sp, #20]
 800c77c:	4403      	add	r3, r0
 800c77e:	4405      	add	r5, r0
 800c780:	9305      	str	r3, [sp, #20]
 800c782:	9b04      	ldr	r3, [sp, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	dd07      	ble.n	800c798 <_dtoa_r+0x818>
 800c788:	ee18 1a10 	vmov	r1, s16
 800c78c:	461a      	mov	r2, r3
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 fd48 	bl	800d224 <__lshift>
 800c794:	ee08 0a10 	vmov	s16, r0
 800c798:	9b05      	ldr	r3, [sp, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dd05      	ble.n	800c7aa <_dtoa_r+0x82a>
 800c79e:	4631      	mov	r1, r6
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f000 fd3e 	bl	800d224 <__lshift>
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d06e      	beq.n	800c88e <_dtoa_r+0x90e>
 800c7b0:	ee18 0a10 	vmov	r0, s16
 800c7b4:	4631      	mov	r1, r6
 800c7b6:	f000 fda5 	bl	800d304 <__mcmp>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	da67      	bge.n	800c88e <_dtoa_r+0x90e>
 800c7be:	9b00      	ldr	r3, [sp, #0]
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	ee18 1a10 	vmov	r1, s16
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	220a      	movs	r2, #10
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f000 fb79 	bl	800cec4 <__multadd>
 800c7d2:	9b08      	ldr	r3, [sp, #32]
 800c7d4:	ee08 0a10 	vmov	s16, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 81b1 	beq.w	800cb40 <_dtoa_r+0xbc0>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	220a      	movs	r2, #10
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f000 fb6d 	bl	800cec4 <__multadd>
 800c7ea:	9b02      	ldr	r3, [sp, #8]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	f300 808e 	bgt.w	800c910 <_dtoa_r+0x990>
 800c7f4:	9b06      	ldr	r3, [sp, #24]
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	dc51      	bgt.n	800c89e <_dtoa_r+0x91e>
 800c7fa:	e089      	b.n	800c910 <_dtoa_r+0x990>
 800c7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c802:	e74b      	b.n	800c69c <_dtoa_r+0x71c>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	1e5e      	subs	r6, r3, #1
 800c808:	9b07      	ldr	r3, [sp, #28]
 800c80a:	42b3      	cmp	r3, r6
 800c80c:	bfbf      	itttt	lt
 800c80e:	9b07      	ldrlt	r3, [sp, #28]
 800c810:	9607      	strlt	r6, [sp, #28]
 800c812:	1af2      	sublt	r2, r6, r3
 800c814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c816:	bfb6      	itet	lt
 800c818:	189b      	addlt	r3, r3, r2
 800c81a:	1b9e      	subge	r6, r3, r6
 800c81c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c81e:	9b03      	ldr	r3, [sp, #12]
 800c820:	bfb8      	it	lt
 800c822:	2600      	movlt	r6, #0
 800c824:	2b00      	cmp	r3, #0
 800c826:	bfb7      	itett	lt
 800c828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c82c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c830:	1a9d      	sublt	r5, r3, r2
 800c832:	2300      	movlt	r3, #0
 800c834:	e734      	b.n	800c6a0 <_dtoa_r+0x720>
 800c836:	9e07      	ldr	r6, [sp, #28]
 800c838:	9d04      	ldr	r5, [sp, #16]
 800c83a:	9f08      	ldr	r7, [sp, #32]
 800c83c:	e73b      	b.n	800c6b6 <_dtoa_r+0x736>
 800c83e:	9a07      	ldr	r2, [sp, #28]
 800c840:	e767      	b.n	800c712 <_dtoa_r+0x792>
 800c842:	9b06      	ldr	r3, [sp, #24]
 800c844:	2b01      	cmp	r3, #1
 800c846:	dc18      	bgt.n	800c87a <_dtoa_r+0x8fa>
 800c848:	f1ba 0f00 	cmp.w	sl, #0
 800c84c:	d115      	bne.n	800c87a <_dtoa_r+0x8fa>
 800c84e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c852:	b993      	cbnz	r3, 800c87a <_dtoa_r+0x8fa>
 800c854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c858:	0d1b      	lsrs	r3, r3, #20
 800c85a:	051b      	lsls	r3, r3, #20
 800c85c:	b183      	cbz	r3, 800c880 <_dtoa_r+0x900>
 800c85e:	9b04      	ldr	r3, [sp, #16]
 800c860:	3301      	adds	r3, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	9b05      	ldr	r3, [sp, #20]
 800c866:	3301      	adds	r3, #1
 800c868:	9305      	str	r3, [sp, #20]
 800c86a:	f04f 0801 	mov.w	r8, #1
 800c86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c870:	2b00      	cmp	r3, #0
 800c872:	f47f af6a 	bne.w	800c74a <_dtoa_r+0x7ca>
 800c876:	2001      	movs	r0, #1
 800c878:	e76f      	b.n	800c75a <_dtoa_r+0x7da>
 800c87a:	f04f 0800 	mov.w	r8, #0
 800c87e:	e7f6      	b.n	800c86e <_dtoa_r+0x8ee>
 800c880:	4698      	mov	r8, r3
 800c882:	e7f4      	b.n	800c86e <_dtoa_r+0x8ee>
 800c884:	f43f af7d 	beq.w	800c782 <_dtoa_r+0x802>
 800c888:	4618      	mov	r0, r3
 800c88a:	301c      	adds	r0, #28
 800c88c:	e772      	b.n	800c774 <_dtoa_r+0x7f4>
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	dc37      	bgt.n	800c904 <_dtoa_r+0x984>
 800c894:	9b06      	ldr	r3, [sp, #24]
 800c896:	2b02      	cmp	r3, #2
 800c898:	dd34      	ble.n	800c904 <_dtoa_r+0x984>
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	9302      	str	r3, [sp, #8]
 800c89e:	9b02      	ldr	r3, [sp, #8]
 800c8a0:	b96b      	cbnz	r3, 800c8be <_dtoa_r+0x93e>
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	2205      	movs	r2, #5
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f000 fb0c 	bl	800cec4 <__multadd>
 800c8ac:	4601      	mov	r1, r0
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	ee18 0a10 	vmov	r0, s16
 800c8b4:	f000 fd26 	bl	800d304 <__mcmp>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	f73f adbb 	bgt.w	800c434 <_dtoa_r+0x4b4>
 800c8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c0:	9d01      	ldr	r5, [sp, #4]
 800c8c2:	43db      	mvns	r3, r3
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	f04f 0800 	mov.w	r8, #0
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fad7 	bl	800ce80 <_Bfree>
 800c8d2:	2f00      	cmp	r7, #0
 800c8d4:	f43f aea4 	beq.w	800c620 <_dtoa_r+0x6a0>
 800c8d8:	f1b8 0f00 	cmp.w	r8, #0
 800c8dc:	d005      	beq.n	800c8ea <_dtoa_r+0x96a>
 800c8de:	45b8      	cmp	r8, r7
 800c8e0:	d003      	beq.n	800c8ea <_dtoa_r+0x96a>
 800c8e2:	4641      	mov	r1, r8
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 facb 	bl	800ce80 <_Bfree>
 800c8ea:	4639      	mov	r1, r7
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f000 fac7 	bl	800ce80 <_Bfree>
 800c8f2:	e695      	b.n	800c620 <_dtoa_r+0x6a0>
 800c8f4:	2600      	movs	r6, #0
 800c8f6:	4637      	mov	r7, r6
 800c8f8:	e7e1      	b.n	800c8be <_dtoa_r+0x93e>
 800c8fa:	9700      	str	r7, [sp, #0]
 800c8fc:	4637      	mov	r7, r6
 800c8fe:	e599      	b.n	800c434 <_dtoa_r+0x4b4>
 800c900:	40240000 	.word	0x40240000
 800c904:	9b08      	ldr	r3, [sp, #32]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 80ca 	beq.w	800caa0 <_dtoa_r+0xb20>
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	9302      	str	r3, [sp, #8]
 800c910:	2d00      	cmp	r5, #0
 800c912:	dd05      	ble.n	800c920 <_dtoa_r+0x9a0>
 800c914:	4639      	mov	r1, r7
 800c916:	462a      	mov	r2, r5
 800c918:	4620      	mov	r0, r4
 800c91a:	f000 fc83 	bl	800d224 <__lshift>
 800c91e:	4607      	mov	r7, r0
 800c920:	f1b8 0f00 	cmp.w	r8, #0
 800c924:	d05b      	beq.n	800c9de <_dtoa_r+0xa5e>
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 fa69 	bl	800ce00 <_Balloc>
 800c92e:	4605      	mov	r5, r0
 800c930:	b928      	cbnz	r0, 800c93e <_dtoa_r+0x9be>
 800c932:	4b87      	ldr	r3, [pc, #540]	; (800cb50 <_dtoa_r+0xbd0>)
 800c934:	4602      	mov	r2, r0
 800c936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c93a:	f7ff bb3b 	b.w	800bfb4 <_dtoa_r+0x34>
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	3202      	adds	r2, #2
 800c942:	0092      	lsls	r2, r2, #2
 800c944:	f107 010c 	add.w	r1, r7, #12
 800c948:	300c      	adds	r0, #12
 800c94a:	f7fe fb4a 	bl	800afe2 <memcpy>
 800c94e:	2201      	movs	r2, #1
 800c950:	4629      	mov	r1, r5
 800c952:	4620      	mov	r0, r4
 800c954:	f000 fc66 	bl	800d224 <__lshift>
 800c958:	9b01      	ldr	r3, [sp, #4]
 800c95a:	f103 0901 	add.w	r9, r3, #1
 800c95e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c962:	4413      	add	r3, r2
 800c964:	9305      	str	r3, [sp, #20]
 800c966:	f00a 0301 	and.w	r3, sl, #1
 800c96a:	46b8      	mov	r8, r7
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	4607      	mov	r7, r0
 800c970:	4631      	mov	r1, r6
 800c972:	ee18 0a10 	vmov	r0, s16
 800c976:	f7ff fa77 	bl	800be68 <quorem>
 800c97a:	4641      	mov	r1, r8
 800c97c:	9002      	str	r0, [sp, #8]
 800c97e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c982:	ee18 0a10 	vmov	r0, s16
 800c986:	f000 fcbd 	bl	800d304 <__mcmp>
 800c98a:	463a      	mov	r2, r7
 800c98c:	9003      	str	r0, [sp, #12]
 800c98e:	4631      	mov	r1, r6
 800c990:	4620      	mov	r0, r4
 800c992:	f000 fcd3 	bl	800d33c <__mdiff>
 800c996:	68c2      	ldr	r2, [r0, #12]
 800c998:	f109 3bff 	add.w	fp, r9, #4294967295
 800c99c:	4605      	mov	r5, r0
 800c99e:	bb02      	cbnz	r2, 800c9e2 <_dtoa_r+0xa62>
 800c9a0:	4601      	mov	r1, r0
 800c9a2:	ee18 0a10 	vmov	r0, s16
 800c9a6:	f000 fcad 	bl	800d304 <__mcmp>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	9207      	str	r2, [sp, #28]
 800c9b2:	f000 fa65 	bl	800ce80 <_Bfree>
 800c9b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c9ba:	ea43 0102 	orr.w	r1, r3, r2
 800c9be:	9b04      	ldr	r3, [sp, #16]
 800c9c0:	430b      	orrs	r3, r1
 800c9c2:	464d      	mov	r5, r9
 800c9c4:	d10f      	bne.n	800c9e6 <_dtoa_r+0xa66>
 800c9c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c9ca:	d02a      	beq.n	800ca22 <_dtoa_r+0xaa2>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd02      	ble.n	800c9d8 <_dtoa_r+0xa58>
 800c9d2:	9b02      	ldr	r3, [sp, #8]
 800c9d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c9d8:	f88b a000 	strb.w	sl, [fp]
 800c9dc:	e775      	b.n	800c8ca <_dtoa_r+0x94a>
 800c9de:	4638      	mov	r0, r7
 800c9e0:	e7ba      	b.n	800c958 <_dtoa_r+0x9d8>
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	e7e2      	b.n	800c9ac <_dtoa_r+0xa2c>
 800c9e6:	9b03      	ldr	r3, [sp, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	db04      	blt.n	800c9f6 <_dtoa_r+0xa76>
 800c9ec:	9906      	ldr	r1, [sp, #24]
 800c9ee:	430b      	orrs	r3, r1
 800c9f0:	9904      	ldr	r1, [sp, #16]
 800c9f2:	430b      	orrs	r3, r1
 800c9f4:	d122      	bne.n	800ca3c <_dtoa_r+0xabc>
 800c9f6:	2a00      	cmp	r2, #0
 800c9f8:	ddee      	ble.n	800c9d8 <_dtoa_r+0xa58>
 800c9fa:	ee18 1a10 	vmov	r1, s16
 800c9fe:	2201      	movs	r2, #1
 800ca00:	4620      	mov	r0, r4
 800ca02:	f000 fc0f 	bl	800d224 <__lshift>
 800ca06:	4631      	mov	r1, r6
 800ca08:	ee08 0a10 	vmov	s16, r0
 800ca0c:	f000 fc7a 	bl	800d304 <__mcmp>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	dc03      	bgt.n	800ca1c <_dtoa_r+0xa9c>
 800ca14:	d1e0      	bne.n	800c9d8 <_dtoa_r+0xa58>
 800ca16:	f01a 0f01 	tst.w	sl, #1
 800ca1a:	d0dd      	beq.n	800c9d8 <_dtoa_r+0xa58>
 800ca1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca20:	d1d7      	bne.n	800c9d2 <_dtoa_r+0xa52>
 800ca22:	2339      	movs	r3, #57	; 0x39
 800ca24:	f88b 3000 	strb.w	r3, [fp]
 800ca28:	462b      	mov	r3, r5
 800ca2a:	461d      	mov	r5, r3
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca32:	2a39      	cmp	r2, #57	; 0x39
 800ca34:	d071      	beq.n	800cb1a <_dtoa_r+0xb9a>
 800ca36:	3201      	adds	r2, #1
 800ca38:	701a      	strb	r2, [r3, #0]
 800ca3a:	e746      	b.n	800c8ca <_dtoa_r+0x94a>
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	dd07      	ble.n	800ca50 <_dtoa_r+0xad0>
 800ca40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca44:	d0ed      	beq.n	800ca22 <_dtoa_r+0xaa2>
 800ca46:	f10a 0301 	add.w	r3, sl, #1
 800ca4a:	f88b 3000 	strb.w	r3, [fp]
 800ca4e:	e73c      	b.n	800c8ca <_dtoa_r+0x94a>
 800ca50:	9b05      	ldr	r3, [sp, #20]
 800ca52:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ca56:	4599      	cmp	r9, r3
 800ca58:	d047      	beq.n	800caea <_dtoa_r+0xb6a>
 800ca5a:	ee18 1a10 	vmov	r1, s16
 800ca5e:	2300      	movs	r3, #0
 800ca60:	220a      	movs	r2, #10
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 fa2e 	bl	800cec4 <__multadd>
 800ca68:	45b8      	cmp	r8, r7
 800ca6a:	ee08 0a10 	vmov	s16, r0
 800ca6e:	f04f 0300 	mov.w	r3, #0
 800ca72:	f04f 020a 	mov.w	r2, #10
 800ca76:	4641      	mov	r1, r8
 800ca78:	4620      	mov	r0, r4
 800ca7a:	d106      	bne.n	800ca8a <_dtoa_r+0xb0a>
 800ca7c:	f000 fa22 	bl	800cec4 <__multadd>
 800ca80:	4680      	mov	r8, r0
 800ca82:	4607      	mov	r7, r0
 800ca84:	f109 0901 	add.w	r9, r9, #1
 800ca88:	e772      	b.n	800c970 <_dtoa_r+0x9f0>
 800ca8a:	f000 fa1b 	bl	800cec4 <__multadd>
 800ca8e:	4639      	mov	r1, r7
 800ca90:	4680      	mov	r8, r0
 800ca92:	2300      	movs	r3, #0
 800ca94:	220a      	movs	r2, #10
 800ca96:	4620      	mov	r0, r4
 800ca98:	f000 fa14 	bl	800cec4 <__multadd>
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	e7f1      	b.n	800ca84 <_dtoa_r+0xb04>
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	9302      	str	r3, [sp, #8]
 800caa4:	9d01      	ldr	r5, [sp, #4]
 800caa6:	ee18 0a10 	vmov	r0, s16
 800caaa:	4631      	mov	r1, r6
 800caac:	f7ff f9dc 	bl	800be68 <quorem>
 800cab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	f805 ab01 	strb.w	sl, [r5], #1
 800caba:	1aea      	subs	r2, r5, r3
 800cabc:	9b02      	ldr	r3, [sp, #8]
 800cabe:	4293      	cmp	r3, r2
 800cac0:	dd09      	ble.n	800cad6 <_dtoa_r+0xb56>
 800cac2:	ee18 1a10 	vmov	r1, s16
 800cac6:	2300      	movs	r3, #0
 800cac8:	220a      	movs	r2, #10
 800caca:	4620      	mov	r0, r4
 800cacc:	f000 f9fa 	bl	800cec4 <__multadd>
 800cad0:	ee08 0a10 	vmov	s16, r0
 800cad4:	e7e7      	b.n	800caa6 <_dtoa_r+0xb26>
 800cad6:	9b02      	ldr	r3, [sp, #8]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bfc8      	it	gt
 800cadc:	461d      	movgt	r5, r3
 800cade:	9b01      	ldr	r3, [sp, #4]
 800cae0:	bfd8      	it	le
 800cae2:	2501      	movle	r5, #1
 800cae4:	441d      	add	r5, r3
 800cae6:	f04f 0800 	mov.w	r8, #0
 800caea:	ee18 1a10 	vmov	r1, s16
 800caee:	2201      	movs	r2, #1
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 fb97 	bl	800d224 <__lshift>
 800caf6:	4631      	mov	r1, r6
 800caf8:	ee08 0a10 	vmov	s16, r0
 800cafc:	f000 fc02 	bl	800d304 <__mcmp>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	dc91      	bgt.n	800ca28 <_dtoa_r+0xaa8>
 800cb04:	d102      	bne.n	800cb0c <_dtoa_r+0xb8c>
 800cb06:	f01a 0f01 	tst.w	sl, #1
 800cb0a:	d18d      	bne.n	800ca28 <_dtoa_r+0xaa8>
 800cb0c:	462b      	mov	r3, r5
 800cb0e:	461d      	mov	r5, r3
 800cb10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb14:	2a30      	cmp	r2, #48	; 0x30
 800cb16:	d0fa      	beq.n	800cb0e <_dtoa_r+0xb8e>
 800cb18:	e6d7      	b.n	800c8ca <_dtoa_r+0x94a>
 800cb1a:	9a01      	ldr	r2, [sp, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d184      	bne.n	800ca2a <_dtoa_r+0xaaa>
 800cb20:	9b00      	ldr	r3, [sp, #0]
 800cb22:	3301      	adds	r3, #1
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	2331      	movs	r3, #49	; 0x31
 800cb28:	7013      	strb	r3, [r2, #0]
 800cb2a:	e6ce      	b.n	800c8ca <_dtoa_r+0x94a>
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <_dtoa_r+0xbd4>)
 800cb2e:	f7ff ba95 	b.w	800c05c <_dtoa_r+0xdc>
 800cb32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f47f aa6e 	bne.w	800c016 <_dtoa_r+0x96>
 800cb3a:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <_dtoa_r+0xbd8>)
 800cb3c:	f7ff ba8e 	b.w	800c05c <_dtoa_r+0xdc>
 800cb40:	9b02      	ldr	r3, [sp, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dcae      	bgt.n	800caa4 <_dtoa_r+0xb24>
 800cb46:	9b06      	ldr	r3, [sp, #24]
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	f73f aea8 	bgt.w	800c89e <_dtoa_r+0x91e>
 800cb4e:	e7a9      	b.n	800caa4 <_dtoa_r+0xb24>
 800cb50:	0801043b 	.word	0x0801043b
 800cb54:	08010398 	.word	0x08010398
 800cb58:	080103bc 	.word	0x080103bc

0800cb5c <__sflush_r>:
 800cb5c:	898a      	ldrh	r2, [r1, #12]
 800cb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb62:	4605      	mov	r5, r0
 800cb64:	0710      	lsls	r0, r2, #28
 800cb66:	460c      	mov	r4, r1
 800cb68:	d458      	bmi.n	800cc1c <__sflush_r+0xc0>
 800cb6a:	684b      	ldr	r3, [r1, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	dc05      	bgt.n	800cb7c <__sflush_r+0x20>
 800cb70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	dc02      	bgt.n	800cb7c <__sflush_r+0x20>
 800cb76:	2000      	movs	r0, #0
 800cb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb7e:	2e00      	cmp	r6, #0
 800cb80:	d0f9      	beq.n	800cb76 <__sflush_r+0x1a>
 800cb82:	2300      	movs	r3, #0
 800cb84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb88:	682f      	ldr	r7, [r5, #0]
 800cb8a:	602b      	str	r3, [r5, #0]
 800cb8c:	d032      	beq.n	800cbf4 <__sflush_r+0x98>
 800cb8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	075a      	lsls	r2, r3, #29
 800cb94:	d505      	bpl.n	800cba2 <__sflush_r+0x46>
 800cb96:	6863      	ldr	r3, [r4, #4]
 800cb98:	1ac0      	subs	r0, r0, r3
 800cb9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb9c:	b10b      	cbz	r3, 800cba2 <__sflush_r+0x46>
 800cb9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cba0:	1ac0      	subs	r0, r0, r3
 800cba2:	2300      	movs	r3, #0
 800cba4:	4602      	mov	r2, r0
 800cba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cba8:	6a21      	ldr	r1, [r4, #32]
 800cbaa:	4628      	mov	r0, r5
 800cbac:	47b0      	blx	r6
 800cbae:	1c43      	adds	r3, r0, #1
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	d106      	bne.n	800cbc2 <__sflush_r+0x66>
 800cbb4:	6829      	ldr	r1, [r5, #0]
 800cbb6:	291d      	cmp	r1, #29
 800cbb8:	d82c      	bhi.n	800cc14 <__sflush_r+0xb8>
 800cbba:	4a2a      	ldr	r2, [pc, #168]	; (800cc64 <__sflush_r+0x108>)
 800cbbc:	40ca      	lsrs	r2, r1
 800cbbe:	07d6      	lsls	r6, r2, #31
 800cbc0:	d528      	bpl.n	800cc14 <__sflush_r+0xb8>
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	6062      	str	r2, [r4, #4]
 800cbc6:	04d9      	lsls	r1, r3, #19
 800cbc8:	6922      	ldr	r2, [r4, #16]
 800cbca:	6022      	str	r2, [r4, #0]
 800cbcc:	d504      	bpl.n	800cbd8 <__sflush_r+0x7c>
 800cbce:	1c42      	adds	r2, r0, #1
 800cbd0:	d101      	bne.n	800cbd6 <__sflush_r+0x7a>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	b903      	cbnz	r3, 800cbd8 <__sflush_r+0x7c>
 800cbd6:	6560      	str	r0, [r4, #84]	; 0x54
 800cbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbda:	602f      	str	r7, [r5, #0]
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	d0ca      	beq.n	800cb76 <__sflush_r+0x1a>
 800cbe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbe4:	4299      	cmp	r1, r3
 800cbe6:	d002      	beq.n	800cbee <__sflush_r+0x92>
 800cbe8:	4628      	mov	r0, r5
 800cbea:	f000 fca3 	bl	800d534 <_free_r>
 800cbee:	2000      	movs	r0, #0
 800cbf0:	6360      	str	r0, [r4, #52]	; 0x34
 800cbf2:	e7c1      	b.n	800cb78 <__sflush_r+0x1c>
 800cbf4:	6a21      	ldr	r1, [r4, #32]
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	47b0      	blx	r6
 800cbfc:	1c41      	adds	r1, r0, #1
 800cbfe:	d1c7      	bne.n	800cb90 <__sflush_r+0x34>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d0c4      	beq.n	800cb90 <__sflush_r+0x34>
 800cc06:	2b1d      	cmp	r3, #29
 800cc08:	d001      	beq.n	800cc0e <__sflush_r+0xb2>
 800cc0a:	2b16      	cmp	r3, #22
 800cc0c:	d101      	bne.n	800cc12 <__sflush_r+0xb6>
 800cc0e:	602f      	str	r7, [r5, #0]
 800cc10:	e7b1      	b.n	800cb76 <__sflush_r+0x1a>
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc18:	81a3      	strh	r3, [r4, #12]
 800cc1a:	e7ad      	b.n	800cb78 <__sflush_r+0x1c>
 800cc1c:	690f      	ldr	r7, [r1, #16]
 800cc1e:	2f00      	cmp	r7, #0
 800cc20:	d0a9      	beq.n	800cb76 <__sflush_r+0x1a>
 800cc22:	0793      	lsls	r3, r2, #30
 800cc24:	680e      	ldr	r6, [r1, #0]
 800cc26:	bf08      	it	eq
 800cc28:	694b      	ldreq	r3, [r1, #20]
 800cc2a:	600f      	str	r7, [r1, #0]
 800cc2c:	bf18      	it	ne
 800cc2e:	2300      	movne	r3, #0
 800cc30:	eba6 0807 	sub.w	r8, r6, r7
 800cc34:	608b      	str	r3, [r1, #8]
 800cc36:	f1b8 0f00 	cmp.w	r8, #0
 800cc3a:	dd9c      	ble.n	800cb76 <__sflush_r+0x1a>
 800cc3c:	6a21      	ldr	r1, [r4, #32]
 800cc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc40:	4643      	mov	r3, r8
 800cc42:	463a      	mov	r2, r7
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b0      	blx	r6
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	dc06      	bgt.n	800cc5a <__sflush_r+0xfe>
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295
 800cc58:	e78e      	b.n	800cb78 <__sflush_r+0x1c>
 800cc5a:	4407      	add	r7, r0
 800cc5c:	eba8 0800 	sub.w	r8, r8, r0
 800cc60:	e7e9      	b.n	800cc36 <__sflush_r+0xda>
 800cc62:	bf00      	nop
 800cc64:	20400001 	.word	0x20400001

0800cc68 <_fflush_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	690b      	ldr	r3, [r1, #16]
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	460c      	mov	r4, r1
 800cc70:	b913      	cbnz	r3, 800cc78 <_fflush_r+0x10>
 800cc72:	2500      	movs	r5, #0
 800cc74:	4628      	mov	r0, r5
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	b118      	cbz	r0, 800cc82 <_fflush_r+0x1a>
 800cc7a:	6983      	ldr	r3, [r0, #24]
 800cc7c:	b90b      	cbnz	r3, 800cc82 <_fflush_r+0x1a>
 800cc7e:	f7fe f8eb 	bl	800ae58 <__sinit>
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <_fflush_r+0x6c>)
 800cc84:	429c      	cmp	r4, r3
 800cc86:	d11b      	bne.n	800ccc0 <_fflush_r+0x58>
 800cc88:	686c      	ldr	r4, [r5, #4]
 800cc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0ef      	beq.n	800cc72 <_fflush_r+0xa>
 800cc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc94:	07d0      	lsls	r0, r2, #31
 800cc96:	d404      	bmi.n	800cca2 <_fflush_r+0x3a>
 800cc98:	0599      	lsls	r1, r3, #22
 800cc9a:	d402      	bmi.n	800cca2 <_fflush_r+0x3a>
 800cc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc9e:	f7fe f99e 	bl	800afde <__retarget_lock_acquire_recursive>
 800cca2:	4628      	mov	r0, r5
 800cca4:	4621      	mov	r1, r4
 800cca6:	f7ff ff59 	bl	800cb5c <__sflush_r>
 800ccaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccac:	07da      	lsls	r2, r3, #31
 800ccae:	4605      	mov	r5, r0
 800ccb0:	d4e0      	bmi.n	800cc74 <_fflush_r+0xc>
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	059b      	lsls	r3, r3, #22
 800ccb6:	d4dd      	bmi.n	800cc74 <_fflush_r+0xc>
 800ccb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccba:	f7fe f991 	bl	800afe0 <__retarget_lock_release_recursive>
 800ccbe:	e7d9      	b.n	800cc74 <_fflush_r+0xc>
 800ccc0:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <_fflush_r+0x70>)
 800ccc2:	429c      	cmp	r4, r3
 800ccc4:	d101      	bne.n	800ccca <_fflush_r+0x62>
 800ccc6:	68ac      	ldr	r4, [r5, #8]
 800ccc8:	e7df      	b.n	800cc8a <_fflush_r+0x22>
 800ccca:	4b04      	ldr	r3, [pc, #16]	; (800ccdc <_fflush_r+0x74>)
 800cccc:	429c      	cmp	r4, r3
 800ccce:	bf08      	it	eq
 800ccd0:	68ec      	ldreq	r4, [r5, #12]
 800ccd2:	e7da      	b.n	800cc8a <_fflush_r+0x22>
 800ccd4:	08010344 	.word	0x08010344
 800ccd8:	08010364 	.word	0x08010364
 800ccdc:	08010324 	.word	0x08010324

0800cce0 <_localeconv_r>:
 800cce0:	4800      	ldr	r0, [pc, #0]	; (800cce4 <_localeconv_r+0x4>)
 800cce2:	4770      	bx	lr
 800cce4:	20000224 	.word	0x20000224

0800cce8 <_lseek_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d07      	ldr	r5, [pc, #28]	; (800cd08 <_lseek_r+0x20>)
 800ccec:	4604      	mov	r4, r0
 800ccee:	4608      	mov	r0, r1
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	602a      	str	r2, [r5, #0]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f7f5 fdbc 	bl	8002874 <_lseek>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_lseek_r+0x1e>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_lseek_r+0x1e>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	20007000 	.word	0x20007000

0800cd0c <__swhatbuf_r>:
 800cd0c:	b570      	push	{r4, r5, r6, lr}
 800cd0e:	460e      	mov	r6, r1
 800cd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd14:	2900      	cmp	r1, #0
 800cd16:	b096      	sub	sp, #88	; 0x58
 800cd18:	4614      	mov	r4, r2
 800cd1a:	461d      	mov	r5, r3
 800cd1c:	da08      	bge.n	800cd30 <__swhatbuf_r+0x24>
 800cd1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	602a      	str	r2, [r5, #0]
 800cd26:	061a      	lsls	r2, r3, #24
 800cd28:	d410      	bmi.n	800cd4c <__swhatbuf_r+0x40>
 800cd2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd2e:	e00e      	b.n	800cd4e <__swhatbuf_r+0x42>
 800cd30:	466a      	mov	r2, sp
 800cd32:	f000 fde7 	bl	800d904 <_fstat_r>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	dbf1      	blt.n	800cd1e <__swhatbuf_r+0x12>
 800cd3a:	9a01      	ldr	r2, [sp, #4]
 800cd3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd44:	425a      	negs	r2, r3
 800cd46:	415a      	adcs	r2, r3
 800cd48:	602a      	str	r2, [r5, #0]
 800cd4a:	e7ee      	b.n	800cd2a <__swhatbuf_r+0x1e>
 800cd4c:	2340      	movs	r3, #64	; 0x40
 800cd4e:	2000      	movs	r0, #0
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	b016      	add	sp, #88	; 0x58
 800cd54:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd58 <__smakebuf_r>:
 800cd58:	898b      	ldrh	r3, [r1, #12]
 800cd5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd5c:	079d      	lsls	r5, r3, #30
 800cd5e:	4606      	mov	r6, r0
 800cd60:	460c      	mov	r4, r1
 800cd62:	d507      	bpl.n	800cd74 <__smakebuf_r+0x1c>
 800cd64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	6163      	str	r3, [r4, #20]
 800cd70:	b002      	add	sp, #8
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	ab01      	add	r3, sp, #4
 800cd76:	466a      	mov	r2, sp
 800cd78:	f7ff ffc8 	bl	800cd0c <__swhatbuf_r>
 800cd7c:	9900      	ldr	r1, [sp, #0]
 800cd7e:	4605      	mov	r5, r0
 800cd80:	4630      	mov	r0, r6
 800cd82:	f7fe f965 	bl	800b050 <_malloc_r>
 800cd86:	b948      	cbnz	r0, 800cd9c <__smakebuf_r+0x44>
 800cd88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd8c:	059a      	lsls	r2, r3, #22
 800cd8e:	d4ef      	bmi.n	800cd70 <__smakebuf_r+0x18>
 800cd90:	f023 0303 	bic.w	r3, r3, #3
 800cd94:	f043 0302 	orr.w	r3, r3, #2
 800cd98:	81a3      	strh	r3, [r4, #12]
 800cd9a:	e7e3      	b.n	800cd64 <__smakebuf_r+0xc>
 800cd9c:	4b0d      	ldr	r3, [pc, #52]	; (800cdd4 <__smakebuf_r+0x7c>)
 800cd9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	6020      	str	r0, [r4, #0]
 800cda4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cda8:	81a3      	strh	r3, [r4, #12]
 800cdaa:	9b00      	ldr	r3, [sp, #0]
 800cdac:	6163      	str	r3, [r4, #20]
 800cdae:	9b01      	ldr	r3, [sp, #4]
 800cdb0:	6120      	str	r0, [r4, #16]
 800cdb2:	b15b      	cbz	r3, 800cdcc <__smakebuf_r+0x74>
 800cdb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f000 fdb5 	bl	800d928 <_isatty_r>
 800cdbe:	b128      	cbz	r0, 800cdcc <__smakebuf_r+0x74>
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	f023 0303 	bic.w	r3, r3, #3
 800cdc6:	f043 0301 	orr.w	r3, r3, #1
 800cdca:	81a3      	strh	r3, [r4, #12]
 800cdcc:	89a0      	ldrh	r0, [r4, #12]
 800cdce:	4305      	orrs	r5, r0
 800cdd0:	81a5      	strh	r5, [r4, #12]
 800cdd2:	e7cd      	b.n	800cd70 <__smakebuf_r+0x18>
 800cdd4:	0800adf1 	.word	0x0800adf1

0800cdd8 <malloc>:
 800cdd8:	4b02      	ldr	r3, [pc, #8]	; (800cde4 <malloc+0xc>)
 800cdda:	4601      	mov	r1, r0
 800cddc:	6818      	ldr	r0, [r3, #0]
 800cdde:	f7fe b937 	b.w	800b050 <_malloc_r>
 800cde2:	bf00      	nop
 800cde4:	200000d0 	.word	0x200000d0

0800cde8 <__malloc_lock>:
 800cde8:	4801      	ldr	r0, [pc, #4]	; (800cdf0 <__malloc_lock+0x8>)
 800cdea:	f7fe b8f8 	b.w	800afde <__retarget_lock_acquire_recursive>
 800cdee:	bf00      	nop
 800cdf0:	20006ff4 	.word	0x20006ff4

0800cdf4 <__malloc_unlock>:
 800cdf4:	4801      	ldr	r0, [pc, #4]	; (800cdfc <__malloc_unlock+0x8>)
 800cdf6:	f7fe b8f3 	b.w	800afe0 <__retarget_lock_release_recursive>
 800cdfa:	bf00      	nop
 800cdfc:	20006ff4 	.word	0x20006ff4

0800ce00 <_Balloc>:
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce04:	4604      	mov	r4, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	b976      	cbnz	r6, 800ce28 <_Balloc+0x28>
 800ce0a:	2010      	movs	r0, #16
 800ce0c:	f7ff ffe4 	bl	800cdd8 <malloc>
 800ce10:	4602      	mov	r2, r0
 800ce12:	6260      	str	r0, [r4, #36]	; 0x24
 800ce14:	b920      	cbnz	r0, 800ce20 <_Balloc+0x20>
 800ce16:	4b18      	ldr	r3, [pc, #96]	; (800ce78 <_Balloc+0x78>)
 800ce18:	4818      	ldr	r0, [pc, #96]	; (800ce7c <_Balloc+0x7c>)
 800ce1a:	2166      	movs	r1, #102	; 0x66
 800ce1c:	f000 fd42 	bl	800d8a4 <__assert_func>
 800ce20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce24:	6006      	str	r6, [r0, #0]
 800ce26:	60c6      	str	r6, [r0, #12]
 800ce28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce2a:	68f3      	ldr	r3, [r6, #12]
 800ce2c:	b183      	cbz	r3, 800ce50 <_Balloc+0x50>
 800ce2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce36:	b9b8      	cbnz	r0, 800ce68 <_Balloc+0x68>
 800ce38:	2101      	movs	r1, #1
 800ce3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce3e:	1d72      	adds	r2, r6, #5
 800ce40:	0092      	lsls	r2, r2, #2
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fb60 	bl	800d508 <_calloc_r>
 800ce48:	b160      	cbz	r0, 800ce64 <_Balloc+0x64>
 800ce4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce4e:	e00e      	b.n	800ce6e <_Balloc+0x6e>
 800ce50:	2221      	movs	r2, #33	; 0x21
 800ce52:	2104      	movs	r1, #4
 800ce54:	4620      	mov	r0, r4
 800ce56:	f000 fb57 	bl	800d508 <_calloc_r>
 800ce5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce5c:	60f0      	str	r0, [r6, #12]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1e4      	bne.n	800ce2e <_Balloc+0x2e>
 800ce64:	2000      	movs	r0, #0
 800ce66:	bd70      	pop	{r4, r5, r6, pc}
 800ce68:	6802      	ldr	r2, [r0, #0]
 800ce6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce74:	e7f7      	b.n	800ce66 <_Balloc+0x66>
 800ce76:	bf00      	nop
 800ce78:	080103c9 	.word	0x080103c9
 800ce7c:	0801044c 	.word	0x0801044c

0800ce80 <_Bfree>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce84:	4605      	mov	r5, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	b976      	cbnz	r6, 800cea8 <_Bfree+0x28>
 800ce8a:	2010      	movs	r0, #16
 800ce8c:	f7ff ffa4 	bl	800cdd8 <malloc>
 800ce90:	4602      	mov	r2, r0
 800ce92:	6268      	str	r0, [r5, #36]	; 0x24
 800ce94:	b920      	cbnz	r0, 800cea0 <_Bfree+0x20>
 800ce96:	4b09      	ldr	r3, [pc, #36]	; (800cebc <_Bfree+0x3c>)
 800ce98:	4809      	ldr	r0, [pc, #36]	; (800cec0 <_Bfree+0x40>)
 800ce9a:	218a      	movs	r1, #138	; 0x8a
 800ce9c:	f000 fd02 	bl	800d8a4 <__assert_func>
 800cea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cea4:	6006      	str	r6, [r0, #0]
 800cea6:	60c6      	str	r6, [r0, #12]
 800cea8:	b13c      	cbz	r4, 800ceba <_Bfree+0x3a>
 800ceaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ceac:	6862      	ldr	r2, [r4, #4]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ceb4:	6021      	str	r1, [r4, #0]
 800ceb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	080103c9 	.word	0x080103c9
 800cec0:	0801044c 	.word	0x0801044c

0800cec4 <__multadd>:
 800cec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec8:	690d      	ldr	r5, [r1, #16]
 800ceca:	4607      	mov	r7, r0
 800cecc:	460c      	mov	r4, r1
 800cece:	461e      	mov	r6, r3
 800ced0:	f101 0c14 	add.w	ip, r1, #20
 800ced4:	2000      	movs	r0, #0
 800ced6:	f8dc 3000 	ldr.w	r3, [ip]
 800ceda:	b299      	uxth	r1, r3
 800cedc:	fb02 6101 	mla	r1, r2, r1, r6
 800cee0:	0c1e      	lsrs	r6, r3, #16
 800cee2:	0c0b      	lsrs	r3, r1, #16
 800cee4:	fb02 3306 	mla	r3, r2, r6, r3
 800cee8:	b289      	uxth	r1, r1
 800ceea:	3001      	adds	r0, #1
 800ceec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cef0:	4285      	cmp	r5, r0
 800cef2:	f84c 1b04 	str.w	r1, [ip], #4
 800cef6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cefa:	dcec      	bgt.n	800ced6 <__multadd+0x12>
 800cefc:	b30e      	cbz	r6, 800cf42 <__multadd+0x7e>
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	42ab      	cmp	r3, r5
 800cf02:	dc19      	bgt.n	800cf38 <__multadd+0x74>
 800cf04:	6861      	ldr	r1, [r4, #4]
 800cf06:	4638      	mov	r0, r7
 800cf08:	3101      	adds	r1, #1
 800cf0a:	f7ff ff79 	bl	800ce00 <_Balloc>
 800cf0e:	4680      	mov	r8, r0
 800cf10:	b928      	cbnz	r0, 800cf1e <__multadd+0x5a>
 800cf12:	4602      	mov	r2, r0
 800cf14:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <__multadd+0x84>)
 800cf16:	480d      	ldr	r0, [pc, #52]	; (800cf4c <__multadd+0x88>)
 800cf18:	21b5      	movs	r1, #181	; 0xb5
 800cf1a:	f000 fcc3 	bl	800d8a4 <__assert_func>
 800cf1e:	6922      	ldr	r2, [r4, #16]
 800cf20:	3202      	adds	r2, #2
 800cf22:	f104 010c 	add.w	r1, r4, #12
 800cf26:	0092      	lsls	r2, r2, #2
 800cf28:	300c      	adds	r0, #12
 800cf2a:	f7fe f85a 	bl	800afe2 <memcpy>
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4638      	mov	r0, r7
 800cf32:	f7ff ffa5 	bl	800ce80 <_Bfree>
 800cf36:	4644      	mov	r4, r8
 800cf38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf3c:	3501      	adds	r5, #1
 800cf3e:	615e      	str	r6, [r3, #20]
 800cf40:	6125      	str	r5, [r4, #16]
 800cf42:	4620      	mov	r0, r4
 800cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf48:	0801043b 	.word	0x0801043b
 800cf4c:	0801044c 	.word	0x0801044c

0800cf50 <__hi0bits>:
 800cf50:	0c03      	lsrs	r3, r0, #16
 800cf52:	041b      	lsls	r3, r3, #16
 800cf54:	b9d3      	cbnz	r3, 800cf8c <__hi0bits+0x3c>
 800cf56:	0400      	lsls	r0, r0, #16
 800cf58:	2310      	movs	r3, #16
 800cf5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf5e:	bf04      	itt	eq
 800cf60:	0200      	lsleq	r0, r0, #8
 800cf62:	3308      	addeq	r3, #8
 800cf64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf68:	bf04      	itt	eq
 800cf6a:	0100      	lsleq	r0, r0, #4
 800cf6c:	3304      	addeq	r3, #4
 800cf6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf72:	bf04      	itt	eq
 800cf74:	0080      	lsleq	r0, r0, #2
 800cf76:	3302      	addeq	r3, #2
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	db05      	blt.n	800cf88 <__hi0bits+0x38>
 800cf7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf80:	f103 0301 	add.w	r3, r3, #1
 800cf84:	bf08      	it	eq
 800cf86:	2320      	moveq	r3, #32
 800cf88:	4618      	mov	r0, r3
 800cf8a:	4770      	bx	lr
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e7e4      	b.n	800cf5a <__hi0bits+0xa>

0800cf90 <__lo0bits>:
 800cf90:	6803      	ldr	r3, [r0, #0]
 800cf92:	f013 0207 	ands.w	r2, r3, #7
 800cf96:	4601      	mov	r1, r0
 800cf98:	d00b      	beq.n	800cfb2 <__lo0bits+0x22>
 800cf9a:	07da      	lsls	r2, r3, #31
 800cf9c:	d423      	bmi.n	800cfe6 <__lo0bits+0x56>
 800cf9e:	0798      	lsls	r0, r3, #30
 800cfa0:	bf49      	itett	mi
 800cfa2:	085b      	lsrmi	r3, r3, #1
 800cfa4:	089b      	lsrpl	r3, r3, #2
 800cfa6:	2001      	movmi	r0, #1
 800cfa8:	600b      	strmi	r3, [r1, #0]
 800cfaa:	bf5c      	itt	pl
 800cfac:	600b      	strpl	r3, [r1, #0]
 800cfae:	2002      	movpl	r0, #2
 800cfb0:	4770      	bx	lr
 800cfb2:	b298      	uxth	r0, r3
 800cfb4:	b9a8      	cbnz	r0, 800cfe2 <__lo0bits+0x52>
 800cfb6:	0c1b      	lsrs	r3, r3, #16
 800cfb8:	2010      	movs	r0, #16
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	b90a      	cbnz	r2, 800cfc2 <__lo0bits+0x32>
 800cfbe:	3008      	adds	r0, #8
 800cfc0:	0a1b      	lsrs	r3, r3, #8
 800cfc2:	071a      	lsls	r2, r3, #28
 800cfc4:	bf04      	itt	eq
 800cfc6:	091b      	lsreq	r3, r3, #4
 800cfc8:	3004      	addeq	r0, #4
 800cfca:	079a      	lsls	r2, r3, #30
 800cfcc:	bf04      	itt	eq
 800cfce:	089b      	lsreq	r3, r3, #2
 800cfd0:	3002      	addeq	r0, #2
 800cfd2:	07da      	lsls	r2, r3, #31
 800cfd4:	d403      	bmi.n	800cfde <__lo0bits+0x4e>
 800cfd6:	085b      	lsrs	r3, r3, #1
 800cfd8:	f100 0001 	add.w	r0, r0, #1
 800cfdc:	d005      	beq.n	800cfea <__lo0bits+0x5a>
 800cfde:	600b      	str	r3, [r1, #0]
 800cfe0:	4770      	bx	lr
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	e7e9      	b.n	800cfba <__lo0bits+0x2a>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	4770      	bx	lr
 800cfea:	2020      	movs	r0, #32
 800cfec:	4770      	bx	lr
	...

0800cff0 <__i2b>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	460c      	mov	r4, r1
 800cff4:	2101      	movs	r1, #1
 800cff6:	f7ff ff03 	bl	800ce00 <_Balloc>
 800cffa:	4602      	mov	r2, r0
 800cffc:	b928      	cbnz	r0, 800d00a <__i2b+0x1a>
 800cffe:	4b05      	ldr	r3, [pc, #20]	; (800d014 <__i2b+0x24>)
 800d000:	4805      	ldr	r0, [pc, #20]	; (800d018 <__i2b+0x28>)
 800d002:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d006:	f000 fc4d 	bl	800d8a4 <__assert_func>
 800d00a:	2301      	movs	r3, #1
 800d00c:	6144      	str	r4, [r0, #20]
 800d00e:	6103      	str	r3, [r0, #16]
 800d010:	bd10      	pop	{r4, pc}
 800d012:	bf00      	nop
 800d014:	0801043b 	.word	0x0801043b
 800d018:	0801044c 	.word	0x0801044c

0800d01c <__multiply>:
 800d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	4691      	mov	r9, r2
 800d022:	690a      	ldr	r2, [r1, #16]
 800d024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d028:	429a      	cmp	r2, r3
 800d02a:	bfb8      	it	lt
 800d02c:	460b      	movlt	r3, r1
 800d02e:	460c      	mov	r4, r1
 800d030:	bfbc      	itt	lt
 800d032:	464c      	movlt	r4, r9
 800d034:	4699      	movlt	r9, r3
 800d036:	6927      	ldr	r7, [r4, #16]
 800d038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d03c:	68a3      	ldr	r3, [r4, #8]
 800d03e:	6861      	ldr	r1, [r4, #4]
 800d040:	eb07 060a 	add.w	r6, r7, sl
 800d044:	42b3      	cmp	r3, r6
 800d046:	b085      	sub	sp, #20
 800d048:	bfb8      	it	lt
 800d04a:	3101      	addlt	r1, #1
 800d04c:	f7ff fed8 	bl	800ce00 <_Balloc>
 800d050:	b930      	cbnz	r0, 800d060 <__multiply+0x44>
 800d052:	4602      	mov	r2, r0
 800d054:	4b44      	ldr	r3, [pc, #272]	; (800d168 <__multiply+0x14c>)
 800d056:	4845      	ldr	r0, [pc, #276]	; (800d16c <__multiply+0x150>)
 800d058:	f240 115d 	movw	r1, #349	; 0x15d
 800d05c:	f000 fc22 	bl	800d8a4 <__assert_func>
 800d060:	f100 0514 	add.w	r5, r0, #20
 800d064:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d068:	462b      	mov	r3, r5
 800d06a:	2200      	movs	r2, #0
 800d06c:	4543      	cmp	r3, r8
 800d06e:	d321      	bcc.n	800d0b4 <__multiply+0x98>
 800d070:	f104 0314 	add.w	r3, r4, #20
 800d074:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d078:	f109 0314 	add.w	r3, r9, #20
 800d07c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d080:	9202      	str	r2, [sp, #8]
 800d082:	1b3a      	subs	r2, r7, r4
 800d084:	3a15      	subs	r2, #21
 800d086:	f022 0203 	bic.w	r2, r2, #3
 800d08a:	3204      	adds	r2, #4
 800d08c:	f104 0115 	add.w	r1, r4, #21
 800d090:	428f      	cmp	r7, r1
 800d092:	bf38      	it	cc
 800d094:	2204      	movcc	r2, #4
 800d096:	9201      	str	r2, [sp, #4]
 800d098:	9a02      	ldr	r2, [sp, #8]
 800d09a:	9303      	str	r3, [sp, #12]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d80c      	bhi.n	800d0ba <__multiply+0x9e>
 800d0a0:	2e00      	cmp	r6, #0
 800d0a2:	dd03      	ble.n	800d0ac <__multiply+0x90>
 800d0a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d05a      	beq.n	800d162 <__multiply+0x146>
 800d0ac:	6106      	str	r6, [r0, #16]
 800d0ae:	b005      	add	sp, #20
 800d0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b4:	f843 2b04 	str.w	r2, [r3], #4
 800d0b8:	e7d8      	b.n	800d06c <__multiply+0x50>
 800d0ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0be:	f1ba 0f00 	cmp.w	sl, #0
 800d0c2:	d024      	beq.n	800d10e <__multiply+0xf2>
 800d0c4:	f104 0e14 	add.w	lr, r4, #20
 800d0c8:	46a9      	mov	r9, r5
 800d0ca:	f04f 0c00 	mov.w	ip, #0
 800d0ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d0d2:	f8d9 1000 	ldr.w	r1, [r9]
 800d0d6:	fa1f fb82 	uxth.w	fp, r2
 800d0da:	b289      	uxth	r1, r1
 800d0dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d0e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d0e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d0e8:	4461      	add	r1, ip
 800d0ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d0ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800d0f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d0f6:	b289      	uxth	r1, r1
 800d0f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d0fc:	4577      	cmp	r7, lr
 800d0fe:	f849 1b04 	str.w	r1, [r9], #4
 800d102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d106:	d8e2      	bhi.n	800d0ce <__multiply+0xb2>
 800d108:	9a01      	ldr	r2, [sp, #4]
 800d10a:	f845 c002 	str.w	ip, [r5, r2]
 800d10e:	9a03      	ldr	r2, [sp, #12]
 800d110:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d114:	3304      	adds	r3, #4
 800d116:	f1b9 0f00 	cmp.w	r9, #0
 800d11a:	d020      	beq.n	800d15e <__multiply+0x142>
 800d11c:	6829      	ldr	r1, [r5, #0]
 800d11e:	f104 0c14 	add.w	ip, r4, #20
 800d122:	46ae      	mov	lr, r5
 800d124:	f04f 0a00 	mov.w	sl, #0
 800d128:	f8bc b000 	ldrh.w	fp, [ip]
 800d12c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d130:	fb09 220b 	mla	r2, r9, fp, r2
 800d134:	4492      	add	sl, r2
 800d136:	b289      	uxth	r1, r1
 800d138:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d13c:	f84e 1b04 	str.w	r1, [lr], #4
 800d140:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d144:	f8be 1000 	ldrh.w	r1, [lr]
 800d148:	0c12      	lsrs	r2, r2, #16
 800d14a:	fb09 1102 	mla	r1, r9, r2, r1
 800d14e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d152:	4567      	cmp	r7, ip
 800d154:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d158:	d8e6      	bhi.n	800d128 <__multiply+0x10c>
 800d15a:	9a01      	ldr	r2, [sp, #4]
 800d15c:	50a9      	str	r1, [r5, r2]
 800d15e:	3504      	adds	r5, #4
 800d160:	e79a      	b.n	800d098 <__multiply+0x7c>
 800d162:	3e01      	subs	r6, #1
 800d164:	e79c      	b.n	800d0a0 <__multiply+0x84>
 800d166:	bf00      	nop
 800d168:	0801043b 	.word	0x0801043b
 800d16c:	0801044c 	.word	0x0801044c

0800d170 <__pow5mult>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	4615      	mov	r5, r2
 800d176:	f012 0203 	ands.w	r2, r2, #3
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	d007      	beq.n	800d190 <__pow5mult+0x20>
 800d180:	4c25      	ldr	r4, [pc, #148]	; (800d218 <__pow5mult+0xa8>)
 800d182:	3a01      	subs	r2, #1
 800d184:	2300      	movs	r3, #0
 800d186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d18a:	f7ff fe9b 	bl	800cec4 <__multadd>
 800d18e:	4607      	mov	r7, r0
 800d190:	10ad      	asrs	r5, r5, #2
 800d192:	d03d      	beq.n	800d210 <__pow5mult+0xa0>
 800d194:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d196:	b97c      	cbnz	r4, 800d1b8 <__pow5mult+0x48>
 800d198:	2010      	movs	r0, #16
 800d19a:	f7ff fe1d 	bl	800cdd8 <malloc>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	6270      	str	r0, [r6, #36]	; 0x24
 800d1a2:	b928      	cbnz	r0, 800d1b0 <__pow5mult+0x40>
 800d1a4:	4b1d      	ldr	r3, [pc, #116]	; (800d21c <__pow5mult+0xac>)
 800d1a6:	481e      	ldr	r0, [pc, #120]	; (800d220 <__pow5mult+0xb0>)
 800d1a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d1ac:	f000 fb7a 	bl	800d8a4 <__assert_func>
 800d1b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1b4:	6004      	str	r4, [r0, #0]
 800d1b6:	60c4      	str	r4, [r0, #12]
 800d1b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1c0:	b94c      	cbnz	r4, 800d1d6 <__pow5mult+0x66>
 800d1c2:	f240 2171 	movw	r1, #625	; 0x271
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	f7ff ff12 	bl	800cff0 <__i2b>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	6003      	str	r3, [r0, #0]
 800d1d6:	f04f 0900 	mov.w	r9, #0
 800d1da:	07eb      	lsls	r3, r5, #31
 800d1dc:	d50a      	bpl.n	800d1f4 <__pow5mult+0x84>
 800d1de:	4639      	mov	r1, r7
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ff1a 	bl	800d01c <__multiply>
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7ff fe47 	bl	800ce80 <_Bfree>
 800d1f2:	4647      	mov	r7, r8
 800d1f4:	106d      	asrs	r5, r5, #1
 800d1f6:	d00b      	beq.n	800d210 <__pow5mult+0xa0>
 800d1f8:	6820      	ldr	r0, [r4, #0]
 800d1fa:	b938      	cbnz	r0, 800d20c <__pow5mult+0x9c>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4621      	mov	r1, r4
 800d200:	4630      	mov	r0, r6
 800d202:	f7ff ff0b 	bl	800d01c <__multiply>
 800d206:	6020      	str	r0, [r4, #0]
 800d208:	f8c0 9000 	str.w	r9, [r0]
 800d20c:	4604      	mov	r4, r0
 800d20e:	e7e4      	b.n	800d1da <__pow5mult+0x6a>
 800d210:	4638      	mov	r0, r7
 800d212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d216:	bf00      	nop
 800d218:	08010598 	.word	0x08010598
 800d21c:	080103c9 	.word	0x080103c9
 800d220:	0801044c 	.word	0x0801044c

0800d224 <__lshift>:
 800d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	460c      	mov	r4, r1
 800d22a:	6849      	ldr	r1, [r1, #4]
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d232:	68a3      	ldr	r3, [r4, #8]
 800d234:	4607      	mov	r7, r0
 800d236:	4691      	mov	r9, r2
 800d238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d23c:	f108 0601 	add.w	r6, r8, #1
 800d240:	42b3      	cmp	r3, r6
 800d242:	db0b      	blt.n	800d25c <__lshift+0x38>
 800d244:	4638      	mov	r0, r7
 800d246:	f7ff fddb 	bl	800ce00 <_Balloc>
 800d24a:	4605      	mov	r5, r0
 800d24c:	b948      	cbnz	r0, 800d262 <__lshift+0x3e>
 800d24e:	4602      	mov	r2, r0
 800d250:	4b2a      	ldr	r3, [pc, #168]	; (800d2fc <__lshift+0xd8>)
 800d252:	482b      	ldr	r0, [pc, #172]	; (800d300 <__lshift+0xdc>)
 800d254:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d258:	f000 fb24 	bl	800d8a4 <__assert_func>
 800d25c:	3101      	adds	r1, #1
 800d25e:	005b      	lsls	r3, r3, #1
 800d260:	e7ee      	b.n	800d240 <__lshift+0x1c>
 800d262:	2300      	movs	r3, #0
 800d264:	f100 0114 	add.w	r1, r0, #20
 800d268:	f100 0210 	add.w	r2, r0, #16
 800d26c:	4618      	mov	r0, r3
 800d26e:	4553      	cmp	r3, sl
 800d270:	db37      	blt.n	800d2e2 <__lshift+0xbe>
 800d272:	6920      	ldr	r0, [r4, #16]
 800d274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d278:	f104 0314 	add.w	r3, r4, #20
 800d27c:	f019 091f 	ands.w	r9, r9, #31
 800d280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d284:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d288:	d02f      	beq.n	800d2ea <__lshift+0xc6>
 800d28a:	f1c9 0e20 	rsb	lr, r9, #32
 800d28e:	468a      	mov	sl, r1
 800d290:	f04f 0c00 	mov.w	ip, #0
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	fa02 f209 	lsl.w	r2, r2, r9
 800d29a:	ea42 020c 	orr.w	r2, r2, ip
 800d29e:	f84a 2b04 	str.w	r2, [sl], #4
 800d2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2a6:	4298      	cmp	r0, r3
 800d2a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d2ac:	d8f2      	bhi.n	800d294 <__lshift+0x70>
 800d2ae:	1b03      	subs	r3, r0, r4
 800d2b0:	3b15      	subs	r3, #21
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	f104 0215 	add.w	r2, r4, #21
 800d2bc:	4290      	cmp	r0, r2
 800d2be:	bf38      	it	cc
 800d2c0:	2304      	movcc	r3, #4
 800d2c2:	f841 c003 	str.w	ip, [r1, r3]
 800d2c6:	f1bc 0f00 	cmp.w	ip, #0
 800d2ca:	d001      	beq.n	800d2d0 <__lshift+0xac>
 800d2cc:	f108 0602 	add.w	r6, r8, #2
 800d2d0:	3e01      	subs	r6, #1
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	612e      	str	r6, [r5, #16]
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	f7ff fdd2 	bl	800ce80 <_Bfree>
 800d2dc:	4628      	mov	r0, r5
 800d2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	e7c1      	b.n	800d26e <__lshift+0x4a>
 800d2ea:	3904      	subs	r1, #4
 800d2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2f4:	4298      	cmp	r0, r3
 800d2f6:	d8f9      	bhi.n	800d2ec <__lshift+0xc8>
 800d2f8:	e7ea      	b.n	800d2d0 <__lshift+0xac>
 800d2fa:	bf00      	nop
 800d2fc:	0801043b 	.word	0x0801043b
 800d300:	0801044c 	.word	0x0801044c

0800d304 <__mcmp>:
 800d304:	b530      	push	{r4, r5, lr}
 800d306:	6902      	ldr	r2, [r0, #16]
 800d308:	690c      	ldr	r4, [r1, #16]
 800d30a:	1b12      	subs	r2, r2, r4
 800d30c:	d10e      	bne.n	800d32c <__mcmp+0x28>
 800d30e:	f100 0314 	add.w	r3, r0, #20
 800d312:	3114      	adds	r1, #20
 800d314:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d31c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d320:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d324:	42a5      	cmp	r5, r4
 800d326:	d003      	beq.n	800d330 <__mcmp+0x2c>
 800d328:	d305      	bcc.n	800d336 <__mcmp+0x32>
 800d32a:	2201      	movs	r2, #1
 800d32c:	4610      	mov	r0, r2
 800d32e:	bd30      	pop	{r4, r5, pc}
 800d330:	4283      	cmp	r3, r0
 800d332:	d3f3      	bcc.n	800d31c <__mcmp+0x18>
 800d334:	e7fa      	b.n	800d32c <__mcmp+0x28>
 800d336:	f04f 32ff 	mov.w	r2, #4294967295
 800d33a:	e7f7      	b.n	800d32c <__mcmp+0x28>

0800d33c <__mdiff>:
 800d33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d340:	460c      	mov	r4, r1
 800d342:	4606      	mov	r6, r0
 800d344:	4611      	mov	r1, r2
 800d346:	4620      	mov	r0, r4
 800d348:	4690      	mov	r8, r2
 800d34a:	f7ff ffdb 	bl	800d304 <__mcmp>
 800d34e:	1e05      	subs	r5, r0, #0
 800d350:	d110      	bne.n	800d374 <__mdiff+0x38>
 800d352:	4629      	mov	r1, r5
 800d354:	4630      	mov	r0, r6
 800d356:	f7ff fd53 	bl	800ce00 <_Balloc>
 800d35a:	b930      	cbnz	r0, 800d36a <__mdiff+0x2e>
 800d35c:	4b3a      	ldr	r3, [pc, #232]	; (800d448 <__mdiff+0x10c>)
 800d35e:	4602      	mov	r2, r0
 800d360:	f240 2132 	movw	r1, #562	; 0x232
 800d364:	4839      	ldr	r0, [pc, #228]	; (800d44c <__mdiff+0x110>)
 800d366:	f000 fa9d 	bl	800d8a4 <__assert_func>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d374:	bfa4      	itt	ge
 800d376:	4643      	movge	r3, r8
 800d378:	46a0      	movge	r8, r4
 800d37a:	4630      	mov	r0, r6
 800d37c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d380:	bfa6      	itte	ge
 800d382:	461c      	movge	r4, r3
 800d384:	2500      	movge	r5, #0
 800d386:	2501      	movlt	r5, #1
 800d388:	f7ff fd3a 	bl	800ce00 <_Balloc>
 800d38c:	b920      	cbnz	r0, 800d398 <__mdiff+0x5c>
 800d38e:	4b2e      	ldr	r3, [pc, #184]	; (800d448 <__mdiff+0x10c>)
 800d390:	4602      	mov	r2, r0
 800d392:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d396:	e7e5      	b.n	800d364 <__mdiff+0x28>
 800d398:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d39c:	6926      	ldr	r6, [r4, #16]
 800d39e:	60c5      	str	r5, [r0, #12]
 800d3a0:	f104 0914 	add.w	r9, r4, #20
 800d3a4:	f108 0514 	add.w	r5, r8, #20
 800d3a8:	f100 0e14 	add.w	lr, r0, #20
 800d3ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3b4:	f108 0210 	add.w	r2, r8, #16
 800d3b8:	46f2      	mov	sl, lr
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3c4:	fa1f f883 	uxth.w	r8, r3
 800d3c8:	fa11 f18b 	uxtah	r1, r1, fp
 800d3cc:	0c1b      	lsrs	r3, r3, #16
 800d3ce:	eba1 0808 	sub.w	r8, r1, r8
 800d3d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3da:	fa1f f888 	uxth.w	r8, r8
 800d3de:	1419      	asrs	r1, r3, #16
 800d3e0:	454e      	cmp	r6, r9
 800d3e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3e6:	f84a 3b04 	str.w	r3, [sl], #4
 800d3ea:	d8e7      	bhi.n	800d3bc <__mdiff+0x80>
 800d3ec:	1b33      	subs	r3, r6, r4
 800d3ee:	3b15      	subs	r3, #21
 800d3f0:	f023 0303 	bic.w	r3, r3, #3
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	3415      	adds	r4, #21
 800d3f8:	42a6      	cmp	r6, r4
 800d3fa:	bf38      	it	cc
 800d3fc:	2304      	movcc	r3, #4
 800d3fe:	441d      	add	r5, r3
 800d400:	4473      	add	r3, lr
 800d402:	469e      	mov	lr, r3
 800d404:	462e      	mov	r6, r5
 800d406:	4566      	cmp	r6, ip
 800d408:	d30e      	bcc.n	800d428 <__mdiff+0xec>
 800d40a:	f10c 0203 	add.w	r2, ip, #3
 800d40e:	1b52      	subs	r2, r2, r5
 800d410:	f022 0203 	bic.w	r2, r2, #3
 800d414:	3d03      	subs	r5, #3
 800d416:	45ac      	cmp	ip, r5
 800d418:	bf38      	it	cc
 800d41a:	2200      	movcc	r2, #0
 800d41c:	441a      	add	r2, r3
 800d41e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d422:	b17b      	cbz	r3, 800d444 <__mdiff+0x108>
 800d424:	6107      	str	r7, [r0, #16]
 800d426:	e7a3      	b.n	800d370 <__mdiff+0x34>
 800d428:	f856 8b04 	ldr.w	r8, [r6], #4
 800d42c:	fa11 f288 	uxtah	r2, r1, r8
 800d430:	1414      	asrs	r4, r2, #16
 800d432:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d436:	b292      	uxth	r2, r2
 800d438:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d43c:	f84e 2b04 	str.w	r2, [lr], #4
 800d440:	1421      	asrs	r1, r4, #16
 800d442:	e7e0      	b.n	800d406 <__mdiff+0xca>
 800d444:	3f01      	subs	r7, #1
 800d446:	e7ea      	b.n	800d41e <__mdiff+0xe2>
 800d448:	0801043b 	.word	0x0801043b
 800d44c:	0801044c 	.word	0x0801044c

0800d450 <__d2b>:
 800d450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d454:	4689      	mov	r9, r1
 800d456:	2101      	movs	r1, #1
 800d458:	ec57 6b10 	vmov	r6, r7, d0
 800d45c:	4690      	mov	r8, r2
 800d45e:	f7ff fccf 	bl	800ce00 <_Balloc>
 800d462:	4604      	mov	r4, r0
 800d464:	b930      	cbnz	r0, 800d474 <__d2b+0x24>
 800d466:	4602      	mov	r2, r0
 800d468:	4b25      	ldr	r3, [pc, #148]	; (800d500 <__d2b+0xb0>)
 800d46a:	4826      	ldr	r0, [pc, #152]	; (800d504 <__d2b+0xb4>)
 800d46c:	f240 310a 	movw	r1, #778	; 0x30a
 800d470:	f000 fa18 	bl	800d8a4 <__assert_func>
 800d474:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d47c:	bb35      	cbnz	r5, 800d4cc <__d2b+0x7c>
 800d47e:	2e00      	cmp	r6, #0
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	d028      	beq.n	800d4d6 <__d2b+0x86>
 800d484:	4668      	mov	r0, sp
 800d486:	9600      	str	r6, [sp, #0]
 800d488:	f7ff fd82 	bl	800cf90 <__lo0bits>
 800d48c:	9900      	ldr	r1, [sp, #0]
 800d48e:	b300      	cbz	r0, 800d4d2 <__d2b+0x82>
 800d490:	9a01      	ldr	r2, [sp, #4]
 800d492:	f1c0 0320 	rsb	r3, r0, #32
 800d496:	fa02 f303 	lsl.w	r3, r2, r3
 800d49a:	430b      	orrs	r3, r1
 800d49c:	40c2      	lsrs	r2, r0
 800d49e:	6163      	str	r3, [r4, #20]
 800d4a0:	9201      	str	r2, [sp, #4]
 800d4a2:	9b01      	ldr	r3, [sp, #4]
 800d4a4:	61a3      	str	r3, [r4, #24]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	bf14      	ite	ne
 800d4aa:	2202      	movne	r2, #2
 800d4ac:	2201      	moveq	r2, #1
 800d4ae:	6122      	str	r2, [r4, #16]
 800d4b0:	b1d5      	cbz	r5, 800d4e8 <__d2b+0x98>
 800d4b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4b6:	4405      	add	r5, r0
 800d4b8:	f8c9 5000 	str.w	r5, [r9]
 800d4bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4c0:	f8c8 0000 	str.w	r0, [r8]
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	b003      	add	sp, #12
 800d4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4d0:	e7d5      	b.n	800d47e <__d2b+0x2e>
 800d4d2:	6161      	str	r1, [r4, #20]
 800d4d4:	e7e5      	b.n	800d4a2 <__d2b+0x52>
 800d4d6:	a801      	add	r0, sp, #4
 800d4d8:	f7ff fd5a 	bl	800cf90 <__lo0bits>
 800d4dc:	9b01      	ldr	r3, [sp, #4]
 800d4de:	6163      	str	r3, [r4, #20]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	6122      	str	r2, [r4, #16]
 800d4e4:	3020      	adds	r0, #32
 800d4e6:	e7e3      	b.n	800d4b0 <__d2b+0x60>
 800d4e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4f0:	f8c9 0000 	str.w	r0, [r9]
 800d4f4:	6918      	ldr	r0, [r3, #16]
 800d4f6:	f7ff fd2b 	bl	800cf50 <__hi0bits>
 800d4fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4fe:	e7df      	b.n	800d4c0 <__d2b+0x70>
 800d500:	0801043b 	.word	0x0801043b
 800d504:	0801044c 	.word	0x0801044c

0800d508 <_calloc_r>:
 800d508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d50a:	fba1 2402 	umull	r2, r4, r1, r2
 800d50e:	b94c      	cbnz	r4, 800d524 <_calloc_r+0x1c>
 800d510:	4611      	mov	r1, r2
 800d512:	9201      	str	r2, [sp, #4]
 800d514:	f7fd fd9c 	bl	800b050 <_malloc_r>
 800d518:	9a01      	ldr	r2, [sp, #4]
 800d51a:	4605      	mov	r5, r0
 800d51c:	b930      	cbnz	r0, 800d52c <_calloc_r+0x24>
 800d51e:	4628      	mov	r0, r5
 800d520:	b003      	add	sp, #12
 800d522:	bd30      	pop	{r4, r5, pc}
 800d524:	220c      	movs	r2, #12
 800d526:	6002      	str	r2, [r0, #0]
 800d528:	2500      	movs	r5, #0
 800d52a:	e7f8      	b.n	800d51e <_calloc_r+0x16>
 800d52c:	4621      	mov	r1, r4
 800d52e:	f7fd fd66 	bl	800affe <memset>
 800d532:	e7f4      	b.n	800d51e <_calloc_r+0x16>

0800d534 <_free_r>:
 800d534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d536:	2900      	cmp	r1, #0
 800d538:	d044      	beq.n	800d5c4 <_free_r+0x90>
 800d53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d53e:	9001      	str	r0, [sp, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	f1a1 0404 	sub.w	r4, r1, #4
 800d546:	bfb8      	it	lt
 800d548:	18e4      	addlt	r4, r4, r3
 800d54a:	f7ff fc4d 	bl	800cde8 <__malloc_lock>
 800d54e:	4a1e      	ldr	r2, [pc, #120]	; (800d5c8 <_free_r+0x94>)
 800d550:	9801      	ldr	r0, [sp, #4]
 800d552:	6813      	ldr	r3, [r2, #0]
 800d554:	b933      	cbnz	r3, 800d564 <_free_r+0x30>
 800d556:	6063      	str	r3, [r4, #4]
 800d558:	6014      	str	r4, [r2, #0]
 800d55a:	b003      	add	sp, #12
 800d55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d560:	f7ff bc48 	b.w	800cdf4 <__malloc_unlock>
 800d564:	42a3      	cmp	r3, r4
 800d566:	d908      	bls.n	800d57a <_free_r+0x46>
 800d568:	6825      	ldr	r5, [r4, #0]
 800d56a:	1961      	adds	r1, r4, r5
 800d56c:	428b      	cmp	r3, r1
 800d56e:	bf01      	itttt	eq
 800d570:	6819      	ldreq	r1, [r3, #0]
 800d572:	685b      	ldreq	r3, [r3, #4]
 800d574:	1949      	addeq	r1, r1, r5
 800d576:	6021      	streq	r1, [r4, #0]
 800d578:	e7ed      	b.n	800d556 <_free_r+0x22>
 800d57a:	461a      	mov	r2, r3
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	b10b      	cbz	r3, 800d584 <_free_r+0x50>
 800d580:	42a3      	cmp	r3, r4
 800d582:	d9fa      	bls.n	800d57a <_free_r+0x46>
 800d584:	6811      	ldr	r1, [r2, #0]
 800d586:	1855      	adds	r5, r2, r1
 800d588:	42a5      	cmp	r5, r4
 800d58a:	d10b      	bne.n	800d5a4 <_free_r+0x70>
 800d58c:	6824      	ldr	r4, [r4, #0]
 800d58e:	4421      	add	r1, r4
 800d590:	1854      	adds	r4, r2, r1
 800d592:	42a3      	cmp	r3, r4
 800d594:	6011      	str	r1, [r2, #0]
 800d596:	d1e0      	bne.n	800d55a <_free_r+0x26>
 800d598:	681c      	ldr	r4, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	6053      	str	r3, [r2, #4]
 800d59e:	4421      	add	r1, r4
 800d5a0:	6011      	str	r1, [r2, #0]
 800d5a2:	e7da      	b.n	800d55a <_free_r+0x26>
 800d5a4:	d902      	bls.n	800d5ac <_free_r+0x78>
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	6003      	str	r3, [r0, #0]
 800d5aa:	e7d6      	b.n	800d55a <_free_r+0x26>
 800d5ac:	6825      	ldr	r5, [r4, #0]
 800d5ae:	1961      	adds	r1, r4, r5
 800d5b0:	428b      	cmp	r3, r1
 800d5b2:	bf04      	itt	eq
 800d5b4:	6819      	ldreq	r1, [r3, #0]
 800d5b6:	685b      	ldreq	r3, [r3, #4]
 800d5b8:	6063      	str	r3, [r4, #4]
 800d5ba:	bf04      	itt	eq
 800d5bc:	1949      	addeq	r1, r1, r5
 800d5be:	6021      	streq	r1, [r4, #0]
 800d5c0:	6054      	str	r4, [r2, #4]
 800d5c2:	e7ca      	b.n	800d55a <_free_r+0x26>
 800d5c4:	b003      	add	sp, #12
 800d5c6:	bd30      	pop	{r4, r5, pc}
 800d5c8:	20006ff8 	.word	0x20006ff8

0800d5cc <__sfputc_r>:
 800d5cc:	6893      	ldr	r3, [r2, #8]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	b410      	push	{r4}
 800d5d4:	6093      	str	r3, [r2, #8]
 800d5d6:	da08      	bge.n	800d5ea <__sfputc_r+0x1e>
 800d5d8:	6994      	ldr	r4, [r2, #24]
 800d5da:	42a3      	cmp	r3, r4
 800d5dc:	db01      	blt.n	800d5e2 <__sfputc_r+0x16>
 800d5de:	290a      	cmp	r1, #10
 800d5e0:	d103      	bne.n	800d5ea <__sfputc_r+0x1e>
 800d5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5e6:	f7fe bb5d 	b.w	800bca4 <__swbuf_r>
 800d5ea:	6813      	ldr	r3, [r2, #0]
 800d5ec:	1c58      	adds	r0, r3, #1
 800d5ee:	6010      	str	r0, [r2, #0]
 800d5f0:	7019      	strb	r1, [r3, #0]
 800d5f2:	4608      	mov	r0, r1
 800d5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <__sfputs_r>:
 800d5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	460f      	mov	r7, r1
 800d600:	4614      	mov	r4, r2
 800d602:	18d5      	adds	r5, r2, r3
 800d604:	42ac      	cmp	r4, r5
 800d606:	d101      	bne.n	800d60c <__sfputs_r+0x12>
 800d608:	2000      	movs	r0, #0
 800d60a:	e007      	b.n	800d61c <__sfputs_r+0x22>
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	463a      	mov	r2, r7
 800d612:	4630      	mov	r0, r6
 800d614:	f7ff ffda 	bl	800d5cc <__sfputc_r>
 800d618:	1c43      	adds	r3, r0, #1
 800d61a:	d1f3      	bne.n	800d604 <__sfputs_r+0xa>
 800d61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d620 <_vfiprintf_r>:
 800d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	460d      	mov	r5, r1
 800d626:	b09d      	sub	sp, #116	; 0x74
 800d628:	4614      	mov	r4, r2
 800d62a:	4698      	mov	r8, r3
 800d62c:	4606      	mov	r6, r0
 800d62e:	b118      	cbz	r0, 800d638 <_vfiprintf_r+0x18>
 800d630:	6983      	ldr	r3, [r0, #24]
 800d632:	b90b      	cbnz	r3, 800d638 <_vfiprintf_r+0x18>
 800d634:	f7fd fc10 	bl	800ae58 <__sinit>
 800d638:	4b89      	ldr	r3, [pc, #548]	; (800d860 <_vfiprintf_r+0x240>)
 800d63a:	429d      	cmp	r5, r3
 800d63c:	d11b      	bne.n	800d676 <_vfiprintf_r+0x56>
 800d63e:	6875      	ldr	r5, [r6, #4]
 800d640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d642:	07d9      	lsls	r1, r3, #31
 800d644:	d405      	bmi.n	800d652 <_vfiprintf_r+0x32>
 800d646:	89ab      	ldrh	r3, [r5, #12]
 800d648:	059a      	lsls	r2, r3, #22
 800d64a:	d402      	bmi.n	800d652 <_vfiprintf_r+0x32>
 800d64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d64e:	f7fd fcc6 	bl	800afde <__retarget_lock_acquire_recursive>
 800d652:	89ab      	ldrh	r3, [r5, #12]
 800d654:	071b      	lsls	r3, r3, #28
 800d656:	d501      	bpl.n	800d65c <_vfiprintf_r+0x3c>
 800d658:	692b      	ldr	r3, [r5, #16]
 800d65a:	b9eb      	cbnz	r3, 800d698 <_vfiprintf_r+0x78>
 800d65c:	4629      	mov	r1, r5
 800d65e:	4630      	mov	r0, r6
 800d660:	f7fe fb84 	bl	800bd6c <__swsetup_r>
 800d664:	b1c0      	cbz	r0, 800d698 <_vfiprintf_r+0x78>
 800d666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d668:	07dc      	lsls	r4, r3, #31
 800d66a:	d50e      	bpl.n	800d68a <_vfiprintf_r+0x6a>
 800d66c:	f04f 30ff 	mov.w	r0, #4294967295
 800d670:	b01d      	add	sp, #116	; 0x74
 800d672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d676:	4b7b      	ldr	r3, [pc, #492]	; (800d864 <_vfiprintf_r+0x244>)
 800d678:	429d      	cmp	r5, r3
 800d67a:	d101      	bne.n	800d680 <_vfiprintf_r+0x60>
 800d67c:	68b5      	ldr	r5, [r6, #8]
 800d67e:	e7df      	b.n	800d640 <_vfiprintf_r+0x20>
 800d680:	4b79      	ldr	r3, [pc, #484]	; (800d868 <_vfiprintf_r+0x248>)
 800d682:	429d      	cmp	r5, r3
 800d684:	bf08      	it	eq
 800d686:	68f5      	ldreq	r5, [r6, #12]
 800d688:	e7da      	b.n	800d640 <_vfiprintf_r+0x20>
 800d68a:	89ab      	ldrh	r3, [r5, #12]
 800d68c:	0598      	lsls	r0, r3, #22
 800d68e:	d4ed      	bmi.n	800d66c <_vfiprintf_r+0x4c>
 800d690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d692:	f7fd fca5 	bl	800afe0 <__retarget_lock_release_recursive>
 800d696:	e7e9      	b.n	800d66c <_vfiprintf_r+0x4c>
 800d698:	2300      	movs	r3, #0
 800d69a:	9309      	str	r3, [sp, #36]	; 0x24
 800d69c:	2320      	movs	r3, #32
 800d69e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a6:	2330      	movs	r3, #48	; 0x30
 800d6a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d86c <_vfiprintf_r+0x24c>
 800d6ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6b0:	f04f 0901 	mov.w	r9, #1
 800d6b4:	4623      	mov	r3, r4
 800d6b6:	469a      	mov	sl, r3
 800d6b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6bc:	b10a      	cbz	r2, 800d6c2 <_vfiprintf_r+0xa2>
 800d6be:	2a25      	cmp	r2, #37	; 0x25
 800d6c0:	d1f9      	bne.n	800d6b6 <_vfiprintf_r+0x96>
 800d6c2:	ebba 0b04 	subs.w	fp, sl, r4
 800d6c6:	d00b      	beq.n	800d6e0 <_vfiprintf_r+0xc0>
 800d6c8:	465b      	mov	r3, fp
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	f7ff ff93 	bl	800d5fa <__sfputs_r>
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	f000 80aa 	beq.w	800d82e <_vfiprintf_r+0x20e>
 800d6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6dc:	445a      	add	r2, fp
 800d6de:	9209      	str	r2, [sp, #36]	; 0x24
 800d6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 80a2 	beq.w	800d82e <_vfiprintf_r+0x20e>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f4:	f10a 0a01 	add.w	sl, sl, #1
 800d6f8:	9304      	str	r3, [sp, #16]
 800d6fa:	9307      	str	r3, [sp, #28]
 800d6fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d700:	931a      	str	r3, [sp, #104]	; 0x68
 800d702:	4654      	mov	r4, sl
 800d704:	2205      	movs	r2, #5
 800d706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d70a:	4858      	ldr	r0, [pc, #352]	; (800d86c <_vfiprintf_r+0x24c>)
 800d70c:	f7f2 fd90 	bl	8000230 <memchr>
 800d710:	9a04      	ldr	r2, [sp, #16]
 800d712:	b9d8      	cbnz	r0, 800d74c <_vfiprintf_r+0x12c>
 800d714:	06d1      	lsls	r1, r2, #27
 800d716:	bf44      	itt	mi
 800d718:	2320      	movmi	r3, #32
 800d71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d71e:	0713      	lsls	r3, r2, #28
 800d720:	bf44      	itt	mi
 800d722:	232b      	movmi	r3, #43	; 0x2b
 800d724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d728:	f89a 3000 	ldrb.w	r3, [sl]
 800d72c:	2b2a      	cmp	r3, #42	; 0x2a
 800d72e:	d015      	beq.n	800d75c <_vfiprintf_r+0x13c>
 800d730:	9a07      	ldr	r2, [sp, #28]
 800d732:	4654      	mov	r4, sl
 800d734:	2000      	movs	r0, #0
 800d736:	f04f 0c0a 	mov.w	ip, #10
 800d73a:	4621      	mov	r1, r4
 800d73c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d740:	3b30      	subs	r3, #48	; 0x30
 800d742:	2b09      	cmp	r3, #9
 800d744:	d94e      	bls.n	800d7e4 <_vfiprintf_r+0x1c4>
 800d746:	b1b0      	cbz	r0, 800d776 <_vfiprintf_r+0x156>
 800d748:	9207      	str	r2, [sp, #28]
 800d74a:	e014      	b.n	800d776 <_vfiprintf_r+0x156>
 800d74c:	eba0 0308 	sub.w	r3, r0, r8
 800d750:	fa09 f303 	lsl.w	r3, r9, r3
 800d754:	4313      	orrs	r3, r2
 800d756:	9304      	str	r3, [sp, #16]
 800d758:	46a2      	mov	sl, r4
 800d75a:	e7d2      	b.n	800d702 <_vfiprintf_r+0xe2>
 800d75c:	9b03      	ldr	r3, [sp, #12]
 800d75e:	1d19      	adds	r1, r3, #4
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	9103      	str	r1, [sp, #12]
 800d764:	2b00      	cmp	r3, #0
 800d766:	bfbb      	ittet	lt
 800d768:	425b      	neglt	r3, r3
 800d76a:	f042 0202 	orrlt.w	r2, r2, #2
 800d76e:	9307      	strge	r3, [sp, #28]
 800d770:	9307      	strlt	r3, [sp, #28]
 800d772:	bfb8      	it	lt
 800d774:	9204      	strlt	r2, [sp, #16]
 800d776:	7823      	ldrb	r3, [r4, #0]
 800d778:	2b2e      	cmp	r3, #46	; 0x2e
 800d77a:	d10c      	bne.n	800d796 <_vfiprintf_r+0x176>
 800d77c:	7863      	ldrb	r3, [r4, #1]
 800d77e:	2b2a      	cmp	r3, #42	; 0x2a
 800d780:	d135      	bne.n	800d7ee <_vfiprintf_r+0x1ce>
 800d782:	9b03      	ldr	r3, [sp, #12]
 800d784:	1d1a      	adds	r2, r3, #4
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	9203      	str	r2, [sp, #12]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	bfb8      	it	lt
 800d78e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d792:	3402      	adds	r4, #2
 800d794:	9305      	str	r3, [sp, #20]
 800d796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d87c <_vfiprintf_r+0x25c>
 800d79a:	7821      	ldrb	r1, [r4, #0]
 800d79c:	2203      	movs	r2, #3
 800d79e:	4650      	mov	r0, sl
 800d7a0:	f7f2 fd46 	bl	8000230 <memchr>
 800d7a4:	b140      	cbz	r0, 800d7b8 <_vfiprintf_r+0x198>
 800d7a6:	2340      	movs	r3, #64	; 0x40
 800d7a8:	eba0 000a 	sub.w	r0, r0, sl
 800d7ac:	fa03 f000 	lsl.w	r0, r3, r0
 800d7b0:	9b04      	ldr	r3, [sp, #16]
 800d7b2:	4303      	orrs	r3, r0
 800d7b4:	3401      	adds	r4, #1
 800d7b6:	9304      	str	r3, [sp, #16]
 800d7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7bc:	482c      	ldr	r0, [pc, #176]	; (800d870 <_vfiprintf_r+0x250>)
 800d7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7c2:	2206      	movs	r2, #6
 800d7c4:	f7f2 fd34 	bl	8000230 <memchr>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d03f      	beq.n	800d84c <_vfiprintf_r+0x22c>
 800d7cc:	4b29      	ldr	r3, [pc, #164]	; (800d874 <_vfiprintf_r+0x254>)
 800d7ce:	bb1b      	cbnz	r3, 800d818 <_vfiprintf_r+0x1f8>
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	3307      	adds	r3, #7
 800d7d4:	f023 0307 	bic.w	r3, r3, #7
 800d7d8:	3308      	adds	r3, #8
 800d7da:	9303      	str	r3, [sp, #12]
 800d7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7de:	443b      	add	r3, r7
 800d7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e2:	e767      	b.n	800d6b4 <_vfiprintf_r+0x94>
 800d7e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e8:	460c      	mov	r4, r1
 800d7ea:	2001      	movs	r0, #1
 800d7ec:	e7a5      	b.n	800d73a <_vfiprintf_r+0x11a>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	3401      	adds	r4, #1
 800d7f2:	9305      	str	r3, [sp, #20]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	f04f 0c0a 	mov.w	ip, #10
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d800:	3a30      	subs	r2, #48	; 0x30
 800d802:	2a09      	cmp	r2, #9
 800d804:	d903      	bls.n	800d80e <_vfiprintf_r+0x1ee>
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0c5      	beq.n	800d796 <_vfiprintf_r+0x176>
 800d80a:	9105      	str	r1, [sp, #20]
 800d80c:	e7c3      	b.n	800d796 <_vfiprintf_r+0x176>
 800d80e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d812:	4604      	mov	r4, r0
 800d814:	2301      	movs	r3, #1
 800d816:	e7f0      	b.n	800d7fa <_vfiprintf_r+0x1da>
 800d818:	ab03      	add	r3, sp, #12
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	462a      	mov	r2, r5
 800d81e:	4b16      	ldr	r3, [pc, #88]	; (800d878 <_vfiprintf_r+0x258>)
 800d820:	a904      	add	r1, sp, #16
 800d822:	4630      	mov	r0, r6
 800d824:	f7fd fd28 	bl	800b278 <_printf_float>
 800d828:	4607      	mov	r7, r0
 800d82a:	1c78      	adds	r0, r7, #1
 800d82c:	d1d6      	bne.n	800d7dc <_vfiprintf_r+0x1bc>
 800d82e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d830:	07d9      	lsls	r1, r3, #31
 800d832:	d405      	bmi.n	800d840 <_vfiprintf_r+0x220>
 800d834:	89ab      	ldrh	r3, [r5, #12]
 800d836:	059a      	lsls	r2, r3, #22
 800d838:	d402      	bmi.n	800d840 <_vfiprintf_r+0x220>
 800d83a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d83c:	f7fd fbd0 	bl	800afe0 <__retarget_lock_release_recursive>
 800d840:	89ab      	ldrh	r3, [r5, #12]
 800d842:	065b      	lsls	r3, r3, #25
 800d844:	f53f af12 	bmi.w	800d66c <_vfiprintf_r+0x4c>
 800d848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d84a:	e711      	b.n	800d670 <_vfiprintf_r+0x50>
 800d84c:	ab03      	add	r3, sp, #12
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	462a      	mov	r2, r5
 800d852:	4b09      	ldr	r3, [pc, #36]	; (800d878 <_vfiprintf_r+0x258>)
 800d854:	a904      	add	r1, sp, #16
 800d856:	4630      	mov	r0, r6
 800d858:	f7fd ffb2 	bl	800b7c0 <_printf_i>
 800d85c:	e7e4      	b.n	800d828 <_vfiprintf_r+0x208>
 800d85e:	bf00      	nop
 800d860:	08010344 	.word	0x08010344
 800d864:	08010364 	.word	0x08010364
 800d868:	08010324 	.word	0x08010324
 800d86c:	080105a4 	.word	0x080105a4
 800d870:	080105ae 	.word	0x080105ae
 800d874:	0800b279 	.word	0x0800b279
 800d878:	0800d5fb 	.word	0x0800d5fb
 800d87c:	080105aa 	.word	0x080105aa

0800d880 <_read_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4d07      	ldr	r5, [pc, #28]	; (800d8a0 <_read_r+0x20>)
 800d884:	4604      	mov	r4, r0
 800d886:	4608      	mov	r0, r1
 800d888:	4611      	mov	r1, r2
 800d88a:	2200      	movs	r2, #0
 800d88c:	602a      	str	r2, [r5, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	f7f4 ffac 	bl	80027ec <_read>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_read_r+0x1e>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_read_r+0x1e>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	20007000 	.word	0x20007000

0800d8a4 <__assert_func>:
 800d8a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8a6:	4614      	mov	r4, r2
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	4b09      	ldr	r3, [pc, #36]	; (800d8d0 <__assert_func+0x2c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	68d8      	ldr	r0, [r3, #12]
 800d8b2:	b14c      	cbz	r4, 800d8c8 <__assert_func+0x24>
 800d8b4:	4b07      	ldr	r3, [pc, #28]	; (800d8d4 <__assert_func+0x30>)
 800d8b6:	9100      	str	r1, [sp, #0]
 800d8b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8bc:	4906      	ldr	r1, [pc, #24]	; (800d8d8 <__assert_func+0x34>)
 800d8be:	462b      	mov	r3, r5
 800d8c0:	f000 f80e 	bl	800d8e0 <fiprintf>
 800d8c4:	f000 f85f 	bl	800d986 <abort>
 800d8c8:	4b04      	ldr	r3, [pc, #16]	; (800d8dc <__assert_func+0x38>)
 800d8ca:	461c      	mov	r4, r3
 800d8cc:	e7f3      	b.n	800d8b6 <__assert_func+0x12>
 800d8ce:	bf00      	nop
 800d8d0:	200000d0 	.word	0x200000d0
 800d8d4:	080105b5 	.word	0x080105b5
 800d8d8:	080105c2 	.word	0x080105c2
 800d8dc:	080105f0 	.word	0x080105f0

0800d8e0 <fiprintf>:
 800d8e0:	b40e      	push	{r1, r2, r3}
 800d8e2:	b503      	push	{r0, r1, lr}
 800d8e4:	4601      	mov	r1, r0
 800d8e6:	ab03      	add	r3, sp, #12
 800d8e8:	4805      	ldr	r0, [pc, #20]	; (800d900 <fiprintf+0x20>)
 800d8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ee:	6800      	ldr	r0, [r0, #0]
 800d8f0:	9301      	str	r3, [sp, #4]
 800d8f2:	f7ff fe95 	bl	800d620 <_vfiprintf_r>
 800d8f6:	b002      	add	sp, #8
 800d8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8fc:	b003      	add	sp, #12
 800d8fe:	4770      	bx	lr
 800d900:	200000d0 	.word	0x200000d0

0800d904 <_fstat_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	4d07      	ldr	r5, [pc, #28]	; (800d924 <_fstat_r+0x20>)
 800d908:	2300      	movs	r3, #0
 800d90a:	4604      	mov	r4, r0
 800d90c:	4608      	mov	r0, r1
 800d90e:	4611      	mov	r1, r2
 800d910:	602b      	str	r3, [r5, #0]
 800d912:	f7f4 ff94 	bl	800283e <_fstat>
 800d916:	1c43      	adds	r3, r0, #1
 800d918:	d102      	bne.n	800d920 <_fstat_r+0x1c>
 800d91a:	682b      	ldr	r3, [r5, #0]
 800d91c:	b103      	cbz	r3, 800d920 <_fstat_r+0x1c>
 800d91e:	6023      	str	r3, [r4, #0]
 800d920:	bd38      	pop	{r3, r4, r5, pc}
 800d922:	bf00      	nop
 800d924:	20007000 	.word	0x20007000

0800d928 <_isatty_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d06      	ldr	r5, [pc, #24]	; (800d944 <_isatty_r+0x1c>)
 800d92c:	2300      	movs	r3, #0
 800d92e:	4604      	mov	r4, r0
 800d930:	4608      	mov	r0, r1
 800d932:	602b      	str	r3, [r5, #0]
 800d934:	f7f4 ff93 	bl	800285e <_isatty>
 800d938:	1c43      	adds	r3, r0, #1
 800d93a:	d102      	bne.n	800d942 <_isatty_r+0x1a>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	b103      	cbz	r3, 800d942 <_isatty_r+0x1a>
 800d940:	6023      	str	r3, [r4, #0]
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	20007000 	.word	0x20007000

0800d948 <__ascii_mbtowc>:
 800d948:	b082      	sub	sp, #8
 800d94a:	b901      	cbnz	r1, 800d94e <__ascii_mbtowc+0x6>
 800d94c:	a901      	add	r1, sp, #4
 800d94e:	b142      	cbz	r2, 800d962 <__ascii_mbtowc+0x1a>
 800d950:	b14b      	cbz	r3, 800d966 <__ascii_mbtowc+0x1e>
 800d952:	7813      	ldrb	r3, [r2, #0]
 800d954:	600b      	str	r3, [r1, #0]
 800d956:	7812      	ldrb	r2, [r2, #0]
 800d958:	1e10      	subs	r0, r2, #0
 800d95a:	bf18      	it	ne
 800d95c:	2001      	movne	r0, #1
 800d95e:	b002      	add	sp, #8
 800d960:	4770      	bx	lr
 800d962:	4610      	mov	r0, r2
 800d964:	e7fb      	b.n	800d95e <__ascii_mbtowc+0x16>
 800d966:	f06f 0001 	mvn.w	r0, #1
 800d96a:	e7f8      	b.n	800d95e <__ascii_mbtowc+0x16>

0800d96c <__ascii_wctomb>:
 800d96c:	b149      	cbz	r1, 800d982 <__ascii_wctomb+0x16>
 800d96e:	2aff      	cmp	r2, #255	; 0xff
 800d970:	bf85      	ittet	hi
 800d972:	238a      	movhi	r3, #138	; 0x8a
 800d974:	6003      	strhi	r3, [r0, #0]
 800d976:	700a      	strbls	r2, [r1, #0]
 800d978:	f04f 30ff 	movhi.w	r0, #4294967295
 800d97c:	bf98      	it	ls
 800d97e:	2001      	movls	r0, #1
 800d980:	4770      	bx	lr
 800d982:	4608      	mov	r0, r1
 800d984:	4770      	bx	lr

0800d986 <abort>:
 800d986:	b508      	push	{r3, lr}
 800d988:	2006      	movs	r0, #6
 800d98a:	f000 f82b 	bl	800d9e4 <raise>
 800d98e:	2001      	movs	r0, #1
 800d990:	f7f4 ff22 	bl	80027d8 <_exit>

0800d994 <_raise_r>:
 800d994:	291f      	cmp	r1, #31
 800d996:	b538      	push	{r3, r4, r5, lr}
 800d998:	4604      	mov	r4, r0
 800d99a:	460d      	mov	r5, r1
 800d99c:	d904      	bls.n	800d9a8 <_raise_r+0x14>
 800d99e:	2316      	movs	r3, #22
 800d9a0:	6003      	str	r3, [r0, #0]
 800d9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}
 800d9a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9aa:	b112      	cbz	r2, 800d9b2 <_raise_r+0x1e>
 800d9ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9b0:	b94b      	cbnz	r3, 800d9c6 <_raise_r+0x32>
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f000 f830 	bl	800da18 <_getpid_r>
 800d9b8:	462a      	mov	r2, r5
 800d9ba:	4601      	mov	r1, r0
 800d9bc:	4620      	mov	r0, r4
 800d9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9c2:	f000 b817 	b.w	800d9f4 <_kill_r>
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d00a      	beq.n	800d9e0 <_raise_r+0x4c>
 800d9ca:	1c59      	adds	r1, r3, #1
 800d9cc:	d103      	bne.n	800d9d6 <_raise_r+0x42>
 800d9ce:	2316      	movs	r3, #22
 800d9d0:	6003      	str	r3, [r0, #0]
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	e7e7      	b.n	800d9a6 <_raise_r+0x12>
 800d9d6:	2400      	movs	r4, #0
 800d9d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9dc:	4628      	mov	r0, r5
 800d9de:	4798      	blx	r3
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	e7e0      	b.n	800d9a6 <_raise_r+0x12>

0800d9e4 <raise>:
 800d9e4:	4b02      	ldr	r3, [pc, #8]	; (800d9f0 <raise+0xc>)
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	6818      	ldr	r0, [r3, #0]
 800d9ea:	f7ff bfd3 	b.w	800d994 <_raise_r>
 800d9ee:	bf00      	nop
 800d9f0:	200000d0 	.word	0x200000d0

0800d9f4 <_kill_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4d07      	ldr	r5, [pc, #28]	; (800da14 <_kill_r+0x20>)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	4611      	mov	r1, r2
 800da00:	602b      	str	r3, [r5, #0]
 800da02:	f7f4 fed9 	bl	80027b8 <_kill>
 800da06:	1c43      	adds	r3, r0, #1
 800da08:	d102      	bne.n	800da10 <_kill_r+0x1c>
 800da0a:	682b      	ldr	r3, [r5, #0]
 800da0c:	b103      	cbz	r3, 800da10 <_kill_r+0x1c>
 800da0e:	6023      	str	r3, [r4, #0]
 800da10:	bd38      	pop	{r3, r4, r5, pc}
 800da12:	bf00      	nop
 800da14:	20007000 	.word	0x20007000

0800da18 <_getpid_r>:
 800da18:	f7f4 bec6 	b.w	80027a8 <_getpid>

0800da1c <cabs>:
 800da1c:	b508      	push	{r3, lr}
 800da1e:	ed2d 8b06 	vpush	{d8-d10}
 800da22:	eeb0 aa40 	vmov.f32	s20, s0
 800da26:	eef0 aa60 	vmov.f32	s21, s1
 800da2a:	eeb0 9a41 	vmov.f32	s18, s2
 800da2e:	eef0 9a61 	vmov.f32	s19, s3
 800da32:	f000 f879 	bl	800db28 <creal>
 800da36:	eeb0 1a49 	vmov.f32	s2, s18
 800da3a:	eef0 1a69 	vmov.f32	s3, s19
 800da3e:	eeb0 8a40 	vmov.f32	s16, s0
 800da42:	eef0 8a60 	vmov.f32	s17, s1
 800da46:	eeb0 0a4a 	vmov.f32	s0, s20
 800da4a:	eef0 0a6a 	vmov.f32	s1, s21
 800da4e:	f000 f866 	bl	800db1e <cimag>
 800da52:	eeb0 1a40 	vmov.f32	s2, s0
 800da56:	eef0 1a60 	vmov.f32	s3, s1
 800da5a:	eeb0 0a48 	vmov.f32	s0, s16
 800da5e:	eef0 0a68 	vmov.f32	s1, s17
 800da62:	ecbd 8b06 	vpop	{d8-d10}
 800da66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800da6a:	f000 ba19 	b.w	800dea0 <hypot>

0800da6e <cexp>:
 800da6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da72:	ed2d 8b06 	vpush	{d8-d10}
 800da76:	eeb0 aa40 	vmov.f32	s20, s0
 800da7a:	eef0 aa60 	vmov.f32	s21, s1
 800da7e:	eeb0 8a41 	vmov.f32	s16, s2
 800da82:	eef0 8a61 	vmov.f32	s17, s3
 800da86:	f000 f84f 	bl	800db28 <creal>
 800da8a:	eeb0 1a48 	vmov.f32	s2, s16
 800da8e:	eef0 1a68 	vmov.f32	s3, s17
 800da92:	eeb0 9a40 	vmov.f32	s18, s0
 800da96:	eef0 9a60 	vmov.f32	s19, s1
 800da9a:	eeb0 0a4a 	vmov.f32	s0, s20
 800da9e:	eef0 0a6a 	vmov.f32	s1, s21
 800daa2:	f000 f83c 	bl	800db1e <cimag>
 800daa6:	eeb0 8a40 	vmov.f32	s16, s0
 800daaa:	eef0 8a60 	vmov.f32	s17, s1
 800daae:	eeb0 0a49 	vmov.f32	s0, s18
 800dab2:	eef0 0a69 	vmov.f32	s1, s19
 800dab6:	f000 f9ab 	bl	800de10 <exp>
 800daba:	ec57 6b10 	vmov	r6, r7, d0
 800dabe:	eeb0 0a48 	vmov.f32	s0, s16
 800dac2:	eef0 0a68 	vmov.f32	s1, s17
 800dac6:	f000 f94b 	bl	800dd60 <sin>
 800daca:	4632      	mov	r2, r6
 800dacc:	463b      	mov	r3, r7
 800dace:	ec51 0b10 	vmov	r0, r1, d0
 800dad2:	f7f2 fdb9 	bl	8000648 <__aeabi_dmul>
 800dad6:	eeb0 0a48 	vmov.f32	s0, s16
 800dada:	eef0 0a68 	vmov.f32	s1, s17
 800dade:	4604      	mov	r4, r0
 800dae0:	460d      	mov	r5, r1
 800dae2:	f000 f8e9 	bl	800dcb8 <cos>
 800dae6:	4632      	mov	r2, r6
 800dae8:	ec51 0b10 	vmov	r0, r1, d0
 800daec:	463b      	mov	r3, r7
 800daee:	f7f2 fdab 	bl	8000648 <__aeabi_dmul>
 800daf2:	2200      	movs	r2, #0
 800daf4:	4606      	mov	r6, r0
 800daf6:	460f      	mov	r7, r1
 800daf8:	2300      	movs	r3, #0
 800dafa:	4620      	mov	r0, r4
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7f2 fda3 	bl	8000648 <__aeabi_dmul>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4630      	mov	r0, r6
 800db08:	4639      	mov	r1, r7
 800db0a:	f7f2 fbe7 	bl	80002dc <__adddf3>
 800db0e:	ecbd 8b06 	vpop	{d8-d10}
 800db12:	ec41 0b10 	vmov	d0, r0, r1
 800db16:	ec45 4b11 	vmov	d1, r4, r5
 800db1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db1e <cimag>:
 800db1e:	eeb0 0a41 	vmov.f32	s0, s2
 800db22:	eef0 0a61 	vmov.f32	s1, s3
 800db26:	4770      	bx	lr

0800db28 <creal>:
 800db28:	4770      	bx	lr
 800db2a:	0000      	movs	r0, r0
 800db2c:	0000      	movs	r0, r0
	...

0800db30 <cbrt>:
 800db30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	ec51 0b10 	vmov	r0, r1, d0
 800db38:	4a5b      	ldr	r2, [pc, #364]	; (800dca8 <cbrt+0x178>)
 800db3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db3e:	4293      	cmp	r3, r2
 800db40:	ed2d 8b02 	vpush	{d8}
 800db44:	ee10 2a10 	vmov	r2, s0
 800db48:	468a      	mov	sl, r1
 800db4a:	d908      	bls.n	800db5e <cbrt+0x2e>
 800db4c:	460b      	mov	r3, r1
 800db4e:	f7f2 fbc5 	bl	80002dc <__adddf3>
 800db52:	ecbd 8b02 	vpop	{d8}
 800db56:	ec41 0b10 	vmov	d0, r0, r1
 800db5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5e:	431a      	orrs	r2, r3
 800db60:	d0f7      	beq.n	800db52 <cbrt+0x22>
 800db62:	4a52      	ldr	r2, [pc, #328]	; (800dcac <cbrt+0x17c>)
 800db64:	ea0a 0202 	and.w	r2, sl, r2
 800db68:	4619      	mov	r1, r3
 800db6a:	4604      	mov	r4, r0
 800db6c:	461d      	mov	r5, r3
 800db6e:	2a00      	cmp	r2, #0
 800db70:	d17b      	bne.n	800dc6a <cbrt+0x13a>
 800db72:	4b4f      	ldr	r3, [pc, #316]	; (800dcb0 <cbrt+0x180>)
 800db74:	2200      	movs	r2, #0
 800db76:	f7f2 fd67 	bl	8000648 <__aeabi_dmul>
 800db7a:	2203      	movs	r2, #3
 800db7c:	fbb1 f3f2 	udiv	r3, r1, r2
 800db80:	f103 5725 	add.w	r7, r3, #692060160	; 0x29400000
 800db84:	f507 177d 	add.w	r7, r7, #4145152	; 0x3f4000
 800db88:	f507 5762 	add.w	r7, r7, #14464	; 0x3880
 800db8c:	4606      	mov	r6, r0
 800db8e:	3713      	adds	r7, #19
 800db90:	4632      	mov	r2, r6
 800db92:	463b      	mov	r3, r7
 800db94:	4630      	mov	r0, r6
 800db96:	4639      	mov	r1, r7
 800db98:	f7f2 fd56 	bl	8000648 <__aeabi_dmul>
 800db9c:	4622      	mov	r2, r4
 800db9e:	462b      	mov	r3, r5
 800dba0:	f7f2 fe7c 	bl	800089c <__aeabi_ddiv>
 800dba4:	4632      	mov	r2, r6
 800dba6:	463b      	mov	r3, r7
 800dba8:	f7f2 fd4e 	bl	8000648 <__aeabi_dmul>
 800dbac:	a334      	add	r3, pc, #208	; (adr r3, 800dc80 <cbrt+0x150>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fb93 	bl	80002dc <__adddf3>
 800dbb6:	a334      	add	r3, pc, #208	; (adr r3, 800dc88 <cbrt+0x158>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	4680      	mov	r8, r0
 800dbbe:	4689      	mov	r9, r1
 800dbc0:	f7f2 fb8c 	bl	80002dc <__adddf3>
 800dbc4:	4642      	mov	r2, r8
 800dbc6:	464b      	mov	r3, r9
 800dbc8:	ec41 0b18 	vmov	d8, r0, r1
 800dbcc:	a130      	add	r1, pc, #192	; (adr r1, 800dc90 <cbrt+0x160>)
 800dbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbd2:	f7f2 fe63 	bl	800089c <__aeabi_ddiv>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	ec51 0b18 	vmov	r0, r1, d8
 800dbde:	f7f2 fb7d 	bl	80002dc <__adddf3>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	a12c      	add	r1, pc, #176	; (adr r1, 800dc98 <cbrt+0x168>)
 800dbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbec:	f7f2 fe56 	bl	800089c <__aeabi_ddiv>
 800dbf0:	a32b      	add	r3, pc, #172	; (adr r3, 800dca0 <cbrt+0x170>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	f7f2 fb71 	bl	80002dc <__adddf3>
 800dbfa:	4632      	mov	r2, r6
 800dbfc:	463b      	mov	r3, r7
 800dbfe:	f7f2 fd23 	bl	8000648 <__aeabi_dmul>
 800dc02:	2600      	movs	r6, #0
 800dc04:	1c4f      	adds	r7, r1, #1
 800dc06:	4632      	mov	r2, r6
 800dc08:	463b      	mov	r3, r7
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	4639      	mov	r1, r7
 800dc0e:	f7f2 fd1b 	bl	8000648 <__aeabi_dmul>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4620      	mov	r0, r4
 800dc18:	4629      	mov	r1, r5
 800dc1a:	f7f2 fe3f 	bl	800089c <__aeabi_ddiv>
 800dc1e:	4632      	mov	r2, r6
 800dc20:	463b      	mov	r3, r7
 800dc22:	4680      	mov	r8, r0
 800dc24:	4689      	mov	r9, r1
 800dc26:	f7f2 fb57 	bl	80002d8 <__aeabi_dsub>
 800dc2a:	4632      	mov	r2, r6
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	4604      	mov	r4, r0
 800dc30:	463b      	mov	r3, r7
 800dc32:	4630      	mov	r0, r6
 800dc34:	4639      	mov	r1, r7
 800dc36:	f7f2 fb51 	bl	80002dc <__adddf3>
 800dc3a:	4642      	mov	r2, r8
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	f7f2 fb4d 	bl	80002dc <__adddf3>
 800dc42:	4602      	mov	r2, r0
 800dc44:	460b      	mov	r3, r1
 800dc46:	4620      	mov	r0, r4
 800dc48:	4629      	mov	r1, r5
 800dc4a:	f7f2 fe27 	bl	800089c <__aeabi_ddiv>
 800dc4e:	4632      	mov	r2, r6
 800dc50:	463b      	mov	r3, r7
 800dc52:	f7f2 fcf9 	bl	8000648 <__aeabi_dmul>
 800dc56:	463b      	mov	r3, r7
 800dc58:	4632      	mov	r2, r6
 800dc5a:	f7f2 fb3f 	bl	80002dc <__adddf3>
 800dc5e:	f00a 4300 	and.w	r3, sl, #2147483648	; 0x80000000
 800dc62:	ea43 0501 	orr.w	r5, r3, r1
 800dc66:	4629      	mov	r1, r5
 800dc68:	e773      	b.n	800db52 <cbrt+0x22>
 800dc6a:	2203      	movs	r2, #3
 800dc6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc70:	f103 572c 	add.w	r7, r3, #721420288	; 0x2b000000
 800dc74:	f5a7 07c1 	sub.w	r7, r7, #6324224	; 0x608000
 800dc78:	2600      	movs	r6, #0
 800dc7a:	f2a7 776d 	subw	r7, r7, #1901	; 0x76d
 800dc7e:	e787      	b.n	800db90 <cbrt+0x60>
 800dc80:	f15f15f1 	.word	0xf15f15f1
 800dc84:	3fe15f15 	.word	0x3fe15f15
 800dc88:	0ea0ea0f 	.word	0x0ea0ea0f
 800dc8c:	3ff6a0ea 	.word	0x3ff6a0ea
 800dc90:	2532c834 	.word	0x2532c834
 800dc94:	bfe691de 	.word	0xbfe691de
 800dc98:	6db6db6e 	.word	0x6db6db6e
 800dc9c:	3ff9b6db 	.word	0x3ff9b6db
 800dca0:	b6db6db7 	.word	0xb6db6db7
 800dca4:	3fd6db6d 	.word	0x3fd6db6d
 800dca8:	7fefffff 	.word	0x7fefffff
 800dcac:	7ff00000 	.word	0x7ff00000
 800dcb0:	43500000 	.word	0x43500000
 800dcb4:	00000000 	.word	0x00000000

0800dcb8 <cos>:
 800dcb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcba:	ec53 2b10 	vmov	r2, r3, d0
 800dcbe:	4826      	ldr	r0, [pc, #152]	; (800dd58 <cos+0xa0>)
 800dcc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dcc4:	4281      	cmp	r1, r0
 800dcc6:	dc06      	bgt.n	800dcd6 <cos+0x1e>
 800dcc8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800dd50 <cos+0x98>
 800dccc:	b005      	add	sp, #20
 800dcce:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcd2:	f001 bc1d 	b.w	800f510 <__kernel_cos>
 800dcd6:	4821      	ldr	r0, [pc, #132]	; (800dd5c <cos+0xa4>)
 800dcd8:	4281      	cmp	r1, r0
 800dcda:	dd09      	ble.n	800dcf0 <cos+0x38>
 800dcdc:	ee10 0a10 	vmov	r0, s0
 800dce0:	4619      	mov	r1, r3
 800dce2:	f7f2 faf9 	bl	80002d8 <__aeabi_dsub>
 800dce6:	ec41 0b10 	vmov	d0, r0, r1
 800dcea:	b005      	add	sp, #20
 800dcec:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcf0:	4668      	mov	r0, sp
 800dcf2:	f001 f94d 	bl	800ef90 <__ieee754_rem_pio2>
 800dcf6:	f000 0003 	and.w	r0, r0, #3
 800dcfa:	2801      	cmp	r0, #1
 800dcfc:	d00b      	beq.n	800dd16 <cos+0x5e>
 800dcfe:	2802      	cmp	r0, #2
 800dd00:	d016      	beq.n	800dd30 <cos+0x78>
 800dd02:	b9e0      	cbnz	r0, 800dd3e <cos+0x86>
 800dd04:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd08:	ed9d 0b00 	vldr	d0, [sp]
 800dd0c:	f001 fc00 	bl	800f510 <__kernel_cos>
 800dd10:	ec51 0b10 	vmov	r0, r1, d0
 800dd14:	e7e7      	b.n	800dce6 <cos+0x2e>
 800dd16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd1a:	ed9d 0b00 	vldr	d0, [sp]
 800dd1e:	f002 f80f 	bl	800fd40 <__kernel_sin>
 800dd22:	ec53 2b10 	vmov	r2, r3, d0
 800dd26:	ee10 0a10 	vmov	r0, s0
 800dd2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd2e:	e7da      	b.n	800dce6 <cos+0x2e>
 800dd30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd34:	ed9d 0b00 	vldr	d0, [sp]
 800dd38:	f001 fbea 	bl	800f510 <__kernel_cos>
 800dd3c:	e7f1      	b.n	800dd22 <cos+0x6a>
 800dd3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd42:	ed9d 0b00 	vldr	d0, [sp]
 800dd46:	2001      	movs	r0, #1
 800dd48:	f001 fffa 	bl	800fd40 <__kernel_sin>
 800dd4c:	e7e0      	b.n	800dd10 <cos+0x58>
 800dd4e:	bf00      	nop
	...
 800dd58:	3fe921fb 	.word	0x3fe921fb
 800dd5c:	7fefffff 	.word	0x7fefffff

0800dd60 <sin>:
 800dd60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd62:	ec53 2b10 	vmov	r2, r3, d0
 800dd66:	4828      	ldr	r0, [pc, #160]	; (800de08 <sin+0xa8>)
 800dd68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dd6c:	4281      	cmp	r1, r0
 800dd6e:	dc07      	bgt.n	800dd80 <sin+0x20>
 800dd70:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800de00 <sin+0xa0>
 800dd74:	2000      	movs	r0, #0
 800dd76:	b005      	add	sp, #20
 800dd78:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd7c:	f001 bfe0 	b.w	800fd40 <__kernel_sin>
 800dd80:	4822      	ldr	r0, [pc, #136]	; (800de0c <sin+0xac>)
 800dd82:	4281      	cmp	r1, r0
 800dd84:	dd09      	ble.n	800dd9a <sin+0x3a>
 800dd86:	ee10 0a10 	vmov	r0, s0
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	f7f2 faa4 	bl	80002d8 <__aeabi_dsub>
 800dd90:	ec41 0b10 	vmov	d0, r0, r1
 800dd94:	b005      	add	sp, #20
 800dd96:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd9a:	4668      	mov	r0, sp
 800dd9c:	f001 f8f8 	bl	800ef90 <__ieee754_rem_pio2>
 800dda0:	f000 0003 	and.w	r0, r0, #3
 800dda4:	2801      	cmp	r0, #1
 800dda6:	d00c      	beq.n	800ddc2 <sin+0x62>
 800dda8:	2802      	cmp	r0, #2
 800ddaa:	d011      	beq.n	800ddd0 <sin+0x70>
 800ddac:	b9f0      	cbnz	r0, 800ddec <sin+0x8c>
 800ddae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ddb2:	ed9d 0b00 	vldr	d0, [sp]
 800ddb6:	2001      	movs	r0, #1
 800ddb8:	f001 ffc2 	bl	800fd40 <__kernel_sin>
 800ddbc:	ec51 0b10 	vmov	r0, r1, d0
 800ddc0:	e7e6      	b.n	800dd90 <sin+0x30>
 800ddc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ddc6:	ed9d 0b00 	vldr	d0, [sp]
 800ddca:	f001 fba1 	bl	800f510 <__kernel_cos>
 800ddce:	e7f5      	b.n	800ddbc <sin+0x5c>
 800ddd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ddd4:	ed9d 0b00 	vldr	d0, [sp]
 800ddd8:	2001      	movs	r0, #1
 800ddda:	f001 ffb1 	bl	800fd40 <__kernel_sin>
 800ddde:	ec53 2b10 	vmov	r2, r3, d0
 800dde2:	ee10 0a10 	vmov	r0, s0
 800dde6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ddea:	e7d1      	b.n	800dd90 <sin+0x30>
 800ddec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ddf0:	ed9d 0b00 	vldr	d0, [sp]
 800ddf4:	f001 fb8c 	bl	800f510 <__kernel_cos>
 800ddf8:	e7f1      	b.n	800ddde <sin+0x7e>
 800ddfa:	bf00      	nop
 800ddfc:	f3af 8000 	nop.w
	...
 800de08:	3fe921fb 	.word	0x3fe921fb
 800de0c:	7fefffff 	.word	0x7fefffff

0800de10 <exp>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	ed2d 8b02 	vpush	{d8}
 800de16:	ec55 4b10 	vmov	r4, r5, d0
 800de1a:	f000 f8e5 	bl	800dfe8 <__ieee754_exp>
 800de1e:	eeb0 8a40 	vmov.f32	s16, s0
 800de22:	eef0 8a60 	vmov.f32	s17, s1
 800de26:	ec45 4b10 	vmov	d0, r4, r5
 800de2a:	f002 f880 	bl	800ff2e <finite>
 800de2e:	b168      	cbz	r0, 800de4c <exp+0x3c>
 800de30:	a317      	add	r3, pc, #92	; (adr r3, 800de90 <exp+0x80>)
 800de32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de36:	4620      	mov	r0, r4
 800de38:	4629      	mov	r1, r5
 800de3a:	f7f2 fe95 	bl	8000b68 <__aeabi_dcmpgt>
 800de3e:	b160      	cbz	r0, 800de5a <exp+0x4a>
 800de40:	f7fc ffac 	bl	800ad9c <__errno>
 800de44:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800de80 <exp+0x70>
 800de48:	2322      	movs	r3, #34	; 0x22
 800de4a:	6003      	str	r3, [r0, #0]
 800de4c:	eeb0 0a48 	vmov.f32	s0, s16
 800de50:	eef0 0a68 	vmov.f32	s1, s17
 800de54:	ecbd 8b02 	vpop	{d8}
 800de58:	bd38      	pop	{r3, r4, r5, pc}
 800de5a:	a30f      	add	r3, pc, #60	; (adr r3, 800de98 <exp+0x88>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	4620      	mov	r0, r4
 800de62:	4629      	mov	r1, r5
 800de64:	f7f2 fe62 	bl	8000b2c <__aeabi_dcmplt>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d0ef      	beq.n	800de4c <exp+0x3c>
 800de6c:	f7fc ff96 	bl	800ad9c <__errno>
 800de70:	2322      	movs	r3, #34	; 0x22
 800de72:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800de88 <exp+0x78>
 800de76:	6003      	str	r3, [r0, #0]
 800de78:	e7e8      	b.n	800de4c <exp+0x3c>
 800de7a:	bf00      	nop
 800de7c:	f3af 8000 	nop.w
 800de80:	00000000 	.word	0x00000000
 800de84:	7ff00000 	.word	0x7ff00000
	...
 800de90:	fefa39ef 	.word	0xfefa39ef
 800de94:	40862e42 	.word	0x40862e42
 800de98:	d52d3051 	.word	0xd52d3051
 800de9c:	c0874910 	.word	0xc0874910

0800dea0 <hypot>:
 800dea0:	b508      	push	{r3, lr}
 800dea2:	ed2d 8b06 	vpush	{d8-d10}
 800dea6:	eeb0 aa40 	vmov.f32	s20, s0
 800deaa:	eef0 aa60 	vmov.f32	s21, s1
 800deae:	eeb0 9a41 	vmov.f32	s18, s2
 800deb2:	eef0 9a61 	vmov.f32	s19, s3
 800deb6:	f000 fa19 	bl	800e2ec <__ieee754_hypot>
 800deba:	eeb0 8a40 	vmov.f32	s16, s0
 800debe:	eef0 8a60 	vmov.f32	s17, s1
 800dec2:	f002 f834 	bl	800ff2e <finite>
 800dec6:	b998      	cbnz	r0, 800def0 <hypot+0x50>
 800dec8:	eeb0 0a4a 	vmov.f32	s0, s20
 800decc:	eef0 0a6a 	vmov.f32	s1, s21
 800ded0:	f002 f82d 	bl	800ff2e <finite>
 800ded4:	b160      	cbz	r0, 800def0 <hypot+0x50>
 800ded6:	eeb0 0a49 	vmov.f32	s0, s18
 800deda:	eef0 0a69 	vmov.f32	s1, s19
 800dede:	f002 f826 	bl	800ff2e <finite>
 800dee2:	b128      	cbz	r0, 800def0 <hypot+0x50>
 800dee4:	f7fc ff5a 	bl	800ad9c <__errno>
 800dee8:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800df00 <hypot+0x60>
 800deec:	2322      	movs	r3, #34	; 0x22
 800deee:	6003      	str	r3, [r0, #0]
 800def0:	eeb0 0a48 	vmov.f32	s0, s16
 800def4:	eef0 0a68 	vmov.f32	s1, s17
 800def8:	ecbd 8b06 	vpop	{d8-d10}
 800defc:	bd08      	pop	{r3, pc}
 800defe:	bf00      	nop
 800df00:	00000000 	.word	0x00000000
 800df04:	7ff00000 	.word	0x7ff00000

0800df08 <pow>:
 800df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0a:	ed2d 8b02 	vpush	{d8}
 800df0e:	eeb0 8a40 	vmov.f32	s16, s0
 800df12:	eef0 8a60 	vmov.f32	s17, s1
 800df16:	ec55 4b11 	vmov	r4, r5, d1
 800df1a:	f000 fb09 	bl	800e530 <__ieee754_pow>
 800df1e:	4622      	mov	r2, r4
 800df20:	462b      	mov	r3, r5
 800df22:	4620      	mov	r0, r4
 800df24:	4629      	mov	r1, r5
 800df26:	ec57 6b10 	vmov	r6, r7, d0
 800df2a:	f7f2 fe27 	bl	8000b7c <__aeabi_dcmpun>
 800df2e:	2800      	cmp	r0, #0
 800df30:	d13b      	bne.n	800dfaa <pow+0xa2>
 800df32:	ec51 0b18 	vmov	r0, r1, d8
 800df36:	2200      	movs	r2, #0
 800df38:	2300      	movs	r3, #0
 800df3a:	f7f2 fded 	bl	8000b18 <__aeabi_dcmpeq>
 800df3e:	b1b8      	cbz	r0, 800df70 <pow+0x68>
 800df40:	2200      	movs	r2, #0
 800df42:	2300      	movs	r3, #0
 800df44:	4620      	mov	r0, r4
 800df46:	4629      	mov	r1, r5
 800df48:	f7f2 fde6 	bl	8000b18 <__aeabi_dcmpeq>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d146      	bne.n	800dfde <pow+0xd6>
 800df50:	ec45 4b10 	vmov	d0, r4, r5
 800df54:	f001 ffeb 	bl	800ff2e <finite>
 800df58:	b338      	cbz	r0, 800dfaa <pow+0xa2>
 800df5a:	2200      	movs	r2, #0
 800df5c:	2300      	movs	r3, #0
 800df5e:	4620      	mov	r0, r4
 800df60:	4629      	mov	r1, r5
 800df62:	f7f2 fde3 	bl	8000b2c <__aeabi_dcmplt>
 800df66:	b300      	cbz	r0, 800dfaa <pow+0xa2>
 800df68:	f7fc ff18 	bl	800ad9c <__errno>
 800df6c:	2322      	movs	r3, #34	; 0x22
 800df6e:	e01b      	b.n	800dfa8 <pow+0xa0>
 800df70:	ec47 6b10 	vmov	d0, r6, r7
 800df74:	f001 ffdb 	bl	800ff2e <finite>
 800df78:	b9e0      	cbnz	r0, 800dfb4 <pow+0xac>
 800df7a:	eeb0 0a48 	vmov.f32	s0, s16
 800df7e:	eef0 0a68 	vmov.f32	s1, s17
 800df82:	f001 ffd4 	bl	800ff2e <finite>
 800df86:	b1a8      	cbz	r0, 800dfb4 <pow+0xac>
 800df88:	ec45 4b10 	vmov	d0, r4, r5
 800df8c:	f001 ffcf 	bl	800ff2e <finite>
 800df90:	b180      	cbz	r0, 800dfb4 <pow+0xac>
 800df92:	4632      	mov	r2, r6
 800df94:	463b      	mov	r3, r7
 800df96:	4630      	mov	r0, r6
 800df98:	4639      	mov	r1, r7
 800df9a:	f7f2 fdef 	bl	8000b7c <__aeabi_dcmpun>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d0e2      	beq.n	800df68 <pow+0x60>
 800dfa2:	f7fc fefb 	bl	800ad9c <__errno>
 800dfa6:	2321      	movs	r3, #33	; 0x21
 800dfa8:	6003      	str	r3, [r0, #0]
 800dfaa:	ecbd 8b02 	vpop	{d8}
 800dfae:	ec47 6b10 	vmov	d0, r6, r7
 800dfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	4630      	mov	r0, r6
 800dfba:	4639      	mov	r1, r7
 800dfbc:	f7f2 fdac 	bl	8000b18 <__aeabi_dcmpeq>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d0f2      	beq.n	800dfaa <pow+0xa2>
 800dfc4:	eeb0 0a48 	vmov.f32	s0, s16
 800dfc8:	eef0 0a68 	vmov.f32	s1, s17
 800dfcc:	f001 ffaf 	bl	800ff2e <finite>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d0ea      	beq.n	800dfaa <pow+0xa2>
 800dfd4:	ec45 4b10 	vmov	d0, r4, r5
 800dfd8:	f001 ffa9 	bl	800ff2e <finite>
 800dfdc:	e7c3      	b.n	800df66 <pow+0x5e>
 800dfde:	4f01      	ldr	r7, [pc, #4]	; (800dfe4 <pow+0xdc>)
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	e7e2      	b.n	800dfaa <pow+0xa2>
 800dfe4:	3ff00000 	.word	0x3ff00000

0800dfe8 <__ieee754_exp>:
 800dfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfec:	ec55 4b10 	vmov	r4, r5, d0
 800dff0:	49b5      	ldr	r1, [pc, #724]	; (800e2c8 <__ieee754_exp+0x2e0>)
 800dff2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dff6:	428b      	cmp	r3, r1
 800dff8:	ed2d 8b04 	vpush	{d8-d9}
 800dffc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800e000:	d93d      	bls.n	800e07e <__ieee754_exp+0x96>
 800e002:	49b2      	ldr	r1, [pc, #712]	; (800e2cc <__ieee754_exp+0x2e4>)
 800e004:	428b      	cmp	r3, r1
 800e006:	d918      	bls.n	800e03a <__ieee754_exp+0x52>
 800e008:	ee10 3a10 	vmov	r3, s0
 800e00c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800e010:	4313      	orrs	r3, r2
 800e012:	d009      	beq.n	800e028 <__ieee754_exp+0x40>
 800e014:	ee10 2a10 	vmov	r2, s0
 800e018:	462b      	mov	r3, r5
 800e01a:	4620      	mov	r0, r4
 800e01c:	4629      	mov	r1, r5
 800e01e:	f7f2 f95d 	bl	80002dc <__adddf3>
 800e022:	4604      	mov	r4, r0
 800e024:	460d      	mov	r5, r1
 800e026:	e002      	b.n	800e02e <__ieee754_exp+0x46>
 800e028:	b10e      	cbz	r6, 800e02e <__ieee754_exp+0x46>
 800e02a:	2400      	movs	r4, #0
 800e02c:	2500      	movs	r5, #0
 800e02e:	ecbd 8b04 	vpop	{d8-d9}
 800e032:	ec45 4b10 	vmov	d0, r4, r5
 800e036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e03a:	a38d      	add	r3, pc, #564	; (adr r3, 800e270 <__ieee754_exp+0x288>)
 800e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e040:	ee10 0a10 	vmov	r0, s0
 800e044:	4629      	mov	r1, r5
 800e046:	f7f2 fd8f 	bl	8000b68 <__aeabi_dcmpgt>
 800e04a:	4607      	mov	r7, r0
 800e04c:	b130      	cbz	r0, 800e05c <__ieee754_exp+0x74>
 800e04e:	ecbd 8b04 	vpop	{d8-d9}
 800e052:	2000      	movs	r0, #0
 800e054:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e058:	f001 bf57 	b.w	800ff0a <__math_oflow>
 800e05c:	a386      	add	r3, pc, #536	; (adr r3, 800e278 <__ieee754_exp+0x290>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	4620      	mov	r0, r4
 800e064:	4629      	mov	r1, r5
 800e066:	f7f2 fd61 	bl	8000b2c <__aeabi_dcmplt>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	f000 808b 	beq.w	800e186 <__ieee754_exp+0x19e>
 800e070:	ecbd 8b04 	vpop	{d8-d9}
 800e074:	4638      	mov	r0, r7
 800e076:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e07a:	f001 bf3d 	b.w	800fef8 <__math_uflow>
 800e07e:	4a94      	ldr	r2, [pc, #592]	; (800e2d0 <__ieee754_exp+0x2e8>)
 800e080:	4293      	cmp	r3, r2
 800e082:	f240 80ac 	bls.w	800e1de <__ieee754_exp+0x1f6>
 800e086:	4a93      	ldr	r2, [pc, #588]	; (800e2d4 <__ieee754_exp+0x2ec>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d87c      	bhi.n	800e186 <__ieee754_exp+0x19e>
 800e08c:	4b92      	ldr	r3, [pc, #584]	; (800e2d8 <__ieee754_exp+0x2f0>)
 800e08e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	ee10 0a10 	vmov	r0, s0
 800e09a:	4629      	mov	r1, r5
 800e09c:	f7f2 f91c 	bl	80002d8 <__aeabi_dsub>
 800e0a0:	4b8e      	ldr	r3, [pc, #568]	; (800e2dc <__ieee754_exp+0x2f4>)
 800e0a2:	00f7      	lsls	r7, r6, #3
 800e0a4:	443b      	add	r3, r7
 800e0a6:	ed93 7b00 	vldr	d7, [r3]
 800e0aa:	f1c6 0a01 	rsb	sl, r6, #1
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	4689      	mov	r9, r1
 800e0b2:	ebaa 0a06 	sub.w	sl, sl, r6
 800e0b6:	eeb0 8a47 	vmov.f32	s16, s14
 800e0ba:	eef0 8a67 	vmov.f32	s17, s15
 800e0be:	ec53 2b18 	vmov	r2, r3, d8
 800e0c2:	4640      	mov	r0, r8
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	f7f2 f907 	bl	80002d8 <__aeabi_dsub>
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	460d      	mov	r5, r1
 800e0ce:	4622      	mov	r2, r4
 800e0d0:	462b      	mov	r3, r5
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	f7f2 fab7 	bl	8000648 <__aeabi_dmul>
 800e0da:	a369      	add	r3, pc, #420	; (adr r3, 800e280 <__ieee754_exp+0x298>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	460f      	mov	r7, r1
 800e0e4:	f7f2 fab0 	bl	8000648 <__aeabi_dmul>
 800e0e8:	a367      	add	r3, pc, #412	; (adr r3, 800e288 <__ieee754_exp+0x2a0>)
 800e0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ee:	f7f2 f8f3 	bl	80002d8 <__aeabi_dsub>
 800e0f2:	4632      	mov	r2, r6
 800e0f4:	463b      	mov	r3, r7
 800e0f6:	f7f2 faa7 	bl	8000648 <__aeabi_dmul>
 800e0fa:	a365      	add	r3, pc, #404	; (adr r3, 800e290 <__ieee754_exp+0x2a8>)
 800e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e100:	f7f2 f8ec 	bl	80002dc <__adddf3>
 800e104:	4632      	mov	r2, r6
 800e106:	463b      	mov	r3, r7
 800e108:	f7f2 fa9e 	bl	8000648 <__aeabi_dmul>
 800e10c:	a362      	add	r3, pc, #392	; (adr r3, 800e298 <__ieee754_exp+0x2b0>)
 800e10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e112:	f7f2 f8e1 	bl	80002d8 <__aeabi_dsub>
 800e116:	4632      	mov	r2, r6
 800e118:	463b      	mov	r3, r7
 800e11a:	f7f2 fa95 	bl	8000648 <__aeabi_dmul>
 800e11e:	a360      	add	r3, pc, #384	; (adr r3, 800e2a0 <__ieee754_exp+0x2b8>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f7f2 f8da 	bl	80002dc <__adddf3>
 800e128:	4632      	mov	r2, r6
 800e12a:	463b      	mov	r3, r7
 800e12c:	f7f2 fa8c 	bl	8000648 <__aeabi_dmul>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	4620      	mov	r0, r4
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 f8ce 	bl	80002d8 <__aeabi_dsub>
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	4606      	mov	r6, r0
 800e142:	460f      	mov	r7, r1
 800e144:	4620      	mov	r0, r4
 800e146:	4629      	mov	r1, r5
 800e148:	f7f2 fa7e 	bl	8000648 <__aeabi_dmul>
 800e14c:	ec41 0b19 	vmov	d9, r0, r1
 800e150:	f1ba 0f00 	cmp.w	sl, #0
 800e154:	d15d      	bne.n	800e212 <__ieee754_exp+0x22a>
 800e156:	2200      	movs	r2, #0
 800e158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e15c:	4630      	mov	r0, r6
 800e15e:	4639      	mov	r1, r7
 800e160:	f7f2 f8ba 	bl	80002d8 <__aeabi_dsub>
 800e164:	4602      	mov	r2, r0
 800e166:	460b      	mov	r3, r1
 800e168:	ec51 0b19 	vmov	r0, r1, d9
 800e16c:	f7f2 fb96 	bl	800089c <__aeabi_ddiv>
 800e170:	4622      	mov	r2, r4
 800e172:	462b      	mov	r3, r5
 800e174:	f7f2 f8b0 	bl	80002d8 <__aeabi_dsub>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	2000      	movs	r0, #0
 800e17e:	4958      	ldr	r1, [pc, #352]	; (800e2e0 <__ieee754_exp+0x2f8>)
 800e180:	f7f2 f8aa 	bl	80002d8 <__aeabi_dsub>
 800e184:	e74d      	b.n	800e022 <__ieee754_exp+0x3a>
 800e186:	4857      	ldr	r0, [pc, #348]	; (800e2e4 <__ieee754_exp+0x2fc>)
 800e188:	a347      	add	r3, pc, #284	; (adr r3, 800e2a8 <__ieee754_exp+0x2c0>)
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800e192:	4629      	mov	r1, r5
 800e194:	4620      	mov	r0, r4
 800e196:	f7f2 fa57 	bl	8000648 <__aeabi_dmul>
 800e19a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e19e:	f7f2 f89d 	bl	80002dc <__adddf3>
 800e1a2:	f7f2 fd01 	bl	8000ba8 <__aeabi_d2iz>
 800e1a6:	4682      	mov	sl, r0
 800e1a8:	f7f2 f9e4 	bl	8000574 <__aeabi_i2d>
 800e1ac:	a340      	add	r3, pc, #256	; (adr r3, 800e2b0 <__ieee754_exp+0x2c8>)
 800e1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b2:	4606      	mov	r6, r0
 800e1b4:	460f      	mov	r7, r1
 800e1b6:	f7f2 fa47 	bl	8000648 <__aeabi_dmul>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	460b      	mov	r3, r1
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 f889 	bl	80002d8 <__aeabi_dsub>
 800e1c6:	a33c      	add	r3, pc, #240	; (adr r3, 800e2b8 <__ieee754_exp+0x2d0>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	4680      	mov	r8, r0
 800e1ce:	4689      	mov	r9, r1
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	4639      	mov	r1, r7
 800e1d4:	f7f2 fa38 	bl	8000648 <__aeabi_dmul>
 800e1d8:	ec41 0b18 	vmov	d8, r0, r1
 800e1dc:	e76f      	b.n	800e0be <__ieee754_exp+0xd6>
 800e1de:	4a42      	ldr	r2, [pc, #264]	; (800e2e8 <__ieee754_exp+0x300>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d811      	bhi.n	800e208 <__ieee754_exp+0x220>
 800e1e4:	a336      	add	r3, pc, #216	; (adr r3, 800e2c0 <__ieee754_exp+0x2d8>)
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	ee10 0a10 	vmov	r0, s0
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f7f2 f874 	bl	80002dc <__adddf3>
 800e1f4:	4b3a      	ldr	r3, [pc, #232]	; (800e2e0 <__ieee754_exp+0x2f8>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f7f2 fcb6 	bl	8000b68 <__aeabi_dcmpgt>
 800e1fc:	b138      	cbz	r0, 800e20e <__ieee754_exp+0x226>
 800e1fe:	4b38      	ldr	r3, [pc, #224]	; (800e2e0 <__ieee754_exp+0x2f8>)
 800e200:	2200      	movs	r2, #0
 800e202:	4620      	mov	r0, r4
 800e204:	4629      	mov	r1, r5
 800e206:	e70a      	b.n	800e01e <__ieee754_exp+0x36>
 800e208:	f04f 0a00 	mov.w	sl, #0
 800e20c:	e75f      	b.n	800e0ce <__ieee754_exp+0xe6>
 800e20e:	4682      	mov	sl, r0
 800e210:	e75d      	b.n	800e0ce <__ieee754_exp+0xe6>
 800e212:	4632      	mov	r2, r6
 800e214:	463b      	mov	r3, r7
 800e216:	2000      	movs	r0, #0
 800e218:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e21c:	f7f2 f85c 	bl	80002d8 <__aeabi_dsub>
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	ec51 0b19 	vmov	r0, r1, d9
 800e228:	f7f2 fb38 	bl	800089c <__aeabi_ddiv>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	ec51 0b18 	vmov	r0, r1, d8
 800e234:	f7f2 f850 	bl	80002d8 <__aeabi_dsub>
 800e238:	4642      	mov	r2, r8
 800e23a:	464b      	mov	r3, r9
 800e23c:	f7f2 f84c 	bl	80002d8 <__aeabi_dsub>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	2000      	movs	r0, #0
 800e246:	4926      	ldr	r1, [pc, #152]	; (800e2e0 <__ieee754_exp+0x2f8>)
 800e248:	f7f2 f846 	bl	80002d8 <__aeabi_dsub>
 800e24c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e250:	4592      	cmp	sl, r2
 800e252:	db02      	blt.n	800e25a <__ieee754_exp+0x272>
 800e254:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e258:	e6e3      	b.n	800e022 <__ieee754_exp+0x3a>
 800e25a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e25e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e262:	2200      	movs	r2, #0
 800e264:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e268:	f7f2 f9ee 	bl	8000648 <__aeabi_dmul>
 800e26c:	e6d9      	b.n	800e022 <__ieee754_exp+0x3a>
 800e26e:	bf00      	nop
 800e270:	fefa39ef 	.word	0xfefa39ef
 800e274:	40862e42 	.word	0x40862e42
 800e278:	d52d3051 	.word	0xd52d3051
 800e27c:	c0874910 	.word	0xc0874910
 800e280:	72bea4d0 	.word	0x72bea4d0
 800e284:	3e663769 	.word	0x3e663769
 800e288:	c5d26bf1 	.word	0xc5d26bf1
 800e28c:	3ebbbd41 	.word	0x3ebbbd41
 800e290:	af25de2c 	.word	0xaf25de2c
 800e294:	3f11566a 	.word	0x3f11566a
 800e298:	16bebd93 	.word	0x16bebd93
 800e29c:	3f66c16c 	.word	0x3f66c16c
 800e2a0:	5555553e 	.word	0x5555553e
 800e2a4:	3fc55555 	.word	0x3fc55555
 800e2a8:	652b82fe 	.word	0x652b82fe
 800e2ac:	3ff71547 	.word	0x3ff71547
 800e2b0:	fee00000 	.word	0xfee00000
 800e2b4:	3fe62e42 	.word	0x3fe62e42
 800e2b8:	35793c76 	.word	0x35793c76
 800e2bc:	3dea39ef 	.word	0x3dea39ef
 800e2c0:	8800759c 	.word	0x8800759c
 800e2c4:	7e37e43c 	.word	0x7e37e43c
 800e2c8:	40862e41 	.word	0x40862e41
 800e2cc:	7fefffff 	.word	0x7fefffff
 800e2d0:	3fd62e42 	.word	0x3fd62e42
 800e2d4:	3ff0a2b1 	.word	0x3ff0a2b1
 800e2d8:	08010710 	.word	0x08010710
 800e2dc:	08010720 	.word	0x08010720
 800e2e0:	3ff00000 	.word	0x3ff00000
 800e2e4:	08010700 	.word	0x08010700
 800e2e8:	3defffff 	.word	0x3defffff

0800e2ec <__ieee754_hypot>:
 800e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f0:	ec51 0b10 	vmov	r0, r1, d0
 800e2f4:	ec57 6b11 	vmov	r6, r7, d1
 800e2f8:	ed2d 8b06 	vpush	{d8-d10}
 800e2fc:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 800e300:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e304:	42a5      	cmp	r5, r4
 800e306:	b085      	sub	sp, #20
 800e308:	da06      	bge.n	800e318 <__ieee754_hypot+0x2c>
 800e30a:	462b      	mov	r3, r5
 800e30c:	ee11 0a10 	vmov	r0, s2
 800e310:	ee10 6a10 	vmov	r6, s0
 800e314:	4625      	mov	r5, r4
 800e316:	461c      	mov	r4, r3
 800e318:	1b2b      	subs	r3, r5, r4
 800e31a:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800e31e:	4629      	mov	r1, r5
 800e320:	4680      	mov	r8, r0
 800e322:	46a9      	mov	r9, r5
 800e324:	4627      	mov	r7, r4
 800e326:	dd06      	ble.n	800e336 <__ieee754_hypot+0x4a>
 800e328:	4632      	mov	r2, r6
 800e32a:	4623      	mov	r3, r4
 800e32c:	f7f1 ffd6 	bl	80002dc <__adddf3>
 800e330:	4680      	mov	r8, r0
 800e332:	4689      	mov	r9, r1
 800e334:	e01a      	b.n	800e36c <__ieee754_hypot+0x80>
 800e336:	4b79      	ldr	r3, [pc, #484]	; (800e51c <__ieee754_hypot+0x230>)
 800e338:	429d      	cmp	r5, r3
 800e33a:	f340 809d 	ble.w	800e478 <__ieee754_hypot+0x18c>
 800e33e:	4b78      	ldr	r3, [pc, #480]	; (800e520 <__ieee754_hypot+0x234>)
 800e340:	429d      	cmp	r5, r3
 800e342:	dd1a      	ble.n	800e37a <__ieee754_hypot+0x8e>
 800e344:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e348:	4603      	mov	r3, r0
 800e34a:	432b      	orrs	r3, r5
 800e34c:	d005      	beq.n	800e35a <__ieee754_hypot+0x6e>
 800e34e:	4632      	mov	r2, r6
 800e350:	4623      	mov	r3, r4
 800e352:	f7f1 ffc3 	bl	80002dc <__adddf3>
 800e356:	4680      	mov	r8, r0
 800e358:	4689      	mov	r9, r1
 800e35a:	f084 44ff 	eor.w	r4, r4, #2139095040	; 0x7f800000
 800e35e:	f484 04e0 	eor.w	r4, r4, #7340032	; 0x700000
 800e362:	4633      	mov	r3, r6
 800e364:	4323      	orrs	r3, r4
 800e366:	d101      	bne.n	800e36c <__ieee754_hypot+0x80>
 800e368:	46b0      	mov	r8, r6
 800e36a:	46b9      	mov	r9, r7
 800e36c:	ec49 8b10 	vmov	d0, r8, r9
 800e370:	b005      	add	sp, #20
 800e372:	ecbd 8b06 	vpop	{d8-d10}
 800e376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37a:	f1a5 5516 	sub.w	r5, r5, #629145600	; 0x25800000
 800e37e:	f1a4 5416 	sub.w	r4, r4, #629145600	; 0x25800000
 800e382:	46a9      	mov	r9, r5
 800e384:	4627      	mov	r7, r4
 800e386:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	4b65      	ldr	r3, [pc, #404]	; (800e524 <__ieee754_hypot+0x238>)
 800e38e:	429c      	cmp	r4, r3
 800e390:	dc19      	bgt.n	800e3c6 <__ieee754_hypot+0xda>
 800e392:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e396:	da71      	bge.n	800e47c <__ieee754_hypot+0x190>
 800e398:	4633      	mov	r3, r6
 800e39a:	4323      	orrs	r3, r4
 800e39c:	d0e6      	beq.n	800e36c <__ieee754_hypot+0x80>
 800e39e:	4b62      	ldr	r3, [pc, #392]	; (800e528 <__ieee754_hypot+0x23c>)
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	f7f2 f94f 	bl	8000648 <__aeabi_dmul>
 800e3aa:	4b5f      	ldr	r3, [pc, #380]	; (800e528 <__ieee754_hypot+0x23c>)
 800e3ac:	4606      	mov	r6, r0
 800e3ae:	460f      	mov	r7, r1
 800e3b0:	4640      	mov	r0, r8
 800e3b2:	4649      	mov	r1, r9
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f7f2 f947 	bl	8000648 <__aeabi_dmul>
 800e3ba:	9b01      	ldr	r3, [sp, #4]
 800e3bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e3c0:	4680      	mov	r8, r0
 800e3c2:	4689      	mov	r9, r1
 800e3c4:	9301      	str	r3, [sp, #4]
 800e3c6:	4632      	mov	r2, r6
 800e3c8:	463b      	mov	r3, r7
 800e3ca:	4640      	mov	r0, r8
 800e3cc:	4649      	mov	r1, r9
 800e3ce:	f7f1 ff83 	bl	80002d8 <__aeabi_dsub>
 800e3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	460b      	mov	r3, r1
 800e3da:	4630      	mov	r0, r6
 800e3dc:	4639      	mov	r1, r7
 800e3de:	f7f2 fba5 	bl	8000b2c <__aeabi_dcmplt>
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d054      	beq.n	800e492 <__ieee754_hypot+0x1a6>
 800e3e8:	462b      	mov	r3, r5
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4614      	mov	r4, r2
 800e3f0:	f7f2 f92a 	bl	8000648 <__aeabi_dmul>
 800e3f4:	4632      	mov	r2, r6
 800e3f6:	463b      	mov	r3, r7
 800e3f8:	4682      	mov	sl, r0
 800e3fa:	468b      	mov	fp, r1
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800e402:	f7f2 f921 	bl	8000648 <__aeabi_dmul>
 800e406:	4622      	mov	r2, r4
 800e408:	4606      	mov	r6, r0
 800e40a:	460f      	mov	r7, r1
 800e40c:	462b      	mov	r3, r5
 800e40e:	4640      	mov	r0, r8
 800e410:	4649      	mov	r1, r9
 800e412:	f7f1 ff63 	bl	80002dc <__adddf3>
 800e416:	4622      	mov	r2, r4
 800e418:	ec41 0b18 	vmov	d8, r0, r1
 800e41c:	462b      	mov	r3, r5
 800e41e:	4640      	mov	r0, r8
 800e420:	4649      	mov	r1, r9
 800e422:	f7f1 ff59 	bl	80002d8 <__aeabi_dsub>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	ec51 0b18 	vmov	r0, r1, d8
 800e42e:	f7f2 f90b 	bl	8000648 <__aeabi_dmul>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4630      	mov	r0, r6
 800e438:	4639      	mov	r1, r7
 800e43a:	f7f1 ff4d 	bl	80002d8 <__aeabi_dsub>
 800e43e:	4602      	mov	r2, r0
 800e440:	460b      	mov	r3, r1
 800e442:	4650      	mov	r0, sl
 800e444:	4659      	mov	r1, fp
 800e446:	f7f1 ff47 	bl	80002d8 <__aeabi_dsub>
 800e44a:	ec41 0b10 	vmov	d0, r0, r1
 800e44e:	f000 ffab 	bl	800f3a8 <__ieee754_sqrt>
 800e452:	9b01      	ldr	r3, [sp, #4]
 800e454:	ec59 8b10 	vmov	r8, r9, d0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d087      	beq.n	800e36c <__ieee754_hypot+0x80>
 800e45c:	051b      	lsls	r3, r3, #20
 800e45e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e462:	2000      	movs	r0, #0
 800e464:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	ee10 0a10 	vmov	r0, s0
 800e470:	4649      	mov	r1, r9
 800e472:	f7f2 f8e9 	bl	8000648 <__aeabi_dmul>
 800e476:	e75b      	b.n	800e330 <__ieee754_hypot+0x44>
 800e478:	2300      	movs	r3, #0
 800e47a:	e786      	b.n	800e38a <__ieee754_hypot+0x9e>
 800e47c:	9b01      	ldr	r3, [sp, #4]
 800e47e:	f105 5516 	add.w	r5, r5, #629145600	; 0x25800000
 800e482:	f104 5416 	add.w	r4, r4, #629145600	; 0x25800000
 800e486:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800e48a:	9301      	str	r3, [sp, #4]
 800e48c:	46a9      	mov	r9, r5
 800e48e:	4627      	mov	r7, r4
 800e490:	e799      	b.n	800e3c6 <__ieee754_hypot+0xda>
 800e492:	4623      	mov	r3, r4
 800e494:	ec43 2b18 	vmov	d8, r2, r3
 800e498:	f505 1b80 	add.w	fp, r5, #1048576	; 0x100000
 800e49c:	f04f 0a00 	mov.w	sl, #0
 800e4a0:	4652      	mov	r2, sl
 800e4a2:	465b      	mov	r3, fp
 800e4a4:	ec51 0b18 	vmov	r0, r1, d8
 800e4a8:	f7f2 f8ce 	bl	8000648 <__aeabi_dmul>
 800e4ac:	ec41 0b19 	vmov	d9, r0, r1
 800e4b0:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e4b4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e4b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4bc:	f7f2 f8c4 	bl	8000648 <__aeabi_dmul>
 800e4c0:	4642      	mov	r2, r8
 800e4c2:	ec41 0b1a 	vmov	d10, r0, r1
 800e4c6:	464b      	mov	r3, r9
 800e4c8:	4640      	mov	r0, r8
 800e4ca:	4649      	mov	r1, r9
 800e4cc:	f7f1 ff06 	bl	80002dc <__adddf3>
 800e4d0:	4652      	mov	r2, sl
 800e4d2:	465b      	mov	r3, fp
 800e4d4:	f7f1 ff00 	bl	80002d8 <__aeabi_dsub>
 800e4d8:	4632      	mov	r2, r6
 800e4da:	463b      	mov	r3, r7
 800e4dc:	f7f2 f8b4 	bl	8000648 <__aeabi_dmul>
 800e4e0:	ec53 2b18 	vmov	r2, r3, d8
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	4639      	mov	r1, r7
 800e4ec:	f7f1 fef4 	bl	80002d8 <__aeabi_dsub>
 800e4f0:	4652      	mov	r2, sl
 800e4f2:	465b      	mov	r3, fp
 800e4f4:	f7f2 f8a8 	bl	8000648 <__aeabi_dmul>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	f7f1 feec 	bl	80002dc <__adddf3>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	ec51 0b1a 	vmov	r0, r1, d10
 800e50c:	f7f1 fee4 	bl	80002d8 <__aeabi_dsub>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	ec51 0b19 	vmov	r0, r1, d9
 800e518:	e795      	b.n	800e446 <__ieee754_hypot+0x15a>
 800e51a:	bf00      	nop
 800e51c:	5f300000 	.word	0x5f300000
 800e520:	7fefffff 	.word	0x7fefffff
 800e524:	20afffff 	.word	0x20afffff
 800e528:	7fd00000 	.word	0x7fd00000
 800e52c:	00000000 	.word	0x00000000

0800e530 <__ieee754_pow>:
 800e530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	ed2d 8b06 	vpush	{d8-d10}
 800e538:	b089      	sub	sp, #36	; 0x24
 800e53a:	ed8d 1b00 	vstr	d1, [sp]
 800e53e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e542:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e546:	ea58 0102 	orrs.w	r1, r8, r2
 800e54a:	ec57 6b10 	vmov	r6, r7, d0
 800e54e:	d115      	bne.n	800e57c <__ieee754_pow+0x4c>
 800e550:	19b3      	adds	r3, r6, r6
 800e552:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e556:	4152      	adcs	r2, r2
 800e558:	4299      	cmp	r1, r3
 800e55a:	4b89      	ldr	r3, [pc, #548]	; (800e780 <__ieee754_pow+0x250>)
 800e55c:	4193      	sbcs	r3, r2
 800e55e:	f080 84d2 	bcs.w	800ef06 <__ieee754_pow+0x9d6>
 800e562:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f1 feb7 	bl	80002dc <__adddf3>
 800e56e:	ec41 0b10 	vmov	d0, r0, r1
 800e572:	b009      	add	sp, #36	; 0x24
 800e574:	ecbd 8b06 	vpop	{d8-d10}
 800e578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57c:	4b81      	ldr	r3, [pc, #516]	; (800e784 <__ieee754_pow+0x254>)
 800e57e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e582:	429c      	cmp	r4, r3
 800e584:	ee10 aa10 	vmov	sl, s0
 800e588:	463d      	mov	r5, r7
 800e58a:	dc06      	bgt.n	800e59a <__ieee754_pow+0x6a>
 800e58c:	d101      	bne.n	800e592 <__ieee754_pow+0x62>
 800e58e:	2e00      	cmp	r6, #0
 800e590:	d1e7      	bne.n	800e562 <__ieee754_pow+0x32>
 800e592:	4598      	cmp	r8, r3
 800e594:	dc01      	bgt.n	800e59a <__ieee754_pow+0x6a>
 800e596:	d10f      	bne.n	800e5b8 <__ieee754_pow+0x88>
 800e598:	b172      	cbz	r2, 800e5b8 <__ieee754_pow+0x88>
 800e59a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e59e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e5a2:	ea55 050a 	orrs.w	r5, r5, sl
 800e5a6:	d1dc      	bne.n	800e562 <__ieee754_pow+0x32>
 800e5a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5ac:	18db      	adds	r3, r3, r3
 800e5ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e5b2:	4152      	adcs	r2, r2
 800e5b4:	429d      	cmp	r5, r3
 800e5b6:	e7d0      	b.n	800e55a <__ieee754_pow+0x2a>
 800e5b8:	2d00      	cmp	r5, #0
 800e5ba:	da3b      	bge.n	800e634 <__ieee754_pow+0x104>
 800e5bc:	4b72      	ldr	r3, [pc, #456]	; (800e788 <__ieee754_pow+0x258>)
 800e5be:	4598      	cmp	r8, r3
 800e5c0:	dc51      	bgt.n	800e666 <__ieee754_pow+0x136>
 800e5c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e5c6:	4598      	cmp	r8, r3
 800e5c8:	f340 84ac 	ble.w	800ef24 <__ieee754_pow+0x9f4>
 800e5cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e5d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e5d4:	2b14      	cmp	r3, #20
 800e5d6:	dd0f      	ble.n	800e5f8 <__ieee754_pow+0xc8>
 800e5d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e5dc:	fa22 f103 	lsr.w	r1, r2, r3
 800e5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	f040 849d 	bne.w	800ef24 <__ieee754_pow+0x9f4>
 800e5ea:	f001 0101 	and.w	r1, r1, #1
 800e5ee:	f1c1 0302 	rsb	r3, r1, #2
 800e5f2:	9304      	str	r3, [sp, #16]
 800e5f4:	b182      	cbz	r2, 800e618 <__ieee754_pow+0xe8>
 800e5f6:	e05f      	b.n	800e6b8 <__ieee754_pow+0x188>
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	d15b      	bne.n	800e6b4 <__ieee754_pow+0x184>
 800e5fc:	f1c3 0314 	rsb	r3, r3, #20
 800e600:	fa48 f103 	asr.w	r1, r8, r3
 800e604:	fa01 f303 	lsl.w	r3, r1, r3
 800e608:	4543      	cmp	r3, r8
 800e60a:	f040 8488 	bne.w	800ef1e <__ieee754_pow+0x9ee>
 800e60e:	f001 0101 	and.w	r1, r1, #1
 800e612:	f1c1 0302 	rsb	r3, r1, #2
 800e616:	9304      	str	r3, [sp, #16]
 800e618:	4b5c      	ldr	r3, [pc, #368]	; (800e78c <__ieee754_pow+0x25c>)
 800e61a:	4598      	cmp	r8, r3
 800e61c:	d132      	bne.n	800e684 <__ieee754_pow+0x154>
 800e61e:	f1b9 0f00 	cmp.w	r9, #0
 800e622:	f280 8478 	bge.w	800ef16 <__ieee754_pow+0x9e6>
 800e626:	4959      	ldr	r1, [pc, #356]	; (800e78c <__ieee754_pow+0x25c>)
 800e628:	4632      	mov	r2, r6
 800e62a:	463b      	mov	r3, r7
 800e62c:	2000      	movs	r0, #0
 800e62e:	f7f2 f935 	bl	800089c <__aeabi_ddiv>
 800e632:	e79c      	b.n	800e56e <__ieee754_pow+0x3e>
 800e634:	2300      	movs	r3, #0
 800e636:	9304      	str	r3, [sp, #16]
 800e638:	2a00      	cmp	r2, #0
 800e63a:	d13d      	bne.n	800e6b8 <__ieee754_pow+0x188>
 800e63c:	4b51      	ldr	r3, [pc, #324]	; (800e784 <__ieee754_pow+0x254>)
 800e63e:	4598      	cmp	r8, r3
 800e640:	d1ea      	bne.n	800e618 <__ieee754_pow+0xe8>
 800e642:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e646:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e64a:	ea53 030a 	orrs.w	r3, r3, sl
 800e64e:	f000 845a 	beq.w	800ef06 <__ieee754_pow+0x9d6>
 800e652:	4b4f      	ldr	r3, [pc, #316]	; (800e790 <__ieee754_pow+0x260>)
 800e654:	429c      	cmp	r4, r3
 800e656:	dd08      	ble.n	800e66a <__ieee754_pow+0x13a>
 800e658:	f1b9 0f00 	cmp.w	r9, #0
 800e65c:	f2c0 8457 	blt.w	800ef0e <__ieee754_pow+0x9de>
 800e660:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e664:	e783      	b.n	800e56e <__ieee754_pow+0x3e>
 800e666:	2302      	movs	r3, #2
 800e668:	e7e5      	b.n	800e636 <__ieee754_pow+0x106>
 800e66a:	f1b9 0f00 	cmp.w	r9, #0
 800e66e:	f04f 0000 	mov.w	r0, #0
 800e672:	f04f 0100 	mov.w	r1, #0
 800e676:	f6bf af7a 	bge.w	800e56e <__ieee754_pow+0x3e>
 800e67a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e67e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e682:	e774      	b.n	800e56e <__ieee754_pow+0x3e>
 800e684:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e688:	d106      	bne.n	800e698 <__ieee754_pow+0x168>
 800e68a:	4632      	mov	r2, r6
 800e68c:	463b      	mov	r3, r7
 800e68e:	4630      	mov	r0, r6
 800e690:	4639      	mov	r1, r7
 800e692:	f7f1 ffd9 	bl	8000648 <__aeabi_dmul>
 800e696:	e76a      	b.n	800e56e <__ieee754_pow+0x3e>
 800e698:	4b3e      	ldr	r3, [pc, #248]	; (800e794 <__ieee754_pow+0x264>)
 800e69a:	4599      	cmp	r9, r3
 800e69c:	d10c      	bne.n	800e6b8 <__ieee754_pow+0x188>
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	db0a      	blt.n	800e6b8 <__ieee754_pow+0x188>
 800e6a2:	ec47 6b10 	vmov	d0, r6, r7
 800e6a6:	b009      	add	sp, #36	; 0x24
 800e6a8:	ecbd 8b06 	vpop	{d8-d10}
 800e6ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b0:	f000 be7a 	b.w	800f3a8 <__ieee754_sqrt>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9304      	str	r3, [sp, #16]
 800e6b8:	ec47 6b10 	vmov	d0, r6, r7
 800e6bc:	f001 fc2e 	bl	800ff1c <fabs>
 800e6c0:	ec51 0b10 	vmov	r0, r1, d0
 800e6c4:	f1ba 0f00 	cmp.w	sl, #0
 800e6c8:	d129      	bne.n	800e71e <__ieee754_pow+0x1ee>
 800e6ca:	b124      	cbz	r4, 800e6d6 <__ieee754_pow+0x1a6>
 800e6cc:	4b2f      	ldr	r3, [pc, #188]	; (800e78c <__ieee754_pow+0x25c>)
 800e6ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d123      	bne.n	800e71e <__ieee754_pow+0x1ee>
 800e6d6:	f1b9 0f00 	cmp.w	r9, #0
 800e6da:	da05      	bge.n	800e6e8 <__ieee754_pow+0x1b8>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	460b      	mov	r3, r1
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	492a      	ldr	r1, [pc, #168]	; (800e78c <__ieee754_pow+0x25c>)
 800e6e4:	f7f2 f8da 	bl	800089c <__aeabi_ddiv>
 800e6e8:	2d00      	cmp	r5, #0
 800e6ea:	f6bf af40 	bge.w	800e56e <__ieee754_pow+0x3e>
 800e6ee:	9b04      	ldr	r3, [sp, #16]
 800e6f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e6f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e6f8:	4323      	orrs	r3, r4
 800e6fa:	d108      	bne.n	800e70e <__ieee754_pow+0x1de>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4610      	mov	r0, r2
 800e702:	4619      	mov	r1, r3
 800e704:	f7f1 fde8 	bl	80002d8 <__aeabi_dsub>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	e78f      	b.n	800e62e <__ieee754_pow+0xfe>
 800e70e:	9b04      	ldr	r3, [sp, #16]
 800e710:	2b01      	cmp	r3, #1
 800e712:	f47f af2c 	bne.w	800e56e <__ieee754_pow+0x3e>
 800e716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e71a:	4619      	mov	r1, r3
 800e71c:	e727      	b.n	800e56e <__ieee754_pow+0x3e>
 800e71e:	0feb      	lsrs	r3, r5, #31
 800e720:	3b01      	subs	r3, #1
 800e722:	9306      	str	r3, [sp, #24]
 800e724:	9a06      	ldr	r2, [sp, #24]
 800e726:	9b04      	ldr	r3, [sp, #16]
 800e728:	4313      	orrs	r3, r2
 800e72a:	d102      	bne.n	800e732 <__ieee754_pow+0x202>
 800e72c:	4632      	mov	r2, r6
 800e72e:	463b      	mov	r3, r7
 800e730:	e7e6      	b.n	800e700 <__ieee754_pow+0x1d0>
 800e732:	4b19      	ldr	r3, [pc, #100]	; (800e798 <__ieee754_pow+0x268>)
 800e734:	4598      	cmp	r8, r3
 800e736:	f340 80fb 	ble.w	800e930 <__ieee754_pow+0x400>
 800e73a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e73e:	4598      	cmp	r8, r3
 800e740:	4b13      	ldr	r3, [pc, #76]	; (800e790 <__ieee754_pow+0x260>)
 800e742:	dd0c      	ble.n	800e75e <__ieee754_pow+0x22e>
 800e744:	429c      	cmp	r4, r3
 800e746:	dc0f      	bgt.n	800e768 <__ieee754_pow+0x238>
 800e748:	f1b9 0f00 	cmp.w	r9, #0
 800e74c:	da0f      	bge.n	800e76e <__ieee754_pow+0x23e>
 800e74e:	2000      	movs	r0, #0
 800e750:	b009      	add	sp, #36	; 0x24
 800e752:	ecbd 8b06 	vpop	{d8-d10}
 800e756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75a:	f001 bbd6 	b.w	800ff0a <__math_oflow>
 800e75e:	429c      	cmp	r4, r3
 800e760:	dbf2      	blt.n	800e748 <__ieee754_pow+0x218>
 800e762:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <__ieee754_pow+0x25c>)
 800e764:	429c      	cmp	r4, r3
 800e766:	dd19      	ble.n	800e79c <__ieee754_pow+0x26c>
 800e768:	f1b9 0f00 	cmp.w	r9, #0
 800e76c:	dcef      	bgt.n	800e74e <__ieee754_pow+0x21e>
 800e76e:	2000      	movs	r0, #0
 800e770:	b009      	add	sp, #36	; 0x24
 800e772:	ecbd 8b06 	vpop	{d8-d10}
 800e776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77a:	f001 bbbd 	b.w	800fef8 <__math_uflow>
 800e77e:	bf00      	nop
 800e780:	fff00000 	.word	0xfff00000
 800e784:	7ff00000 	.word	0x7ff00000
 800e788:	433fffff 	.word	0x433fffff
 800e78c:	3ff00000 	.word	0x3ff00000
 800e790:	3fefffff 	.word	0x3fefffff
 800e794:	3fe00000 	.word	0x3fe00000
 800e798:	41e00000 	.word	0x41e00000
 800e79c:	4b60      	ldr	r3, [pc, #384]	; (800e920 <__ieee754_pow+0x3f0>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f7f1 fd9a 	bl	80002d8 <__aeabi_dsub>
 800e7a4:	a354      	add	r3, pc, #336	; (adr r3, 800e8f8 <__ieee754_pow+0x3c8>)
 800e7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	460d      	mov	r5, r1
 800e7ae:	f7f1 ff4b 	bl	8000648 <__aeabi_dmul>
 800e7b2:	a353      	add	r3, pc, #332	; (adr r3, 800e900 <__ieee754_pow+0x3d0>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	460f      	mov	r7, r1
 800e7bc:	4620      	mov	r0, r4
 800e7be:	4629      	mov	r1, r5
 800e7c0:	f7f1 ff42 	bl	8000648 <__aeabi_dmul>
 800e7c4:	4b57      	ldr	r3, [pc, #348]	; (800e924 <__ieee754_pow+0x3f4>)
 800e7c6:	4682      	mov	sl, r0
 800e7c8:	468b      	mov	fp, r1
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	f7f1 ff3a 	bl	8000648 <__aeabi_dmul>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	a14b      	add	r1, pc, #300	; (adr r1, 800e908 <__ieee754_pow+0x3d8>)
 800e7da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7de:	f7f1 fd7b 	bl	80002d8 <__aeabi_dsub>
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	462b      	mov	r3, r5
 800e7e6:	f7f1 ff2f 	bl	8000648 <__aeabi_dmul>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	494d      	ldr	r1, [pc, #308]	; (800e928 <__ieee754_pow+0x3f8>)
 800e7f2:	f7f1 fd71 	bl	80002d8 <__aeabi_dsub>
 800e7f6:	4622      	mov	r2, r4
 800e7f8:	4680      	mov	r8, r0
 800e7fa:	4689      	mov	r9, r1
 800e7fc:	462b      	mov	r3, r5
 800e7fe:	4620      	mov	r0, r4
 800e800:	4629      	mov	r1, r5
 800e802:	f7f1 ff21 	bl	8000648 <__aeabi_dmul>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	4640      	mov	r0, r8
 800e80c:	4649      	mov	r1, r9
 800e80e:	f7f1 ff1b 	bl	8000648 <__aeabi_dmul>
 800e812:	a33f      	add	r3, pc, #252	; (adr r3, 800e910 <__ieee754_pow+0x3e0>)
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	f7f1 ff16 	bl	8000648 <__aeabi_dmul>
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	4650      	mov	r0, sl
 800e822:	4659      	mov	r1, fp
 800e824:	f7f1 fd58 	bl	80002d8 <__aeabi_dsub>
 800e828:	4602      	mov	r2, r0
 800e82a:	460b      	mov	r3, r1
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	4630      	mov	r0, r6
 800e832:	4639      	mov	r1, r7
 800e834:	f7f1 fd52 	bl	80002dc <__adddf3>
 800e838:	2000      	movs	r0, #0
 800e83a:	4632      	mov	r2, r6
 800e83c:	463b      	mov	r3, r7
 800e83e:	4604      	mov	r4, r0
 800e840:	460d      	mov	r5, r1
 800e842:	f7f1 fd49 	bl	80002d8 <__aeabi_dsub>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	4640      	mov	r0, r8
 800e84c:	4649      	mov	r1, r9
 800e84e:	f7f1 fd43 	bl	80002d8 <__aeabi_dsub>
 800e852:	9b04      	ldr	r3, [sp, #16]
 800e854:	9a06      	ldr	r2, [sp, #24]
 800e856:	3b01      	subs	r3, #1
 800e858:	4313      	orrs	r3, r2
 800e85a:	4682      	mov	sl, r0
 800e85c:	468b      	mov	fp, r1
 800e85e:	f040 81e7 	bne.w	800ec30 <__ieee754_pow+0x700>
 800e862:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e918 <__ieee754_pow+0x3e8>
 800e866:	eeb0 8a47 	vmov.f32	s16, s14
 800e86a:	eef0 8a67 	vmov.f32	s17, s15
 800e86e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e872:	2600      	movs	r6, #0
 800e874:	4632      	mov	r2, r6
 800e876:	463b      	mov	r3, r7
 800e878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e87c:	f7f1 fd2c 	bl	80002d8 <__aeabi_dsub>
 800e880:	4622      	mov	r2, r4
 800e882:	462b      	mov	r3, r5
 800e884:	f7f1 fee0 	bl	8000648 <__aeabi_dmul>
 800e888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e88c:	4680      	mov	r8, r0
 800e88e:	4689      	mov	r9, r1
 800e890:	4650      	mov	r0, sl
 800e892:	4659      	mov	r1, fp
 800e894:	f7f1 fed8 	bl	8000648 <__aeabi_dmul>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4640      	mov	r0, r8
 800e89e:	4649      	mov	r1, r9
 800e8a0:	f7f1 fd1c 	bl	80002dc <__adddf3>
 800e8a4:	4632      	mov	r2, r6
 800e8a6:	463b      	mov	r3, r7
 800e8a8:	4680      	mov	r8, r0
 800e8aa:	4689      	mov	r9, r1
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	f7f1 feca 	bl	8000648 <__aeabi_dmul>
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	460d      	mov	r5, r1
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	4649      	mov	r1, r9
 800e8be:	4640      	mov	r0, r8
 800e8c0:	f7f1 fd0c 	bl	80002dc <__adddf3>
 800e8c4:	4b19      	ldr	r3, [pc, #100]	; (800e92c <__ieee754_pow+0x3fc>)
 800e8c6:	4299      	cmp	r1, r3
 800e8c8:	ec45 4b19 	vmov	d9, r4, r5
 800e8cc:	4606      	mov	r6, r0
 800e8ce:	460f      	mov	r7, r1
 800e8d0:	468b      	mov	fp, r1
 800e8d2:	f340 82f1 	ble.w	800eeb8 <__ieee754_pow+0x988>
 800e8d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e8da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e8de:	4303      	orrs	r3, r0
 800e8e0:	f000 81e4 	beq.w	800ecac <__ieee754_pow+0x77c>
 800e8e4:	ec51 0b18 	vmov	r0, r1, d8
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f7f2 f91e 	bl	8000b2c <__aeabi_dcmplt>
 800e8f0:	3800      	subs	r0, #0
 800e8f2:	bf18      	it	ne
 800e8f4:	2001      	movne	r0, #1
 800e8f6:	e72b      	b.n	800e750 <__ieee754_pow+0x220>
 800e8f8:	60000000 	.word	0x60000000
 800e8fc:	3ff71547 	.word	0x3ff71547
 800e900:	f85ddf44 	.word	0xf85ddf44
 800e904:	3e54ae0b 	.word	0x3e54ae0b
 800e908:	55555555 	.word	0x55555555
 800e90c:	3fd55555 	.word	0x3fd55555
 800e910:	652b82fe 	.word	0x652b82fe
 800e914:	3ff71547 	.word	0x3ff71547
 800e918:	00000000 	.word	0x00000000
 800e91c:	bff00000 	.word	0xbff00000
 800e920:	3ff00000 	.word	0x3ff00000
 800e924:	3fd00000 	.word	0x3fd00000
 800e928:	3fe00000 	.word	0x3fe00000
 800e92c:	408fffff 	.word	0x408fffff
 800e930:	4bd5      	ldr	r3, [pc, #852]	; (800ec88 <__ieee754_pow+0x758>)
 800e932:	402b      	ands	r3, r5
 800e934:	2200      	movs	r2, #0
 800e936:	b92b      	cbnz	r3, 800e944 <__ieee754_pow+0x414>
 800e938:	4bd4      	ldr	r3, [pc, #848]	; (800ec8c <__ieee754_pow+0x75c>)
 800e93a:	f7f1 fe85 	bl	8000648 <__aeabi_dmul>
 800e93e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e942:	460c      	mov	r4, r1
 800e944:	1523      	asrs	r3, r4, #20
 800e946:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e94a:	4413      	add	r3, r2
 800e94c:	9305      	str	r3, [sp, #20]
 800e94e:	4bd0      	ldr	r3, [pc, #832]	; (800ec90 <__ieee754_pow+0x760>)
 800e950:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e954:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e958:	429c      	cmp	r4, r3
 800e95a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e95e:	dd08      	ble.n	800e972 <__ieee754_pow+0x442>
 800e960:	4bcc      	ldr	r3, [pc, #816]	; (800ec94 <__ieee754_pow+0x764>)
 800e962:	429c      	cmp	r4, r3
 800e964:	f340 8162 	ble.w	800ec2c <__ieee754_pow+0x6fc>
 800e968:	9b05      	ldr	r3, [sp, #20]
 800e96a:	3301      	adds	r3, #1
 800e96c:	9305      	str	r3, [sp, #20]
 800e96e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e972:	2400      	movs	r4, #0
 800e974:	00e3      	lsls	r3, r4, #3
 800e976:	9307      	str	r3, [sp, #28]
 800e978:	4bc7      	ldr	r3, [pc, #796]	; (800ec98 <__ieee754_pow+0x768>)
 800e97a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e97e:	ed93 7b00 	vldr	d7, [r3]
 800e982:	4629      	mov	r1, r5
 800e984:	ec53 2b17 	vmov	r2, r3, d7
 800e988:	eeb0 9a47 	vmov.f32	s18, s14
 800e98c:	eef0 9a67 	vmov.f32	s19, s15
 800e990:	4682      	mov	sl, r0
 800e992:	f7f1 fca1 	bl	80002d8 <__aeabi_dsub>
 800e996:	4652      	mov	r2, sl
 800e998:	4606      	mov	r6, r0
 800e99a:	460f      	mov	r7, r1
 800e99c:	462b      	mov	r3, r5
 800e99e:	ec51 0b19 	vmov	r0, r1, d9
 800e9a2:	f7f1 fc9b 	bl	80002dc <__adddf3>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	49bb      	ldr	r1, [pc, #748]	; (800ec9c <__ieee754_pow+0x76c>)
 800e9ae:	f7f1 ff75 	bl	800089c <__aeabi_ddiv>
 800e9b2:	ec41 0b1a 	vmov	d10, r0, r1
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 fe43 	bl	8000648 <__aeabi_dmul>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9c8:	9302      	str	r3, [sp, #8]
 800e9ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e9ce:	46ab      	mov	fp, r5
 800e9d0:	106d      	asrs	r5, r5, #1
 800e9d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e9d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e9da:	ec41 0b18 	vmov	d8, r0, r1
 800e9de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	4614      	mov	r4, r2
 800e9ea:	461d      	mov	r5, r3
 800e9ec:	f7f1 fe2c 	bl	8000648 <__aeabi_dmul>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f7f1 fc6e 	bl	80002d8 <__aeabi_dsub>
 800e9fc:	ec53 2b19 	vmov	r2, r3, d9
 800ea00:	4606      	mov	r6, r0
 800ea02:	460f      	mov	r7, r1
 800ea04:	4620      	mov	r0, r4
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fc66 	bl	80002d8 <__aeabi_dsub>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4650      	mov	r0, sl
 800ea12:	4659      	mov	r1, fp
 800ea14:	f7f1 fc60 	bl	80002d8 <__aeabi_dsub>
 800ea18:	4642      	mov	r2, r8
 800ea1a:	464b      	mov	r3, r9
 800ea1c:	f7f1 fe14 	bl	8000648 <__aeabi_dmul>
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	4630      	mov	r0, r6
 800ea26:	4639      	mov	r1, r7
 800ea28:	f7f1 fc56 	bl	80002d8 <__aeabi_dsub>
 800ea2c:	ec53 2b1a 	vmov	r2, r3, d10
 800ea30:	f7f1 fe0a 	bl	8000648 <__aeabi_dmul>
 800ea34:	ec53 2b18 	vmov	r2, r3, d8
 800ea38:	ec41 0b19 	vmov	d9, r0, r1
 800ea3c:	ec51 0b18 	vmov	r0, r1, d8
 800ea40:	f7f1 fe02 	bl	8000648 <__aeabi_dmul>
 800ea44:	a37c      	add	r3, pc, #496	; (adr r3, 800ec38 <__ieee754_pow+0x708>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	460d      	mov	r5, r1
 800ea4e:	f7f1 fdfb 	bl	8000648 <__aeabi_dmul>
 800ea52:	a37b      	add	r3, pc, #492	; (adr r3, 800ec40 <__ieee754_pow+0x710>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	f7f1 fc40 	bl	80002dc <__adddf3>
 800ea5c:	4622      	mov	r2, r4
 800ea5e:	462b      	mov	r3, r5
 800ea60:	f7f1 fdf2 	bl	8000648 <__aeabi_dmul>
 800ea64:	a378      	add	r3, pc, #480	; (adr r3, 800ec48 <__ieee754_pow+0x718>)
 800ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6a:	f7f1 fc37 	bl	80002dc <__adddf3>
 800ea6e:	4622      	mov	r2, r4
 800ea70:	462b      	mov	r3, r5
 800ea72:	f7f1 fde9 	bl	8000648 <__aeabi_dmul>
 800ea76:	a376      	add	r3, pc, #472	; (adr r3, 800ec50 <__ieee754_pow+0x720>)
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	f7f1 fc2e 	bl	80002dc <__adddf3>
 800ea80:	4622      	mov	r2, r4
 800ea82:	462b      	mov	r3, r5
 800ea84:	f7f1 fde0 	bl	8000648 <__aeabi_dmul>
 800ea88:	a373      	add	r3, pc, #460	; (adr r3, 800ec58 <__ieee754_pow+0x728>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	f7f1 fc25 	bl	80002dc <__adddf3>
 800ea92:	4622      	mov	r2, r4
 800ea94:	462b      	mov	r3, r5
 800ea96:	f7f1 fdd7 	bl	8000648 <__aeabi_dmul>
 800ea9a:	a371      	add	r3, pc, #452	; (adr r3, 800ec60 <__ieee754_pow+0x730>)
 800ea9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa0:	f7f1 fc1c 	bl	80002dc <__adddf3>
 800eaa4:	4622      	mov	r2, r4
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	460f      	mov	r7, r1
 800eaaa:	462b      	mov	r3, r5
 800eaac:	4620      	mov	r0, r4
 800eaae:	4629      	mov	r1, r5
 800eab0:	f7f1 fdca 	bl	8000648 <__aeabi_dmul>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	4630      	mov	r0, r6
 800eaba:	4639      	mov	r1, r7
 800eabc:	f7f1 fdc4 	bl	8000648 <__aeabi_dmul>
 800eac0:	4642      	mov	r2, r8
 800eac2:	4604      	mov	r4, r0
 800eac4:	460d      	mov	r5, r1
 800eac6:	464b      	mov	r3, r9
 800eac8:	ec51 0b18 	vmov	r0, r1, d8
 800eacc:	f7f1 fc06 	bl	80002dc <__adddf3>
 800ead0:	ec53 2b19 	vmov	r2, r3, d9
 800ead4:	f7f1 fdb8 	bl	8000648 <__aeabi_dmul>
 800ead8:	4622      	mov	r2, r4
 800eada:	462b      	mov	r3, r5
 800eadc:	f7f1 fbfe 	bl	80002dc <__adddf3>
 800eae0:	4642      	mov	r2, r8
 800eae2:	4682      	mov	sl, r0
 800eae4:	468b      	mov	fp, r1
 800eae6:	464b      	mov	r3, r9
 800eae8:	4640      	mov	r0, r8
 800eaea:	4649      	mov	r1, r9
 800eaec:	f7f1 fdac 	bl	8000648 <__aeabi_dmul>
 800eaf0:	4b6b      	ldr	r3, [pc, #428]	; (800eca0 <__ieee754_pow+0x770>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	4606      	mov	r6, r0
 800eaf6:	460f      	mov	r7, r1
 800eaf8:	f7f1 fbf0 	bl	80002dc <__adddf3>
 800eafc:	4652      	mov	r2, sl
 800eafe:	465b      	mov	r3, fp
 800eb00:	f7f1 fbec 	bl	80002dc <__adddf3>
 800eb04:	2000      	movs	r0, #0
 800eb06:	4604      	mov	r4, r0
 800eb08:	460d      	mov	r5, r1
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	4640      	mov	r0, r8
 800eb10:	4649      	mov	r1, r9
 800eb12:	f7f1 fd99 	bl	8000648 <__aeabi_dmul>
 800eb16:	4b62      	ldr	r3, [pc, #392]	; (800eca0 <__ieee754_pow+0x770>)
 800eb18:	4680      	mov	r8, r0
 800eb1a:	4689      	mov	r9, r1
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	4620      	mov	r0, r4
 800eb20:	4629      	mov	r1, r5
 800eb22:	f7f1 fbd9 	bl	80002d8 <__aeabi_dsub>
 800eb26:	4632      	mov	r2, r6
 800eb28:	463b      	mov	r3, r7
 800eb2a:	f7f1 fbd5 	bl	80002d8 <__aeabi_dsub>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	4650      	mov	r0, sl
 800eb34:	4659      	mov	r1, fp
 800eb36:	f7f1 fbcf 	bl	80002d8 <__aeabi_dsub>
 800eb3a:	ec53 2b18 	vmov	r2, r3, d8
 800eb3e:	f7f1 fd83 	bl	8000648 <__aeabi_dmul>
 800eb42:	4622      	mov	r2, r4
 800eb44:	4606      	mov	r6, r0
 800eb46:	460f      	mov	r7, r1
 800eb48:	462b      	mov	r3, r5
 800eb4a:	ec51 0b19 	vmov	r0, r1, d9
 800eb4e:	f7f1 fd7b 	bl	8000648 <__aeabi_dmul>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	4630      	mov	r0, r6
 800eb58:	4639      	mov	r1, r7
 800eb5a:	f7f1 fbbf 	bl	80002dc <__adddf3>
 800eb5e:	4606      	mov	r6, r0
 800eb60:	460f      	mov	r7, r1
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	4640      	mov	r0, r8
 800eb68:	4649      	mov	r1, r9
 800eb6a:	f7f1 fbb7 	bl	80002dc <__adddf3>
 800eb6e:	a33e      	add	r3, pc, #248	; (adr r3, 800ec68 <__ieee754_pow+0x738>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	2000      	movs	r0, #0
 800eb76:	4604      	mov	r4, r0
 800eb78:	460d      	mov	r5, r1
 800eb7a:	f7f1 fd65 	bl	8000648 <__aeabi_dmul>
 800eb7e:	4642      	mov	r2, r8
 800eb80:	ec41 0b18 	vmov	d8, r0, r1
 800eb84:	464b      	mov	r3, r9
 800eb86:	4620      	mov	r0, r4
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f7f1 fba5 	bl	80002d8 <__aeabi_dsub>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	4630      	mov	r0, r6
 800eb94:	4639      	mov	r1, r7
 800eb96:	f7f1 fb9f 	bl	80002d8 <__aeabi_dsub>
 800eb9a:	a335      	add	r3, pc, #212	; (adr r3, 800ec70 <__ieee754_pow+0x740>)
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	f7f1 fd52 	bl	8000648 <__aeabi_dmul>
 800eba4:	a334      	add	r3, pc, #208	; (adr r3, 800ec78 <__ieee754_pow+0x748>)
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	4606      	mov	r6, r0
 800ebac:	460f      	mov	r7, r1
 800ebae:	4620      	mov	r0, r4
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	f7f1 fd49 	bl	8000648 <__aeabi_dmul>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	4630      	mov	r0, r6
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	f7f1 fb8d 	bl	80002dc <__adddf3>
 800ebc2:	9a07      	ldr	r2, [sp, #28]
 800ebc4:	4b37      	ldr	r3, [pc, #220]	; (800eca4 <__ieee754_pow+0x774>)
 800ebc6:	4413      	add	r3, r2
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	f7f1 fb86 	bl	80002dc <__adddf3>
 800ebd0:	4682      	mov	sl, r0
 800ebd2:	9805      	ldr	r0, [sp, #20]
 800ebd4:	468b      	mov	fp, r1
 800ebd6:	f7f1 fccd 	bl	8000574 <__aeabi_i2d>
 800ebda:	9a07      	ldr	r2, [sp, #28]
 800ebdc:	4b32      	ldr	r3, [pc, #200]	; (800eca8 <__ieee754_pow+0x778>)
 800ebde:	4413      	add	r3, r2
 800ebe0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	460f      	mov	r7, r1
 800ebe8:	4652      	mov	r2, sl
 800ebea:	465b      	mov	r3, fp
 800ebec:	ec51 0b18 	vmov	r0, r1, d8
 800ebf0:	f7f1 fb74 	bl	80002dc <__adddf3>
 800ebf4:	4642      	mov	r2, r8
 800ebf6:	464b      	mov	r3, r9
 800ebf8:	f7f1 fb70 	bl	80002dc <__adddf3>
 800ebfc:	4632      	mov	r2, r6
 800ebfe:	463b      	mov	r3, r7
 800ec00:	f7f1 fb6c 	bl	80002dc <__adddf3>
 800ec04:	2000      	movs	r0, #0
 800ec06:	4632      	mov	r2, r6
 800ec08:	463b      	mov	r3, r7
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	460d      	mov	r5, r1
 800ec0e:	f7f1 fb63 	bl	80002d8 <__aeabi_dsub>
 800ec12:	4642      	mov	r2, r8
 800ec14:	464b      	mov	r3, r9
 800ec16:	f7f1 fb5f 	bl	80002d8 <__aeabi_dsub>
 800ec1a:	ec53 2b18 	vmov	r2, r3, d8
 800ec1e:	f7f1 fb5b 	bl	80002d8 <__aeabi_dsub>
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	4650      	mov	r0, sl
 800ec28:	4659      	mov	r1, fp
 800ec2a:	e610      	b.n	800e84e <__ieee754_pow+0x31e>
 800ec2c:	2401      	movs	r4, #1
 800ec2e:	e6a1      	b.n	800e974 <__ieee754_pow+0x444>
 800ec30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ec80 <__ieee754_pow+0x750>
 800ec34:	e617      	b.n	800e866 <__ieee754_pow+0x336>
 800ec36:	bf00      	nop
 800ec38:	4a454eef 	.word	0x4a454eef
 800ec3c:	3fca7e28 	.word	0x3fca7e28
 800ec40:	93c9db65 	.word	0x93c9db65
 800ec44:	3fcd864a 	.word	0x3fcd864a
 800ec48:	a91d4101 	.word	0xa91d4101
 800ec4c:	3fd17460 	.word	0x3fd17460
 800ec50:	518f264d 	.word	0x518f264d
 800ec54:	3fd55555 	.word	0x3fd55555
 800ec58:	db6fabff 	.word	0xdb6fabff
 800ec5c:	3fdb6db6 	.word	0x3fdb6db6
 800ec60:	33333303 	.word	0x33333303
 800ec64:	3fe33333 	.word	0x3fe33333
 800ec68:	e0000000 	.word	0xe0000000
 800ec6c:	3feec709 	.word	0x3feec709
 800ec70:	dc3a03fd 	.word	0xdc3a03fd
 800ec74:	3feec709 	.word	0x3feec709
 800ec78:	145b01f5 	.word	0x145b01f5
 800ec7c:	be3e2fe0 	.word	0xbe3e2fe0
 800ec80:	00000000 	.word	0x00000000
 800ec84:	3ff00000 	.word	0x3ff00000
 800ec88:	7ff00000 	.word	0x7ff00000
 800ec8c:	43400000 	.word	0x43400000
 800ec90:	0003988e 	.word	0x0003988e
 800ec94:	000bb679 	.word	0x000bb679
 800ec98:	08010730 	.word	0x08010730
 800ec9c:	3ff00000 	.word	0x3ff00000
 800eca0:	40080000 	.word	0x40080000
 800eca4:	08010750 	.word	0x08010750
 800eca8:	08010740 	.word	0x08010740
 800ecac:	a3b5      	add	r3, pc, #724	; (adr r3, 800ef84 <__ieee754_pow+0xa54>)
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	4649      	mov	r1, r9
 800ecb6:	f7f1 fb11 	bl	80002dc <__adddf3>
 800ecba:	4622      	mov	r2, r4
 800ecbc:	ec41 0b1a 	vmov	d10, r0, r1
 800ecc0:	462b      	mov	r3, r5
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	f7f1 fb07 	bl	80002d8 <__aeabi_dsub>
 800ecca:	4602      	mov	r2, r0
 800eccc:	460b      	mov	r3, r1
 800ecce:	ec51 0b1a 	vmov	r0, r1, d10
 800ecd2:	f7f1 ff49 	bl	8000b68 <__aeabi_dcmpgt>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f47f ae04 	bne.w	800e8e4 <__ieee754_pow+0x3b4>
 800ecdc:	4aa4      	ldr	r2, [pc, #656]	; (800ef70 <__ieee754_pow+0xa40>)
 800ecde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ece2:	4293      	cmp	r3, r2
 800ece4:	f340 8108 	ble.w	800eef8 <__ieee754_pow+0x9c8>
 800ece8:	151b      	asrs	r3, r3, #20
 800ecea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ecee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ecf2:	fa4a f303 	asr.w	r3, sl, r3
 800ecf6:	445b      	add	r3, fp
 800ecf8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ecfc:	4e9d      	ldr	r6, [pc, #628]	; (800ef74 <__ieee754_pow+0xa44>)
 800ecfe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ed02:	4116      	asrs	r6, r2
 800ed04:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ed08:	2000      	movs	r0, #0
 800ed0a:	ea23 0106 	bic.w	r1, r3, r6
 800ed0e:	f1c2 0214 	rsb	r2, r2, #20
 800ed12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ed16:	fa4a fa02 	asr.w	sl, sl, r2
 800ed1a:	f1bb 0f00 	cmp.w	fp, #0
 800ed1e:	4602      	mov	r2, r0
 800ed20:	460b      	mov	r3, r1
 800ed22:	4620      	mov	r0, r4
 800ed24:	4629      	mov	r1, r5
 800ed26:	bfb8      	it	lt
 800ed28:	f1ca 0a00 	rsblt	sl, sl, #0
 800ed2c:	f7f1 fad4 	bl	80002d8 <__aeabi_dsub>
 800ed30:	ec41 0b19 	vmov	d9, r0, r1
 800ed34:	4642      	mov	r2, r8
 800ed36:	464b      	mov	r3, r9
 800ed38:	ec51 0b19 	vmov	r0, r1, d9
 800ed3c:	f7f1 face 	bl	80002dc <__adddf3>
 800ed40:	a37b      	add	r3, pc, #492	; (adr r3, 800ef30 <__ieee754_pow+0xa00>)
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	2000      	movs	r0, #0
 800ed48:	4604      	mov	r4, r0
 800ed4a:	460d      	mov	r5, r1
 800ed4c:	f7f1 fc7c 	bl	8000648 <__aeabi_dmul>
 800ed50:	ec53 2b19 	vmov	r2, r3, d9
 800ed54:	4606      	mov	r6, r0
 800ed56:	460f      	mov	r7, r1
 800ed58:	4620      	mov	r0, r4
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	f7f1 fabc 	bl	80002d8 <__aeabi_dsub>
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	4640      	mov	r0, r8
 800ed66:	4649      	mov	r1, r9
 800ed68:	f7f1 fab6 	bl	80002d8 <__aeabi_dsub>
 800ed6c:	a372      	add	r3, pc, #456	; (adr r3, 800ef38 <__ieee754_pow+0xa08>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	f7f1 fc69 	bl	8000648 <__aeabi_dmul>
 800ed76:	a372      	add	r3, pc, #456	; (adr r3, 800ef40 <__ieee754_pow+0xa10>)
 800ed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	4689      	mov	r9, r1
 800ed80:	4620      	mov	r0, r4
 800ed82:	4629      	mov	r1, r5
 800ed84:	f7f1 fc60 	bl	8000648 <__aeabi_dmul>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4640      	mov	r0, r8
 800ed8e:	4649      	mov	r1, r9
 800ed90:	f7f1 faa4 	bl	80002dc <__adddf3>
 800ed94:	4604      	mov	r4, r0
 800ed96:	460d      	mov	r5, r1
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	4639      	mov	r1, r7
 800eda0:	f7f1 fa9c 	bl	80002dc <__adddf3>
 800eda4:	4632      	mov	r2, r6
 800eda6:	463b      	mov	r3, r7
 800eda8:	4680      	mov	r8, r0
 800edaa:	4689      	mov	r9, r1
 800edac:	f7f1 fa94 	bl	80002d8 <__aeabi_dsub>
 800edb0:	4602      	mov	r2, r0
 800edb2:	460b      	mov	r3, r1
 800edb4:	4620      	mov	r0, r4
 800edb6:	4629      	mov	r1, r5
 800edb8:	f7f1 fa8e 	bl	80002d8 <__aeabi_dsub>
 800edbc:	4642      	mov	r2, r8
 800edbe:	4606      	mov	r6, r0
 800edc0:	460f      	mov	r7, r1
 800edc2:	464b      	mov	r3, r9
 800edc4:	4640      	mov	r0, r8
 800edc6:	4649      	mov	r1, r9
 800edc8:	f7f1 fc3e 	bl	8000648 <__aeabi_dmul>
 800edcc:	a35e      	add	r3, pc, #376	; (adr r3, 800ef48 <__ieee754_pow+0xa18>)
 800edce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd2:	4604      	mov	r4, r0
 800edd4:	460d      	mov	r5, r1
 800edd6:	f7f1 fc37 	bl	8000648 <__aeabi_dmul>
 800edda:	a35d      	add	r3, pc, #372	; (adr r3, 800ef50 <__ieee754_pow+0xa20>)
 800eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede0:	f7f1 fa7a 	bl	80002d8 <__aeabi_dsub>
 800ede4:	4622      	mov	r2, r4
 800ede6:	462b      	mov	r3, r5
 800ede8:	f7f1 fc2e 	bl	8000648 <__aeabi_dmul>
 800edec:	a35a      	add	r3, pc, #360	; (adr r3, 800ef58 <__ieee754_pow+0xa28>)
 800edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf2:	f7f1 fa73 	bl	80002dc <__adddf3>
 800edf6:	4622      	mov	r2, r4
 800edf8:	462b      	mov	r3, r5
 800edfa:	f7f1 fc25 	bl	8000648 <__aeabi_dmul>
 800edfe:	a358      	add	r3, pc, #352	; (adr r3, 800ef60 <__ieee754_pow+0xa30>)
 800ee00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee04:	f7f1 fa68 	bl	80002d8 <__aeabi_dsub>
 800ee08:	4622      	mov	r2, r4
 800ee0a:	462b      	mov	r3, r5
 800ee0c:	f7f1 fc1c 	bl	8000648 <__aeabi_dmul>
 800ee10:	a355      	add	r3, pc, #340	; (adr r3, 800ef68 <__ieee754_pow+0xa38>)
 800ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee16:	f7f1 fa61 	bl	80002dc <__adddf3>
 800ee1a:	4622      	mov	r2, r4
 800ee1c:	462b      	mov	r3, r5
 800ee1e:	f7f1 fc13 	bl	8000648 <__aeabi_dmul>
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	4640      	mov	r0, r8
 800ee28:	4649      	mov	r1, r9
 800ee2a:	f7f1 fa55 	bl	80002d8 <__aeabi_dsub>
 800ee2e:	4604      	mov	r4, r0
 800ee30:	460d      	mov	r5, r1
 800ee32:	4602      	mov	r2, r0
 800ee34:	460b      	mov	r3, r1
 800ee36:	4640      	mov	r0, r8
 800ee38:	4649      	mov	r1, r9
 800ee3a:	f7f1 fc05 	bl	8000648 <__aeabi_dmul>
 800ee3e:	2200      	movs	r2, #0
 800ee40:	ec41 0b19 	vmov	d9, r0, r1
 800ee44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee48:	4620      	mov	r0, r4
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	f7f1 fa44 	bl	80002d8 <__aeabi_dsub>
 800ee50:	4602      	mov	r2, r0
 800ee52:	460b      	mov	r3, r1
 800ee54:	ec51 0b19 	vmov	r0, r1, d9
 800ee58:	f7f1 fd20 	bl	800089c <__aeabi_ddiv>
 800ee5c:	4632      	mov	r2, r6
 800ee5e:	4604      	mov	r4, r0
 800ee60:	460d      	mov	r5, r1
 800ee62:	463b      	mov	r3, r7
 800ee64:	4640      	mov	r0, r8
 800ee66:	4649      	mov	r1, r9
 800ee68:	f7f1 fbee 	bl	8000648 <__aeabi_dmul>
 800ee6c:	4632      	mov	r2, r6
 800ee6e:	463b      	mov	r3, r7
 800ee70:	f7f1 fa34 	bl	80002dc <__adddf3>
 800ee74:	4602      	mov	r2, r0
 800ee76:	460b      	mov	r3, r1
 800ee78:	4620      	mov	r0, r4
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	f7f1 fa2c 	bl	80002d8 <__aeabi_dsub>
 800ee80:	4642      	mov	r2, r8
 800ee82:	464b      	mov	r3, r9
 800ee84:	f7f1 fa28 	bl	80002d8 <__aeabi_dsub>
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	493a      	ldr	r1, [pc, #232]	; (800ef78 <__ieee754_pow+0xa48>)
 800ee8e:	2000      	movs	r0, #0
 800ee90:	f7f1 fa22 	bl	80002d8 <__aeabi_dsub>
 800ee94:	ec41 0b10 	vmov	d0, r0, r1
 800ee98:	ee10 3a90 	vmov	r3, s1
 800ee9c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eea4:	da2b      	bge.n	800eefe <__ieee754_pow+0x9ce>
 800eea6:	4650      	mov	r0, sl
 800eea8:	f001 f8ce 	bl	8010048 <scalbn>
 800eeac:	ec51 0b10 	vmov	r0, r1, d0
 800eeb0:	ec53 2b18 	vmov	r2, r3, d8
 800eeb4:	f7ff bbed 	b.w	800e692 <__ieee754_pow+0x162>
 800eeb8:	4b30      	ldr	r3, [pc, #192]	; (800ef7c <__ieee754_pow+0xa4c>)
 800eeba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eebe:	429e      	cmp	r6, r3
 800eec0:	f77f af0c 	ble.w	800ecdc <__ieee754_pow+0x7ac>
 800eec4:	4b2e      	ldr	r3, [pc, #184]	; (800ef80 <__ieee754_pow+0xa50>)
 800eec6:	440b      	add	r3, r1
 800eec8:	4303      	orrs	r3, r0
 800eeca:	d009      	beq.n	800eee0 <__ieee754_pow+0x9b0>
 800eecc:	ec51 0b18 	vmov	r0, r1, d8
 800eed0:	2200      	movs	r2, #0
 800eed2:	2300      	movs	r3, #0
 800eed4:	f7f1 fe2a 	bl	8000b2c <__aeabi_dcmplt>
 800eed8:	3800      	subs	r0, #0
 800eeda:	bf18      	it	ne
 800eedc:	2001      	movne	r0, #1
 800eede:	e447      	b.n	800e770 <__ieee754_pow+0x240>
 800eee0:	4622      	mov	r2, r4
 800eee2:	462b      	mov	r3, r5
 800eee4:	f7f1 f9f8 	bl	80002d8 <__aeabi_dsub>
 800eee8:	4642      	mov	r2, r8
 800eeea:	464b      	mov	r3, r9
 800eeec:	f7f1 fe32 	bl	8000b54 <__aeabi_dcmpge>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	f43f aef3 	beq.w	800ecdc <__ieee754_pow+0x7ac>
 800eef6:	e7e9      	b.n	800eecc <__ieee754_pow+0x99c>
 800eef8:	f04f 0a00 	mov.w	sl, #0
 800eefc:	e71a      	b.n	800ed34 <__ieee754_pow+0x804>
 800eefe:	ec51 0b10 	vmov	r0, r1, d0
 800ef02:	4619      	mov	r1, r3
 800ef04:	e7d4      	b.n	800eeb0 <__ieee754_pow+0x980>
 800ef06:	491c      	ldr	r1, [pc, #112]	; (800ef78 <__ieee754_pow+0xa48>)
 800ef08:	2000      	movs	r0, #0
 800ef0a:	f7ff bb30 	b.w	800e56e <__ieee754_pow+0x3e>
 800ef0e:	2000      	movs	r0, #0
 800ef10:	2100      	movs	r1, #0
 800ef12:	f7ff bb2c 	b.w	800e56e <__ieee754_pow+0x3e>
 800ef16:	4630      	mov	r0, r6
 800ef18:	4639      	mov	r1, r7
 800ef1a:	f7ff bb28 	b.w	800e56e <__ieee754_pow+0x3e>
 800ef1e:	9204      	str	r2, [sp, #16]
 800ef20:	f7ff bb7a 	b.w	800e618 <__ieee754_pow+0xe8>
 800ef24:	2300      	movs	r3, #0
 800ef26:	f7ff bb64 	b.w	800e5f2 <__ieee754_pow+0xc2>
 800ef2a:	bf00      	nop
 800ef2c:	f3af 8000 	nop.w
 800ef30:	00000000 	.word	0x00000000
 800ef34:	3fe62e43 	.word	0x3fe62e43
 800ef38:	fefa39ef 	.word	0xfefa39ef
 800ef3c:	3fe62e42 	.word	0x3fe62e42
 800ef40:	0ca86c39 	.word	0x0ca86c39
 800ef44:	be205c61 	.word	0xbe205c61
 800ef48:	72bea4d0 	.word	0x72bea4d0
 800ef4c:	3e663769 	.word	0x3e663769
 800ef50:	c5d26bf1 	.word	0xc5d26bf1
 800ef54:	3ebbbd41 	.word	0x3ebbbd41
 800ef58:	af25de2c 	.word	0xaf25de2c
 800ef5c:	3f11566a 	.word	0x3f11566a
 800ef60:	16bebd93 	.word	0x16bebd93
 800ef64:	3f66c16c 	.word	0x3f66c16c
 800ef68:	5555553e 	.word	0x5555553e
 800ef6c:	3fc55555 	.word	0x3fc55555
 800ef70:	3fe00000 	.word	0x3fe00000
 800ef74:	000fffff 	.word	0x000fffff
 800ef78:	3ff00000 	.word	0x3ff00000
 800ef7c:	4090cbff 	.word	0x4090cbff
 800ef80:	3f6f3400 	.word	0x3f6f3400
 800ef84:	652b82fe 	.word	0x652b82fe
 800ef88:	3c971547 	.word	0x3c971547
 800ef8c:	00000000 	.word	0x00000000

0800ef90 <__ieee754_rem_pio2>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	ed2d 8b02 	vpush	{d8}
 800ef98:	ec55 4b10 	vmov	r4, r5, d0
 800ef9c:	4bca      	ldr	r3, [pc, #808]	; (800f2c8 <__ieee754_rem_pio2+0x338>)
 800ef9e:	b08b      	sub	sp, #44	; 0x2c
 800efa0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800efa4:	4598      	cmp	r8, r3
 800efa6:	4682      	mov	sl, r0
 800efa8:	9502      	str	r5, [sp, #8]
 800efaa:	dc08      	bgt.n	800efbe <__ieee754_rem_pio2+0x2e>
 800efac:	2200      	movs	r2, #0
 800efae:	2300      	movs	r3, #0
 800efb0:	ed80 0b00 	vstr	d0, [r0]
 800efb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800efb8:	f04f 0b00 	mov.w	fp, #0
 800efbc:	e028      	b.n	800f010 <__ieee754_rem_pio2+0x80>
 800efbe:	4bc3      	ldr	r3, [pc, #780]	; (800f2cc <__ieee754_rem_pio2+0x33c>)
 800efc0:	4598      	cmp	r8, r3
 800efc2:	dc78      	bgt.n	800f0b6 <__ieee754_rem_pio2+0x126>
 800efc4:	9b02      	ldr	r3, [sp, #8]
 800efc6:	4ec2      	ldr	r6, [pc, #776]	; (800f2d0 <__ieee754_rem_pio2+0x340>)
 800efc8:	2b00      	cmp	r3, #0
 800efca:	ee10 0a10 	vmov	r0, s0
 800efce:	a3b0      	add	r3, pc, #704	; (adr r3, 800f290 <__ieee754_rem_pio2+0x300>)
 800efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd4:	4629      	mov	r1, r5
 800efd6:	dd39      	ble.n	800f04c <__ieee754_rem_pio2+0xbc>
 800efd8:	f7f1 f97e 	bl	80002d8 <__aeabi_dsub>
 800efdc:	45b0      	cmp	r8, r6
 800efde:	4604      	mov	r4, r0
 800efe0:	460d      	mov	r5, r1
 800efe2:	d01b      	beq.n	800f01c <__ieee754_rem_pio2+0x8c>
 800efe4:	a3ac      	add	r3, pc, #688	; (adr r3, 800f298 <__ieee754_rem_pio2+0x308>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	f7f1 f975 	bl	80002d8 <__aeabi_dsub>
 800efee:	4602      	mov	r2, r0
 800eff0:	460b      	mov	r3, r1
 800eff2:	e9ca 2300 	strd	r2, r3, [sl]
 800eff6:	4620      	mov	r0, r4
 800eff8:	4629      	mov	r1, r5
 800effa:	f7f1 f96d 	bl	80002d8 <__aeabi_dsub>
 800effe:	a3a6      	add	r3, pc, #664	; (adr r3, 800f298 <__ieee754_rem_pio2+0x308>)
 800f000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f004:	f7f1 f968 	bl	80002d8 <__aeabi_dsub>
 800f008:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f00c:	f04f 0b01 	mov.w	fp, #1
 800f010:	4658      	mov	r0, fp
 800f012:	b00b      	add	sp, #44	; 0x2c
 800f014:	ecbd 8b02 	vpop	{d8}
 800f018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f2a0 <__ieee754_rem_pio2+0x310>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	f7f1 f959 	bl	80002d8 <__aeabi_dsub>
 800f026:	a3a0      	add	r3, pc, #640	; (adr r3, 800f2a8 <__ieee754_rem_pio2+0x318>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	4604      	mov	r4, r0
 800f02e:	460d      	mov	r5, r1
 800f030:	f7f1 f952 	bl	80002d8 <__aeabi_dsub>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	e9ca 2300 	strd	r2, r3, [sl]
 800f03c:	4620      	mov	r0, r4
 800f03e:	4629      	mov	r1, r5
 800f040:	f7f1 f94a 	bl	80002d8 <__aeabi_dsub>
 800f044:	a398      	add	r3, pc, #608	; (adr r3, 800f2a8 <__ieee754_rem_pio2+0x318>)
 800f046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04a:	e7db      	b.n	800f004 <__ieee754_rem_pio2+0x74>
 800f04c:	f7f1 f946 	bl	80002dc <__adddf3>
 800f050:	45b0      	cmp	r8, r6
 800f052:	4604      	mov	r4, r0
 800f054:	460d      	mov	r5, r1
 800f056:	d016      	beq.n	800f086 <__ieee754_rem_pio2+0xf6>
 800f058:	a38f      	add	r3, pc, #572	; (adr r3, 800f298 <__ieee754_rem_pio2+0x308>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	f7f1 f93d 	bl	80002dc <__adddf3>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	e9ca 2300 	strd	r2, r3, [sl]
 800f06a:	4620      	mov	r0, r4
 800f06c:	4629      	mov	r1, r5
 800f06e:	f7f1 f933 	bl	80002d8 <__aeabi_dsub>
 800f072:	a389      	add	r3, pc, #548	; (adr r3, 800f298 <__ieee754_rem_pio2+0x308>)
 800f074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f078:	f7f1 f930 	bl	80002dc <__adddf3>
 800f07c:	f04f 3bff 	mov.w	fp, #4294967295
 800f080:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f084:	e7c4      	b.n	800f010 <__ieee754_rem_pio2+0x80>
 800f086:	a386      	add	r3, pc, #536	; (adr r3, 800f2a0 <__ieee754_rem_pio2+0x310>)
 800f088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08c:	f7f1 f926 	bl	80002dc <__adddf3>
 800f090:	a385      	add	r3, pc, #532	; (adr r3, 800f2a8 <__ieee754_rem_pio2+0x318>)
 800f092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f096:	4604      	mov	r4, r0
 800f098:	460d      	mov	r5, r1
 800f09a:	f7f1 f91f 	bl	80002dc <__adddf3>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	e9ca 2300 	strd	r2, r3, [sl]
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	f7f1 f915 	bl	80002d8 <__aeabi_dsub>
 800f0ae:	a37e      	add	r3, pc, #504	; (adr r3, 800f2a8 <__ieee754_rem_pio2+0x318>)
 800f0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b4:	e7e0      	b.n	800f078 <__ieee754_rem_pio2+0xe8>
 800f0b6:	4b87      	ldr	r3, [pc, #540]	; (800f2d4 <__ieee754_rem_pio2+0x344>)
 800f0b8:	4598      	cmp	r8, r3
 800f0ba:	f300 80d9 	bgt.w	800f270 <__ieee754_rem_pio2+0x2e0>
 800f0be:	f000 ff2d 	bl	800ff1c <fabs>
 800f0c2:	ec55 4b10 	vmov	r4, r5, d0
 800f0c6:	ee10 0a10 	vmov	r0, s0
 800f0ca:	a379      	add	r3, pc, #484	; (adr r3, 800f2b0 <__ieee754_rem_pio2+0x320>)
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	f7f1 fab9 	bl	8000648 <__aeabi_dmul>
 800f0d6:	4b80      	ldr	r3, [pc, #512]	; (800f2d8 <__ieee754_rem_pio2+0x348>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f7f1 f8ff 	bl	80002dc <__adddf3>
 800f0de:	f7f1 fd63 	bl	8000ba8 <__aeabi_d2iz>
 800f0e2:	4683      	mov	fp, r0
 800f0e4:	f7f1 fa46 	bl	8000574 <__aeabi_i2d>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	ec43 2b18 	vmov	d8, r2, r3
 800f0f0:	a367      	add	r3, pc, #412	; (adr r3, 800f290 <__ieee754_rem_pio2+0x300>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 faa7 	bl	8000648 <__aeabi_dmul>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	4620      	mov	r0, r4
 800f100:	4629      	mov	r1, r5
 800f102:	f7f1 f8e9 	bl	80002d8 <__aeabi_dsub>
 800f106:	a364      	add	r3, pc, #400	; (adr r3, 800f298 <__ieee754_rem_pio2+0x308>)
 800f108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10c:	4606      	mov	r6, r0
 800f10e:	460f      	mov	r7, r1
 800f110:	ec51 0b18 	vmov	r0, r1, d8
 800f114:	f7f1 fa98 	bl	8000648 <__aeabi_dmul>
 800f118:	f1bb 0f1f 	cmp.w	fp, #31
 800f11c:	4604      	mov	r4, r0
 800f11e:	460d      	mov	r5, r1
 800f120:	dc0d      	bgt.n	800f13e <__ieee754_rem_pio2+0x1ae>
 800f122:	4b6e      	ldr	r3, [pc, #440]	; (800f2dc <__ieee754_rem_pio2+0x34c>)
 800f124:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f12c:	4543      	cmp	r3, r8
 800f12e:	d006      	beq.n	800f13e <__ieee754_rem_pio2+0x1ae>
 800f130:	4622      	mov	r2, r4
 800f132:	462b      	mov	r3, r5
 800f134:	4630      	mov	r0, r6
 800f136:	4639      	mov	r1, r7
 800f138:	f7f1 f8ce 	bl	80002d8 <__aeabi_dsub>
 800f13c:	e00f      	b.n	800f15e <__ieee754_rem_pio2+0x1ce>
 800f13e:	462b      	mov	r3, r5
 800f140:	4622      	mov	r2, r4
 800f142:	4630      	mov	r0, r6
 800f144:	4639      	mov	r1, r7
 800f146:	f7f1 f8c7 	bl	80002d8 <__aeabi_dsub>
 800f14a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f14e:	9303      	str	r3, [sp, #12]
 800f150:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f154:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f158:	f1b8 0f10 	cmp.w	r8, #16
 800f15c:	dc02      	bgt.n	800f164 <__ieee754_rem_pio2+0x1d4>
 800f15e:	e9ca 0100 	strd	r0, r1, [sl]
 800f162:	e039      	b.n	800f1d8 <__ieee754_rem_pio2+0x248>
 800f164:	a34e      	add	r3, pc, #312	; (adr r3, 800f2a0 <__ieee754_rem_pio2+0x310>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	ec51 0b18 	vmov	r0, r1, d8
 800f16e:	f7f1 fa6b 	bl	8000648 <__aeabi_dmul>
 800f172:	4604      	mov	r4, r0
 800f174:	460d      	mov	r5, r1
 800f176:	4602      	mov	r2, r0
 800f178:	460b      	mov	r3, r1
 800f17a:	4630      	mov	r0, r6
 800f17c:	4639      	mov	r1, r7
 800f17e:	f7f1 f8ab 	bl	80002d8 <__aeabi_dsub>
 800f182:	4602      	mov	r2, r0
 800f184:	460b      	mov	r3, r1
 800f186:	4680      	mov	r8, r0
 800f188:	4689      	mov	r9, r1
 800f18a:	4630      	mov	r0, r6
 800f18c:	4639      	mov	r1, r7
 800f18e:	f7f1 f8a3 	bl	80002d8 <__aeabi_dsub>
 800f192:	4622      	mov	r2, r4
 800f194:	462b      	mov	r3, r5
 800f196:	f7f1 f89f 	bl	80002d8 <__aeabi_dsub>
 800f19a:	a343      	add	r3, pc, #268	; (adr r3, 800f2a8 <__ieee754_rem_pio2+0x318>)
 800f19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	460d      	mov	r5, r1
 800f1a4:	ec51 0b18 	vmov	r0, r1, d8
 800f1a8:	f7f1 fa4e 	bl	8000648 <__aeabi_dmul>
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	462b      	mov	r3, r5
 800f1b0:	f7f1 f892 	bl	80002d8 <__aeabi_dsub>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	460d      	mov	r5, r1
 800f1bc:	4640      	mov	r0, r8
 800f1be:	4649      	mov	r1, r9
 800f1c0:	f7f1 f88a 	bl	80002d8 <__aeabi_dsub>
 800f1c4:	9a03      	ldr	r2, [sp, #12]
 800f1c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	2b31      	cmp	r3, #49	; 0x31
 800f1ce:	dc24      	bgt.n	800f21a <__ieee754_rem_pio2+0x28a>
 800f1d0:	e9ca 0100 	strd	r0, r1, [sl]
 800f1d4:	4646      	mov	r6, r8
 800f1d6:	464f      	mov	r7, r9
 800f1d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1dc:	4630      	mov	r0, r6
 800f1de:	4642      	mov	r2, r8
 800f1e0:	464b      	mov	r3, r9
 800f1e2:	4639      	mov	r1, r7
 800f1e4:	f7f1 f878 	bl	80002d8 <__aeabi_dsub>
 800f1e8:	462b      	mov	r3, r5
 800f1ea:	4622      	mov	r2, r4
 800f1ec:	f7f1 f874 	bl	80002d8 <__aeabi_dsub>
 800f1f0:	9b02      	ldr	r3, [sp, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f1f8:	f6bf af0a 	bge.w	800f010 <__ieee754_rem_pio2+0x80>
 800f1fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f200:	f8ca 3004 	str.w	r3, [sl, #4]
 800f204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f208:	f8ca 8000 	str.w	r8, [sl]
 800f20c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f210:	f8ca 300c 	str.w	r3, [sl, #12]
 800f214:	f1cb 0b00 	rsb	fp, fp, #0
 800f218:	e6fa      	b.n	800f010 <__ieee754_rem_pio2+0x80>
 800f21a:	a327      	add	r3, pc, #156	; (adr r3, 800f2b8 <__ieee754_rem_pio2+0x328>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	ec51 0b18 	vmov	r0, r1, d8
 800f224:	f7f1 fa10 	bl	8000648 <__aeabi_dmul>
 800f228:	4604      	mov	r4, r0
 800f22a:	460d      	mov	r5, r1
 800f22c:	4602      	mov	r2, r0
 800f22e:	460b      	mov	r3, r1
 800f230:	4640      	mov	r0, r8
 800f232:	4649      	mov	r1, r9
 800f234:	f7f1 f850 	bl	80002d8 <__aeabi_dsub>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	4606      	mov	r6, r0
 800f23e:	460f      	mov	r7, r1
 800f240:	4640      	mov	r0, r8
 800f242:	4649      	mov	r1, r9
 800f244:	f7f1 f848 	bl	80002d8 <__aeabi_dsub>
 800f248:	4622      	mov	r2, r4
 800f24a:	462b      	mov	r3, r5
 800f24c:	f7f1 f844 	bl	80002d8 <__aeabi_dsub>
 800f250:	a31b      	add	r3, pc, #108	; (adr r3, 800f2c0 <__ieee754_rem_pio2+0x330>)
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	4604      	mov	r4, r0
 800f258:	460d      	mov	r5, r1
 800f25a:	ec51 0b18 	vmov	r0, r1, d8
 800f25e:	f7f1 f9f3 	bl	8000648 <__aeabi_dmul>
 800f262:	4622      	mov	r2, r4
 800f264:	462b      	mov	r3, r5
 800f266:	f7f1 f837 	bl	80002d8 <__aeabi_dsub>
 800f26a:	4604      	mov	r4, r0
 800f26c:	460d      	mov	r5, r1
 800f26e:	e75f      	b.n	800f130 <__ieee754_rem_pio2+0x1a0>
 800f270:	4b1b      	ldr	r3, [pc, #108]	; (800f2e0 <__ieee754_rem_pio2+0x350>)
 800f272:	4598      	cmp	r8, r3
 800f274:	dd36      	ble.n	800f2e4 <__ieee754_rem_pio2+0x354>
 800f276:	ee10 2a10 	vmov	r2, s0
 800f27a:	462b      	mov	r3, r5
 800f27c:	4620      	mov	r0, r4
 800f27e:	4629      	mov	r1, r5
 800f280:	f7f1 f82a 	bl	80002d8 <__aeabi_dsub>
 800f284:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f288:	e9ca 0100 	strd	r0, r1, [sl]
 800f28c:	e694      	b.n	800efb8 <__ieee754_rem_pio2+0x28>
 800f28e:	bf00      	nop
 800f290:	54400000 	.word	0x54400000
 800f294:	3ff921fb 	.word	0x3ff921fb
 800f298:	1a626331 	.word	0x1a626331
 800f29c:	3dd0b461 	.word	0x3dd0b461
 800f2a0:	1a600000 	.word	0x1a600000
 800f2a4:	3dd0b461 	.word	0x3dd0b461
 800f2a8:	2e037073 	.word	0x2e037073
 800f2ac:	3ba3198a 	.word	0x3ba3198a
 800f2b0:	6dc9c883 	.word	0x6dc9c883
 800f2b4:	3fe45f30 	.word	0x3fe45f30
 800f2b8:	2e000000 	.word	0x2e000000
 800f2bc:	3ba3198a 	.word	0x3ba3198a
 800f2c0:	252049c1 	.word	0x252049c1
 800f2c4:	397b839a 	.word	0x397b839a
 800f2c8:	3fe921fb 	.word	0x3fe921fb
 800f2cc:	4002d97b 	.word	0x4002d97b
 800f2d0:	3ff921fb 	.word	0x3ff921fb
 800f2d4:	413921fb 	.word	0x413921fb
 800f2d8:	3fe00000 	.word	0x3fe00000
 800f2dc:	08010760 	.word	0x08010760
 800f2e0:	7fefffff 	.word	0x7fefffff
 800f2e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f2e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f2ec:	ee10 0a10 	vmov	r0, s0
 800f2f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f2f4:	ee10 6a10 	vmov	r6, s0
 800f2f8:	460f      	mov	r7, r1
 800f2fa:	f7f1 fc55 	bl	8000ba8 <__aeabi_d2iz>
 800f2fe:	f7f1 f939 	bl	8000574 <__aeabi_i2d>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4630      	mov	r0, r6
 800f308:	4639      	mov	r1, r7
 800f30a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f30e:	f7f0 ffe3 	bl	80002d8 <__aeabi_dsub>
 800f312:	4b23      	ldr	r3, [pc, #140]	; (800f3a0 <__ieee754_rem_pio2+0x410>)
 800f314:	2200      	movs	r2, #0
 800f316:	f7f1 f997 	bl	8000648 <__aeabi_dmul>
 800f31a:	460f      	mov	r7, r1
 800f31c:	4606      	mov	r6, r0
 800f31e:	f7f1 fc43 	bl	8000ba8 <__aeabi_d2iz>
 800f322:	f7f1 f927 	bl	8000574 <__aeabi_i2d>
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	4630      	mov	r0, r6
 800f32c:	4639      	mov	r1, r7
 800f32e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f332:	f7f0 ffd1 	bl	80002d8 <__aeabi_dsub>
 800f336:	4b1a      	ldr	r3, [pc, #104]	; (800f3a0 <__ieee754_rem_pio2+0x410>)
 800f338:	2200      	movs	r2, #0
 800f33a:	f7f1 f985 	bl	8000648 <__aeabi_dmul>
 800f33e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f342:	ad04      	add	r5, sp, #16
 800f344:	f04f 0803 	mov.w	r8, #3
 800f348:	46a9      	mov	r9, r5
 800f34a:	2600      	movs	r6, #0
 800f34c:	2700      	movs	r7, #0
 800f34e:	4632      	mov	r2, r6
 800f350:	463b      	mov	r3, r7
 800f352:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f356:	46c3      	mov	fp, r8
 800f358:	3d08      	subs	r5, #8
 800f35a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f35e:	f7f1 fbdb 	bl	8000b18 <__aeabi_dcmpeq>
 800f362:	2800      	cmp	r0, #0
 800f364:	d1f3      	bne.n	800f34e <__ieee754_rem_pio2+0x3be>
 800f366:	4b0f      	ldr	r3, [pc, #60]	; (800f3a4 <__ieee754_rem_pio2+0x414>)
 800f368:	9301      	str	r3, [sp, #4]
 800f36a:	2302      	movs	r3, #2
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	4622      	mov	r2, r4
 800f370:	465b      	mov	r3, fp
 800f372:	4651      	mov	r1, sl
 800f374:	4648      	mov	r0, r9
 800f376:	f000 f993 	bl	800f6a0 <__kernel_rem_pio2>
 800f37a:	9b02      	ldr	r3, [sp, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	4683      	mov	fp, r0
 800f380:	f6bf ae46 	bge.w	800f010 <__ieee754_rem_pio2+0x80>
 800f384:	e9da 2100 	ldrd	r2, r1, [sl]
 800f388:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f38c:	e9ca 2300 	strd	r2, r3, [sl]
 800f390:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f398:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f39c:	e73a      	b.n	800f214 <__ieee754_rem_pio2+0x284>
 800f39e:	bf00      	nop
 800f3a0:	41700000 	.word	0x41700000
 800f3a4:	080107e0 	.word	0x080107e0

0800f3a8 <__ieee754_sqrt>:
 800f3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ac:	ec55 4b10 	vmov	r4, r5, d0
 800f3b0:	4e55      	ldr	r6, [pc, #340]	; (800f508 <__ieee754_sqrt+0x160>)
 800f3b2:	43ae      	bics	r6, r5
 800f3b4:	ee10 0a10 	vmov	r0, s0
 800f3b8:	ee10 3a10 	vmov	r3, s0
 800f3bc:	462a      	mov	r2, r5
 800f3be:	4629      	mov	r1, r5
 800f3c0:	d110      	bne.n	800f3e4 <__ieee754_sqrt+0x3c>
 800f3c2:	ee10 2a10 	vmov	r2, s0
 800f3c6:	462b      	mov	r3, r5
 800f3c8:	f7f1 f93e 	bl	8000648 <__aeabi_dmul>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	f7f0 ff82 	bl	80002dc <__adddf3>
 800f3d8:	4604      	mov	r4, r0
 800f3da:	460d      	mov	r5, r1
 800f3dc:	ec45 4b10 	vmov	d0, r4, r5
 800f3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e4:	2d00      	cmp	r5, #0
 800f3e6:	dc10      	bgt.n	800f40a <__ieee754_sqrt+0x62>
 800f3e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f3ec:	4330      	orrs	r0, r6
 800f3ee:	d0f5      	beq.n	800f3dc <__ieee754_sqrt+0x34>
 800f3f0:	b15d      	cbz	r5, 800f40a <__ieee754_sqrt+0x62>
 800f3f2:	ee10 2a10 	vmov	r2, s0
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	ee10 0a10 	vmov	r0, s0
 800f3fc:	f7f0 ff6c 	bl	80002d8 <__aeabi_dsub>
 800f400:	4602      	mov	r2, r0
 800f402:	460b      	mov	r3, r1
 800f404:	f7f1 fa4a 	bl	800089c <__aeabi_ddiv>
 800f408:	e7e6      	b.n	800f3d8 <__ieee754_sqrt+0x30>
 800f40a:	1512      	asrs	r2, r2, #20
 800f40c:	d074      	beq.n	800f4f8 <__ieee754_sqrt+0x150>
 800f40e:	07d4      	lsls	r4, r2, #31
 800f410:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f414:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f41c:	bf5e      	ittt	pl
 800f41e:	0fda      	lsrpl	r2, r3, #31
 800f420:	005b      	lslpl	r3, r3, #1
 800f422:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f426:	2400      	movs	r4, #0
 800f428:	0fda      	lsrs	r2, r3, #31
 800f42a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f42e:	107f      	asrs	r7, r7, #1
 800f430:	005b      	lsls	r3, r3, #1
 800f432:	2516      	movs	r5, #22
 800f434:	4620      	mov	r0, r4
 800f436:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f43a:	1886      	adds	r6, r0, r2
 800f43c:	428e      	cmp	r6, r1
 800f43e:	bfde      	ittt	le
 800f440:	1b89      	suble	r1, r1, r6
 800f442:	18b0      	addle	r0, r6, r2
 800f444:	18a4      	addle	r4, r4, r2
 800f446:	0049      	lsls	r1, r1, #1
 800f448:	3d01      	subs	r5, #1
 800f44a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f44e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f452:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f456:	d1f0      	bne.n	800f43a <__ieee754_sqrt+0x92>
 800f458:	462a      	mov	r2, r5
 800f45a:	f04f 0e20 	mov.w	lr, #32
 800f45e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f462:	4281      	cmp	r1, r0
 800f464:	eb06 0c05 	add.w	ip, r6, r5
 800f468:	dc02      	bgt.n	800f470 <__ieee754_sqrt+0xc8>
 800f46a:	d113      	bne.n	800f494 <__ieee754_sqrt+0xec>
 800f46c:	459c      	cmp	ip, r3
 800f46e:	d811      	bhi.n	800f494 <__ieee754_sqrt+0xec>
 800f470:	f1bc 0f00 	cmp.w	ip, #0
 800f474:	eb0c 0506 	add.w	r5, ip, r6
 800f478:	da43      	bge.n	800f502 <__ieee754_sqrt+0x15a>
 800f47a:	2d00      	cmp	r5, #0
 800f47c:	db41      	blt.n	800f502 <__ieee754_sqrt+0x15a>
 800f47e:	f100 0801 	add.w	r8, r0, #1
 800f482:	1a09      	subs	r1, r1, r0
 800f484:	459c      	cmp	ip, r3
 800f486:	bf88      	it	hi
 800f488:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f48c:	eba3 030c 	sub.w	r3, r3, ip
 800f490:	4432      	add	r2, r6
 800f492:	4640      	mov	r0, r8
 800f494:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f498:	f1be 0e01 	subs.w	lr, lr, #1
 800f49c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f4a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f4a8:	d1db      	bne.n	800f462 <__ieee754_sqrt+0xba>
 800f4aa:	430b      	orrs	r3, r1
 800f4ac:	d006      	beq.n	800f4bc <__ieee754_sqrt+0x114>
 800f4ae:	1c50      	adds	r0, r2, #1
 800f4b0:	bf13      	iteet	ne
 800f4b2:	3201      	addne	r2, #1
 800f4b4:	3401      	addeq	r4, #1
 800f4b6:	4672      	moveq	r2, lr
 800f4b8:	f022 0201 	bicne.w	r2, r2, #1
 800f4bc:	1063      	asrs	r3, r4, #1
 800f4be:	0852      	lsrs	r2, r2, #1
 800f4c0:	07e1      	lsls	r1, r4, #31
 800f4c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f4c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f4ca:	bf48      	it	mi
 800f4cc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f4d0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f4d4:	4614      	mov	r4, r2
 800f4d6:	e781      	b.n	800f3dc <__ieee754_sqrt+0x34>
 800f4d8:	0ad9      	lsrs	r1, r3, #11
 800f4da:	3815      	subs	r0, #21
 800f4dc:	055b      	lsls	r3, r3, #21
 800f4de:	2900      	cmp	r1, #0
 800f4e0:	d0fa      	beq.n	800f4d8 <__ieee754_sqrt+0x130>
 800f4e2:	02cd      	lsls	r5, r1, #11
 800f4e4:	d50a      	bpl.n	800f4fc <__ieee754_sqrt+0x154>
 800f4e6:	f1c2 0420 	rsb	r4, r2, #32
 800f4ea:	fa23 f404 	lsr.w	r4, r3, r4
 800f4ee:	1e55      	subs	r5, r2, #1
 800f4f0:	4093      	lsls	r3, r2
 800f4f2:	4321      	orrs	r1, r4
 800f4f4:	1b42      	subs	r2, r0, r5
 800f4f6:	e78a      	b.n	800f40e <__ieee754_sqrt+0x66>
 800f4f8:	4610      	mov	r0, r2
 800f4fa:	e7f0      	b.n	800f4de <__ieee754_sqrt+0x136>
 800f4fc:	0049      	lsls	r1, r1, #1
 800f4fe:	3201      	adds	r2, #1
 800f500:	e7ef      	b.n	800f4e2 <__ieee754_sqrt+0x13a>
 800f502:	4680      	mov	r8, r0
 800f504:	e7bd      	b.n	800f482 <__ieee754_sqrt+0xda>
 800f506:	bf00      	nop
 800f508:	7ff00000 	.word	0x7ff00000
 800f50c:	00000000 	.word	0x00000000

0800f510 <__kernel_cos>:
 800f510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	ec57 6b10 	vmov	r6, r7, d0
 800f518:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f51c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f520:	ed8d 1b00 	vstr	d1, [sp]
 800f524:	da07      	bge.n	800f536 <__kernel_cos+0x26>
 800f526:	ee10 0a10 	vmov	r0, s0
 800f52a:	4639      	mov	r1, r7
 800f52c:	f7f1 fb3c 	bl	8000ba8 <__aeabi_d2iz>
 800f530:	2800      	cmp	r0, #0
 800f532:	f000 8088 	beq.w	800f646 <__kernel_cos+0x136>
 800f536:	4632      	mov	r2, r6
 800f538:	463b      	mov	r3, r7
 800f53a:	4630      	mov	r0, r6
 800f53c:	4639      	mov	r1, r7
 800f53e:	f7f1 f883 	bl	8000648 <__aeabi_dmul>
 800f542:	4b51      	ldr	r3, [pc, #324]	; (800f688 <__kernel_cos+0x178>)
 800f544:	2200      	movs	r2, #0
 800f546:	4604      	mov	r4, r0
 800f548:	460d      	mov	r5, r1
 800f54a:	f7f1 f87d 	bl	8000648 <__aeabi_dmul>
 800f54e:	a340      	add	r3, pc, #256	; (adr r3, 800f650 <__kernel_cos+0x140>)
 800f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f554:	4682      	mov	sl, r0
 800f556:	468b      	mov	fp, r1
 800f558:	4620      	mov	r0, r4
 800f55a:	4629      	mov	r1, r5
 800f55c:	f7f1 f874 	bl	8000648 <__aeabi_dmul>
 800f560:	a33d      	add	r3, pc, #244	; (adr r3, 800f658 <__kernel_cos+0x148>)
 800f562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f566:	f7f0 feb9 	bl	80002dc <__adddf3>
 800f56a:	4622      	mov	r2, r4
 800f56c:	462b      	mov	r3, r5
 800f56e:	f7f1 f86b 	bl	8000648 <__aeabi_dmul>
 800f572:	a33b      	add	r3, pc, #236	; (adr r3, 800f660 <__kernel_cos+0x150>)
 800f574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f578:	f7f0 feae 	bl	80002d8 <__aeabi_dsub>
 800f57c:	4622      	mov	r2, r4
 800f57e:	462b      	mov	r3, r5
 800f580:	f7f1 f862 	bl	8000648 <__aeabi_dmul>
 800f584:	a338      	add	r3, pc, #224	; (adr r3, 800f668 <__kernel_cos+0x158>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	f7f0 fea7 	bl	80002dc <__adddf3>
 800f58e:	4622      	mov	r2, r4
 800f590:	462b      	mov	r3, r5
 800f592:	f7f1 f859 	bl	8000648 <__aeabi_dmul>
 800f596:	a336      	add	r3, pc, #216	; (adr r3, 800f670 <__kernel_cos+0x160>)
 800f598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59c:	f7f0 fe9c 	bl	80002d8 <__aeabi_dsub>
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	f7f1 f850 	bl	8000648 <__aeabi_dmul>
 800f5a8:	a333      	add	r3, pc, #204	; (adr r3, 800f678 <__kernel_cos+0x168>)
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	f7f0 fe95 	bl	80002dc <__adddf3>
 800f5b2:	4622      	mov	r2, r4
 800f5b4:	462b      	mov	r3, r5
 800f5b6:	f7f1 f847 	bl	8000648 <__aeabi_dmul>
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	462b      	mov	r3, r5
 800f5be:	f7f1 f843 	bl	8000648 <__aeabi_dmul>
 800f5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	460d      	mov	r5, r1
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	4639      	mov	r1, r7
 800f5ce:	f7f1 f83b 	bl	8000648 <__aeabi_dmul>
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f7f0 fe7d 	bl	80002d8 <__aeabi_dsub>
 800f5de:	4b2b      	ldr	r3, [pc, #172]	; (800f68c <__kernel_cos+0x17c>)
 800f5e0:	4598      	cmp	r8, r3
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	460f      	mov	r7, r1
 800f5e6:	dc10      	bgt.n	800f60a <__kernel_cos+0xfa>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4650      	mov	r0, sl
 800f5ee:	4659      	mov	r1, fp
 800f5f0:	f7f0 fe72 	bl	80002d8 <__aeabi_dsub>
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	4926      	ldr	r1, [pc, #152]	; (800f690 <__kernel_cos+0x180>)
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	f7f0 fe6c 	bl	80002d8 <__aeabi_dsub>
 800f600:	ec41 0b10 	vmov	d0, r0, r1
 800f604:	b003      	add	sp, #12
 800f606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60a:	4b22      	ldr	r3, [pc, #136]	; (800f694 <__kernel_cos+0x184>)
 800f60c:	4920      	ldr	r1, [pc, #128]	; (800f690 <__kernel_cos+0x180>)
 800f60e:	4598      	cmp	r8, r3
 800f610:	bfcc      	ite	gt
 800f612:	4d21      	ldrgt	r5, [pc, #132]	; (800f698 <__kernel_cos+0x188>)
 800f614:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f618:	2400      	movs	r4, #0
 800f61a:	4622      	mov	r2, r4
 800f61c:	462b      	mov	r3, r5
 800f61e:	2000      	movs	r0, #0
 800f620:	f7f0 fe5a 	bl	80002d8 <__aeabi_dsub>
 800f624:	4622      	mov	r2, r4
 800f626:	4680      	mov	r8, r0
 800f628:	4689      	mov	r9, r1
 800f62a:	462b      	mov	r3, r5
 800f62c:	4650      	mov	r0, sl
 800f62e:	4659      	mov	r1, fp
 800f630:	f7f0 fe52 	bl	80002d8 <__aeabi_dsub>
 800f634:	4632      	mov	r2, r6
 800f636:	463b      	mov	r3, r7
 800f638:	f7f0 fe4e 	bl	80002d8 <__aeabi_dsub>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4640      	mov	r0, r8
 800f642:	4649      	mov	r1, r9
 800f644:	e7da      	b.n	800f5fc <__kernel_cos+0xec>
 800f646:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f680 <__kernel_cos+0x170>
 800f64a:	e7db      	b.n	800f604 <__kernel_cos+0xf4>
 800f64c:	f3af 8000 	nop.w
 800f650:	be8838d4 	.word	0xbe8838d4
 800f654:	bda8fae9 	.word	0xbda8fae9
 800f658:	bdb4b1c4 	.word	0xbdb4b1c4
 800f65c:	3e21ee9e 	.word	0x3e21ee9e
 800f660:	809c52ad 	.word	0x809c52ad
 800f664:	3e927e4f 	.word	0x3e927e4f
 800f668:	19cb1590 	.word	0x19cb1590
 800f66c:	3efa01a0 	.word	0x3efa01a0
 800f670:	16c15177 	.word	0x16c15177
 800f674:	3f56c16c 	.word	0x3f56c16c
 800f678:	5555554c 	.word	0x5555554c
 800f67c:	3fa55555 	.word	0x3fa55555
 800f680:	00000000 	.word	0x00000000
 800f684:	3ff00000 	.word	0x3ff00000
 800f688:	3fe00000 	.word	0x3fe00000
 800f68c:	3fd33332 	.word	0x3fd33332
 800f690:	3ff00000 	.word	0x3ff00000
 800f694:	3fe90000 	.word	0x3fe90000
 800f698:	3fd20000 	.word	0x3fd20000
 800f69c:	00000000 	.word	0x00000000

0800f6a0 <__kernel_rem_pio2>:
 800f6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a4:	ed2d 8b02 	vpush	{d8}
 800f6a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f6ac:	f112 0f14 	cmn.w	r2, #20
 800f6b0:	9308      	str	r3, [sp, #32]
 800f6b2:	9101      	str	r1, [sp, #4]
 800f6b4:	4bc4      	ldr	r3, [pc, #784]	; (800f9c8 <__kernel_rem_pio2+0x328>)
 800f6b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f6b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800f6ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f6be:	9302      	str	r3, [sp, #8]
 800f6c0:	9b08      	ldr	r3, [sp, #32]
 800f6c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f6c6:	bfa8      	it	ge
 800f6c8:	1ed4      	subge	r4, r2, #3
 800f6ca:	9306      	str	r3, [sp, #24]
 800f6cc:	bfb2      	itee	lt
 800f6ce:	2400      	movlt	r4, #0
 800f6d0:	2318      	movge	r3, #24
 800f6d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800f6d6:	f06f 0317 	mvn.w	r3, #23
 800f6da:	fb04 3303 	mla	r3, r4, r3, r3
 800f6de:	eb03 0a02 	add.w	sl, r3, r2
 800f6e2:	9b02      	ldr	r3, [sp, #8]
 800f6e4:	9a06      	ldr	r2, [sp, #24]
 800f6e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f9b8 <__kernel_rem_pio2+0x318>
 800f6ea:	eb03 0802 	add.w	r8, r3, r2
 800f6ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f6f0:	1aa7      	subs	r7, r4, r2
 800f6f2:	ae22      	add	r6, sp, #136	; 0x88
 800f6f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f6f8:	2500      	movs	r5, #0
 800f6fa:	4545      	cmp	r5, r8
 800f6fc:	dd13      	ble.n	800f726 <__kernel_rem_pio2+0x86>
 800f6fe:	9b08      	ldr	r3, [sp, #32]
 800f700:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f9b8 <__kernel_rem_pio2+0x318>
 800f704:	aa22      	add	r2, sp, #136	; 0x88
 800f706:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f70a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f70e:	f04f 0800 	mov.w	r8, #0
 800f712:	9b02      	ldr	r3, [sp, #8]
 800f714:	4598      	cmp	r8, r3
 800f716:	dc2f      	bgt.n	800f778 <__kernel_rem_pio2+0xd8>
 800f718:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f71c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f720:	462f      	mov	r7, r5
 800f722:	2600      	movs	r6, #0
 800f724:	e01b      	b.n	800f75e <__kernel_rem_pio2+0xbe>
 800f726:	42ef      	cmn	r7, r5
 800f728:	d407      	bmi.n	800f73a <__kernel_rem_pio2+0x9a>
 800f72a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f72e:	f7f0 ff21 	bl	8000574 <__aeabi_i2d>
 800f732:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f736:	3501      	adds	r5, #1
 800f738:	e7df      	b.n	800f6fa <__kernel_rem_pio2+0x5a>
 800f73a:	ec51 0b18 	vmov	r0, r1, d8
 800f73e:	e7f8      	b.n	800f732 <__kernel_rem_pio2+0x92>
 800f740:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f744:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f748:	f7f0 ff7e 	bl	8000648 <__aeabi_dmul>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f754:	f7f0 fdc2 	bl	80002dc <__adddf3>
 800f758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f75c:	3601      	adds	r6, #1
 800f75e:	9b06      	ldr	r3, [sp, #24]
 800f760:	429e      	cmp	r6, r3
 800f762:	f1a7 0708 	sub.w	r7, r7, #8
 800f766:	ddeb      	ble.n	800f740 <__kernel_rem_pio2+0xa0>
 800f768:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f76c:	f108 0801 	add.w	r8, r8, #1
 800f770:	ecab 7b02 	vstmia	fp!, {d7}
 800f774:	3508      	adds	r5, #8
 800f776:	e7cc      	b.n	800f712 <__kernel_rem_pio2+0x72>
 800f778:	9b02      	ldr	r3, [sp, #8]
 800f77a:	aa0e      	add	r2, sp, #56	; 0x38
 800f77c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f780:	930d      	str	r3, [sp, #52]	; 0x34
 800f782:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f784:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f788:	9c02      	ldr	r4, [sp, #8]
 800f78a:	930c      	str	r3, [sp, #48]	; 0x30
 800f78c:	00e3      	lsls	r3, r4, #3
 800f78e:	930a      	str	r3, [sp, #40]	; 0x28
 800f790:	ab9a      	add	r3, sp, #616	; 0x268
 800f792:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f796:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f79a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f79e:	ab72      	add	r3, sp, #456	; 0x1c8
 800f7a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f7a4:	46c3      	mov	fp, r8
 800f7a6:	46a1      	mov	r9, r4
 800f7a8:	f1b9 0f00 	cmp.w	r9, #0
 800f7ac:	f1a5 0508 	sub.w	r5, r5, #8
 800f7b0:	dc77      	bgt.n	800f8a2 <__kernel_rem_pio2+0x202>
 800f7b2:	ec47 6b10 	vmov	d0, r6, r7
 800f7b6:	4650      	mov	r0, sl
 800f7b8:	f000 fc46 	bl	8010048 <scalbn>
 800f7bc:	ec57 6b10 	vmov	r6, r7, d0
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f7c6:	ee10 0a10 	vmov	r0, s0
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	f7f0 ff3c 	bl	8000648 <__aeabi_dmul>
 800f7d0:	ec41 0b10 	vmov	d0, r0, r1
 800f7d4:	f000 fbb8 	bl	800ff48 <floor>
 800f7d8:	4b7c      	ldr	r3, [pc, #496]	; (800f9cc <__kernel_rem_pio2+0x32c>)
 800f7da:	ec51 0b10 	vmov	r0, r1, d0
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f7f0 ff32 	bl	8000648 <__aeabi_dmul>
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	f7f0 fd74 	bl	80002d8 <__aeabi_dsub>
 800f7f0:	460f      	mov	r7, r1
 800f7f2:	4606      	mov	r6, r0
 800f7f4:	f7f1 f9d8 	bl	8000ba8 <__aeabi_d2iz>
 800f7f8:	9004      	str	r0, [sp, #16]
 800f7fa:	f7f0 febb 	bl	8000574 <__aeabi_i2d>
 800f7fe:	4602      	mov	r2, r0
 800f800:	460b      	mov	r3, r1
 800f802:	4630      	mov	r0, r6
 800f804:	4639      	mov	r1, r7
 800f806:	f7f0 fd67 	bl	80002d8 <__aeabi_dsub>
 800f80a:	f1ba 0f00 	cmp.w	sl, #0
 800f80e:	4606      	mov	r6, r0
 800f810:	460f      	mov	r7, r1
 800f812:	dd6d      	ble.n	800f8f0 <__kernel_rem_pio2+0x250>
 800f814:	1e62      	subs	r2, r4, #1
 800f816:	ab0e      	add	r3, sp, #56	; 0x38
 800f818:	9d04      	ldr	r5, [sp, #16]
 800f81a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f81e:	f1ca 0118 	rsb	r1, sl, #24
 800f822:	fa40 f301 	asr.w	r3, r0, r1
 800f826:	441d      	add	r5, r3
 800f828:	408b      	lsls	r3, r1
 800f82a:	1ac0      	subs	r0, r0, r3
 800f82c:	ab0e      	add	r3, sp, #56	; 0x38
 800f82e:	9504      	str	r5, [sp, #16]
 800f830:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f834:	f1ca 0317 	rsb	r3, sl, #23
 800f838:	fa40 fb03 	asr.w	fp, r0, r3
 800f83c:	f1bb 0f00 	cmp.w	fp, #0
 800f840:	dd65      	ble.n	800f90e <__kernel_rem_pio2+0x26e>
 800f842:	9b04      	ldr	r3, [sp, #16]
 800f844:	2200      	movs	r2, #0
 800f846:	3301      	adds	r3, #1
 800f848:	9304      	str	r3, [sp, #16]
 800f84a:	4615      	mov	r5, r2
 800f84c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f850:	4294      	cmp	r4, r2
 800f852:	f300 809c 	bgt.w	800f98e <__kernel_rem_pio2+0x2ee>
 800f856:	f1ba 0f00 	cmp.w	sl, #0
 800f85a:	dd07      	ble.n	800f86c <__kernel_rem_pio2+0x1cc>
 800f85c:	f1ba 0f01 	cmp.w	sl, #1
 800f860:	f000 80c0 	beq.w	800f9e4 <__kernel_rem_pio2+0x344>
 800f864:	f1ba 0f02 	cmp.w	sl, #2
 800f868:	f000 80c6 	beq.w	800f9f8 <__kernel_rem_pio2+0x358>
 800f86c:	f1bb 0f02 	cmp.w	fp, #2
 800f870:	d14d      	bne.n	800f90e <__kernel_rem_pio2+0x26e>
 800f872:	4632      	mov	r2, r6
 800f874:	463b      	mov	r3, r7
 800f876:	4956      	ldr	r1, [pc, #344]	; (800f9d0 <__kernel_rem_pio2+0x330>)
 800f878:	2000      	movs	r0, #0
 800f87a:	f7f0 fd2d 	bl	80002d8 <__aeabi_dsub>
 800f87e:	4606      	mov	r6, r0
 800f880:	460f      	mov	r7, r1
 800f882:	2d00      	cmp	r5, #0
 800f884:	d043      	beq.n	800f90e <__kernel_rem_pio2+0x26e>
 800f886:	4650      	mov	r0, sl
 800f888:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f9c0 <__kernel_rem_pio2+0x320>
 800f88c:	f000 fbdc 	bl	8010048 <scalbn>
 800f890:	4630      	mov	r0, r6
 800f892:	4639      	mov	r1, r7
 800f894:	ec53 2b10 	vmov	r2, r3, d0
 800f898:	f7f0 fd1e 	bl	80002d8 <__aeabi_dsub>
 800f89c:	4606      	mov	r6, r0
 800f89e:	460f      	mov	r7, r1
 800f8a0:	e035      	b.n	800f90e <__kernel_rem_pio2+0x26e>
 800f8a2:	4b4c      	ldr	r3, [pc, #304]	; (800f9d4 <__kernel_rem_pio2+0x334>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	4639      	mov	r1, r7
 800f8aa:	f7f0 fecd 	bl	8000648 <__aeabi_dmul>
 800f8ae:	f7f1 f97b 	bl	8000ba8 <__aeabi_d2iz>
 800f8b2:	f7f0 fe5f 	bl	8000574 <__aeabi_i2d>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	ec43 2b18 	vmov	d8, r2, r3
 800f8be:	4b46      	ldr	r3, [pc, #280]	; (800f9d8 <__kernel_rem_pio2+0x338>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f7f0 fec1 	bl	8000648 <__aeabi_dmul>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	f7f0 fd03 	bl	80002d8 <__aeabi_dsub>
 800f8d2:	f7f1 f969 	bl	8000ba8 <__aeabi_d2iz>
 800f8d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8da:	f84b 0b04 	str.w	r0, [fp], #4
 800f8de:	ec51 0b18 	vmov	r0, r1, d8
 800f8e2:	f7f0 fcfb 	bl	80002dc <__adddf3>
 800f8e6:	f109 39ff 	add.w	r9, r9, #4294967295
 800f8ea:	4606      	mov	r6, r0
 800f8ec:	460f      	mov	r7, r1
 800f8ee:	e75b      	b.n	800f7a8 <__kernel_rem_pio2+0x108>
 800f8f0:	d106      	bne.n	800f900 <__kernel_rem_pio2+0x260>
 800f8f2:	1e63      	subs	r3, r4, #1
 800f8f4:	aa0e      	add	r2, sp, #56	; 0x38
 800f8f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f8fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f8fe:	e79d      	b.n	800f83c <__kernel_rem_pio2+0x19c>
 800f900:	4b36      	ldr	r3, [pc, #216]	; (800f9dc <__kernel_rem_pio2+0x33c>)
 800f902:	2200      	movs	r2, #0
 800f904:	f7f1 f926 	bl	8000b54 <__aeabi_dcmpge>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d13d      	bne.n	800f988 <__kernel_rem_pio2+0x2e8>
 800f90c:	4683      	mov	fp, r0
 800f90e:	2200      	movs	r2, #0
 800f910:	2300      	movs	r3, #0
 800f912:	4630      	mov	r0, r6
 800f914:	4639      	mov	r1, r7
 800f916:	f7f1 f8ff 	bl	8000b18 <__aeabi_dcmpeq>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	f000 80c0 	beq.w	800faa0 <__kernel_rem_pio2+0x400>
 800f920:	1e65      	subs	r5, r4, #1
 800f922:	462b      	mov	r3, r5
 800f924:	2200      	movs	r2, #0
 800f926:	9902      	ldr	r1, [sp, #8]
 800f928:	428b      	cmp	r3, r1
 800f92a:	da6c      	bge.n	800fa06 <__kernel_rem_pio2+0x366>
 800f92c:	2a00      	cmp	r2, #0
 800f92e:	f000 8089 	beq.w	800fa44 <__kernel_rem_pio2+0x3a4>
 800f932:	ab0e      	add	r3, sp, #56	; 0x38
 800f934:	f1aa 0a18 	sub.w	sl, sl, #24
 800f938:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 80ad 	beq.w	800fa9c <__kernel_rem_pio2+0x3fc>
 800f942:	4650      	mov	r0, sl
 800f944:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f9c0 <__kernel_rem_pio2+0x320>
 800f948:	f000 fb7e 	bl	8010048 <scalbn>
 800f94c:	ab9a      	add	r3, sp, #616	; 0x268
 800f94e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f952:	ec57 6b10 	vmov	r6, r7, d0
 800f956:	00ec      	lsls	r4, r5, #3
 800f958:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f95c:	46aa      	mov	sl, r5
 800f95e:	f1ba 0f00 	cmp.w	sl, #0
 800f962:	f280 80d6 	bge.w	800fb12 <__kernel_rem_pio2+0x472>
 800f966:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f9b8 <__kernel_rem_pio2+0x318>
 800f96a:	462e      	mov	r6, r5
 800f96c:	2e00      	cmp	r6, #0
 800f96e:	f2c0 8104 	blt.w	800fb7a <__kernel_rem_pio2+0x4da>
 800f972:	ab72      	add	r3, sp, #456	; 0x1c8
 800f974:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f978:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f9e0 <__kernel_rem_pio2+0x340>
 800f97c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f980:	f04f 0800 	mov.w	r8, #0
 800f984:	1baf      	subs	r7, r5, r6
 800f986:	e0ea      	b.n	800fb5e <__kernel_rem_pio2+0x4be>
 800f988:	f04f 0b02 	mov.w	fp, #2
 800f98c:	e759      	b.n	800f842 <__kernel_rem_pio2+0x1a2>
 800f98e:	f8d8 3000 	ldr.w	r3, [r8]
 800f992:	b955      	cbnz	r5, 800f9aa <__kernel_rem_pio2+0x30a>
 800f994:	b123      	cbz	r3, 800f9a0 <__kernel_rem_pio2+0x300>
 800f996:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f99a:	f8c8 3000 	str.w	r3, [r8]
 800f99e:	2301      	movs	r3, #1
 800f9a0:	3201      	adds	r2, #1
 800f9a2:	f108 0804 	add.w	r8, r8, #4
 800f9a6:	461d      	mov	r5, r3
 800f9a8:	e752      	b.n	800f850 <__kernel_rem_pio2+0x1b0>
 800f9aa:	1acb      	subs	r3, r1, r3
 800f9ac:	f8c8 3000 	str.w	r3, [r8]
 800f9b0:	462b      	mov	r3, r5
 800f9b2:	e7f5      	b.n	800f9a0 <__kernel_rem_pio2+0x300>
 800f9b4:	f3af 8000 	nop.w
	...
 800f9c4:	3ff00000 	.word	0x3ff00000
 800f9c8:	08010928 	.word	0x08010928
 800f9cc:	40200000 	.word	0x40200000
 800f9d0:	3ff00000 	.word	0x3ff00000
 800f9d4:	3e700000 	.word	0x3e700000
 800f9d8:	41700000 	.word	0x41700000
 800f9dc:	3fe00000 	.word	0x3fe00000
 800f9e0:	080108e8 	.word	0x080108e8
 800f9e4:	1e62      	subs	r2, r4, #1
 800f9e6:	ab0e      	add	r3, sp, #56	; 0x38
 800f9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f9f0:	a90e      	add	r1, sp, #56	; 0x38
 800f9f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f9f6:	e739      	b.n	800f86c <__kernel_rem_pio2+0x1cc>
 800f9f8:	1e62      	subs	r2, r4, #1
 800f9fa:	ab0e      	add	r3, sp, #56	; 0x38
 800f9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fa04:	e7f4      	b.n	800f9f0 <__kernel_rem_pio2+0x350>
 800fa06:	a90e      	add	r1, sp, #56	; 0x38
 800fa08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	e789      	b.n	800f926 <__kernel_rem_pio2+0x286>
 800fa12:	3301      	adds	r3, #1
 800fa14:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fa18:	2900      	cmp	r1, #0
 800fa1a:	d0fa      	beq.n	800fa12 <__kernel_rem_pio2+0x372>
 800fa1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa1e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800fa22:	446a      	add	r2, sp
 800fa24:	3a98      	subs	r2, #152	; 0x98
 800fa26:	920a      	str	r2, [sp, #40]	; 0x28
 800fa28:	9a08      	ldr	r2, [sp, #32]
 800fa2a:	18e3      	adds	r3, r4, r3
 800fa2c:	18a5      	adds	r5, r4, r2
 800fa2e:	aa22      	add	r2, sp, #136	; 0x88
 800fa30:	f104 0801 	add.w	r8, r4, #1
 800fa34:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fa38:	9304      	str	r3, [sp, #16]
 800fa3a:	9b04      	ldr	r3, [sp, #16]
 800fa3c:	4543      	cmp	r3, r8
 800fa3e:	da04      	bge.n	800fa4a <__kernel_rem_pio2+0x3aa>
 800fa40:	461c      	mov	r4, r3
 800fa42:	e6a3      	b.n	800f78c <__kernel_rem_pio2+0xec>
 800fa44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa46:	2301      	movs	r3, #1
 800fa48:	e7e4      	b.n	800fa14 <__kernel_rem_pio2+0x374>
 800fa4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa4c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fa50:	f7f0 fd90 	bl	8000574 <__aeabi_i2d>
 800fa54:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fa58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa5a:	46ab      	mov	fp, r5
 800fa5c:	461c      	mov	r4, r3
 800fa5e:	f04f 0900 	mov.w	r9, #0
 800fa62:	2600      	movs	r6, #0
 800fa64:	2700      	movs	r7, #0
 800fa66:	9b06      	ldr	r3, [sp, #24]
 800fa68:	4599      	cmp	r9, r3
 800fa6a:	dd06      	ble.n	800fa7a <__kernel_rem_pio2+0x3da>
 800fa6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa6e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fa72:	f108 0801 	add.w	r8, r8, #1
 800fa76:	930a      	str	r3, [sp, #40]	; 0x28
 800fa78:	e7df      	b.n	800fa3a <__kernel_rem_pio2+0x39a>
 800fa7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fa7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fa82:	f7f0 fde1 	bl	8000648 <__aeabi_dmul>
 800fa86:	4602      	mov	r2, r0
 800fa88:	460b      	mov	r3, r1
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	4639      	mov	r1, r7
 800fa8e:	f7f0 fc25 	bl	80002dc <__adddf3>
 800fa92:	f109 0901 	add.w	r9, r9, #1
 800fa96:	4606      	mov	r6, r0
 800fa98:	460f      	mov	r7, r1
 800fa9a:	e7e4      	b.n	800fa66 <__kernel_rem_pio2+0x3c6>
 800fa9c:	3d01      	subs	r5, #1
 800fa9e:	e748      	b.n	800f932 <__kernel_rem_pio2+0x292>
 800faa0:	ec47 6b10 	vmov	d0, r6, r7
 800faa4:	f1ca 0000 	rsb	r0, sl, #0
 800faa8:	f000 face 	bl	8010048 <scalbn>
 800faac:	ec57 6b10 	vmov	r6, r7, d0
 800fab0:	4ba0      	ldr	r3, [pc, #640]	; (800fd34 <__kernel_rem_pio2+0x694>)
 800fab2:	ee10 0a10 	vmov	r0, s0
 800fab6:	2200      	movs	r2, #0
 800fab8:	4639      	mov	r1, r7
 800faba:	f7f1 f84b 	bl	8000b54 <__aeabi_dcmpge>
 800fabe:	b1f8      	cbz	r0, 800fb00 <__kernel_rem_pio2+0x460>
 800fac0:	4b9d      	ldr	r3, [pc, #628]	; (800fd38 <__kernel_rem_pio2+0x698>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	4630      	mov	r0, r6
 800fac6:	4639      	mov	r1, r7
 800fac8:	f7f0 fdbe 	bl	8000648 <__aeabi_dmul>
 800facc:	f7f1 f86c 	bl	8000ba8 <__aeabi_d2iz>
 800fad0:	4680      	mov	r8, r0
 800fad2:	f7f0 fd4f 	bl	8000574 <__aeabi_i2d>
 800fad6:	4b97      	ldr	r3, [pc, #604]	; (800fd34 <__kernel_rem_pio2+0x694>)
 800fad8:	2200      	movs	r2, #0
 800fada:	f7f0 fdb5 	bl	8000648 <__aeabi_dmul>
 800fade:	460b      	mov	r3, r1
 800fae0:	4602      	mov	r2, r0
 800fae2:	4639      	mov	r1, r7
 800fae4:	4630      	mov	r0, r6
 800fae6:	f7f0 fbf7 	bl	80002d8 <__aeabi_dsub>
 800faea:	f7f1 f85d 	bl	8000ba8 <__aeabi_d2iz>
 800faee:	1c65      	adds	r5, r4, #1
 800faf0:	ab0e      	add	r3, sp, #56	; 0x38
 800faf2:	f10a 0a18 	add.w	sl, sl, #24
 800faf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fafa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fafe:	e720      	b.n	800f942 <__kernel_rem_pio2+0x2a2>
 800fb00:	4630      	mov	r0, r6
 800fb02:	4639      	mov	r1, r7
 800fb04:	f7f1 f850 	bl	8000ba8 <__aeabi_d2iz>
 800fb08:	ab0e      	add	r3, sp, #56	; 0x38
 800fb0a:	4625      	mov	r5, r4
 800fb0c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fb10:	e717      	b.n	800f942 <__kernel_rem_pio2+0x2a2>
 800fb12:	ab0e      	add	r3, sp, #56	; 0x38
 800fb14:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fb18:	f7f0 fd2c 	bl	8000574 <__aeabi_i2d>
 800fb1c:	4632      	mov	r2, r6
 800fb1e:	463b      	mov	r3, r7
 800fb20:	f7f0 fd92 	bl	8000648 <__aeabi_dmul>
 800fb24:	4b84      	ldr	r3, [pc, #528]	; (800fd38 <__kernel_rem_pio2+0x698>)
 800fb26:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	4639      	mov	r1, r7
 800fb30:	f7f0 fd8a 	bl	8000648 <__aeabi_dmul>
 800fb34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb38:	4606      	mov	r6, r0
 800fb3a:	460f      	mov	r7, r1
 800fb3c:	e70f      	b.n	800f95e <__kernel_rem_pio2+0x2be>
 800fb3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800fb42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800fb46:	f7f0 fd7f 	bl	8000648 <__aeabi_dmul>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb52:	f7f0 fbc3 	bl	80002dc <__adddf3>
 800fb56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb5a:	f108 0801 	add.w	r8, r8, #1
 800fb5e:	9b02      	ldr	r3, [sp, #8]
 800fb60:	4598      	cmp	r8, r3
 800fb62:	dc01      	bgt.n	800fb68 <__kernel_rem_pio2+0x4c8>
 800fb64:	45b8      	cmp	r8, r7
 800fb66:	ddea      	ble.n	800fb3e <__kernel_rem_pio2+0x49e>
 800fb68:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fb6c:	ab4a      	add	r3, sp, #296	; 0x128
 800fb6e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fb72:	ed87 7b00 	vstr	d7, [r7]
 800fb76:	3e01      	subs	r6, #1
 800fb78:	e6f8      	b.n	800f96c <__kernel_rem_pio2+0x2cc>
 800fb7a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	dc0b      	bgt.n	800fb98 <__kernel_rem_pio2+0x4f8>
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	dc35      	bgt.n	800fbf0 <__kernel_rem_pio2+0x550>
 800fb84:	d059      	beq.n	800fc3a <__kernel_rem_pio2+0x59a>
 800fb86:	9b04      	ldr	r3, [sp, #16]
 800fb88:	f003 0007 	and.w	r0, r3, #7
 800fb8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fb90:	ecbd 8b02 	vpop	{d8}
 800fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	d1f3      	bne.n	800fb86 <__kernel_rem_pio2+0x4e6>
 800fb9e:	ab4a      	add	r3, sp, #296	; 0x128
 800fba0:	4423      	add	r3, r4
 800fba2:	9306      	str	r3, [sp, #24]
 800fba4:	461c      	mov	r4, r3
 800fba6:	469a      	mov	sl, r3
 800fba8:	9502      	str	r5, [sp, #8]
 800fbaa:	9b02      	ldr	r3, [sp, #8]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f1aa 0a08 	sub.w	sl, sl, #8
 800fbb2:	dc6b      	bgt.n	800fc8c <__kernel_rem_pio2+0x5ec>
 800fbb4:	46aa      	mov	sl, r5
 800fbb6:	f1ba 0f01 	cmp.w	sl, #1
 800fbba:	f1a4 0408 	sub.w	r4, r4, #8
 800fbbe:	f300 8085 	bgt.w	800fccc <__kernel_rem_pio2+0x62c>
 800fbc2:	9c06      	ldr	r4, [sp, #24]
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	3408      	adds	r4, #8
 800fbc8:	2100      	movs	r1, #0
 800fbca:	2d01      	cmp	r5, #1
 800fbcc:	f300 809d 	bgt.w	800fd0a <__kernel_rem_pio2+0x66a>
 800fbd0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fbd4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800fbd8:	f1bb 0f00 	cmp.w	fp, #0
 800fbdc:	f040 809b 	bne.w	800fd16 <__kernel_rem_pio2+0x676>
 800fbe0:	9b01      	ldr	r3, [sp, #4]
 800fbe2:	e9c3 5600 	strd	r5, r6, [r3]
 800fbe6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fbea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fbee:	e7ca      	b.n	800fb86 <__kernel_rem_pio2+0x4e6>
 800fbf0:	3408      	adds	r4, #8
 800fbf2:	ab4a      	add	r3, sp, #296	; 0x128
 800fbf4:	441c      	add	r4, r3
 800fbf6:	462e      	mov	r6, r5
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	2e00      	cmp	r6, #0
 800fbfe:	da36      	bge.n	800fc6e <__kernel_rem_pio2+0x5ce>
 800fc00:	f1bb 0f00 	cmp.w	fp, #0
 800fc04:	d039      	beq.n	800fc7a <__kernel_rem_pio2+0x5da>
 800fc06:	4602      	mov	r2, r0
 800fc08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc0c:	9c01      	ldr	r4, [sp, #4]
 800fc0e:	e9c4 2300 	strd	r2, r3, [r4]
 800fc12:	4602      	mov	r2, r0
 800fc14:	460b      	mov	r3, r1
 800fc16:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800fc1a:	f7f0 fb5d 	bl	80002d8 <__aeabi_dsub>
 800fc1e:	ae4c      	add	r6, sp, #304	; 0x130
 800fc20:	2401      	movs	r4, #1
 800fc22:	42a5      	cmp	r5, r4
 800fc24:	da2c      	bge.n	800fc80 <__kernel_rem_pio2+0x5e0>
 800fc26:	f1bb 0f00 	cmp.w	fp, #0
 800fc2a:	d002      	beq.n	800fc32 <__kernel_rem_pio2+0x592>
 800fc2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc30:	4619      	mov	r1, r3
 800fc32:	9b01      	ldr	r3, [sp, #4]
 800fc34:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fc38:	e7a5      	b.n	800fb86 <__kernel_rem_pio2+0x4e6>
 800fc3a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800fc3e:	eb0d 0403 	add.w	r4, sp, r3
 800fc42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fc46:	2000      	movs	r0, #0
 800fc48:	2100      	movs	r1, #0
 800fc4a:	2d00      	cmp	r5, #0
 800fc4c:	da09      	bge.n	800fc62 <__kernel_rem_pio2+0x5c2>
 800fc4e:	f1bb 0f00 	cmp.w	fp, #0
 800fc52:	d002      	beq.n	800fc5a <__kernel_rem_pio2+0x5ba>
 800fc54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc58:	4619      	mov	r1, r3
 800fc5a:	9b01      	ldr	r3, [sp, #4]
 800fc5c:	e9c3 0100 	strd	r0, r1, [r3]
 800fc60:	e791      	b.n	800fb86 <__kernel_rem_pio2+0x4e6>
 800fc62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fc66:	f7f0 fb39 	bl	80002dc <__adddf3>
 800fc6a:	3d01      	subs	r5, #1
 800fc6c:	e7ed      	b.n	800fc4a <__kernel_rem_pio2+0x5aa>
 800fc6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fc72:	f7f0 fb33 	bl	80002dc <__adddf3>
 800fc76:	3e01      	subs	r6, #1
 800fc78:	e7c0      	b.n	800fbfc <__kernel_rem_pio2+0x55c>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	e7c5      	b.n	800fc0c <__kernel_rem_pio2+0x56c>
 800fc80:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fc84:	f7f0 fb2a 	bl	80002dc <__adddf3>
 800fc88:	3401      	adds	r4, #1
 800fc8a:	e7ca      	b.n	800fc22 <__kernel_rem_pio2+0x582>
 800fc8c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc90:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fc94:	9b02      	ldr	r3, [sp, #8]
 800fc96:	3b01      	subs	r3, #1
 800fc98:	9302      	str	r3, [sp, #8]
 800fc9a:	4632      	mov	r2, r6
 800fc9c:	463b      	mov	r3, r7
 800fc9e:	4640      	mov	r0, r8
 800fca0:	4649      	mov	r1, r9
 800fca2:	f7f0 fb1b 	bl	80002dc <__adddf3>
 800fca6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4640      	mov	r0, r8
 800fcb0:	4649      	mov	r1, r9
 800fcb2:	f7f0 fb11 	bl	80002d8 <__aeabi_dsub>
 800fcb6:	4632      	mov	r2, r6
 800fcb8:	463b      	mov	r3, r7
 800fcba:	f7f0 fb0f 	bl	80002dc <__adddf3>
 800fcbe:	ed9d 7b08 	vldr	d7, [sp, #32]
 800fcc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fcc6:	ed8a 7b00 	vstr	d7, [sl]
 800fcca:	e76e      	b.n	800fbaa <__kernel_rem_pio2+0x50a>
 800fccc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fcd0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	4632      	mov	r2, r6
 800fcd8:	463b      	mov	r3, r7
 800fcda:	4649      	mov	r1, r9
 800fcdc:	f7f0 fafe 	bl	80002dc <__adddf3>
 800fce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	4640      	mov	r0, r8
 800fcea:	4649      	mov	r1, r9
 800fcec:	f7f0 faf4 	bl	80002d8 <__aeabi_dsub>
 800fcf0:	4632      	mov	r2, r6
 800fcf2:	463b      	mov	r3, r7
 800fcf4:	f7f0 faf2 	bl	80002dc <__adddf3>
 800fcf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fcfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd00:	ed84 7b00 	vstr	d7, [r4]
 800fd04:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd08:	e755      	b.n	800fbb6 <__kernel_rem_pio2+0x516>
 800fd0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fd0e:	f7f0 fae5 	bl	80002dc <__adddf3>
 800fd12:	3d01      	subs	r5, #1
 800fd14:	e759      	b.n	800fbca <__kernel_rem_pio2+0x52a>
 800fd16:	9b01      	ldr	r3, [sp, #4]
 800fd18:	9a01      	ldr	r2, [sp, #4]
 800fd1a:	601d      	str	r5, [r3, #0]
 800fd1c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fd20:	605c      	str	r4, [r3, #4]
 800fd22:	609f      	str	r7, [r3, #8]
 800fd24:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fd28:	60d3      	str	r3, [r2, #12]
 800fd2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd2e:	6110      	str	r0, [r2, #16]
 800fd30:	6153      	str	r3, [r2, #20]
 800fd32:	e728      	b.n	800fb86 <__kernel_rem_pio2+0x4e6>
 800fd34:	41700000 	.word	0x41700000
 800fd38:	3e700000 	.word	0x3e700000
 800fd3c:	00000000 	.word	0x00000000

0800fd40 <__kernel_sin>:
 800fd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd44:	ed2d 8b04 	vpush	{d8-d9}
 800fd48:	eeb0 8a41 	vmov.f32	s16, s2
 800fd4c:	eef0 8a61 	vmov.f32	s17, s3
 800fd50:	ec55 4b10 	vmov	r4, r5, d0
 800fd54:	b083      	sub	sp, #12
 800fd56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fd5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fd5e:	9001      	str	r0, [sp, #4]
 800fd60:	da06      	bge.n	800fd70 <__kernel_sin+0x30>
 800fd62:	ee10 0a10 	vmov	r0, s0
 800fd66:	4629      	mov	r1, r5
 800fd68:	f7f0 ff1e 	bl	8000ba8 <__aeabi_d2iz>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d051      	beq.n	800fe14 <__kernel_sin+0xd4>
 800fd70:	4622      	mov	r2, r4
 800fd72:	462b      	mov	r3, r5
 800fd74:	4620      	mov	r0, r4
 800fd76:	4629      	mov	r1, r5
 800fd78:	f7f0 fc66 	bl	8000648 <__aeabi_dmul>
 800fd7c:	4682      	mov	sl, r0
 800fd7e:	468b      	mov	fp, r1
 800fd80:	4602      	mov	r2, r0
 800fd82:	460b      	mov	r3, r1
 800fd84:	4620      	mov	r0, r4
 800fd86:	4629      	mov	r1, r5
 800fd88:	f7f0 fc5e 	bl	8000648 <__aeabi_dmul>
 800fd8c:	a341      	add	r3, pc, #260	; (adr r3, 800fe94 <__kernel_sin+0x154>)
 800fd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd92:	4680      	mov	r8, r0
 800fd94:	4689      	mov	r9, r1
 800fd96:	4650      	mov	r0, sl
 800fd98:	4659      	mov	r1, fp
 800fd9a:	f7f0 fc55 	bl	8000648 <__aeabi_dmul>
 800fd9e:	a33f      	add	r3, pc, #252	; (adr r3, 800fe9c <__kernel_sin+0x15c>)
 800fda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda4:	f7f0 fa98 	bl	80002d8 <__aeabi_dsub>
 800fda8:	4652      	mov	r2, sl
 800fdaa:	465b      	mov	r3, fp
 800fdac:	f7f0 fc4c 	bl	8000648 <__aeabi_dmul>
 800fdb0:	a33c      	add	r3, pc, #240	; (adr r3, 800fea4 <__kernel_sin+0x164>)
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	f7f0 fa91 	bl	80002dc <__adddf3>
 800fdba:	4652      	mov	r2, sl
 800fdbc:	465b      	mov	r3, fp
 800fdbe:	f7f0 fc43 	bl	8000648 <__aeabi_dmul>
 800fdc2:	a33a      	add	r3, pc, #232	; (adr r3, 800feac <__kernel_sin+0x16c>)
 800fdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc8:	f7f0 fa86 	bl	80002d8 <__aeabi_dsub>
 800fdcc:	4652      	mov	r2, sl
 800fdce:	465b      	mov	r3, fp
 800fdd0:	f7f0 fc3a 	bl	8000648 <__aeabi_dmul>
 800fdd4:	a337      	add	r3, pc, #220	; (adr r3, 800feb4 <__kernel_sin+0x174>)
 800fdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdda:	f7f0 fa7f 	bl	80002dc <__adddf3>
 800fdde:	9b01      	ldr	r3, [sp, #4]
 800fde0:	4606      	mov	r6, r0
 800fde2:	460f      	mov	r7, r1
 800fde4:	b9eb      	cbnz	r3, 800fe22 <__kernel_sin+0xe2>
 800fde6:	4602      	mov	r2, r0
 800fde8:	460b      	mov	r3, r1
 800fdea:	4650      	mov	r0, sl
 800fdec:	4659      	mov	r1, fp
 800fdee:	f7f0 fc2b 	bl	8000648 <__aeabi_dmul>
 800fdf2:	a325      	add	r3, pc, #148	; (adr r3, 800fe88 <__kernel_sin+0x148>)
 800fdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf8:	f7f0 fa6e 	bl	80002d8 <__aeabi_dsub>
 800fdfc:	4642      	mov	r2, r8
 800fdfe:	464b      	mov	r3, r9
 800fe00:	f7f0 fc22 	bl	8000648 <__aeabi_dmul>
 800fe04:	4602      	mov	r2, r0
 800fe06:	460b      	mov	r3, r1
 800fe08:	4620      	mov	r0, r4
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	f7f0 fa66 	bl	80002dc <__adddf3>
 800fe10:	4604      	mov	r4, r0
 800fe12:	460d      	mov	r5, r1
 800fe14:	ec45 4b10 	vmov	d0, r4, r5
 800fe18:	b003      	add	sp, #12
 800fe1a:	ecbd 8b04 	vpop	{d8-d9}
 800fe1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe22:	4b1b      	ldr	r3, [pc, #108]	; (800fe90 <__kernel_sin+0x150>)
 800fe24:	ec51 0b18 	vmov	r0, r1, d8
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f7f0 fc0d 	bl	8000648 <__aeabi_dmul>
 800fe2e:	4632      	mov	r2, r6
 800fe30:	ec41 0b19 	vmov	d9, r0, r1
 800fe34:	463b      	mov	r3, r7
 800fe36:	4640      	mov	r0, r8
 800fe38:	4649      	mov	r1, r9
 800fe3a:	f7f0 fc05 	bl	8000648 <__aeabi_dmul>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	460b      	mov	r3, r1
 800fe42:	ec51 0b19 	vmov	r0, r1, d9
 800fe46:	f7f0 fa47 	bl	80002d8 <__aeabi_dsub>
 800fe4a:	4652      	mov	r2, sl
 800fe4c:	465b      	mov	r3, fp
 800fe4e:	f7f0 fbfb 	bl	8000648 <__aeabi_dmul>
 800fe52:	ec53 2b18 	vmov	r2, r3, d8
 800fe56:	f7f0 fa3f 	bl	80002d8 <__aeabi_dsub>
 800fe5a:	a30b      	add	r3, pc, #44	; (adr r3, 800fe88 <__kernel_sin+0x148>)
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	4606      	mov	r6, r0
 800fe62:	460f      	mov	r7, r1
 800fe64:	4640      	mov	r0, r8
 800fe66:	4649      	mov	r1, r9
 800fe68:	f7f0 fbee 	bl	8000648 <__aeabi_dmul>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	4630      	mov	r0, r6
 800fe72:	4639      	mov	r1, r7
 800fe74:	f7f0 fa32 	bl	80002dc <__adddf3>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	4629      	mov	r1, r5
 800fe80:	f7f0 fa2a 	bl	80002d8 <__aeabi_dsub>
 800fe84:	e7c4      	b.n	800fe10 <__kernel_sin+0xd0>
 800fe86:	bf00      	nop
 800fe88:	55555549 	.word	0x55555549
 800fe8c:	3fc55555 	.word	0x3fc55555
 800fe90:	3fe00000 	.word	0x3fe00000
 800fe94:	5acfd57c 	.word	0x5acfd57c
 800fe98:	3de5d93a 	.word	0x3de5d93a
 800fe9c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fea0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fea4:	57b1fe7d 	.word	0x57b1fe7d
 800fea8:	3ec71de3 	.word	0x3ec71de3
 800feac:	19c161d5 	.word	0x19c161d5
 800feb0:	3f2a01a0 	.word	0x3f2a01a0
 800feb4:	1110f8a6 	.word	0x1110f8a6
 800feb8:	3f811111 	.word	0x3f811111

0800febc <with_errno>:
 800febc:	b570      	push	{r4, r5, r6, lr}
 800febe:	4604      	mov	r4, r0
 800fec0:	460d      	mov	r5, r1
 800fec2:	4616      	mov	r6, r2
 800fec4:	f7fa ff6a 	bl	800ad9c <__errno>
 800fec8:	4629      	mov	r1, r5
 800feca:	6006      	str	r6, [r0, #0]
 800fecc:	4620      	mov	r0, r4
 800fece:	bd70      	pop	{r4, r5, r6, pc}

0800fed0 <xflow>:
 800fed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fed2:	4614      	mov	r4, r2
 800fed4:	461d      	mov	r5, r3
 800fed6:	b108      	cbz	r0, 800fedc <xflow+0xc>
 800fed8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fedc:	e9cd 2300 	strd	r2, r3, [sp]
 800fee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fee4:	4620      	mov	r0, r4
 800fee6:	4629      	mov	r1, r5
 800fee8:	f7f0 fbae 	bl	8000648 <__aeabi_dmul>
 800feec:	2222      	movs	r2, #34	; 0x22
 800feee:	b003      	add	sp, #12
 800fef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fef4:	f7ff bfe2 	b.w	800febc <with_errno>

0800fef8 <__math_uflow>:
 800fef8:	b508      	push	{r3, lr}
 800fefa:	2200      	movs	r2, #0
 800fefc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ff00:	f7ff ffe6 	bl	800fed0 <xflow>
 800ff04:	ec41 0b10 	vmov	d0, r0, r1
 800ff08:	bd08      	pop	{r3, pc}

0800ff0a <__math_oflow>:
 800ff0a:	b508      	push	{r3, lr}
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ff12:	f7ff ffdd 	bl	800fed0 <xflow>
 800ff16:	ec41 0b10 	vmov	d0, r0, r1
 800ff1a:	bd08      	pop	{r3, pc}

0800ff1c <fabs>:
 800ff1c:	ec51 0b10 	vmov	r0, r1, d0
 800ff20:	ee10 2a10 	vmov	r2, s0
 800ff24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff28:	ec43 2b10 	vmov	d0, r2, r3
 800ff2c:	4770      	bx	lr

0800ff2e <finite>:
 800ff2e:	b082      	sub	sp, #8
 800ff30:	ed8d 0b00 	vstr	d0, [sp]
 800ff34:	9801      	ldr	r0, [sp, #4]
 800ff36:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff3a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff3e:	0fc0      	lsrs	r0, r0, #31
 800ff40:	b002      	add	sp, #8
 800ff42:	4770      	bx	lr
 800ff44:	0000      	movs	r0, r0
	...

0800ff48 <floor>:
 800ff48:	ec51 0b10 	vmov	r0, r1, d0
 800ff4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ff54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ff58:	2e13      	cmp	r6, #19
 800ff5a:	ee10 5a10 	vmov	r5, s0
 800ff5e:	ee10 8a10 	vmov	r8, s0
 800ff62:	460c      	mov	r4, r1
 800ff64:	dc32      	bgt.n	800ffcc <floor+0x84>
 800ff66:	2e00      	cmp	r6, #0
 800ff68:	da14      	bge.n	800ff94 <floor+0x4c>
 800ff6a:	a333      	add	r3, pc, #204	; (adr r3, 8010038 <floor+0xf0>)
 800ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff70:	f7f0 f9b4 	bl	80002dc <__adddf3>
 800ff74:	2200      	movs	r2, #0
 800ff76:	2300      	movs	r3, #0
 800ff78:	f7f0 fdf6 	bl	8000b68 <__aeabi_dcmpgt>
 800ff7c:	b138      	cbz	r0, 800ff8e <floor+0x46>
 800ff7e:	2c00      	cmp	r4, #0
 800ff80:	da57      	bge.n	8010032 <floor+0xea>
 800ff82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ff86:	431d      	orrs	r5, r3
 800ff88:	d001      	beq.n	800ff8e <floor+0x46>
 800ff8a:	4c2d      	ldr	r4, [pc, #180]	; (8010040 <floor+0xf8>)
 800ff8c:	2500      	movs	r5, #0
 800ff8e:	4621      	mov	r1, r4
 800ff90:	4628      	mov	r0, r5
 800ff92:	e025      	b.n	800ffe0 <floor+0x98>
 800ff94:	4f2b      	ldr	r7, [pc, #172]	; (8010044 <floor+0xfc>)
 800ff96:	4137      	asrs	r7, r6
 800ff98:	ea01 0307 	and.w	r3, r1, r7
 800ff9c:	4303      	orrs	r3, r0
 800ff9e:	d01f      	beq.n	800ffe0 <floor+0x98>
 800ffa0:	a325      	add	r3, pc, #148	; (adr r3, 8010038 <floor+0xf0>)
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	f7f0 f999 	bl	80002dc <__adddf3>
 800ffaa:	2200      	movs	r2, #0
 800ffac:	2300      	movs	r3, #0
 800ffae:	f7f0 fddb 	bl	8000b68 <__aeabi_dcmpgt>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d0eb      	beq.n	800ff8e <floor+0x46>
 800ffb6:	2c00      	cmp	r4, #0
 800ffb8:	bfbe      	ittt	lt
 800ffba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ffbe:	fa43 f606 	asrlt.w	r6, r3, r6
 800ffc2:	19a4      	addlt	r4, r4, r6
 800ffc4:	ea24 0407 	bic.w	r4, r4, r7
 800ffc8:	2500      	movs	r5, #0
 800ffca:	e7e0      	b.n	800ff8e <floor+0x46>
 800ffcc:	2e33      	cmp	r6, #51	; 0x33
 800ffce:	dd0b      	ble.n	800ffe8 <floor+0xa0>
 800ffd0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ffd4:	d104      	bne.n	800ffe0 <floor+0x98>
 800ffd6:	ee10 2a10 	vmov	r2, s0
 800ffda:	460b      	mov	r3, r1
 800ffdc:	f7f0 f97e 	bl	80002dc <__adddf3>
 800ffe0:	ec41 0b10 	vmov	d0, r0, r1
 800ffe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ffec:	f04f 33ff 	mov.w	r3, #4294967295
 800fff0:	fa23 f707 	lsr.w	r7, r3, r7
 800fff4:	4207      	tst	r7, r0
 800fff6:	d0f3      	beq.n	800ffe0 <floor+0x98>
 800fff8:	a30f      	add	r3, pc, #60	; (adr r3, 8010038 <floor+0xf0>)
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	f7f0 f96d 	bl	80002dc <__adddf3>
 8010002:	2200      	movs	r2, #0
 8010004:	2300      	movs	r3, #0
 8010006:	f7f0 fdaf 	bl	8000b68 <__aeabi_dcmpgt>
 801000a:	2800      	cmp	r0, #0
 801000c:	d0bf      	beq.n	800ff8e <floor+0x46>
 801000e:	2c00      	cmp	r4, #0
 8010010:	da02      	bge.n	8010018 <floor+0xd0>
 8010012:	2e14      	cmp	r6, #20
 8010014:	d103      	bne.n	801001e <floor+0xd6>
 8010016:	3401      	adds	r4, #1
 8010018:	ea25 0507 	bic.w	r5, r5, r7
 801001c:	e7b7      	b.n	800ff8e <floor+0x46>
 801001e:	2301      	movs	r3, #1
 8010020:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010024:	fa03 f606 	lsl.w	r6, r3, r6
 8010028:	4435      	add	r5, r6
 801002a:	4545      	cmp	r5, r8
 801002c:	bf38      	it	cc
 801002e:	18e4      	addcc	r4, r4, r3
 8010030:	e7f2      	b.n	8010018 <floor+0xd0>
 8010032:	2500      	movs	r5, #0
 8010034:	462c      	mov	r4, r5
 8010036:	e7aa      	b.n	800ff8e <floor+0x46>
 8010038:	8800759c 	.word	0x8800759c
 801003c:	7e37e43c 	.word	0x7e37e43c
 8010040:	bff00000 	.word	0xbff00000
 8010044:	000fffff 	.word	0x000fffff

08010048 <scalbn>:
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	ec55 4b10 	vmov	r4, r5, d0
 801004e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010052:	4606      	mov	r6, r0
 8010054:	462b      	mov	r3, r5
 8010056:	b99a      	cbnz	r2, 8010080 <scalbn+0x38>
 8010058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801005c:	4323      	orrs	r3, r4
 801005e:	d036      	beq.n	80100ce <scalbn+0x86>
 8010060:	4b39      	ldr	r3, [pc, #228]	; (8010148 <scalbn+0x100>)
 8010062:	4629      	mov	r1, r5
 8010064:	ee10 0a10 	vmov	r0, s0
 8010068:	2200      	movs	r2, #0
 801006a:	f7f0 faed 	bl	8000648 <__aeabi_dmul>
 801006e:	4b37      	ldr	r3, [pc, #220]	; (801014c <scalbn+0x104>)
 8010070:	429e      	cmp	r6, r3
 8010072:	4604      	mov	r4, r0
 8010074:	460d      	mov	r5, r1
 8010076:	da10      	bge.n	801009a <scalbn+0x52>
 8010078:	a32b      	add	r3, pc, #172	; (adr r3, 8010128 <scalbn+0xe0>)
 801007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007e:	e03a      	b.n	80100f6 <scalbn+0xae>
 8010080:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010084:	428a      	cmp	r2, r1
 8010086:	d10c      	bne.n	80100a2 <scalbn+0x5a>
 8010088:	ee10 2a10 	vmov	r2, s0
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f7f0 f924 	bl	80002dc <__adddf3>
 8010094:	4604      	mov	r4, r0
 8010096:	460d      	mov	r5, r1
 8010098:	e019      	b.n	80100ce <scalbn+0x86>
 801009a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801009e:	460b      	mov	r3, r1
 80100a0:	3a36      	subs	r2, #54	; 0x36
 80100a2:	4432      	add	r2, r6
 80100a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80100a8:	428a      	cmp	r2, r1
 80100aa:	dd08      	ble.n	80100be <scalbn+0x76>
 80100ac:	2d00      	cmp	r5, #0
 80100ae:	a120      	add	r1, pc, #128	; (adr r1, 8010130 <scalbn+0xe8>)
 80100b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100b4:	da1c      	bge.n	80100f0 <scalbn+0xa8>
 80100b6:	a120      	add	r1, pc, #128	; (adr r1, 8010138 <scalbn+0xf0>)
 80100b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100bc:	e018      	b.n	80100f0 <scalbn+0xa8>
 80100be:	2a00      	cmp	r2, #0
 80100c0:	dd08      	ble.n	80100d4 <scalbn+0x8c>
 80100c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100ce:	ec45 4b10 	vmov	d0, r4, r5
 80100d2:	bd70      	pop	{r4, r5, r6, pc}
 80100d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80100d8:	da19      	bge.n	801010e <scalbn+0xc6>
 80100da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80100de:	429e      	cmp	r6, r3
 80100e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80100e4:	dd0a      	ble.n	80100fc <scalbn+0xb4>
 80100e6:	a112      	add	r1, pc, #72	; (adr r1, 8010130 <scalbn+0xe8>)
 80100e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d1e2      	bne.n	80100b6 <scalbn+0x6e>
 80100f0:	a30f      	add	r3, pc, #60	; (adr r3, 8010130 <scalbn+0xe8>)
 80100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f6:	f7f0 faa7 	bl	8000648 <__aeabi_dmul>
 80100fa:	e7cb      	b.n	8010094 <scalbn+0x4c>
 80100fc:	a10a      	add	r1, pc, #40	; (adr r1, 8010128 <scalbn+0xe0>)
 80100fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d0b8      	beq.n	8010078 <scalbn+0x30>
 8010106:	a10e      	add	r1, pc, #56	; (adr r1, 8010140 <scalbn+0xf8>)
 8010108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801010c:	e7b4      	b.n	8010078 <scalbn+0x30>
 801010e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010112:	3236      	adds	r2, #54	; 0x36
 8010114:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010118:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801011c:	4620      	mov	r0, r4
 801011e:	4b0c      	ldr	r3, [pc, #48]	; (8010150 <scalbn+0x108>)
 8010120:	2200      	movs	r2, #0
 8010122:	e7e8      	b.n	80100f6 <scalbn+0xae>
 8010124:	f3af 8000 	nop.w
 8010128:	c2f8f359 	.word	0xc2f8f359
 801012c:	01a56e1f 	.word	0x01a56e1f
 8010130:	8800759c 	.word	0x8800759c
 8010134:	7e37e43c 	.word	0x7e37e43c
 8010138:	8800759c 	.word	0x8800759c
 801013c:	fe37e43c 	.word	0xfe37e43c
 8010140:	c2f8f359 	.word	0xc2f8f359
 8010144:	81a56e1f 	.word	0x81a56e1f
 8010148:	43500000 	.word	0x43500000
 801014c:	ffff3cb0 	.word	0xffff3cb0
 8010150:	3c900000 	.word	0x3c900000

08010154 <_init>:
 8010154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010156:	bf00      	nop
 8010158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801015a:	bc08      	pop	{r3}
 801015c:	469e      	mov	lr, r3
 801015e:	4770      	bx	lr

08010160 <_fini>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	bf00      	nop
 8010164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010166:	bc08      	pop	{r3}
 8010168:	469e      	mov	lr, r3
 801016a:	4770      	bx	lr
